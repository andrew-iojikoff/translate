From: <Saved by Blink>
Snapshot-Content-Location: https://addyosmani.com/resources/essentialjsdesignpatterns/book/#mediatorpatternjavascript
Subject: Learning JavaScript Design Patterns
Date: Wed, 20 Feb 2019 19:59:34 -0000
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--AOMleexeI7P8H4Im2MNvercLtpKAYhfsToYqkozzPB----"


------MultipartBoundary--AOMleexeI7P8H4Im2MNvercLtpKAYhfsToYqkozzPB----
Content-Type: text/html
Content-ID: <frame-EA5E80245610AD831F87838F57D4625F@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://addyosmani.com/resources/essentialjsdesignpatterns/book/#mediatorpatternjavascript

<!DOCTYPE html><!--[if lt IE 7]> <html class=3D"no-js lt-ie9 lt-ie8 lt-ie7"=
> <![endif]--><!--[if IE 7]> <html class=3D"no-js lt-ie9 lt-ie8"> <![endif]=
--><!--[if IE 8]> <html class=3D"no-js lt-ie9"> <![endif]--><!--[if gt IE 8=
]><!--><html class=3D"no-js"><!--<![endif]--><head><meta http-equiv=3D"Cont=
ent-Type" content=3D"text/html; charset=3DUTF-8">
   =20
    <meta http-equiv=3D"X-UA-Compatible" content=3D"IE=3Dedge">
    <title>Learning JavaScript Design Patterns</title>
    <meta name=3D"description" content=3D"An open-source book on JavaScript=
 Design Patterns">
    <meta name=3D"author" content=3D"Addy Osmani">
    <meta name=3D"viewport" content=3D"width=3Ddevice-width, initial-scale=
=3D1">
    <meta http-equiv=3D"cleartype" content=3D"on">
    <!-- Place favicon.ico and apple-touch-icon.png in the root directory -=
->
    <link rel=3D"stylesheet" href=3D"https://addyosmani.com/resources/essen=
tialjsdesignpatterns/book/styles/vendor.css">
  </head>
  <body style=3D"">
    <!--[if lt IE 10]>
        <p class=3D"browsehappy">You are using an <strong>outdated</strong>=
 browser. Please <a href=3D"http://browsehappy.com/">upgrade your browser</=
a> to improve your experience.</p>
    <![endif]-->



<div class=3D"container inner wrap">
  <header>
    <p>
    </p><h1 class=3D"booktitle title">Learning JavaScript Design Patterns</=
h1>
    <h3 class=3D"booktitle author">
      A book by <a href=3D"http://twitter.com/addyosmani">Addy Osmani</a>
    </h3>
    <h2 class=3D"booktitle edition">Volume 1.7.0</h2>


    <p class=3D"booktitle"><a href=3D"https://twitter.com/share" class=3D"t=
witter-share-button" data-url=3D"http://addyosmani.com/resources/essentialj=
sdesignpatterns/book/" data-count=3D"horizontal" data-via=3D"addyosmani">Tw=
eet</a></p>

    <p class=3D"copyright">
      Copyright =C2=A9 Addy Osmani 2017.
    </p>
    <p class=3D"copyright"><em>Learning JavaScript Design Patterns</em> is =
released under a <a href=3D"http://creativecommons.org/licenses/by-nc-nd/3.=
0/">Creative Commons Attribution-Noncommercial-No Derivative Works 3.0</a> =
unported license. It is available for purchase via <a href=3D"http://shop.o=
reilly.com/product/0636920025832.do">O'Reilly</a> Media but will remain ava=
ilable for both free online and as a physical (or eBook) purchase for reade=
rs wishing to support the project.</p>

    <p><img src=3D"https://addyosmani.com/resources/essentialjsdesignpatter=
ns/cover/cover.jpg" width=3D"300px" alt=3D"Book cover for Learning JavaScri=
pt Design Patterns"></p>

    <p class=3D"copyright">&nbsp;</p>

    <a id=3D"reviews" href=3D"http://shop.oreilly.com/product/0636920025832=
/ReviewSubmit.do?sortby=3DpublicationDate?pageId=3D0636920025832.IP"><img s=
tyle=3D"position: absolute; top: 0; right: 0; border: 0;" src=3D"http://add=
yosmani.github.com/backbone-fundamentals/img/helpful.png" alt=3D"Was this h=
elpful? We'd love you to write a review."></a>

  </header>
  <div class=3D"content">
    <h1>Preface</h1>

<p>Design patterns are reusable solutions to commonly occurring problems in=
 software design. They are both exciting and a fascinating topic to explore=
 in any programming language.</p>

<p>One reason for this is that they help us build upon the combined experie=
nce of many developers that came before us and ensure we structure our code=
 in an optimized way, meeting the needs of problems we're attempting to sol=
ve.</p>

<p>Design patterns also provide us a common vocabulary to describe solution=
s. This can be significantly simpler than describing syntax and semantics w=
hen we're attempting to convey a way of structuring a solution in code form=
 to others.</p>

<p>In this book we will explore applying both classical and modern design p=
atterns to the JavaScript programming language.</p>
<p>&nbsp;</p>

<h2>Target Audience</h2>
<p>This book is targeted at professional developers wishing to improve thei=
r knowledge of design patterns and how they can be applied to the JavaScrip=
t programming language.</p>
<p>Some of the concepts covered (closures, prototypal inheritance) will ass=
ume a level of basic prior knowledge and understanding. If you find yoursel=
f needing to read further about these topics, a list of suggested titles is=
 provided for convenience.</p>

<p>If you would like to learn how to write beautiful, structured and organi=
zed code, I believe this is the book for you.</p>

<h2>Acknowledgments</h2>

<p>I will always be grateful for the talented technical reviewers who helpe=
d review and improve this book, including those from the community at large=
. The knowledge and enthusiasm they brought to the project was simply amazi=
ng. The official technical reviewers tweets and blogs are also a regular so=
urce of both ideas and inspiration and I wholeheartedly recommend checking =
them out.</p>
<p>
</p><ul>

<li>Nicholas Zakas (<a href=3D"http://nczonline.net/">http://nczonline.net<=
/a>, <a href=3D"http://twitter.com/slicknet">@slicknet</a>)</li>
<li>Andr=C3=A9e Hansson (<a href=3D"http://andreehansson.se/">http://andree=
hansson.se</a>, <a href=3D"http://twitter.com/peolanha">@peolanha</a>)</li>
<li>Luke Smith (<a href=3D"http://lucassmith.name/">http://lucassmith.name<=
/a>, <a href=3D"http://twitter.com/ls_n">@ls_n</a>)</li>
<li>Eric Ferraiuolo (<a href=3D"http://ericf.me/">http://ericf.me/</a>, <a =
href=3D"https://twitter.com/ericf">@ericf</a>)</li>
<li>Peter Michaux (<a href=3D"http://michaux.ca/">http://michaux.ca</a>, <a=
 href=3D"http://twitter.com/petermichaux">@petermichaux</a>)</li>
<li>Alex Sexton (<a href=3D"http://alexsexton.com/">http://alexsexton.com</=
a>, <a href=3D"http://twitter.com/slexaxton">@slexaxton</a>)</li>
</ul>
<p></p>
<p>I would also like to thank Rebecca Murphey (<a href=3D"http://rmurphey.c=
om/">http://rmurphey.com</a>, <a href=3D"http://twitter.com/rmurphey">@rmur=
phey</a>) for providing the inspiration to write this book and more importa=
ntly, continue to make it both available on GitHub and via O'Reilly.</p>

<p>Finally, I would like to thank my wonderful wife Ellie, for all of her s=
upport while I was putting together this publication.</p>

<h2>Credits</h2>

<p>Whilst some of the patterns covered in this book were implemented based =
on personal experience, many of them have been previously identified by the=
 JavaScript community. This work is as such the production of the combined =
experience of a number of developers. Similar to Stoyan Stefanov's logical =
approach to preventing interruption of the narrative with credits (in <em>J=
avaScript Patterns</em>), I have listed credits and suggested reading for a=
ny content covered in the references section.</p>

<p>If any articles or links have been missed in the list of references, ple=
ase accept my heartfelt apologies. If you contact me I'll be sure to update=
 them to include you on the list.</p>

<h2>Reading</h2>
<p>
Whilst this book is targeted at both beginners and intermediate developers,=
 a basic understanding of JavaScript fundamentals is assumed. Should you wi=
sh to learn more about the language, I am happy to recommend the following =
titles:</p>

<ul>
<li><em>JavaScript: The Definitive Guide</em> by David Flanagan</li>
<li><em>Eloquent JavaScript</em> by Marijn Haverbeke</li>
<li><em>JavaScript Patterns</em> by Stoyan Stefanov</li>
<li><em>Writing Maintainable JavaScript</em> by Nicholas Zakas</li>
<li><em>JavaScript: The Good Parts</em> by Douglas Crockford</li>
</ul>


    <p>&nbsp;</p>
    <h1><em>Table Of Contents</em></h1>
    <div id=3D"contents-list">
      <ul>
        <li><a href=3D"https://addyosmani.com/resources/essentialjsdesignpa=
tterns/book/#introduction">Introduction</a></li>
        <li><a href=3D"https://addyosmani.com/resources/essentialjsdesignpa=
tterns/book/#whatisapattern">What is a Pattern?</a></li>
        <li><a href=3D"https://addyosmani.com/resources/essentialjsdesignpa=
tterns/book/#patternity">"Pattern"-ity Testing, Proto-Patterns &amp; The Ru=
le Of Three</a></li>
        <li><a href=3D"https://addyosmani.com/resources/essentialjsdesignpa=
tterns/book/#designpatternstructure">The Structure Of A Design Pattern</a><=
/li>
        <li><a href=3D"https://addyosmani.com/resources/essentialjsdesignpa=
tterns/book/#writingdesignpatterns">Writing Design Patterns</a></li>
        <li><a href=3D"https://addyosmani.com/resources/essentialjsdesignpa=
tterns/book/#antipatterns">Anti-Patterns</a></li>
        <li><a href=3D"https://addyosmani.com/resources/essentialjsdesignpa=
tterns/book/#categoriesofdesignpatterns">Categories Of Design Pattern</a></=
li>
        <li><a href=3D"https://addyosmani.com/resources/essentialjsdesignpa=
tterns/book/#summarytabledesignpatterns">Summary Table Of Design Pattern Ca=
tegorization</a></li>
        <li><a href=3D"https://addyosmani.com/resources/essentialjsdesignpa=
tterns/book/#designpatternsjavascript">JavaScript Design Patterns
          </a>
          <ul>
            <li class=3D"subitem"><a href=3D"https://addyosmani.com/resourc=
es/essentialjsdesignpatterns/book/#constructorpatternjavascript">Constructo=
r Pattern</a></li>
            <li class=3D"subitem"><a href=3D"https://addyosmani.com/resourc=
es/essentialjsdesignpatterns/book/#modulepatternjavascript">Module Pattern<=
/a></li>
            <li class=3D"subitem"><a href=3D"https://addyosmani.com/resourc=
es/essentialjsdesignpatterns/book/#revealingmodulepatternjavascript">Reveal=
ing Module Pattern</a></li>
            <li class=3D"subitem"><a href=3D"https://addyosmani.com/resourc=
es/essentialjsdesignpatterns/book/#singletonpatternjavascript">Singleton Pa=
ttern</a></li>
            <li class=3D"subitem"><a href=3D"https://addyosmani.com/resourc=
es/essentialjsdesignpatterns/book/#observerpatternjavascript">Observer Patt=
ern</a></li>
             <li class=3D"subitem"><a href=3D"https://addyosmani.com/resour=
ces/essentialjsdesignpatterns/book/#mediatorpatternjavascript">Mediator Pat=
tern</a></li>
            <li class=3D"subitem"><a href=3D"https://addyosmani.com/resourc=
es/essentialjsdesignpatterns/book/#prototypepatternjavascript">Prototype Pa=
ttern</a></li>
            <li class=3D"subitem"><a href=3D"https://addyosmani.com/resourc=
es/essentialjsdesignpatterns/book/#commandpatternjavascript">Command Patter=
n</a></li>
            <li class=3D"subitem"><a href=3D"https://addyosmani.com/resourc=
es/essentialjsdesignpatterns/book/#facadepatternjavascript">Facade Pattern<=
/a></li>
            <li class=3D"subitem"><a href=3D"https://addyosmani.com/resourc=
es/essentialjsdesignpatterns/book/#factorypatternjavascript">Factory Patter=
n</a></li>
            <li class=3D"subitem"><a href=3D"https://addyosmani.com/resourc=
es/essentialjsdesignpatterns/book/#mixinpatternjavascript">Mixin Pattern</a=
>
            </li><li class=3D"subitem"><a href=3D"https://addyosmani.com/re=
sources/essentialjsdesignpatterns/book/#decoratorpatternjavascript">Decorat=
or Pattern</a></li>
            <li class=3D"subitem"><a href=3D"https://addyosmani.com/resourc=
es/essentialjsdesignpatterns/book/#detailflyweight">Flyweight Pattern</a>
        </li></ul>
      </li>
         <li><a href=3D"https://addyosmani.com/resources/essentialjsdesignp=
atterns/book/#detailmvcmvp">JavaScript MV* Patterns</a>
        <ul>
          <li class=3D"subitem"><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#detailmvc">MVC Pattern</a>
          </li><li class=3D"subitem"><a href=3D"https://addyosmani.com/reso=
urces/essentialjsdesignpatterns/book/#detailmvp">MVP Pattern</a>
          </li><li class=3D"subitem"><a href=3D"https://addyosmani.com/reso=
urces/essentialjsdesignpatterns/book/#detailmvvm">MVVM Pattern</a>
        </li></ul>
      </li>
        <li><a href=3D"https://addyosmani.com/resources/essentialjsdesignpa=
tterns/book/#modularjavascript">Modern Modular JavaScript Design Patterns</=
a>
        <ul>
          <li class=3D"subitem"><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#detailamd">AMD</a>
          </li><li class=3D"subitem"><a href=3D"https://addyosmani.com/reso=
urces/essentialjsdesignpatterns/book/#detailcommonjs">CommonJS</a>
            </li><li class=3D"subitem"><a href=3D"https://addyosmani.com/re=
sources/essentialjsdesignpatterns/book/#detailharmony">ES Harmony</a>
        </li></ul>
        </li>

        <li><a href=3D"https://addyosmani.com/resources/essentialjsdesignpa=
tterns/book/#designpatternsjquery">Design Patterns In jQuery</a>
        <ul>
          <li class=3D"subitem"><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#compositepatternjquery">Composite Pattern<=
/a></li>
          <li class=3D"subitem"><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#wrapperpatternjquery">Adapter Pattern</a><=
/li>
          <li class=3D"subitem"><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#facadepatternjquery">Facade Pattern</a></l=
i>
          <li class=3D"subitem"><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#observerpatternjquery">Observer Pattern</a=
></li>
          <li class=3D"subitem"><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#iteratorpatternjquery">Iterator Pattern</a=
></li>
          <li class=3D"subitem"><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#lazyinitialisationjquery">Lazy Initializat=
ion Pattern</a></li>
          <li class=3D"subitem"><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#proxypatternjquery">Proxy Pattern</a></li>
          <li class=3D"subitem"><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#builderpatternjquery">Builder Pattern</a><=
/li>
        </ul>
      </li>

        <li><a href=3D"https://addyosmani.com/resources/essentialjsdesignpa=
tterns/book/#jquerypluginpatterns">jQuery Plugin Design Patterns</a></li>
        <li><a href=3D"https://addyosmani.com/resources/essentialjsdesignpa=
tterns/book/#detailnamespacing">JavaScript Namespacing Patterns</a></li>
        <li><a href=3D"https://addyosmani.com/resources/essentialjsdesignpa=
tterns/book/#conclusions">Conclusions</a></li>
        <li><a href=3D"https://addyosmani.com/resources/essentialjsdesignpa=
tterns/book/#references">References</a></li>
      </ul>
</div>
   <p></p>
   <p>&nbsp;</p>
  <h1 id=3D"introduction">
    <a href=3D"https://addyosmani.com/resources/essentialjsdesignpatterns/b=
ook/#introduction" class=3D"subhead-link">#</a>
    Introduction
  </h1>

    <p>One of the most important aspects of writing maintainable code is be=
ing able to notice the recurring themes in that code and optimize them. Thi=
s is an area where knowledge of design patterns can prove invaluable.</p>

    <p>In the first part of this book, we will explore the history and impo=
rtance of design patterns which can really be applied to any programming la=
nguage. If you're already sold on or are familiar with this history, feel f=
ree to skip to the chapter "<a href=3D"https://addyosmani.com/resources/ess=
entialjsdesignpatterns/book/#whatisapattern">What is a Pattern?</a>" to con=
tinue reading.</p>

    <p>Design patterns can be traced back to the early work of an architect=
 named <a href=3D"http://en.wikipedia.org/wiki/Christopher_Alexander">Chris=
topher Alexander</a>. He would often write publications about his experienc=
e in solving design issues and how they related to buildings and towns. One=
 day, it occurred to Alexander that when used time and time again, certain =
design constructs lead to a desired optimal effect. </p>

    <p>In collaboration with Sara Ishikawa and Murray Silverstein, Alexande=
r produced a pattern language that would help empower anyone wishing to des=
ign and build at any scale. This was published back in 1977 in a paper titl=
ed "A Pattern Language", which was later released as a complete hardcover <=
a href=3D"http://www.amazon.co.uk/Pattern-Language-Buildings-Construction-E=
nvironmental/dp/0195019199/ref=3Dsr_1_1?s=3Dbooks&amp;ie=3DUTF8&amp;qid=3D1=
329440685&amp;sr=3D1-1">book</a>. </p>
    <p>Some 30 years ago, software engineers began to incorporate the princ=
iples Alexander had written about into the first documentation about design=
 patterns, which was to be a guide for novice developers looking to improve=
 their coding skills. It's important to note that the concepts behind desig=
n patterns have actually been around in the programming industry since its =
inception, albeit in a less formalized form. </p>

    <p>One of the first and arguably most iconic formal works published on =
design patterns in software engineering was a book in 1995 called <em>Desig=
n Patterns: Elements Of Reusable Object-Oriented Software</em>. This was wr=
itten by <a href=3D"http://en.wikipedia.org/wiki/Erich_Gamma">Erich Gamma</=
a>,<a href=3D"http://en.wikipedia.org/w/index.php?title=3DRichard_Helm&amp;=
action=3Dedit&amp;redlink=3D1"> Richard Helm</a>,<a href=3D"http://en.wikip=
edia.org/wiki/Ralph_Johnson"> Ralph Johnson</a> and<a href=3D"http://en.wik=
ipedia.org/wiki/John_Vlissides"> John Vlissides</a> - a group that became k=
nown as the Gang of Four (or GoF for short). </p>
    <p>The GoF's publication is considered quite instrumental to pushing th=
e concept of design patterns further in our field as it describes a number =
of development techniques and pitfalls as well as providing twenty-three co=
re Object-Oriented design patterns frequently used around the world today. =
We will be covering these patterns in more detail in the section "Categorie=
s of Design Patterns".</p>
    <p>In this book, we will take a look at a number of popular JavaScript =
design patterns and explore why certain patterns may be more suitable for y=
our projects than others. Remember that patterns can be applied not just to=
 vanilla JavaScript (i.e standard JavaScript code), but also to abstracted =
libraries such as <a href=3D"http://jquery.com/">jQuery</a> or <a href=3D"h=
ttp://dojotoolkit.org/">dojo</a> as well. Before we begin, let=E2=80=99s lo=
ok at the exact definition of a "pattern" in software design.</p>
    <p>&nbsp;</p>
    <p>&nbsp;</p>
    <h1 id=3D"whatisapattern">What is a Pattern?</h1>
    <p>A pattern is a reusable solution that can be applied to commonly occ=
urring problems in software design - in our case - in writing JavaScript we=
b applications. Another way of looking at patterns are as templates for how=
 we solve problems - ones which can be used in quite a few different situat=
ions.</p>

    <p>So, why is it important to understand patterns and be familiar with =
them? Design patterns have three main benefits: </p>
    <ol start=3D"1" type=3D"1">
      <li><strong>Patterns are proven solutions:</strong> They provide soli=
d approaches to solving issues in software development using proven techniq=
ues that reflect the experience and insights the developers that helped def=
ine them bring to the pattern.</li>
      <li><strong>Patterns can be easily reused: </strong>A pattern usually=
 reflects an out of the box solution that can be adapted to suit our own ne=
eds. This feature makes them quite robust.</li>
      <li><strong>Patterns can be expressive: </strong>When we look at a pa=
ttern there=E2=80=99s generally a set structure and <em>vocabulary</em> to =
the solution presented that can help express rather large solutions quite e=
legantly.</li>
    </ol>
    <p>Patterns are <strong>not</strong> an exact solution. It=E2=80=99s im=
portant that we remember the role of a pattern is merely to provide us with=
 a solution scheme. Patterns don=E2=80=99t solve all design problems nor do=
 they replace good software designers, however, they <strong>do</strong> su=
pport them. Next we=E2=80=99ll take a look at some of the other advantages =
patterns have to offer. </p>
    <ul>
      <li><strong>Reusing patterns assists in preventing minor issues that =
can cause major problems in the application development process. </strong>W=
hat this means is when code is built on proven patterns, we can afford to s=
pend less time worrying about the structure of our code and more time focus=
ing on the quality of our overall solution. This is because patterns can en=
courage us to code in a more structured and organized fashion avoiding the =
need to refactor it for cleanliness purposes in the future.</li>
      <li><strong>Patterns can provide generalized solutions which are docu=
mented in a fashion that doesn't require them to be tied to a specific prob=
lem.</strong> This generalized approach means that regardless of the applic=
ation (and in many cases the programming language) we are working with, des=
ign patterns can be applied to improve the structure of our code.</li>
      <li><strong>Certain patterns can actually decrease the overall file-s=
ize footprint of our code by avoiding repetition. </strong>By encouraging d=
evelopers to look more closely at their solutions for areas where instant r=
eductions in <span id=3D"internal-source-marker_0.982673292361492">repetiti=
on</span> can be made, e.g. reducing the number of functions performing sim=
ilar processes in favor of a single generalized function, the overall size =
of our codebase can be decreased. This is also known as making code more <e=
m>DRY</em>.</li>
      <li><strong>Patterns add to a developer's vocabulary, which makes com=
munication faster.</strong></li>
      <li><strong>Patterns that are frequently used can be improved over ti=
me by harnessing the collective experiences other developers using those pa=
tterns contribute back to the design pattern community.</strong> In some ca=
ses this leads to the creation of entirely new design patterns whilst in ot=
hers it can lead to the provision of improved guidelines on how specific pa=
tterns can be best used. This can ensure that pattern-based solutions conti=
nue to become more robust than ad-hoc solutions may be.</li>
    </ul>
<p>&nbsp;</p>

<h3>We already use patterns everyday</h3>
<p>
To understand how useful patterns can be, let's review a very simple elemen=
t selection problem that the jQuery library solves for us. </p>

<p>
Imagine that we have a script where for each DOM element found on a page wi=
th class "foo" we wish to increment a counter. What's the most efficient wa=
y to query for this collection of elements? Well, there are a few different=
 ways this problem could be tackled:</p>
<p>
  </p><ol>
    <li>Select all of the elements in the page and then store references to=
 them. Next, filter this collection and use regular expressions (or another=
 means) to only store those with the class "foo".</li>
<li>
Use a modern native browser feature such as <code>querySelectorAll()</code>=
 to select all of the elements with the class "foo".</li>
<li>Use a native feature such as <code>getElementsByClassName()</code> to s=
imilarly get back the desired collection. </li>
  </ol>
<p></p>

<p>
So, which of these options is the fastest? It's actually option 3. by a fac=
tor of 8-10 times the <a href=3D"http://jsperf.com/getelementsbyclassname-v=
s-queryselectorall/5">alternatives</a>. In a real-world application however=
, 3. will not work in versions of Internet Explorer below 9 and thus it's n=
ecessary to use 1. where both 2. and 3. aren't supported.</p>
<p>
Developers using jQuery don't have to worry about this problem however, as =
it's luckily abstracted away for us using the <em>Facade</em> pattern. As w=
e'll review in more detail later, this pattern provides a simple set of abs=
tracted interfaces (e.g <code>$el.css()</code>, <code>$el.animate()</code>)=
 to several more complex underlying bodies of code. As we've seen, this mea=
ns less time having to be concerned about implementation level details.</p>

<p>Behind the scenes, the library simply opts for the most optimal approach=
 to selecting elements depending on what our current browser supports and w=
e just consume the abstraction layer.</p>

<p>We're probably all also familiar with jQuery's <code>$("selector")</code=
>. This is significantly more easy to use for selecting HTML elements on a =
page versus having to manually opt for <code>getElementById()</code>, <code=
>getElementsByClassName()</code>, <code>getElementsByTagName()</code> and s=
o on.</p>

<p>Although we know that <code>querySelectorAll()</code> attempts to solve =
this problem, compare the effort involved in using jQuery's Facade interfac=
es vs. selecting the most optimal selection paths ourselves. There's no con=
test! Abstractions using patterns can offer real-world value.</p>
<p>
We'll be looking at this and more design patterns later on in the book.</p>
<p>&nbsp;</p>
<h1 id=3D"patternity">"Pattern"-ity Testing, Proto-Patterns &amp; The Rule =
Of Three</h1>
<p>
Remember that not every algorithm, best practice or solution represents wha=
t might be considered a complete pattern. There may be a few key ingredient=
s here that are missing and the pattern community is generally wary of some=
thing claiming to be one unless it has been heavily vetted. Even if somethi=
ng is presented to us which <strong>appears</strong> to meet the criteria f=
or a pattern, it should not be considered one until it has undergone suitab=
le periods of scrutiny and testing by others.</p>
<p>
Looking back upon the work by Alexander once more, he claims that a pattern=
 should both be a process and a "thing". This definition is obtuse on purpo=
se as he follows by saying that it is the process which should create the "=
thing". This is a reason why patterns generally focus on addressing a visua=
lly identifiable structure i.e we should be able to visually depict (or dra=
w) a picture representing the structure that placing the pattern into pract=
ice results in. </p>
<p>
In studying design patterns, it's not irregular to come across the term "pr=
oto-pattern". What is this? Well, a pattern that has not yet been known to =
pass the "pattern"-ity tests is usually referred to as a proto-pattern. Pro=
to-patterns may result from the work of someone that has established a part=
icular solution that is worthy of sharing with the community, but may not h=
ave yet had the opportunity to have been vetted heavily due to its very you=
ng age.</p>
<p>
Alternatively, the individual(s) sharing the pattern may not have the time =
or interest of going through the "pattern"-ity process and might release a =
short description of their proto-pattern instead. Brief descriptions or sni=
ppets of this type of pattern are known as patlets.</p>
<p>
The work involved in fully documenting a qualified pattern can be quite dau=
nting. Looking back at some of the earliest work in the field of design pat=
terns, a pattern may be considered "good" if it does the following: </p>
<ul type=3D"disc">
  <li><strong>Solves a particular problem</strong>: Patterns are not suppos=
ed to just capture principles or strategies. They need to capture solutions=
. This is one of the most essential ingredients for a good pattern.</li>
  <li><strong>The solution to this problem cannot be obvious</strong>: We c=
an find that problem-solving techniques often attempt to derive from well-k=
nown first principles. The best design patterns usually provide solutions t=
o problems indirectly - this is considered a necessary approach for the mos=
t challenging problems related to design.</li>
  <li><strong>The concept described must have been proven</strong>: Design =
patterns require proof that they function as described and without this pro=
of the design cannot be seriously considered. If a pattern is highly specul=
ative in nature, only the brave may attempt to use it.</li>
  <li><strong>It must describe a relationship</strong>: In some cases it ma=
y appear that a pattern describes a type of module. Although an implementat=
ion may appear this way, the official description of the pattern must descr=
ibe much deeper system structures and mechanisms that explain its relations=
hip to code.</li>
</ul>
<p>
 We would be forgiven for thinking that a proto-pattern which fails to meet=
 guidelines isn't worth learning from, however, this is far from the truth.=
 Many proto-patterns are actually quite good. I=E2=80=99m not saying that a=
ll proto-patterns are worth looking at, but there are quite a few useful on=
es in the wild that could assist us with future projects. Use best judgment=
 with the above list in mind and you=E2=80=99ll be fine in your selection p=
rocess.</p>
  <p>
  One of the additional requirements for a pattern to be valid is that they=
 display some recurring phenomenon. This is often something that can be qua=
lified in at least three key areas, referred to as the <em>rule of three</e=
m>. To show recurrence using this rule, one must demonstrate: </p>

<ol start=3D"1" type=3D"1">
  <li><strong>Fitness of purpose</strong> - how is the pattern considered s=
uccessful?</li>
  <li><strong>Usefulness</strong> - why is the pattern considered successfu=
l?</li>
  <li><strong>Applicability</strong> - is the design worthy of being a patt=
ern because it has wider applicability? If so, this needs to be explained. =
When reviewing or defining a pattern, it is important to keep the above in =
mind.</li>
  </ol>
<p>&nbsp;</p>
<h1 id=3D"designpatternstructure">
  <a href=3D"https://addyosmani.com/resources/essentialjsdesignpatterns/boo=
k/#designpatternstructure" class=3D"subhead-link">#</a>
  The Structure Of A Design Pattern
</h1>
<p>You may be curious about how a pattern author might approach outlining s=
tructure, implementation and purpose of a new pattern.&nbsp; A pattern is i=
nitially presented in the form of a <strong>rule</strong> that establishes =
a relationship between:</p>
<p>

</p><ul>
<li>A <strong>context</strong></li>
<li>A system of <strong>forces</strong> that arises in that context and</li=
>
<li>A <strong>configuration</strong> that allows these forces to resolve th=
emselves in context</li>
</ul>

<p>With this in mind, let=E2=80=99s now take a look at a summary of the com=
ponent elements for a design pattern. A design pattern should have a:</p>

<ul>
  <li><strong>Pattern name</strong> and a <strong>description </strong></li=
>
  <li><strong>Context outline</strong> =E2=80=93 the contexts in which the =
pattern is effective in responding to the users needs. </li>
  <li><strong>Problem statement</strong> =E2=80=93 a statement of the probl=
em being addressed so we can understand the intent of the pattern. </li>
  <li><strong>Solution</strong> =E2=80=93 a description of how the user=E2=
=80=99s problem is being solved in an understandable list of steps and perc=
eptions. </li>
  <li><strong>Design</strong> =E2=80=93 a description of the pattern=E2=80=
=99s design and in particular, the user=E2=80=99s behavior in interacting w=
ith it </li>
  <li><strong>Implementation </strong>=E2=80=93 a guide to how the pattern =
would be implemented </li>
  <li><strong>Illustrations</strong> =E2=80=93 a visual representation of c=
lasses in the pattern (e.g. a diagram) </li>
  <li><strong>Examples</strong> =E2=80=93 an implementation of the pattern =
in a minimal form </li>
  <li><strong>Co-requisites</strong> =E2=80=93 what other patterns may be n=
eeded to support use of the pattern being described? </li>
  <li><strong>Relations</strong> =E2=80=93 what patterns does this pattern =
resemble? does it closely mimic any others? </li>
  <li><strong>Known usage</strong> =E2=80=93 is the pattern being used in t=
he <em>wild</em>? If so, where and how? </li>
  <li><strong>Discussions</strong> =E2=80=93 the team or author=E2=80=99s t=
houghts on the exciting benefits of the pattern </li>
</ul>

<p>Design patterns are quite a powerful approach to getting all of the deve=
lopers in an organization or team on the same page when creating or maintai=
ning solutions. If considering working on a pattern of your own, remember t=
hat although they may have a heavy initial cost in the planning and write-u=
p phases, the value returned from that investment can be quite worth it. Al=
ways research thoroughly before working on new patterns however, as you may=
 find it more beneficial to use or build on top of existing proven patterns=
 than starting afresh.</p>
<p>&nbsp;</p>
<h1 id=3D"writingdesignpatterns">
  <a href=3D"https://addyosmani.com/resources/essentialjsdesignpatterns/boo=
k/#writingdesignpatterns" class=3D"subhead-link">#</a>
  Writing Design Patterns
</h1>
<p>Although this book is aimed at those new to design patterns, a fundament=
al understanding of how a design pattern is written can offer a number of u=
seful benefits. For starters, we can gain a deeper appreciation for the rea=
soning behind why a pattern is needed. We can also learn how to tell if a p=
attern (or proto-pattern) is up to scratch when reviewing it for our own ne=
eds.</p>
<p>
Writing good patterns is a challenging task. Patterns not only need to (ide=
ally) provide a substantial quantity of reference material for end-users, b=
ut they also need to be able to defend why they are necessary.
</p>

<p>Having read the previous section on <em>what</em> a pattern is, we may t=
hink that this in itself is enough to help us identify patterns we see in t=
he wild. This is actually not completely true. It's not always clear if a p=
iece of code we're looking at is following a set pattern or just accidental=
ly happens to appear like it does.</p>

<p>
When we're looking at a body of code we think may be using a pattern, we sh=
ould consider writing down some of the aspects of the code that we believe =
falls under a particular existing pattern or set of patterns.</p>

 <p>In many cases of pattern-analysis we can find that we're just looking a=
t code that follows good principles and design practices that could happen =
to overlap with the rules for a pattern by accident. Remember - solutions i=
n which neither interactions nor defined rules appear are <em>not</em> patt=
erns. </p>

<p>
If interested in venturing down the path of writing your own design pattern=
s I recommend learning from others who have already been through the proces=
s and done it well. Spend time absorbing the information from a number of d=
ifferent design pattern descriptions and take in what=E2=80=99s meaningful =
to you.</p>

<p>Explore structure and semantics - this can be done by examining the inte=
ractions and context of the patterns you are interested in so you can ident=
ify the principles that assist in organizing those patterns together in use=
ful configurations.</p>

<p>
Once we've exposed ourselves to a wealth of information on pattern literatu=
re, we may wish to begin writing our pattern using an <em>existing</em> for=
mat and see if we can brainstorm new ideas for improving it or integrating =
our ideas in there.</p>

<p>An example of a developer that did this is in recent years is Christian =
Heilmann, who took the existing <em>Module</em> pattern and made some funda=
mentally useful changes to it to create the <em>Revealing Module</em> patte=
rn (this is one of the patterns covered later in this book). </p>


<p>
The following are tips I would suggest if interested in creating a new desi=
gn pattern:</p>

<ul type=3D"disc">
  <li><strong>How practical is the pattern?</strong>: Ensure the pattern de=
scribes proven solutions to recurring problems rather than just speculative=
 solutions which haven=E2=80=99t been qualified.</li>
  <li><strong>Keep best practices in mind:</strong> The design decisions we=
 make should be based on principles we derive from an understanding of best=
 practices. </li>

  <li><strong>Our design patterns should be transparent to the user</strong=
>: Design patterns should be entirely transparent to any type of user-exper=
ience. They are primarily there to serve the developers using them and shou=
ld not force changes to behavior in the user-experience that would not be i=
ncurred without the use of a pattern.</li>
  <li><strong>Remember that originality is <em>not</em> key in pattern desi=
gn</strong>: When writing a pattern, we do not need to be the original disc=
overer of the solutions being documented nor do you have to worry about our=
 design overlapping with minor pieces of other patterns. If the approach is=
 strong enough to have broad useful applicability, it has a chance of being=
 recognized as a valid pattern.</li>
  <li><strong>Patterns need a strong set of examples:</strong> A good patte=
rn description needs to be followed by an equally strong set of examples de=
monstrating the successful application of our pattern. To show broad usage,=
 examples that exhibit good design principles are ideal.</li>
</ul>
<p>
  Pattern writing is a careful balance between creating a design that is ge=
neral, specific and above all, useful. Try to ensure that if writing a patt=
ern you cover the widest possible areas of application and you should be fi=
ne. &nbsp;I hope that this brief introduction to writing patterns has given=
 you some insights that will assist your learning process for the next sect=
ions of this book. </p>
<p>&nbsp;</p>
<h1 id=3D"antipatterns">
  <a href=3D"https://addyosmani.com/resources/essentialjsdesignpatterns/boo=
k/#antipatterns" class=3D"subhead-link">#</a>
  Anti-Patterns
</h1>
<p>If we consider that a pattern represents a best practice, an anti-patter=
n represents a lesson that has been learned. The term anti-patterns was coi=
ned in 1995 by Andrew Koenig in the November C++ Report that year, inspired=
 by the GoF's book <em>Design Patterns</em>. In Koenig=E2=80=99s report, th=
ere are two notions of anti-patterns that are presented. Anti-Patterns: </p=
>
<ul type=3D"disc">
  <li>Describe a <em>bad</em> solution to a particular problem which result=
ed in a bad situation occurring </li>
  <li>Describe <em>how</em> to get out of said situation and how to go from=
 there to a good solution </li>
</ul>
<p>
  </p><p>On this topic, Alexander writes about the difficulties in achievin=
g a good balance between good design structure and good context:</p>

  <p><em>=E2=80=9CThese notes are about the process of design; the process =
of inventing physical things which display a new physical order, organizati=
on, form, in response to function.=E2=80=A6every design problem begins with=
 an effort to achieve fitness between two entities: the form in question an=
d its context. The form is the solution to the problem; the context defines=
 the problem=E2=80=9D.</em></p>
  <p>
  While it=E2=80=99s quite important to be aware of design patterns, it can=
 be equally important to understand anti-patterns. Let us qualify the reaso=
n behind this. When creating an application, a project=E2=80=99s life-cycle=
 begins with construction however once you=E2=80=99ve got the initial relea=
se done, it needs to be maintained. The quality of a final solution will ei=
ther be <em>good</em> or <em>bad</em>, depending on the level of skill and =
time the team have invested in it. Here <em>good</em> and <em>bad</em> are =
considered in context - a =E2=80=98perfect=E2=80=99 design may qualify as a=
n anti-pattern if applied in the wrong context. </p>
  <p>
  The bigger challenges happen after an application has hit production and =
is ready to go into maintenance mode. A developer working on such a system =
who hasn=E2=80=99t worked on the application before may introduce a <em>bad=
</em> design into the project by accident. If said <em>bad</em> practices a=
re created as anti-patterns, they allow developers a means to recognize the=
se in advance so that they can avoid common mistakes that can occur - this =
is parallel to the way in which design patterns provide us with a way to re=
cognize common techniques that are <em>useful.</em></p>
  <p>
  To summarize, an anti-pattern is a bad design that is worthy of documenti=
ng. Examples of anti-patterns in JavaScript are the following: </p>
<ul type=3D"disc">
  <li>Polluting the global namespace by defining a large number of variable=
s in the global context</li>
  <li>Passing strings rather than functions to either setTimeout or setInte=
rval as this triggers the use of <code>eval()</code> internally.</li>
  <li>Modifying the <code>Object</code> class prototype (this is a particul=
arly bad anti-pattern)</li>
  <li>Using JavaScript in an inline form as this is inflexible </li>
  <li>The use of document.write where native DOM alternatives such as docum=
ent.createElement are more appropriate. document.write has been grossly mis=
used over the years and has quite a few disadvantages including that if it'=
s executed after the page has been loaded it can actually overwrite the pag=
e we're on, whilst document.createElement does not. We can see <a href=3D"h=
ttp://jsfiddle.net/addyosmani/6T9vX/">here</a> for a live example of this i=
n action. It also doesn't work with XHTML which is another reason opting fo=
r more DOM-friendly methods such as document.createElement is favorable.</l=
i>
  </ul>
<p>
  Knowledge of anti-patterns is critical for success. Once we are able to r=
ecognize such anti-patterns, we're able to refactor our code to negate them=
 so that the overall quality of our solutions improves instantly. </p>
<p>&nbsp;</p>
<h1 id=3D"categoriesofdesignpatterns">
  <a href=3D"https://addyosmani.com/resources/essentialjsdesignpatterns/boo=
k/#categoriesofdesignpatterns" class=3D"subhead-link">#</a>
  Categories Of Design Pattern
</h1>
<p>&nbsp;</p>
<p>A glossary from the well-known design book, <em>Domain-Driven Terms</em>=
, rightly states that:</p>
<p><i>=E2=80=9CA design pattern names, abstracts, and identifies the key as=
pects of a common design structure that make it useful for creating a reusa=
ble object-oriented design. The design pattern identifies the participating=
 classes and their instances, their roles and collaborations, and the distr=
ibution of responsibilities. </i></p>
<p><i>Each design pattern focuses on a particular object-oriented design pr=
oblem or issue. It describes when it applies, whether or not it can be appl=
ied in view of other design constraints, and the consequences and trade-off=
s of its use. Since we must eventually implement our designs, a design patt=
ern also provides sample ... code to illustrate an implementation. </i></p>
<p><i>Although design patterns describe object-oriented designs, they are b=
ased on practical solutions that have been implemented in mainstream object=
-oriented programming languages ....=E2=80=9D</i></p>
<p>Design patterns can be broken down into a number of different categories=
. In this section we=E2=80=99ll review three of these categories and briefl=
y mention a few examples of the patterns that fall into these categories be=
fore exploring specific ones in more detail.
</p>
<p>&nbsp;</p>
<h2>Creational Design Patterns</h2>
<p>
  </p><p>Creational design patterns focus on handling object creation mecha=
nisms where objects are created in a manner suitable for the situation we'r=
e working in. The basic approach to object creation might otherwise lead to=
 added complexity in a project whilst these patterns aim to solve this prob=
lem by <em>controlling</em> the creation process.</p>
  <p>Some of the patterns that fall under this category are: Constructor, F=
actory, Abstract, Prototype, Singleton and Builder.</p>

<h2>Structural Design Patterns</h2>
<p>Structural patterns are concerned with object composition and typically =
identify simple ways to realize relationships between different objects. Th=
ey help ensure that when one part of a system changes, the entire structure=
 of the system doesn't need to do the same. They also assist in recasting p=
arts of the system which don't fit a particular purpose into those that do.=
 </p>
  <p>Patterns that fall under this category include: Decorator, Facade, Fly=
weight, Adapter and Proxy.</p>

<h2>Behavioral Design Patterns</h2>
<p>Behavioral patterns focus on improving or streamlining the communication=
 between disparate objects in a system.</p>
<p>Some behavioral patterns include: Iterator, Mediator, Observer and Visit=
or.</p>
<p>&nbsp;</p>
<h1 id=3D"summarytabledesignpatterns">
  <a href=3D"https://addyosmani.com/resources/essentialjsdesignpatterns/boo=
k/#summarytabledesignpatterns" class=3D"subhead-link">#</a>
  Design Pattern Categorization
</h1>
<p>In my early experiences of learning about design patterns, I personally =
found the following table a very useful reminder of what a number of patter=
ns has to offer - it covers the 23 Design Patterns mentioned by the GoF. Th=
e original table was summarized by Elyse Nielsen back in 2004
and I've modified it where necessary to suit our discussion in this section=
 of the book.
</p><p>I recommend using this table as reference, but do remember that ther=
e are a number of additional patterns that are not mentioned here but will =
be discussed later in the book.</p>

<h3>A brief note on classes</h3>

<p><strong>Note:</strong> ES2015 introduced native support for classes to J=
avaScript, however, they are primarily syntactical sugar over JavaScript's =
existing prototype-based inheritance model. We will not be covering ES2015 =
classes in this book, but <a href=3D"https://developer.mozilla.org/en-US/do=
cs/Web/JavaScript/Reference/Classes">MDN</a> has an excellent introduction =
to them. </p>

<p>Keep in mind that there will be patterns in this table that reference th=
e concept of "classes". In ES5, JavaScript is a class-less language, howeve=
r classes can be simulated using functions.</p>

<p>The most common approach to achieving this is by defining a JavaScript f=
unction where we then create an object using the <code>new</code> keyword. =
<code>this</code> can be used to help define new properties and methods for=
 the object as follows:</p>

<div><div id=3D"highlighter_57027" class=3D"syntaxhighlighter  js acodecode=
"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources/=
essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help">=
?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0"><=
tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</d=
iv><div class=3D"line number2 index1 alt1">2</div><div class=3D"line number=
3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div c=
lass=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5 =
alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"l=
ine number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9</=
div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line num=
ber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</d=
iv></td><td class=3D"code"><div class=3D"container"><div class=3D"line numb=
er1 index0 alt2"><code class=3D"js comments">// A car "class"</code></div><=
div class=3D"line number2 index1 alt1"><code class=3D"js keyword">function<=
/code> <code class=3D"js plain">Car( model ) {</code></div><div class=3D"li=
ne number3 index2 alt2">&nbsp;</div><div class=3D"line number4 index3 alt1"=
><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js keyword">th=
is</code><code class=3D"js plain">.model =3D model;</code></div><div class=
=3D"line number5 index4 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code>=
<code class=3D"js keyword">this</code><code class=3D"js plain">.color =3D <=
/code><code class=3D"js string">"silver"</code><code class=3D"js plain">;</=
code></div><div class=3D"line number6 index5 alt1"><code class=3D"js spaces=
">&nbsp;&nbsp;</code><code class=3D"js keyword">this</code><code class=3D"j=
s plain">.year =3D </code><code class=3D"js string">"2012"</code><code clas=
s=3D"js plain">;</code></div><div class=3D"line number7 index6 alt2">&nbsp;=
</div><div class=3D"line number8 index7 alt1"><code class=3D"js spaces">&nb=
sp;&nbsp;</code><code class=3D"js keyword">this</code><code class=3D"js pla=
in">.getInfo =3D </code><code class=3D"js keyword">function</code> <code cl=
ass=3D"js plain">() {</code></div><div class=3D"line number9 index8 alt2"><=
code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js k=
eyword">return</code> <code class=3D"js keyword">this</code><code class=3D"=
js plain">.model + </code><code class=3D"js string">" "</code> <code class=
=3D"js plain">+ </code><code class=3D"js keyword">this</code><code class=3D=
"js plain">.year;</code></div><div class=3D"line number10 index9 alt1"><cod=
e class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js plain">};</code>=
</div><div class=3D"line number11 index10 alt2">&nbsp;</div><div class=3D"l=
ine number12 index11 alt1"><code class=3D"js plain">}</code></div></div></t=
d></tr></tbody></table></div></div>

<p>We can then instantiate the object using the Car constructor we defined =
above like this:</p>
<div><div id=3D"highlighter_465424" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div></td><td class=3D"code"><div clas=
s=3D"container"><div class=3D"line number1 index0 alt2"><code class=3D"js k=
eyword">var</code> <code class=3D"js plain">myCar =3D </code><code class=3D=
"js keyword">new</code> <code class=3D"js plain">Car(</code><code class=3D"=
js string">"ford"</code><code class=3D"js plain">);</code></div><div class=
=3D"line number2 index1 alt1">&nbsp;</div><div class=3D"line number3 index2=
 alt2"><code class=3D"js plain">myCar.year =3D </code><code class=3D"js str=
ing">"2010"</code><code class=3D"js plain">;</code></div><div class=3D"line=
 number4 index3 alt1">&nbsp;</div><div class=3D"line number5 index4 alt2"><=
code class=3D"js plain">console.log( myCar.getInfo() );</code></div></div><=
/td></tr></tbody></table></div></div>

<p>For more ways to define "classes" using JavaScript, see Stoyan Stefanov'=
s useful <a href=3D"http://www.phpied.com/3-ways-to-define-a-javascript-cla=
ss/">post</a> on them.</p>

<p>Let us now proceed to review the table.
</p><p>
</p><p>
</p><table width=3D"100%" border=3D"0" align=3D"center" cellpadding=3D"1" c=
ellspacing=3D"1" bgcolor=3D"white">
  <tbody><tr bgcolor=3D"#fff">
    <td colspan=3D"4"><strong>&nbsp;&nbsp;<b>Creational</b></strong></td>
    <td colspan=3D"4">&nbsp;&nbsp;Based on the concept of creating an objec=
t.</td>
  </tr>
  <tr bgcolor=3D"#DBDBDB">
    <td colspan=3D"8"><em><strong>&nbsp;&nbsp;&nbsp;&nbsp;Class </strong></=
em></td>
  </tr>
  <tr bgcolor=3D"#F9F9F9">
    <td colspan=3D"5"><em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Factory Metho=
d</em></td>
    <td colspan=3D"3">This makes an instance of several derived classes bas=
ed on interfaced data or events.</td>
  </tr>
  <tr bgcolor=3D"#DBDBDB">
    <td colspan=3D"8"><em><strong>&nbsp;&nbsp;&nbsp;&nbsp;Object</strong></=
em></td>
  </tr>
  <tr bgcolor=3D"#F9F9F9">
    <td colspan=3D"5"><em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Abstract Fact=
ory</em></td>
    <td colspan=3D"3">Creates an instance of several families of classes wi=
thout detailing concrete classes.</td>
  </tr>
  <tr bgcolor=3D"#F9F9F9">
    <td colspan=3D"5"><em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Builder</em><=
/td>
    <td colspan=3D"3">Separates object construction from its representation=
, always creates the same type of object.</td>
  </tr>
  <tr bgcolor=3D"#F9F9F9">
    <td colspan=3D"5"><em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Prototype</em=
></td>
    <td colspan=3D"3">A fully initialized instance used for copying or clon=
ing.</td>
  </tr>
  <tr bgcolor=3D"#F9F9F9">
    <td colspan=3D"5"><em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Singleton</em=
></td>
    <td colspan=3D"3">A class with only a single instance with global acces=
s points.</td>
  </tr>
  <tr>
    <td height=3D"20" width=3D"6">&nbsp;</td>
    <td width=3D"6">&nbsp;</td>
    <td width=3D"6">&nbsp;</td>
    <td width=3D"139">&nbsp;</td>
    <td width=3D"1">&nbsp;</td>
    <td width=3D"18">&nbsp;</td>
    <td width=3D"18">&nbsp;</td>
    <td width=3D"681">&nbsp;</td>
  </tr>
  <tr bgcolor=3D"#fff">
    <td colspan=3D"4"><strong>&nbsp;&nbsp;<b>Structural</b></strong></td>
    <td colspan=3D"4">&nbsp;&nbsp;Based on the idea of building blocks of o=
bjects.</td>
  </tr>
  <tr bgcolor=3D"#DBDBDB">
    <td colspan=3D"8"><em><strong>&nbsp;&nbsp;&nbsp;&nbsp;Class </strong></=
em></td>
  </tr>
  <tr bgcolor=3D"#F9F9F9">
    <td colspan=3D"5"><em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Adapter</em><=
/td>
    <td colspan=3D"3">Match interfaces of different classes therefore class=
es can work together despite incompatible interfaces.</td>
  </tr>
  <tr bgcolor=3D"#DBDBDB">
    <td colspan=3D"8"><em><strong>&nbsp;&nbsp;&nbsp;&nbsp;Object</strong></=
em></td>
  </tr>
  <tr bgcolor=3D"#F9F9F9">
    <td colspan=3D"5"><em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Adapter</em><=
/td>
    <td colspan=3D"3">Match interfaces of different classes therefore class=
es can work together despite incompatible interfaces.</td>
  </tr>
  <tr bgcolor=3D"#F9F9F9">
    <td colspan=3D"5"><em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Bridge</em></=
td>
    <td colspan=3D"3">Separates an object's interface from its implementati=
on so the two can vary independently.</td>
  </tr>
  <tr bgcolor=3D"#F9F9F9">
    <td colspan=3D"5"><em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Composite</em=
></td>
    <td colspan=3D"3">A structure of simple and composite objects which mak=
es the total object more than just the sum of its parts.</td>
  </tr>
  <tr bgcolor=3D"#F9F9F9">
    <td colspan=3D"5"><em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Decorator</em=
></td>
    <td colspan=3D"3">Dynamically add alternate processing to objects.</td>
  </tr>
  <tr bgcolor=3D"#F9F9F9">
    <td colspan=3D"5"><em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Facade</em></=
td>
    <td colspan=3D"3">A single class that hides the complexity of an entire=
 subsystem.</td>
  </tr>
  <tr bgcolor=3D"#F9F9F9">
    <td colspan=3D"5"><em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Flyweight</em=
></td>
    <td colspan=3D"3">A fine-grained instance used for efficient sharing of=
 information that is contained elsewhere.</td>
  </tr>
  <tr bgcolor=3D"#F9F9F9">
    <td colspan=3D"5"><em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Proxy</em></t=
d>
    <td colspan=3D"3">A place holder object representing the true object.</=
td>
  </tr>
  <tr>
    <td colspan=3D"8">&nbsp;</td>
  </tr>
  <tr bgcolor=3D"#fff">
      <td colspan=3D"4"><strong>&nbsp;&nbsp;<b>Behavioral</b></strong></td>
    <td colspan=3D"4">&nbsp;&nbsp;Based on the way objects play and work to=
gether.</td>
  </tr>
  <tr bgcolor=3D"#DBDBDB">
    <td colspan=3D"8"><em><strong>&nbsp;&nbsp;&nbsp;&nbsp;Class </strong></=
em></td>
  </tr>
  <tr bgcolor=3D"#F9F9F9">
    <td colspan=3D"5"><em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Interpreter</=
em></td>
    <td colspan=3D"3">A way to include language elements in an application =
to match the grammar of the intended language.</td>
  </tr>
  <tr bgcolor=3D"#F9F9F9">
    <td colspan=3D"5"><em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Template <br>=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Method</em></td>
    <td colspan=3D"3">Creates the shell of an algorithm in a method, then d=
efer the exact steps to a subclass.</td>
  </tr>
  <tr bgcolor=3D"#DBDBDB">
    <td colspan=3D"8"><em><strong>&nbsp;&nbsp;&nbsp;&nbsp;Object</strong></=
em></td>
  </tr>
  <tr bgcolor=3D"#F9F9F9">
    <td colspan=3D"5"><em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Chain of <br>=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Responsibility</em></td>
    <td colspan=3D"3">A way of passing a request between a chain of objects=
 to find the object that can handle the request.</td>
  </tr>
  <tr bgcolor=3D"#F9F9F9">
    <td colspan=3D"5"><em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Command</em><=
/td>
    <td colspan=3D"3">Encapsulate a command request as an object to enable,=
 logging and/or queuing of requests, and provides error-handling for unhand=
led requests.</td>
  </tr>
  <tr bgcolor=3D"#F9F9F9">
    <td colspan=3D"5"><em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Iterator</em>=
</td>
    <td colspan=3D"3">Sequentially access the elements of a collection with=
out knowing the inner workings of the collection.</td>
  </tr>
  <tr bgcolor=3D"#F9F9F9">
    <td colspan=3D"5"><em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Mediator</em>=
</td>
    <td colspan=3D"3">Defines simplified communication between classes to p=
revent a group of classes from referring explicitly to each other.</td>
  </tr>
  <tr bgcolor=3D"#F9F9F9">
    <td colspan=3D"5"><em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Memento</em><=
/td>
    <td colspan=3D"3">Capture an object's internal state to be able to rest=
ore it later.</td>
  </tr>
  <tr bgcolor=3D"#F9F9F9">
    <td colspan=3D"5"><em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Observer</em>=
</td>
    <td colspan=3D"3">A way of notifying change to a number of classes to e=
nsure consistency between the classes.</td>
  </tr>
  <tr bgcolor=3D"#F9F9F9">
    <td colspan=3D"5"><em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;State</em></t=
d>
    <td colspan=3D"3">Alter an object's behavior when its state changes.</t=
d>
  </tr>
  <tr bgcolor=3D"#F9F9F9">
    <td colspan=3D"5"><em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Strategy</em>=
</td>
    <td colspan=3D"3">Encapsulates an algorithm inside a class separating t=
he selection from the implementation.</td>
  </tr>
  <tr bgcolor=3D"#F9F9F9">
    <td colspan=3D"5"><em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Visitor</em><=
/td>
    <td colspan=3D"3">Adds a new operation to a class without changing the =
class.</td>
  </tr>
</tbody></table><p></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h1 id=3D"designpatternsjavascript">
  <a href=3D"https://addyosmani.com/resources/essentialjsdesignpatterns/boo=
k/#designpatternsjavascript" class=3D"subhead-link">#</a>
  JavaScript Design Patterns
</h1>
<p>&nbsp;</p>

<p>In this section, we will explore JavaScript implementations of a number =
of both classic and modern design patterns.</p>

<p>Developers commonly wonder whether there is an <em>ideal</em> pattern or=
 set of patterns they should be using in their workflow. There isn't a true=
 single answer to this question; each script and web application we work on=
 is likely to have its own individual needs and we need to think about wher=
e we feel a pattern can offer real value to an implementation.</p>

<p>For example, some projects may benefit from the decoupling benefits offe=
red by the Observer pattern (which reduces how dependent parts of an applic=
ation are on one another) whilst others may simply be too small for decoupl=
ing to be a concern at all.</p>

<p>That said, once we have a firm grasp of design patterns and the specific=
 problems they are best suited to, it becomes much easier to integrate them=
 into our application architectures.</p>

<p>&nbsp;</p>
<p><strong>The patterns we will be exploring in this section are the:</stro=
ng></p>
<ul>

    <li class=3D"subitem"><a href=3D"https://addyosmani.com/resources/essen=
tialjsdesignpatterns/book/#constructorpatternjavascript">Constructor Patter=
n</a></li>
    <li class=3D"subitem"><a href=3D"https://addyosmani.com/resources/essen=
tialjsdesignpatterns/book/#modulepatternjavascript">Module Pattern</a></li>
    <li class=3D"subitem"><a href=3D"https://addyosmani.com/resources/essen=
tialjsdesignpatterns/book/#revealingmodulepatternjavascript">Revealing Modu=
le Pattern</a></li>
    <li class=3D"subitem"><a href=3D"https://addyosmani.com/resources/essen=
tialjsdesignpatterns/book/#singletonpatternjavascript">Singleton Pattern</a=
></li>
    <li class=3D"subitem"><a href=3D"https://addyosmani.com/resources/essen=
tialjsdesignpatterns/book/#observerpatternjavascript">Observer Pattern</a><=
/li>
     <li class=3D"subitem"><a href=3D"https://addyosmani.com/resources/esse=
ntialjsdesignpatterns/book/#mediatorpatternjavascript">Mediator Pattern</a>=
</li>
    <li class=3D"subitem"><a href=3D"https://addyosmani.com/resources/essen=
tialjsdesignpatterns/book/#prototypepatternjavascript">Prototype Pattern</a=
></li>
    <li class=3D"subitem"><a href=3D"https://addyosmani.com/resources/essen=
tialjsdesignpatterns/book/#commandpatternjavascript">Command Pattern</a></l=
i>
    <li class=3D"subitem"><a href=3D"https://addyosmani.com/resources/essen=
tialjsdesignpatterns/book/#facadepatternjavascript">Facade Pattern</a></li>
    <li class=3D"subitem"><a href=3D"https://addyosmani.com/resources/essen=
tialjsdesignpatterns/book/#factorypatternjavascript">Factory Pattern</a></l=
i>
    <li class=3D"subitem"><a href=3D"https://addyosmani.com/resources/essen=
tialjsdesignpatterns/book/#mixinpatternjavascript">Mixin Pattern</a>
    </li><li class=3D"subitem"><a href=3D"https://addyosmani.com/resources/=
essentialjsdesignpatterns/book/#decoratorpatternjavascript">Decorator Patte=
rn</a></li>
    <li class=3D"subitem"><a href=3D"https://addyosmani.com/resources/essen=
tialjsdesignpatterns/book/#detailflyweight">Flyweight Pattern</a></li>

</ul>

<p>&nbsp;</p>
<h2 id=3D"constructorpatternjavascript">
  <a href=3D"https://addyosmani.com/resources/essentialjsdesignpatterns/boo=
k/#constructorpatternjavascript" class=3D"subhead-link">#</a>
  The Constructor Pattern
</h2>

<p>In classical object-oriented programming languages, a constructor is a s=
pecial method used to initialize a newly created object once memory has bee=
n allocated for it. In JavaScript, as almost everything is an object, we're=
 most often interested in <em>object</em> constructors.</p>

<p>Object constructors are used to create specific types of objects - both =
preparing the object for use and accepting arguments which a constructor ca=
n use to set the values of member properties and methods when the object is=
 first created. </p>

<h3>Object Creation</h3>

<p>The three common ways to create new objects in JavaScript are as follows=
:</p>

<p></p><div><div id=3D"highlighter_826362" class=3D"syntaxhighlighter  js a=
codecode"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/re=
sources/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_hel=
p help">?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=
=3D"0"><tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 al=
t2">1</div><div class=3D"line number2 index1 alt1">2</div><div class=3D"lin=
e number3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</di=
v><div class=3D"line number5 index4 alt2">5</div><div class=3D"line number6=
 index5 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div cl=
ass=3D"line number8 index7 alt1">8</div><div class=3D"line number9 index8 a=
lt2">9</div></td><td class=3D"code"><div class=3D"container"><div class=3D"=
line number1 index0 alt2"><code class=3D"js comments">// Each of the follow=
ing options will create a new empty object:</code></div><div class=3D"line =
number2 index1 alt1">&nbsp;</div><div class=3D"line number3 index2 alt2"><c=
ode class=3D"js keyword">var</code> <code class=3D"js plain">newObject =3D =
{};</code></div><div class=3D"line number4 index3 alt1">&nbsp;</div><div cl=
ass=3D"line number5 index4 alt2"><code class=3D"js comments">// or</code></=
div><div class=3D"line number6 index5 alt1"><code class=3D"js keyword">var<=
/code> <code class=3D"js plain">newObject =3D Object.create( Object.prototy=
pe );</code></div><div class=3D"line number7 index6 alt2">&nbsp;</div><div =
class=3D"line number8 index7 alt1"><code class=3D"js comments">// or</code>=
</div><div class=3D"line number9 index8 alt2"><code class=3D"js keyword">va=
r</code>&nbsp;<code class=3D"js plain">newObject&nbsp;=3D&nbsp;</code><code=
 class=3D"js keyword">new</code>&nbsp;<code class=3D"js plain">Object();</c=
ode></div></div></td></tr></tbody></table></div></div><p></p>

<p>Where the "Object" constructor in the final example creates an object wr=
apper for a specific value, or where no value is passed, it will create an =
empty object and return it.</p>

<p>There are then four ways in which keys and values can then be assigned t=
o an object:</p>

<p></p><div><div id=3D"highlighter_695815" class=3D"syntaxhighlighter  js a=
codecode"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/re=
sources/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_hel=
p help">?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=
=3D"0"><tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 al=
t2">1</div><div class=3D"line number2 index1 alt1">2</div><div class=3D"lin=
e number3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</di=
v><div class=3D"line number5 index4 alt2">5</div><div class=3D"line number6=
 index5 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div cl=
ass=3D"line number8 index7 alt1">8</div><div class=3D"line number9 index8 a=
lt2">9</div><div class=3D"line number10 index9 alt1">10</div><div class=3D"=
line number11 index10 alt2">11</div><div class=3D"line number12 index11 alt=
1">12</div><div class=3D"line number13 index12 alt2">13</div><div class=3D"=
line number14 index13 alt1">14</div><div class=3D"line number15 index14 alt=
2">15</div><div class=3D"line number16 index15 alt1">16</div><div class=3D"=
line number17 index16 alt2">17</div><div class=3D"line number18 index17 alt=
1">18</div><div class=3D"line number19 index18 alt2">19</div><div class=3D"=
line number20 index19 alt1">20</div><div class=3D"line number21 index20 alt=
2">21</div><div class=3D"line number22 index21 alt1">22</div><div class=3D"=
line number23 index22 alt2">23</div><div class=3D"line number24 index23 alt=
1">24</div><div class=3D"line number25 index24 alt2">25</div><div class=3D"=
line number26 index25 alt1">26</div><div class=3D"line number27 index26 alt=
2">27</div><div class=3D"line number28 index27 alt1">28</div><div class=3D"=
line number29 index28 alt2">29</div><div class=3D"line number30 index29 alt=
1">30</div><div class=3D"line number31 index30 alt2">31</div><div class=3D"=
line number32 index31 alt1">32</div><div class=3D"line number33 index32 alt=
2">33</div><div class=3D"line number34 index33 alt1">34</div><div class=3D"=
line number35 index34 alt2">35</div><div class=3D"line number36 index35 alt=
1">36</div><div class=3D"line number37 index36 alt2">37</div><div class=3D"=
line number38 index37 alt1">38</div><div class=3D"line number39 index38 alt=
2">39</div><div class=3D"line number40 index39 alt1">40</div><div class=3D"=
line number41 index40 alt2">41</div><div class=3D"line number42 index41 alt=
1">42</div><div class=3D"line number43 index42 alt2">43</div><div class=3D"=
line number44 index43 alt1">44</div><div class=3D"line number45 index44 alt=
2">45</div><div class=3D"line number46 index45 alt1">46</div><div class=3D"=
line number47 index46 alt2">47</div><div class=3D"line number48 index47 alt=
1">48</div><div class=3D"line number49 index48 alt2">49</div><div class=3D"=
line number50 index49 alt1">50</div><div class=3D"line number51 index50 alt=
2">51</div><div class=3D"line number52 index51 alt1">52</div><div class=3D"=
line number53 index52 alt2">53</div><div class=3D"line number54 index53 alt=
1">54</div><div class=3D"line number55 index54 alt2">55</div><div class=3D"=
line number56 index55 alt1">56</div><div class=3D"line number57 index56 alt=
2">57</div><div class=3D"line number58 index57 alt1">58</div><div class=3D"=
line number59 index58 alt2">59</div><div class=3D"line number60 index59 alt=
1">60</div><div class=3D"line number61 index60 alt2">61</div><div class=3D"=
line number62 index61 alt1">62</div><div class=3D"line number63 index62 alt=
2">63</div><div class=3D"line number64 index63 alt1">64</div><div class=3D"=
line number65 index64 alt2">65</div><div class=3D"line number66 index65 alt=
1">66</div><div class=3D"line number67 index66 alt2">67</div><div class=3D"=
line number68 index67 alt1">68</div><div class=3D"line number69 index68 alt=
2">69</div><div class=3D"line number70 index69 alt1">70</div><div class=3D"=
line number71 index70 alt2">71</div><div class=3D"line number72 index71 alt=
1">72</div><div class=3D"line number73 index72 alt2">73</div><div class=3D"=
line number74 index73 alt1">74</div><div class=3D"line number75 index74 alt=
2">75</div><div class=3D"line number76 index75 alt1">76</div><div class=3D"=
line number77 index76 alt2">77</div><div class=3D"line number78 index77 alt=
1">78</div><div class=3D"line number79 index78 alt2">79</div></td><td class=
=3D"code"><div class=3D"container"><div class=3D"line number1 index0 alt2">=
<code class=3D"js comments">// ECMAScript 3 compatible approaches</code></d=
iv><div class=3D"line number2 index1 alt1">&nbsp;</div><div class=3D"line n=
umber3 index2 alt2"><code class=3D"js comments">// 1. Dot syntax</code></di=
v><div class=3D"line number4 index3 alt1">&nbsp;</div><div class=3D"line nu=
mber5 index4 alt2"><code class=3D"js comments">// Set properties</code></di=
v><div class=3D"line number6 index5 alt1"><code class=3D"js plain">newObjec=
t.someKey =3D </code><code class=3D"js string">"Hello World"</code><code cl=
ass=3D"js plain">;</code></div><div class=3D"line number7 index6 alt2">&nbs=
p;</div><div class=3D"line number8 index7 alt1"><code class=3D"js comments"=
>// Get properties</code></div><div class=3D"line number9 index8 alt2"><cod=
e class=3D"js keyword">var</code> <code class=3D"js plain">value =3D newObj=
ect.someKey;</code></div><div class=3D"line number10 index9 alt1">&nbsp;</d=
iv><div class=3D"line number11 index10 alt2">&nbsp;</div><div class=3D"line=
 number12 index11 alt1">&nbsp;</div><div class=3D"line number13 index12 alt=
2"><code class=3D"js comments">// 2. Square bracket syntax</code></div><div=
 class=3D"line number14 index13 alt1">&nbsp;</div><div class=3D"line number=
15 index14 alt2"><code class=3D"js comments">// Set properties</code></div>=
<div class=3D"line number16 index15 alt1"><code class=3D"js plain">newObjec=
t[</code><code class=3D"js string">"someKey"</code><code class=3D"js plain"=
>] =3D </code><code class=3D"js string">"Hello World"</code><code class=3D"=
js plain">;</code></div><div class=3D"line number17 index16 alt2">&nbsp;</d=
iv><div class=3D"line number18 index17 alt1"><code class=3D"js comments">//=
 Get properties</code></div><div class=3D"line number19 index18 alt2"><code=
 class=3D"js keyword">var</code> <code class=3D"js plain">value =3D newObje=
ct[</code><code class=3D"js string">"someKey"</code><code class=3D"js plain=
">];</code></div><div class=3D"line number20 index19 alt1">&nbsp;</div><div=
 class=3D"line number21 index20 alt2">&nbsp;</div><div class=3D"line number=
22 index21 alt1">&nbsp;</div><div class=3D"line number23 index22 alt2"><cod=
e class=3D"js comments">// ECMAScript 5 only compatible approaches</code></=
div><div class=3D"line number24 index23 alt1"><code class=3D"js comments">/=
/ For more information see: <a href=3D"http://kangax.github.com/es5-compat-=
table/">http://kangax.github.com/es5-compat-table/</a></code></div><div cla=
ss=3D"line number25 index24 alt2">&nbsp;</div><div class=3D"line number26 i=
ndex25 alt1"><code class=3D"js comments">// 3. Object.defineProperty</code>=
</div><div class=3D"line number27 index26 alt2">&nbsp;</div><div class=3D"l=
ine number28 index27 alt1"><code class=3D"js comments">// Set properties</c=
ode></div><div class=3D"line number29 index28 alt2"><code class=3D"js plain=
">Object.defineProperty( newObject, </code><code class=3D"js string">"someK=
ey"</code><code class=3D"js plain">, {</code></div><div class=3D"line numbe=
r30 index29 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>=
<code class=3D"js plain">value: </code><code class=3D"js string">"for more =
control of the property's behavior"</code><code class=3D"js plain">,</code>=
</div><div class=3D"line number31 index30 alt2"><code class=3D"js spaces">&=
nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">writable: </code><co=
de class=3D"js keyword">true</code><code class=3D"js plain">,</code></div><=
div class=3D"line number32 index31 alt1"><code class=3D"js spaces">&nbsp;&n=
bsp;&nbsp;&nbsp;</code><code class=3D"js plain">enumerable: </code><code cl=
ass=3D"js keyword">true</code><code class=3D"js plain">,</code></div><div c=
lass=3D"line number33 index32 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&=
nbsp;&nbsp;</code><code class=3D"js plain">configurable: </code><code class=
=3D"js keyword">true</code></div><div class=3D"line number34 index33 alt1">=
<code class=3D"js plain">});</code></div><div class=3D"line number35 index3=
4 alt2">&nbsp;</div><div class=3D"line number36 index35 alt1"><code class=
=3D"js comments">// If the above feels a little difficult to read, a short-=
hand could</code></div><div class=3D"line number37 index36 alt2"><code clas=
s=3D"js comments">// be written as follows:</code></div><div class=3D"line =
number38 index37 alt1">&nbsp;</div><div class=3D"line number39 index38 alt2=
"><code class=3D"js keyword">var</code> <code class=3D"js plain">defineProp=
 =3D </code><code class=3D"js keyword">function</code> <code class=3D"js pl=
ain">( obj, key, value ){</code></div><div class=3D"line number40 index39 a=
lt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js keyword=
">var</code> <code class=3D"js plain">config =3D {</code></div><div class=
=3D"line number41 index40 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp=
;&nbsp;</code><code class=3D"js plain">value: value,</code></div><div class=
=3D"line number42 index41 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp=
;&nbsp;</code><code class=3D"js plain">writable: </code><code class=3D"js k=
eyword">true</code><code class=3D"js plain">,</code></div><div class=3D"lin=
e number43 index42 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;=
</code><code class=3D"js plain">enumerable: </code><code class=3D"js keywor=
d">true</code><code class=3D"js plain">,</code></div><div class=3D"line num=
ber44 index43 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</cod=
e><code class=3D"js plain">configurable: </code><code class=3D"js keyword">=
true</code></div><div class=3D"line number45 index44 alt2"><code class=3D"j=
s spaces">&nbsp;&nbsp;</code><code class=3D"js plain">};</code></div><div c=
lass=3D"line number46 index45 alt1"><code class=3D"js spaces">&nbsp;&nbsp;<=
/code><code class=3D"js plain">Object.defineProperty( obj, key, config );</=
code></div><div class=3D"line number47 index46 alt2"><code class=3D"js plai=
n">};</code></div><div class=3D"line number48 index47 alt1">&nbsp;</div><di=
v class=3D"line number49 index48 alt2"><code class=3D"js comments">// To us=
e, we then create a new empty "person" object</code></div><div class=3D"lin=
e number50 index49 alt1"><code class=3D"js keyword">var</code> <code class=
=3D"js plain">person =3D Object.create( Object.prototype );</code></div><di=
v class=3D"line number51 index50 alt2">&nbsp;</div><div class=3D"line numbe=
r52 index51 alt1"><code class=3D"js comments">// Populate the object with p=
roperties</code></div><div class=3D"line number53 index52 alt2"><code class=
=3D"js plain">defineProp( person, </code><code class=3D"js string">"car"</c=
ode><code class=3D"js plain">, </code><code class=3D"js string">"Delorean"<=
/code> <code class=3D"js plain">);</code></div><div class=3D"line number54 =
index53 alt1"><code class=3D"js plain">defineProp( person, </code><code cla=
ss=3D"js string">"dateOfBirth"</code><code class=3D"js plain">, </code><cod=
e class=3D"js string">"1981"</code> <code class=3D"js plain">);</code></div=
><div class=3D"line number55 index54 alt2"><code class=3D"js plain">defineP=
rop( person, </code><code class=3D"js string">"hasBeard"</code><code class=
=3D"js plain">, </code><code class=3D"js keyword">false</code> <code class=
=3D"js plain">);</code></div><div class=3D"line number56 index55 alt1">&nbs=
p;</div><div class=3D"line number57 index56 alt2"><code class=3D"js plain">=
console.log(person);</code></div><div class=3D"line number58 index57 alt1">=
<code class=3D"js comments">// Outputs: Object {car: "Delorean", dateOfBirt=
h: "1981", hasBeard: false}</code></div><div class=3D"line number59 index58=
 alt2">&nbsp;</div><div class=3D"line number60 index59 alt1">&nbsp;</div><d=
iv class=3D"line number61 index60 alt2"><code class=3D"js comments">// 4. O=
bject.defineProperties</code></div><div class=3D"line number62 index61 alt1=
">&nbsp;</div><div class=3D"line number63 index62 alt2"><code class=3D"js c=
omments">// Set properties</code></div><div class=3D"line number64 index63 =
alt1"><code class=3D"js plain">Object.defineProperties( newObject, {</code>=
</div><div class=3D"line number65 index64 alt2">&nbsp;</div><div class=3D"l=
ine number66 index65 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><co=
de class=3D"js string">"someKey"</code><code class=3D"js plain">: {</code><=
/div><div class=3D"line number67 index66 alt2"><code class=3D"js spaces">&n=
bsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">value: </code><code c=
lass=3D"js string">"Hello World"</code><code class=3D"js plain">,</code></d=
iv><div class=3D"line number68 index67 alt1"><code class=3D"js spaces">&nbs=
p;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">writable: </code><code =
class=3D"js keyword">true</code></div><div class=3D"line number69 index68 a=
lt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js plain">=
},</code></div><div class=3D"line number70 index69 alt1">&nbsp;</div><div c=
lass=3D"line number71 index70 alt2"><code class=3D"js spaces">&nbsp;&nbsp;<=
/code><code class=3D"js string">"anotherKey"</code><code class=3D"js plain"=
>: {</code></div><div class=3D"line number72 index71 alt1"><code class=3D"j=
s spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">value: </=
code><code class=3D"js string">"Foo bar"</code><code class=3D"js plain">,</=
code></div><div class=3D"line number73 index72 alt2"><code class=3D"js spac=
es">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">writable: </cod=
e><code class=3D"js keyword">false</code></div><div class=3D"line number74 =
index73 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"j=
s plain">}</code></div><div class=3D"line number75 index74 alt2">&nbsp;</di=
v><div class=3D"line number76 index75 alt1"><code class=3D"js plain">});</c=
ode></div><div class=3D"line number77 index76 alt2">&nbsp;</div><div class=
=3D"line number78 index77 alt1"><code class=3D"js comments">// Getting prop=
erties for 3. and 4. can be done using any of the</code></div><div class=3D=
"line number79 index78 alt2"><code class=3D"js comments">// options in 1. a=
nd 2.</code></div></div></td></tr></tbody></table></div></div><p></p>

<p>As we will see a little later in the book, these methods can even be use=
d for inheritance, as follows:</p>

<p></p><div><div id=3D"highlighter_719174" class=3D"syntaxhighlighter  js a=
codecode"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/re=
sources/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_hel=
p help">?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=
=3D"0"><tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 al=
t2">1</div><div class=3D"line number2 index1 alt1">2</div><div class=3D"lin=
e number3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</di=
v><div class=3D"line number5 index4 alt2">5</div><div class=3D"line number6=
 index5 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div cl=
ass=3D"line number8 index7 alt1">8</div><div class=3D"line number9 index8 a=
lt2">9</div><div class=3D"line number10 index9 alt1">10</div><div class=3D"=
line number11 index10 alt2">11</div><div class=3D"line number12 index11 alt=
1">12</div><div class=3D"line number13 index12 alt2">13</div></td><td class=
=3D"code"><div class=3D"container"><div class=3D"line number1 index0 alt2">=
<code class=3D"js comments">// Usage:</code></div><div class=3D"line number=
2 index1 alt1">&nbsp;</div><div class=3D"line number3 index2 alt2"><code cl=
ass=3D"js comments">// Create a race car driver that inherits from the pers=
on object</code></div><div class=3D"line number4 index3 alt1"><code class=
=3D"js keyword">var</code> <code class=3D"js plain">driver =3D Object.creat=
e( person );</code></div><div class=3D"line number5 index4 alt2">&nbsp;</di=
v><div class=3D"line number6 index5 alt1"><code class=3D"js comments">// Se=
t some properties for the driver</code></div><div class=3D"line number7 ind=
ex6 alt2"><code class=3D"js plain">defineProp(driver, </code><code class=3D=
"js string">"topSpeed"</code><code class=3D"js plain">, </code><code class=
=3D"js string">"100mph"</code><code class=3D"js plain">);</code></div><div =
class=3D"line number8 index7 alt1">&nbsp;</div><div class=3D"line number9 i=
ndex8 alt2"><code class=3D"js comments">// Get an inherited property (1981)=
</code></div><div class=3D"line number10 index9 alt1"><code class=3D"js pla=
in">console.log( driver.dateOfBirth );</code></div><div class=3D"line numbe=
r11 index10 alt2">&nbsp;</div><div class=3D"line number12 index11 alt1"><co=
de class=3D"js comments">// Get the property we set (100mph)</code></div><d=
iv class=3D"line number13 index12 alt2"><code class=3D"js plain">console.lo=
g( driver.topSpeed );</code></div></div></td></tr></tbody></table></div></d=
iv><p></p>


<h3>Basic Constructors</h3>

<p>As we saw earlier, JavaScript doesn't support the concept of classes but=
 it does support special constructor functions that work with objects. By s=
imply prefixing a call to a constructor function with the keyword "new", we=
 can tell JavaScript we would like the function to behave like a constructo=
r and instantiate a new object with the members defined by that function.</=
p>

<p>Inside a constructor, the keyword <em>this</em> references the new objec=
t that's being created. Revisiting object creation, a basic constructor may=
 look as follows:</p>

<p></p><div><div id=3D"highlighter_934981" class=3D"syntaxhighlighter  js a=
codecode"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/re=
sources/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_hel=
p help">?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=
=3D"0"><tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 al=
t2">1</div><div class=3D"line number2 index1 alt1">2</div><div class=3D"lin=
e number3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</di=
v><div class=3D"line number5 index4 alt2">5</div><div class=3D"line number6=
 index5 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div cl=
ass=3D"line number8 index7 alt1">8</div><div class=3D"line number9 index8 a=
lt2">9</div><div class=3D"line number10 index9 alt1">10</div><div class=3D"=
line number11 index10 alt2">11</div><div class=3D"line number12 index11 alt=
1">12</div><div class=3D"line number13 index12 alt2">13</div><div class=3D"=
line number14 index13 alt1">14</div><div class=3D"line number15 index14 alt=
2">15</div><div class=3D"line number16 index15 alt1">16</div><div class=3D"=
line number17 index16 alt2">17</div><div class=3D"line number18 index17 alt=
1">18</div><div class=3D"line number19 index18 alt2">19</div><div class=3D"=
line number20 index19 alt1">20</div><div class=3D"line number21 index20 alt=
2">21</div><div class=3D"line number22 index21 alt1">22</div></td><td class=
=3D"code"><div class=3D"container"><div class=3D"line number1 index0 alt2">=
<code class=3D"js keyword">function</code> <code class=3D"js plain">Car( mo=
del, year, miles ) {</code></div><div class=3D"line number2 index1 alt1">&n=
bsp;</div><div class=3D"line number3 index2 alt2"><code class=3D"js spaces"=
>&nbsp;&nbsp;</code><code class=3D"js keyword">this</code><code class=3D"js=
 plain">.model =3D model;</code></div><div class=3D"line number4 index3 alt=
1"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js keyword">=
this</code><code class=3D"js plain">.year =3D year;</code></div><div class=
=3D"line number5 index4 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code>=
<code class=3D"js keyword">this</code><code class=3D"js plain">.miles =3D m=
iles;</code></div><div class=3D"line number6 index5 alt1">&nbsp;</div><div =
class=3D"line number7 index6 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</=
code><code class=3D"js keyword">this</code><code class=3D"js plain">.toStri=
ng =3D </code><code class=3D"js keyword">function</code> <code class=3D"js =
plain">() {</code></div><div class=3D"line number8 index7 alt1"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">re=
turn</code> <code class=3D"js keyword">this</code><code class=3D"js plain">=
.model + </code><code class=3D"js string">" has done "</code> <code class=
=3D"js plain">+ </code><code class=3D"js keyword">this</code><code class=3D=
"js plain">.miles + </code><code class=3D"js string">" miles"</code><code c=
lass=3D"js plain">;</code></div><div class=3D"line number9 index8 alt2"><co=
de class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js plain">};</code=
></div><div class=3D"line number10 index9 alt1"><code class=3D"js plain">}<=
/code></div><div class=3D"line number11 index10 alt2">&nbsp;</div><div clas=
s=3D"line number12 index11 alt1"><code class=3D"js comments">// Usage:</cod=
e></div><div class=3D"line number13 index12 alt2">&nbsp;</div><div class=3D=
"line number14 index13 alt1"><code class=3D"js comments">// We can create n=
ew instances of the car</code></div><div class=3D"line number15 index14 alt=
2"><code class=3D"js keyword">var</code> <code class=3D"js plain">civic =3D=
 </code><code class=3D"js keyword">new</code> <code class=3D"js plain">Car(=
 </code><code class=3D"js string">"Honda Civic"</code><code class=3D"js pla=
in">, 2009, 20000 );</code></div><div class=3D"line number16 index15 alt1">=
<code class=3D"js keyword">var</code> <code class=3D"js plain">mondeo =3D <=
/code><code class=3D"js keyword">new</code> <code class=3D"js plain">Car( <=
/code><code class=3D"js string">"Ford Mondeo"</code><code class=3D"js plain=
">, 2010, 5000 );</code></div><div class=3D"line number17 index16 alt2">&nb=
sp;</div><div class=3D"line number18 index17 alt1"><code class=3D"js commen=
ts">// and then open our browser console to view the</code></div><div class=
=3D"line number19 index18 alt2"><code class=3D"js comments">// output of th=
e toString() method being called on</code></div><div class=3D"line number20=
 index19 alt1"><code class=3D"js comments">// these objects</code></div><di=
v class=3D"line number21 index20 alt2"><code class=3D"js plain">console.log=
( civic.toString() );</code></div><div class=3D"line number22 index21 alt1"=
><code class=3D"js plain">console.log( mondeo.toString() );</code></div></d=
iv></td></tr></tbody></table></div></div><p></p>


<p>The above is a simple version of the constructor pattern but it does suf=
fer from some problems. One is that it makes inheritance difficult and the =
other is that functions such as <code>toString()</code> are redefined for e=
ach of the new objects created using the Car constructor. This isn't very o=
ptimal as the function should ideally be shared between all of the instance=
s of the Car type.</p>

<p>Thankfully as there are a number of both ES3 and ES5-compatible alternat=
ives to constructing objects, it's trivial to work around this limitation.<=
/p>

<p>&nbsp;</p>

<h3>Constructors With Prototypes</h3>

<p>Functions, like almost all objects in JavaScript, contain a "prototype" =
object. When we call a JavaScript constructor to create an object, all the =
properties of the constructor's prototype are then made available to the ne=
w object. In this fashion, multiple Car objects can be created which access=
 the same prototype. We can thus extend the original example as follows:
</p>

<p></p><div><div id=3D"highlighter_327254" class=3D"syntaxhighlighter  js a=
codecode"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/re=
sources/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_hel=
p help">?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=
=3D"0"><tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 al=
t2">1</div><div class=3D"line number2 index1 alt1">2</div><div class=3D"lin=
e number3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</di=
v><div class=3D"line number5 index4 alt2">5</div><div class=3D"line number6=
 index5 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div cl=
ass=3D"line number8 index7 alt1">8</div><div class=3D"line number9 index8 a=
lt2">9</div><div class=3D"line number10 index9 alt1">10</div><div class=3D"=
line number11 index10 alt2">11</div><div class=3D"line number12 index11 alt=
1">12</div><div class=3D"line number13 index12 alt2">13</div><div class=3D"=
line number14 index13 alt1">14</div><div class=3D"line number15 index14 alt=
2">15</div><div class=3D"line number16 index15 alt1">16</div><div class=3D"=
line number17 index16 alt2">17</div><div class=3D"line number18 index17 alt=
1">18</div><div class=3D"line number19 index18 alt2">19</div><div class=3D"=
line number20 index19 alt1">20</div><div class=3D"line number21 index20 alt=
2">21</div><div class=3D"line number22 index21 alt1">22</div></td><td class=
=3D"code"><div class=3D"container"><div class=3D"line number1 index0 alt2">=
<code class=3D"js keyword">function</code> <code class=3D"js plain">Car( mo=
del, year, miles ) {</code></div><div class=3D"line number2 index1 alt1">&n=
bsp;</div><div class=3D"line number3 index2 alt2"><code class=3D"js spaces"=
>&nbsp;&nbsp;</code><code class=3D"js keyword">this</code><code class=3D"js=
 plain">.model =3D model;</code></div><div class=3D"line number4 index3 alt=
1"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js keyword">=
this</code><code class=3D"js plain">.year =3D year;</code></div><div class=
=3D"line number5 index4 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code>=
<code class=3D"js keyword">this</code><code class=3D"js plain">.miles =3D m=
iles;</code></div><div class=3D"line number6 index5 alt1">&nbsp;</div><div =
class=3D"line number7 index6 alt2"><code class=3D"js plain">}</code></div><=
div class=3D"line number8 index7 alt1">&nbsp;</div><div class=3D"line numbe=
r9 index8 alt2">&nbsp;</div><div class=3D"line number10 index9 alt1"><code =
class=3D"js comments">// Note here that we are using Object.prototype.newMe=
thod rather than</code></div><div class=3D"line number11 index10 alt2"><cod=
e class=3D"js comments">// Object.prototype so as to avoid redefining the p=
rototype object</code></div><div class=3D"line number12 index11 alt1"><code=
 class=3D"js plain">Car.prototype.toString =3D </code><code class=3D"js key=
word">function</code> <code class=3D"js plain">() {</code></div><div class=
=3D"line number13 index12 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</cod=
e><code class=3D"js keyword">return</code> <code class=3D"js keyword">this<=
/code><code class=3D"js plain">.model + </code><code class=3D"js string">" =
has done "</code> <code class=3D"js plain">+ </code><code class=3D"js keywo=
rd">this</code><code class=3D"js plain">.miles + </code><code class=3D"js s=
tring">" miles"</code><code class=3D"js plain">;</code></div><div class=3D"=
line number14 index13 alt1"><code class=3D"js plain">};</code></div><div cl=
ass=3D"line number15 index14 alt2">&nbsp;</div><div class=3D"line number16 =
index15 alt1"><code class=3D"js comments">// Usage:</code></div><div class=
=3D"line number17 index16 alt2">&nbsp;</div><div class=3D"line number18 ind=
ex17 alt1"><code class=3D"js keyword">var</code> <code class=3D"js plain">c=
ivic =3D </code><code class=3D"js keyword">new</code> <code class=3D"js pla=
in">Car( </code><code class=3D"js string">"Honda Civic"</code><code class=
=3D"js plain">, 2009, 20000 );</code></div><div class=3D"line number19 inde=
x18 alt2"><code class=3D"js keyword">var</code> <code class=3D"js plain">mo=
ndeo =3D </code><code class=3D"js keyword">new</code> <code class=3D"js pla=
in">Car( </code><code class=3D"js string">"Ford Mondeo"</code><code class=
=3D"js plain">, 2010, 5000 );</code></div><div class=3D"line number20 index=
19 alt1">&nbsp;</div><div class=3D"line number21 index20 alt2"><code class=
=3D"js plain">console.log( civic.toString() );</code></div><div class=3D"li=
ne number22 index21 alt1"><code class=3D"js plain">console.log( mondeo.toSt=
ring() );</code></div></div></td></tr></tbody></table></div></div><p></p>

<p>Above, a single instance of toString() will now be shared between all of=
 the Car objects.</p>

<p>&nbsp;</p>

<h2 id=3D"modulepatternjavascript">
  <a href=3D"https://addyosmani.com/resources/essentialjsdesignpatterns/boo=
k/#modulepatternjavascript" class=3D"subhead-link">#</a>
  The Module Pattern
</h2>

<h2 id=3D"detailmodule">Modules</h2>

<p>
Modules are an integral piece of any robust application's architecture and =
typically help in keeping the units of code for a project both cleanly sepa=
rated and organized.</p>

<p>In JavaScript, there are several options for implementing modules. These=
 include:</p>
<ul>
  <li>The Module pattern</li>
  <li>Object literal notation</li>
  <li>AMD modules</li>
  <li>CommonJS modules</li>
  <li>ECMAScript Harmony modules</li>
</ul>

<p>We will be exploring the latter three of these options later on in the b=
ook in the section <em>Modern Modular JavaScript Design Patterns</em>.</p>

<p>The Module pattern is based in part on object literals and so it makes s=
ense to refresh our knowledge of them first.</p>

<h3>Object Literals</h3>

<p>In object literal notation, an object is described as a set of comma-sep=
arated name/value pairs enclosed in curly braces (<code>{}</code>). Names i=
nside the object may be either strings or identifiers that are followed by =
a colon. There should be no comma used after the final name/value pair in t=
he object as this may result in errors.</p>
<p>

</p><div><div id=3D"highlighter_864652" class=3D"syntaxhighlighter  js acod=
ecode"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resou=
rces/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help h=
elp">?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D=
"0"><tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2"=
>1</div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line n=
umber3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><=
div class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 in=
dex5 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=
=3D"line number8 index7 alt1">8</div></td><td class=3D"code"><div class=3D"=
container"><div class=3D"line number1 index0 alt2"><code class=3D"js keywor=
d">var</code> <code class=3D"js plain">myObjectLiteral =3D {</code></div><d=
iv class=3D"line number2 index1 alt1">&nbsp;</div><div class=3D"line number=
3 index2 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><co=
de class=3D"js plain">variableKey: variableValue,</code></div><div class=3D=
"line number4 index3 alt1">&nbsp;</div><div class=3D"line number5 index4 al=
t2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D=
"js plain">functionKey: </code><code class=3D"js keyword">function</code> <=
code class=3D"js plain">() {</code></div><div class=3D"line number6 index5 =
alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>=
<code class=3D"js comments">// ...</code></div><div class=3D"line number7 i=
ndex6 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code =
class=3D"js plain">}</code></div><div class=3D"line number8 index7 alt1"><c=
ode class=3D"js plain">};</code></div></div></td></tr></tbody></table></div=
></div>

<p>
Object literals don't require instantiation using the <code>new</code> oper=
ator but shouldn't be used at the start of a statement as the opening <code=
>{</code> may be interpreted as the beginning of a block. Outside of an obj=
ect, new members may be added to it using assignment as follows <code>myMod=
ule.property =3D "someValue";</code>
</p>

<p>Below we can see a more complete example of a module defined using objec=
t literal notation:</p>

<p>
</p><div><div id=3D"highlighter_977037" class=3D"syntaxhighlighter  js acod=
ecode"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resou=
rces/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help h=
elp">?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D=
"0"><tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2"=
>1</div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line n=
umber3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><=
div class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 in=
dex5 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=
=3D"line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2=
">9</div><div class=3D"line number10 index9 alt1">10</div><div class=3D"lin=
e number11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">=
12</div><div class=3D"line number13 index12 alt2">13</div><div class=3D"lin=
e number14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">=
15</div><div class=3D"line number16 index15 alt1">16</div><div class=3D"lin=
e number17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">=
18</div><div class=3D"line number19 index18 alt2">19</div><div class=3D"lin=
e number20 index19 alt1">20</div><div class=3D"line number21 index20 alt2">=
21</div><div class=3D"line number22 index21 alt1">22</div><div class=3D"lin=
e number23 index22 alt2">23</div><div class=3D"line number24 index23 alt1">=
24</div><div class=3D"line number25 index24 alt2">25</div><div class=3D"lin=
e number26 index25 alt1">26</div><div class=3D"line number27 index26 alt2">=
27</div><div class=3D"line number28 index27 alt1">28</div><div class=3D"lin=
e number29 index28 alt2">29</div><div class=3D"line number30 index29 alt1">=
30</div><div class=3D"line number31 index30 alt2">31</div><div class=3D"lin=
e number32 index31 alt1">32</div><div class=3D"line number33 index32 alt2">=
33</div><div class=3D"line number34 index33 alt1">34</div><div class=3D"lin=
e number35 index34 alt2">35</div><div class=3D"line number36 index35 alt1">=
36</div><div class=3D"line number37 index36 alt2">37</div><div class=3D"lin=
e number38 index37 alt1">38</div><div class=3D"line number39 index38 alt2">=
39</div><div class=3D"line number40 index39 alt1">40</div><div class=3D"lin=
e number41 index40 alt2">41</div><div class=3D"line number42 index41 alt1">=
42</div><div class=3D"line number43 index42 alt2">43</div><div class=3D"lin=
e number44 index43 alt1">44</div><div class=3D"line number45 index44 alt2">=
45</div></td><td class=3D"code"><div class=3D"container"><div class=3D"line=
 number1 index0 alt2"><code class=3D"js keyword">var</code> <code class=3D"=
js plain">myModule =3D {</code></div><div class=3D"line number2 index1 alt1=
">&nbsp;</div><div class=3D"line number3 index2 alt2"><code class=3D"js spa=
ces">&nbsp;&nbsp;</code><code class=3D"js plain">myProperty: </code><code c=
lass=3D"js string">"someValue"</code><code class=3D"js plain">,</code></div=
><div class=3D"line number4 index3 alt1">&nbsp;</div><div class=3D"line num=
ber5 index4 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=
=3D"js comments">// object literals can contain properties and methods.</co=
de></div><div class=3D"line number6 index5 alt1"><code class=3D"js spaces">=
&nbsp;&nbsp;</code><code class=3D"js comments">// e.g we can define a furth=
er object for module configuration:</code></div><div class=3D"line number7 =
index6 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js=
 plain">myConfig: {</code></div><div class=3D"line number8 index7 alt1"><co=
de class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js pla=
in">useCaching: </code><code class=3D"js keyword">true</code><code class=3D=
"js plain">,</code></div><div class=3D"line number9 index8 alt2"><code clas=
s=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">lan=
guage: </code><code class=3D"js string">"en"</code></div><div class=3D"line=
 number10 index9 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><code c=
lass=3D"js plain">},</code></div><div class=3D"line number11 index10 alt2">=
&nbsp;</div><div class=3D"line number12 index11 alt1"><code class=3D"js spa=
ces">&nbsp;&nbsp;</code><code class=3D"js comments">// a very basic method<=
/code></div><div class=3D"line number13 index12 alt2"><code class=3D"js spa=
ces">&nbsp;&nbsp;</code><code class=3D"js plain">saySomething: </code><code=
 class=3D"js keyword">function</code> <code class=3D"js plain">() {</code><=
/div><div class=3D"line number14 index13 alt1"><code class=3D"js spaces">&n=
bsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">console.log( </code><=
code class=3D"js string">"Where in the world is Paul Irish today?"</code> <=
code class=3D"js plain">);</code></div><div class=3D"line number15 index14 =
alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js plain"=
>},</code></div><div class=3D"line number16 index15 alt1">&nbsp;</div><div =
class=3D"line number17 index16 alt2"><code class=3D"js spaces">&nbsp;&nbsp;=
</code><code class=3D"js comments">// output a value based on the current c=
onfiguration</code></div><div class=3D"line number18 index17 alt1"><code cl=
ass=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js plain">reportMyConfi=
g: </code><code class=3D"js keyword">function</code> <code class=3D"js plai=
n">() {</code></div><div class=3D"line number19 index18 alt2"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">cons=
ole.log( </code><code class=3D"js string">"Caching is: "</code> <code class=
=3D"js plain">+ ( </code><code class=3D"js keyword">this</code><code class=
=3D"js plain">.myConfig.useCaching ? </code><code class=3D"js string">"enab=
led"</code> <code class=3D"js plain">: </code><code class=3D"js string">"di=
sabled"</code><code class=3D"js plain">) );</code></div><div class=3D"line =
number20 index19 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><code c=
lass=3D"js plain">},</code></div><div class=3D"line number21 index20 alt2">=
&nbsp;</div><div class=3D"line number22 index21 alt1"><code class=3D"js spa=
ces">&nbsp;&nbsp;</code><code class=3D"js comments">// override the current=
 configuration</code></div><div class=3D"line number23 index22 alt2"><code =
class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js plain">updateMyCon=
fig: </code><code class=3D"js keyword">function</code><code class=3D"js pla=
in">( newConfig ) {</code></div><div class=3D"line number24 index23 alt1">&=
nbsp;</div><div class=3D"line number25 index24 alt2"><code class=3D"js spac=
es">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">if</code> <co=
de class=3D"js plain">( </code><code class=3D"js keyword">typeof</code> <co=
de class=3D"js plain">newConfig =3D=3D=3D </code><code class=3D"js string">=
"object"</code> <code class=3D"js plain">) {</code></div><div class=3D"line=
 number26 index25 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;</code><code class=3D"js keyword">this</code><code class=3D"js p=
lain">.myConfig =3D newConfig;</code></div><div class=3D"line number27 inde=
x26 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</c=
ode><code class=3D"js plain">console.log( </code><code class=3D"js keyword"=
>this</code><code class=3D"js plain">.myConfig.language );</code></div><div=
 class=3D"line number28 index27 alt1"><code class=3D"js spaces">&nbsp;&nbsp=
;&nbsp;&nbsp;</code><code class=3D"js plain">}</code></div><div class=3D"li=
ne number29 index28 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><cod=
e class=3D"js plain">}</code></div><div class=3D"line number30 index29 alt1=
"><code class=3D"js plain">};</code></div><div class=3D"line number31 index=
30 alt2">&nbsp;</div><div class=3D"line number32 index31 alt1"><code class=
=3D"js comments">// Outputs: Where in the world is Paul Irish today?</code>=
</div><div class=3D"line number33 index32 alt2"><code class=3D"js plain">my=
Module.saySomething();</code></div><div class=3D"line number34 index33 alt1=
">&nbsp;</div><div class=3D"line number35 index34 alt2"><code class=3D"js c=
omments">// Outputs: Caching is: enabled</code></div><div class=3D"line num=
ber36 index35 alt1"><code class=3D"js plain">myModule.reportMyConfig();</co=
de></div><div class=3D"line number37 index36 alt2">&nbsp;</div><div class=
=3D"line number38 index37 alt1"><code class=3D"js comments">// Outputs: fr<=
/code></div><div class=3D"line number39 index38 alt2"><code class=3D"js pla=
in">myModule.updateMyConfig({</code></div><div class=3D"line number40 index=
39 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js pla=
in">language: </code><code class=3D"js string">"fr"</code><code class=3D"js=
 plain">,</code></div><div class=3D"line number41 index40 alt2"><code class=
=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js plain">useCaching: </co=
de><code class=3D"js keyword">false</code></div><div class=3D"line number42=
 index41 alt1"><code class=3D"js plain">});</code></div><div class=3D"line =
number43 index42 alt2">&nbsp;</div><div class=3D"line number44 index43 alt1=
"><code class=3D"js comments">// Outputs: Caching is: disabled</code></div>=
<div class=3D"line number45 index44 alt2"><code class=3D"js plain">myModule=
.reportMyConfig();</code></div></div></td></tr></tbody></table></div></div>
<p></p>

<p>Using object literals can assist in encapsulating and organizing your co=
de and Rebecca Murphey has previously written about this topic in <a href=
=3D"http://rmurphey.com/blog/2009/10/15/using-objects-to-organize-your-code=
/">depth</a> should you wish to read into object literals further.</p>

<p>That said, if we're opting for this technique, we may be equally as inte=
rested in the Module pattern. It still uses object literals but only as the=
 return value from a scoping function. </p>

<h3>The Module Pattern</h3>

<p>The Module pattern was originally defined as a way to provide both priva=
te and public encapsulation for classes in conventional software engineerin=
g.</p>

<p>
In JavaScript, the Module pattern is used to further <em>emulate</em> the c=
oncept of classes in such a way that we're able to include both public/priv=
ate methods and variables inside a single object, thus shielding particular=
 parts from the global scope. What this results in is a reduction in the li=
kelihood of our function names conflicting with other functions defined in =
additional scripts on the page.</p>

<h4>Privacy</h4>
<p>
The Module pattern encapsulates "privacy", state and organization using clo=
sures. It provides a way of wrapping a mix of public and private methods an=
d variables, protecting pieces from leaking into the global scope and accid=
entally colliding with another developer's interface. With this pattern, on=
ly a public API is returned, keeping everything else within the closure pri=
vate. </p>

<p>
This gives us a clean solution for shielding logic doing the heavy lifting =
whilst only exposing an interface we wish other parts of our application to=
 use. The pattern utilizes an immediately-invoked function expression (<a h=
ref=3D"http://benalman.com/news/2010/11/immediately-invoked-function-expres=
sion/">IIFE</a> - see the section on namespacing patterns for more on this)=
 where an object is returned. </p>

<p>
It should be noted that there isn't really an explicitly true sense of "pri=
vacy" inside JavaScript because unlike some traditional languages, it doesn=
't have access modifiers. Variables can't technically be declared as being =
public nor private and so we use function scope to simulate this concept. W=
ithin the Module pattern, variables or methods declared are only available =
inside the module itself thanks to closure. Variables or methods defined wi=
thin the returning object however are available to everyone.
</p>

<h4>History</h4>

<p>
From a historical perspective, the Module pattern was originally developed =
by a number of people including <a href=3D"http://groups.google.com/group/c=
omp.lang.javascript/msg/9f58bd11bd67d937">Richard Cornford</a> in 2003. It =
was later popularized by Douglas Crockford in his lectures. Another piece o=
f trivia is that if you've ever played with Yahoo's YUI library, some of it=
s features may appear quite familiar and the reason for this is that the Mo=
dule pattern was a strong influence for YUI when creating their components.
</p>

<h4>Examples</h4>

<p> Let's begin looking at an implementation of the Module pattern by creat=
ing a module which is self-contained.</p>
<p>
</p><div><div id=3D"highlighter_523297" class=3D"syntaxhighlighter  js acod=
ecode"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resou=
rces/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help h=
elp">?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D=
"0"><tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2"=
>1</div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line n=
umber3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><=
div class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 in=
dex5 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=
=3D"line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2=
">9</div><div class=3D"line number10 index9 alt1">10</div><div class=3D"lin=
e number11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">=
12</div><div class=3D"line number13 index12 alt2">13</div><div class=3D"lin=
e number14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">=
15</div><div class=3D"line number16 index15 alt1">16</div><div class=3D"lin=
e number17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">=
18</div><div class=3D"line number19 index18 alt2">19</div><div class=3D"lin=
e number20 index19 alt1">20</div><div class=3D"line number21 index20 alt2">=
21</div><div class=3D"line number22 index21 alt1">22</div><div class=3D"lin=
e number23 index22 alt2">23</div><div class=3D"line number24 index23 alt1">=
24</div><div class=3D"line number25 index24 alt2">25</div><div class=3D"lin=
e number26 index25 alt1">26</div></td><td class=3D"code"><div class=3D"cont=
ainer"><div class=3D"line number1 index0 alt2"><code class=3D"js keyword">v=
ar</code> <code class=3D"js plain">testModule =3D (</code><code class=3D"js=
 keyword">function</code> <code class=3D"js plain">() {</code></div><div cl=
ass=3D"line number2 index1 alt1">&nbsp;</div><div class=3D"line number3 ind=
ex2 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js ke=
yword">var</code> <code class=3D"js plain">counter =3D 0;</code></div><div =
class=3D"line number4 index3 alt1">&nbsp;</div><div class=3D"line number5 i=
ndex4 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js =
keyword">return</code> <code class=3D"js plain">{</code></div><div class=3D=
"line number6 index5 alt1">&nbsp;</div><div class=3D"line number7 index6 al=
t2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D=
"js plain">incrementCounter: </code><code class=3D"js keyword">function</co=
de> <code class=3D"js plain">() {</code></div><div class=3D"line number8 in=
dex7 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</=
code><code class=3D"js keyword">return</code> <code class=3D"js plain">coun=
ter++;</code></div><div class=3D"line number9 index8 alt2"><code class=3D"j=
s spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">},</code>=
</div><div class=3D"line number10 index9 alt1">&nbsp;</div><div class=3D"li=
ne number11 index10 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp=
;</code><code class=3D"js plain">resetCounter: </code><code class=3D"js key=
word">function</code> <code class=3D"js plain">() {</code></div><div class=
=3D"line number12 index11 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">console.log( </code><cod=
e class=3D"js string">"counter value prior to reset: "</code> <code class=
=3D"js plain">+ counter );</code></div><div class=3D"line number13 index12 =
alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>=
<code class=3D"js plain">counter =3D 0;</code></div><div class=3D"line numb=
er14 index13 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code=
><code class=3D"js plain">}</code></div><div class=3D"line number15 index14=
 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js plain=
">};</code></div><div class=3D"line number16 index15 alt1">&nbsp;</div><div=
 class=3D"line number17 index16 alt2"><code class=3D"js plain">})();</code>=
</div><div class=3D"line number18 index17 alt1">&nbsp;</div><div class=3D"l=
ine number19 index18 alt2"><code class=3D"js comments">// Usage:</code></di=
v><div class=3D"line number20 index19 alt1">&nbsp;</div><div class=3D"line =
number21 index20 alt2"><code class=3D"js comments">// Increment our counter=
</code></div><div class=3D"line number22 index21 alt1"><code class=3D"js pl=
ain">testModule.incrementCounter();</code></div><div class=3D"line number23=
 index22 alt2">&nbsp;</div><div class=3D"line number24 index23 alt1"><code =
class=3D"js comments">// Check the counter value and reset</code></div><div=
 class=3D"line number25 index24 alt2"><code class=3D"js comments">// Output=
s: counter value prior to reset: 1</code></div><div class=3D"line number26 =
index25 alt1"><code class=3D"js plain">testModule.resetCounter();</code></d=
iv></div></td></tr></tbody></table></div></div>
<p></p>

<p>Here, other parts of the code are unable to directly read the value of o=
ur <code>incrementCounter()</code> or <code>resetCounter()</code>. The coun=
ter variable is actually fully shielded from our global scope so it acts ju=
st like a private variable would - its existence is limited to within the m=
odule's closure so that the only code able to access its scope are our two =
functions. Our methods are effectively namespaced so in the test section of=
 our code, we need to prefix any calls with the name of the module (e.g. "t=
estModule").
</p>

<p>When working with the Module pattern, we may find it useful to define a =
simple template that we use for getting started with it. Here's one that co=
vers namespacing, public and private variables:
</p>
<p>
</p><div><div id=3D"highlighter_96555" class=3D"syntaxhighlighter  js acode=
code"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resour=
ces/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help he=
lp">?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"=
0"><tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">=
1</div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line nu=
mber3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><d=
iv class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 ind=
ex5 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=
=3D"line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2=
">9</div><div class=3D"line number10 index9 alt1">10</div><div class=3D"lin=
e number11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">=
12</div><div class=3D"line number13 index12 alt2">13</div><div class=3D"lin=
e number14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">=
15</div><div class=3D"line number16 index15 alt1">16</div><div class=3D"lin=
e number17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">=
18</div><div class=3D"line number19 index18 alt2">19</div><div class=3D"lin=
e number20 index19 alt1">20</div><div class=3D"line number21 index20 alt2">=
21</div><div class=3D"line number22 index21 alt1">22</div><div class=3D"lin=
e number23 index22 alt2">23</div><div class=3D"line number24 index23 alt1">=
24</div><div class=3D"line number25 index24 alt2">25</div><div class=3D"lin=
e number26 index25 alt1">26</div><div class=3D"line number27 index26 alt2">=
27</div><div class=3D"line number28 index27 alt1">28</div><div class=3D"lin=
e number29 index28 alt2">29</div><div class=3D"line number30 index29 alt1">=
30</div></td><td class=3D"code"><div class=3D"container"><div class=3D"line=
 number1 index0 alt2"><code class=3D"js keyword">var</code> <code class=3D"=
js plain">myNamespace =3D (</code><code class=3D"js keyword">function</code=
> <code class=3D"js plain">() {</code></div><div class=3D"line number2 inde=
x1 alt1">&nbsp;</div><div class=3D"line number3 index2 alt2"><code class=3D=
"js spaces">&nbsp;&nbsp;</code><code class=3D"js keyword">var</code> <code =
class=3D"js plain">myPrivateVar, myPrivateMethod;</code></div><div class=3D=
"line number4 index3 alt1">&nbsp;</div><div class=3D"line number5 index4 al=
t2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js comments=
">// A private counter variable</code></div><div class=3D"line number6 inde=
x5 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js pla=
in">myPrivateVar =3D 0;</code></div><div class=3D"line number7 index6 alt2"=
>&nbsp;</div><div class=3D"line number8 index7 alt1"><code class=3D"js spac=
es">&nbsp;&nbsp;</code><code class=3D"js comments">// A private function wh=
ich logs any arguments</code></div><div class=3D"line number9 index8 alt2">=
<code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js plain">myPri=
vateMethod =3D </code><code class=3D"js keyword">function</code><code class=
=3D"js plain">( foo ) {</code></div><div class=3D"line number10 index9 alt1=
"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><cod=
e class=3D"js plain">console.log( foo );</code></div><div class=3D"line num=
ber11 index10 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code clas=
s=3D"js plain">};</code></div><div class=3D"line number12 index11 alt1">&nb=
sp;</div><div class=3D"line number13 index12 alt2"><code class=3D"js spaces=
">&nbsp;&nbsp;</code><code class=3D"js keyword">return</code> <code class=
=3D"js plain">{</code></div><div class=3D"line number14 index13 alt1">&nbsp=
;</div><div class=3D"line number15 index14 alt2"><code class=3D"js spaces">=
&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// A public vari=
able</code></div><div class=3D"line number16 index15 alt1"><code class=3D"j=
s spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">myPublicV=
ar: </code><code class=3D"js string">"foo"</code><code class=3D"js plain">,=
</code></div><div class=3D"line number17 index16 alt2">&nbsp;</div><div cla=
ss=3D"line number18 index17 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nb=
sp;&nbsp;</code><code class=3D"js comments">// A public function utilizing =
privates</code></div><div class=3D"line number19 index18 alt2"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">myPu=
blicFunction: </code><code class=3D"js keyword">function</code><code class=
=3D"js plain">( bar ) {</code></div><div class=3D"line number20 index19 alt=
1">&nbsp;</div><div class=3D"line number21 index20 alt2"><code class=3D"js =
spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js commen=
ts">// Increment our private counter</code></div><div class=3D"line number2=
2 index21 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;</code><code class=3D"js plain">myPrivateVar++;</code></div><div class=
=3D"line number23 index22 alt2">&nbsp;</div><div class=3D"line number24 ind=
ex23 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</=
code><code class=3D"js comments">// Call our private method using bar</code=
></div><div class=3D"line number25 index24 alt2"><code class=3D"js spaces">=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">myPriva=
teMethod( bar );</code></div><div class=3D"line number26 index25 alt1">&nbs=
p;</div><div class=3D"line number27 index26 alt2"><code class=3D"js spaces"=
>&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">}</code></div><div=
 class=3D"line number28 index27 alt1"><code class=3D"js spaces">&nbsp;&nbsp=
;</code><code class=3D"js plain">};</code></div><div class=3D"line number29=
 index28 alt2">&nbsp;</div><div class=3D"line number30 index29 alt1"><code =
class=3D"js plain">})();</code></div></div></td></tr></tbody></table></div>=
</div>
<p></p>

<p>
Looking at another example, below we can see a shopping basket implemented =
using this pattern. The module itself is completely self-contained in a glo=
bal variable called <code>basketModule</code>. The <code>basket</code> arra=
y in the module is kept private and so other parts of our application are u=
nable to directly read it. It only exists with the module's closure and so =
the only methods able to access it are those with access to its scope (i.e.=
 <code>addItem()</code>, <code>getItemCount()</code> etc). </p>

<div><div id=3D"highlighter_515348" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</=
div><div class=3D"line number19 index18 alt2">19</div><div class=3D"line nu=
mber20 index19 alt1">20</div><div class=3D"line number21 index20 alt2">21</=
div><div class=3D"line number22 index21 alt1">22</div><div class=3D"line nu=
mber23 index22 alt2">23</div><div class=3D"line number24 index23 alt1">24</=
div><div class=3D"line number25 index24 alt2">25</div><div class=3D"line nu=
mber26 index25 alt1">26</div><div class=3D"line number27 index26 alt2">27</=
div><div class=3D"line number28 index27 alt1">28</div><div class=3D"line nu=
mber29 index28 alt2">29</div><div class=3D"line number30 index29 alt1">30</=
div><div class=3D"line number31 index30 alt2">31</div><div class=3D"line nu=
mber32 index31 alt1">32</div><div class=3D"line number33 index32 alt2">33</=
div><div class=3D"line number34 index33 alt1">34</div><div class=3D"line nu=
mber35 index34 alt2">35</div><div class=3D"line number36 index35 alt1">36</=
div><div class=3D"line number37 index36 alt2">37</div><div class=3D"line nu=
mber38 index37 alt1">38</div><div class=3D"line number39 index38 alt2">39</=
div><div class=3D"line number40 index39 alt1">40</div><div class=3D"line nu=
mber41 index40 alt2">41</div><div class=3D"line number42 index41 alt1">42</=
div><div class=3D"line number43 index42 alt2">43</div><div class=3D"line nu=
mber44 index43 alt1">44</div></td><td class=3D"code"><div class=3D"containe=
r"><div class=3D"line number1 index0 alt2"><code class=3D"js keyword">var</=
code> <code class=3D"js plain">basketModule =3D (</code><code class=3D"js k=
eyword">function</code> <code class=3D"js plain">() {</code></div><div clas=
s=3D"line number2 index1 alt1">&nbsp;</div><div class=3D"line number3 index=
2 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js comm=
ents">// privates</code></div><div class=3D"line number4 index3 alt1">&nbsp=
;</div><div class=3D"line number5 index4 alt2"><code class=3D"js spaces">&n=
bsp;&nbsp;</code><code class=3D"js keyword">var</code> <code class=3D"js pl=
ain">basket =3D [];</code></div><div class=3D"line number6 index5 alt1">&nb=
sp;</div><div class=3D"line number7 index6 alt2"><code class=3D"js spaces">=
&nbsp;&nbsp;</code><code class=3D"js keyword">function</code> <code class=
=3D"js plain">doSomethingPrivate() {</code></div><div class=3D"line number8=
 index7 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><cod=
e class=3D"js comments">//...</code></div><div class=3D"line number9 index8=
 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js plain=
">}</code></div><div class=3D"line number10 index9 alt1">&nbsp;</div><div c=
lass=3D"line number11 index10 alt2"><code class=3D"js spaces">&nbsp;&nbsp;<=
/code><code class=3D"js keyword">function</code> <code class=3D"js plain">d=
oSomethingElsePrivate() {</code></div><div class=3D"line number12 index11 a=
lt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js comments">//...</code></div><div class=3D"line number13 index12 alt2=
"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js plain">}</=
code></div><div class=3D"line number14 index13 alt1">&nbsp;</div><div class=
=3D"line number15 index14 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</cod=
e><code class=3D"js comments">// Return an object exposed to the public</co=
de></div><div class=3D"line number16 index15 alt1"><code class=3D"js spaces=
">&nbsp;&nbsp;</code><code class=3D"js keyword">return</code> <code class=
=3D"js plain">{</code></div><div class=3D"line number17 index16 alt2">&nbsp=
;</div><div class=3D"line number18 index17 alt1"><code class=3D"js spaces">=
&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// Add items to =
our basket</code></div><div class=3D"line number19 index18 alt2"><code clas=
s=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">add=
Item: </code><code class=3D"js keyword">function</code><code class=3D"js pl=
ain">( values ) {</code></div><div class=3D"line number20 index19 alt1"><co=
de class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code cla=
ss=3D"js plain">basket.push(values);</code></div><div class=3D"line number2=
1 index20 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><c=
ode class=3D"js plain">},</code></div><div class=3D"line number22 index21 a=
lt1">&nbsp;</div><div class=3D"line number23 index22 alt2"><code class=3D"j=
s spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// Get=
 the count of items in the basket</code></div><div class=3D"line number24 i=
ndex23 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code=
 class=3D"js plain">getItemCount: </code><code class=3D"js keyword">functio=
n</code> <code class=3D"js plain">() {</code></div><div class=3D"line numbe=
r25 index24 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;</code><code class=3D"js keyword">return</code> <code class=3D"js plai=
n">basket.length;</code></div><div class=3D"line number26 index25 alt1"><co=
de class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js pla=
in">},</code></div><div class=3D"line number27 index26 alt2">&nbsp;</div><d=
iv class=3D"line number28 index27 alt1"><code class=3D"js spaces">&nbsp;&nb=
sp;&nbsp;&nbsp;</code><code class=3D"js comments">// Public alias to a priv=
ate function</code></div><div class=3D"line number29 index28 alt2"><code cl=
ass=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">d=
oSomething: doSomethingPrivate,</code></div><div class=3D"line number30 ind=
ex29 alt1">&nbsp;</div><div class=3D"line number31 index30 alt2"><code clas=
s=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">=
// Get the total value of items in the basket</code></div><div class=3D"lin=
e number32 index31 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;=
</code><code class=3D"js plain">getTotal: </code><code class=3D"js keyword"=
>function</code> <code class=3D"js plain">() {</code></div><div class=3D"li=
ne number33 index32 alt2">&nbsp;</div><div class=3D"line number34 index33 a=
lt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><=
code class=3D"js keyword">var</code> <code class=3D"js plain">q =3D </code>=
<code class=3D"js keyword">this</code><code class=3D"js plain">.getItemCoun=
t(),</code></div><div class=3D"line number35 index34 alt2"><code class=3D"j=
s spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</cod=
e><code class=3D"js plain">p =3D 0;</code></div><div class=3D"line number36=
 index35 alt1">&nbsp;</div><div class=3D"line number37 index36 alt2"><code =
class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js keyword">while</code> <code class=3D"js plain">(q--) {</code></div><=
div class=3D"line number38 index37 alt1"><code class=3D"js spaces">&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">p +=
=3D basket[q].price;</code></div><div class=3D"line number39 index38 alt2">=
<code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code =
class=3D"js plain">}</code></div><div class=3D"line number40 index39 alt1">=
&nbsp;</div><div class=3D"line number41 index40 alt2"><code class=3D"js spa=
ces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">=
return</code> <code class=3D"js plain">p;</code></div><div class=3D"line nu=
mber42 index41 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</co=
de><code class=3D"js plain">}</code></div><div class=3D"line number43 index=
42 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js pla=
in">};</code></div><div class=3D"line number44 index43 alt1"><code class=3D=
"js plain">})();</code></div></div></td></tr></tbody></table></div></div>

<p>
Inside the module, you may have noticed that we return an <code>object</cod=
e>. This gets automatically assigned to <code>basketModule</code> so that w=
e can interact with it as follows:
</p>
<div><div id=3D"highlighter_232629" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</=
div><div class=3D"line number19 index18 alt2">19</div><div class=3D"line nu=
mber20 index19 alt1">20</div><div class=3D"line number21 index20 alt2">21</=
div><div class=3D"line number22 index21 alt1">22</div><div class=3D"line nu=
mber23 index22 alt2">23</div><div class=3D"line number24 index23 alt1">24</=
div><div class=3D"line number25 index24 alt2">25</div><div class=3D"line nu=
mber26 index25 alt1">26</div><div class=3D"line number27 index26 alt2">27</=
div><div class=3D"line number28 index27 alt1">28</div></td><td class=3D"cod=
e"><div class=3D"container"><div class=3D"line number1 index0 alt2"><code c=
lass=3D"js comments">// basketModule returns an object with a public API we=
 can use</code></div><div class=3D"line number2 index1 alt1">&nbsp;</div><d=
iv class=3D"line number3 index2 alt2"><code class=3D"js plain">basketModule=
.addItem({</code></div><div class=3D"line number4 index3 alt1"><code class=
=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js plain">item: </code><co=
de class=3D"js string">"bread"</code><code class=3D"js plain">,</code></div=
><div class=3D"line number5 index4 alt2"><code class=3D"js spaces">&nbsp;&n=
bsp;</code><code class=3D"js plain">price: 0.5</code></div><div class=3D"li=
ne number6 index5 alt1"><code class=3D"js plain">});</code></div><div class=
=3D"line number7 index6 alt2">&nbsp;</div><div class=3D"line number8 index7=
 alt1"><code class=3D"js plain">basketModule.addItem({</code></div><div cla=
ss=3D"line number9 index8 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</cod=
e><code class=3D"js plain">item: </code><code class=3D"js string">"butter"<=
/code><code class=3D"js plain">,</code></div><div class=3D"line number10 in=
dex9 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js p=
lain">price: 0.3</code></div><div class=3D"line number11 index10 alt2"><cod=
e class=3D"js plain">});</code></div><div class=3D"line number12 index11 al=
t1">&nbsp;</div><div class=3D"line number13 index12 alt2"><code class=3D"js=
 comments">// Outputs: 2</code></div><div class=3D"line number14 index13 al=
t1"><code class=3D"js plain">console.log( basketModule.getItemCount() );</c=
ode></div><div class=3D"line number15 index14 alt2">&nbsp;</div><div class=
=3D"line number16 index15 alt1"><code class=3D"js comments">// Outputs: 0.8=
</code></div><div class=3D"line number17 index16 alt2"><code class=3D"js pl=
ain">console.log( basketModule.getTotal() );</code></div><div class=3D"line=
 number18 index17 alt1">&nbsp;</div><div class=3D"line number19 index18 alt=
2"><code class=3D"js comments">// However, the following will not work:</co=
de></div><div class=3D"line number20 index19 alt1">&nbsp;</div><div class=
=3D"line number21 index20 alt2"><code class=3D"js comments">// Outputs: und=
efined</code></div><div class=3D"line number22 index21 alt1"><code class=3D=
"js comments">// This is because the basket itself is not exposed as a part=
 of our</code></div><div class=3D"line number23 index22 alt2"><code class=
=3D"js comments">// public API</code></div><div class=3D"line number24 inde=
x23 alt1"><code class=3D"js plain">console.log( basketModule.basket );</cod=
e></div><div class=3D"line number25 index24 alt2">&nbsp;</div><div class=3D=
"line number26 index25 alt1"><code class=3D"js comments">// This also won't=
 work as it only exists within the scope of our</code></div><div class=3D"l=
ine number27 index26 alt2"><code class=3D"js comments">// basketModule clos=
ure, but not in the returned public object</code></div><div class=3D"line n=
umber28 index27 alt1"><code class=3D"js plain">console.log( basket );</code=
></div></div></td></tr></tbody></table></div></div>
<p>
The methods above are effectively namespaced inside <code>basketModule</cod=
e>.</p>

<p>Notice how the scoping function in the above basket module is wrapped ar=
ound all of our functions, which we then call and immediately store the ret=
urn value of. This has a number of advantages including:</p>

<ul>
  <li>The freedom to have private functions and private members which can o=
nly be consumed by our module. As they aren't exposed to the rest of the pa=
ge (only our exported API is), they're considered truly private.</li>
  <li>Given that functions are declared normally and are named, it can be e=
asier to show call stacks in a debugger when we're attempting to discover w=
hat function(s) threw an exception.</li>
  <li>As T.J Crowder has pointed out in the past, it also enables us to ret=
urn different functions depending on the environment. In the past, I've see=
n developers use this to perform UA testing in order to provide a code-path=
 in their module specific to IE, but we can easily opt for feature detectio=
n these days to achieve a similar goal.</li>
</ul>
<p>&nbsp;</p>




<h4>Module Pattern Variations</h4>

<strong>Import mixins</strong>
<p>This variation of the pattern demonstrates how globals (e.g jQuery, Unde=
rscore) can be passed in as arguments to our module's anonymous function. T=
his effectively allows us to <em>import</em> them and locally alias them as=
 we wish.</p>

<div><div id=3D"highlighter_151546" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</=
div><div class=3D"line number19 index18 alt2">19</div><div class=3D"line nu=
mber20 index19 alt1">20</div><div class=3D"line number21 index20 alt2">21</=
div></td><td class=3D"code"><div class=3D"container"><div class=3D"line num=
ber1 index0 alt2"><code class=3D"js comments">// Global module</code></div>=
<div class=3D"line number2 index1 alt1"><code class=3D"js keyword">var</cod=
e> <code class=3D"js plain">myModule =3D (</code><code class=3D"js keyword"=
>function</code> <code class=3D"js plain">( jQ, _ ) {</code></div><div clas=
s=3D"line number3 index2 alt2">&nbsp;</div><div class=3D"line number4 index=
3 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code clas=
s=3D"js keyword">function</code> <code class=3D"js plain">privateMethod1(){=
</code></div><div class=3D"line number5 index4 alt2"><code class=3D"js spac=
es">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"j=
s plain">jQ(</code><code class=3D"js string">".container"</code><code class=
=3D"js plain">).html(</code><code class=3D"js string">"test"</code><code cl=
ass=3D"js plain">);</code></div><div class=3D"line number6 index5 alt1"><co=
de class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js pla=
in">}</code></div><div class=3D"line number7 index6 alt2">&nbsp;</div><div =
class=3D"line number8 index7 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&n=
bsp;&nbsp;</code><code class=3D"js keyword">function</code> <code class=3D"=
js plain">privateMethod2(){</code></div><div class=3D"line number9 index8 a=
lt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><=
code class=3D"js plain">console.log( _.min([10, 5, 100, 2, 1000]) );</code>=
</div><div class=3D"line number10 index9 alt1"><code class=3D"js spaces">&n=
bsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">}</code></div><div cl=
ass=3D"line number11 index10 alt2">&nbsp;</div><div class=3D"line number12 =
index11 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><cod=
e class=3D"js keyword">return</code><code class=3D"js plain">{</code></div>=
<div class=3D"line number13 index12 alt2"><code class=3D"js spaces">&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">pu=
blicMethod: </code><code class=3D"js keyword">function</code><code class=3D=
"js plain">(){</code></div><div class=3D"line number14 index13 alt1"><code =
class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">privateMethod1();</code></=
div><div class=3D"line number15 index14 alt2"><code class=3D"js spaces">&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain=
">}</code></div><div class=3D"line number16 index15 alt1"><code class=3D"js=
 spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">};</code><=
/div><div class=3D"line number17 index16 alt2">&nbsp;</div><div class=3D"li=
ne number18 index17 alt1"><code class=3D"js comments">// Pull in jQuery and=
 Underscore</code></div><div class=3D"line number19 index18 alt2"><code cla=
ss=3D"js plain">})( jQuery, _ );</code></div><div class=3D"line number20 in=
dex19 alt1">&nbsp;</div><div class=3D"line number21 index20 alt2"><code cla=
ss=3D"js plain">myModule.publicMethod();</code></div></div></td></tr></tbod=
y></table></div></div>

<strong>Exports</strong>
<p>This next variation allows us to declare globals without consuming them =
and could similarly support the concept of global imports seen in the last =
example.</p>

<div><div id=3D"highlighter_172425" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</=
div><div class=3D"line number19 index18 alt2">19</div></td><td class=3D"cod=
e"><div class=3D"container"><div class=3D"line number1 index0 alt2"><code c=
lass=3D"js comments">// Global module</code></div><div class=3D"line number=
2 index1 alt1"><code class=3D"js keyword">var</code> <code class=3D"js plai=
n">myModule =3D (</code><code class=3D"js keyword">function</code> <code cl=
ass=3D"js plain">() {</code></div><div class=3D"line number3 index2 alt2">&=
nbsp;</div><div class=3D"line number4 index3 alt1"><code class=3D"js spaces=
">&nbsp;&nbsp;</code><code class=3D"js comments">// Module object</code></d=
iv><div class=3D"line number5 index4 alt2"><code class=3D"js spaces">&nbsp;=
&nbsp;</code><code class=3D"js keyword">var</code> <code class=3D"js plain"=
>module =3D {},</code></div><div class=3D"line number6 index5 alt1"><code c=
lass=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">=
privateVariable =3D </code><code class=3D"js string">"Hello World"</code><c=
ode class=3D"js plain">;</code></div><div class=3D"line number7 index6 alt2=
">&nbsp;</div><div class=3D"line number8 index7 alt1"><code class=3D"js spa=
ces">&nbsp;&nbsp;</code><code class=3D"js keyword">function</code> <code cl=
ass=3D"js plain">privateMethod() {</code></div><div class=3D"line number9 i=
ndex8 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code =
class=3D"js comments">// ...</code></div><div class=3D"line number10 index9=
 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js plain=
">}</code></div><div class=3D"line number11 index10 alt2">&nbsp;</div><div =
class=3D"line number12 index11 alt1"><code class=3D"js spaces">&nbsp;&nbsp;=
</code><code class=3D"js plain">module.publicProperty =3D </code><code clas=
s=3D"js string">"Foobar"</code><code class=3D"js plain">;</code></div><div =
class=3D"line number13 index12 alt2"><code class=3D"js spaces">&nbsp;&nbsp;=
</code><code class=3D"js plain">module.publicMethod =3D </code><code class=
=3D"js keyword">function</code> <code class=3D"js plain">() {</code></div><=
div class=3D"line number14 index13 alt1"><code class=3D"js spaces">&nbsp;&n=
bsp;&nbsp;&nbsp;</code><code class=3D"js plain">console.log( privateVariabl=
e );</code></div><div class=3D"line number15 index14 alt2"><code class=3D"j=
s spaces">&nbsp;&nbsp;</code><code class=3D"js plain">};</code></div><div c=
lass=3D"line number16 index15 alt1">&nbsp;</div><div class=3D"line number17=
 index16 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"=
js keyword">return</code> <code class=3D"js plain">module;</code></div><div=
 class=3D"line number18 index17 alt1">&nbsp;</div><div class=3D"line number=
19 index18 alt2"><code class=3D"js plain">})();</code></div></div></td></tr=
></tbody></table></div></div>


<h4>
Toolkit And Framework-specific Module Pattern Implementations
</h4>
<p>
<strong>Dojo</strong>
</p><p>
Dojo provides a convenience method for working with objects called <code>do=
jo.setObject()</code>. This takes as its first argument a dot-separated str=
ing such as <code>myObj.parent.child</code> which refers to a property call=
ed "child" within an object "parent" defined inside "myObj". Using <code>se=
tObject()</code> allows us to set the value of children, creating any of th=
e intermediate objects in the rest of the path passed if they don't already=
 exist.</p>

<p>For example, if we wanted to declare <code>basket.core</code> as an obje=
ct of the <code>store</code> namespace, this could be achieved as follows u=
sing the traditional way:
</p><div><div id=3D"highlighter_245631" class=3D"syntaxhighlighter  js acod=
ecode"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resou=
rces/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help h=
elp">?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D=
"0"><tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2"=
>1</div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line n=
umber3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><=
div class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 in=
dex5 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=
=3D"line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2=
">9</div><div class=3D"line number10 index9 alt1">10</div><div class=3D"lin=
e number11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">=
12</div><div class=3D"line number13 index12 alt2">13</div></td><td class=3D=
"code"><div class=3D"container"><div class=3D"line number1 index0 alt2"><co=
de class=3D"js keyword">var</code> <code class=3D"js plain">store =3D windo=
w.store || {};</code></div><div class=3D"line number2 index1 alt1">&nbsp;</=
div><div class=3D"line number3 index2 alt2"><code class=3D"js keyword">if</=
code> <code class=3D"js plain">( !store[</code><code class=3D"js string">"b=
asket"</code><code class=3D"js plain">] ) {</code></div><div class=3D"line =
number4 index3 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><code cla=
ss=3D"js plain">store.basket =3D {};</code></div><div class=3D"line number5=
 index4 alt2"><code class=3D"js plain">}</code></div><div class=3D"line num=
ber6 index5 alt1">&nbsp;</div><div class=3D"line number7 index6 alt2"><code=
 class=3D"js keyword">if</code> <code class=3D"js plain">( !store.basket[</=
code><code class=3D"js string">"core"</code><code class=3D"js plain">] ) {<=
/code></div><div class=3D"line number8 index7 alt1"><code class=3D"js space=
s">&nbsp;&nbsp;</code><code class=3D"js plain">store.basket.core =3D {};</c=
ode></div><div class=3D"line number9 index8 alt2"><code class=3D"js plain">=
}</code></div><div class=3D"line number10 index9 alt1">&nbsp;</div><div cla=
ss=3D"line number11 index10 alt2"><code class=3D"js plain">store.basket.cor=
e =3D {</code></div><div class=3D"line number12 index11 alt1"><code class=
=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js comments">// ...rest of=
 our logic</code></div><div class=3D"line number13 index12 alt2"><code clas=
s=3D"js plain">};</code></div></div></td></tr></tbody></table></div></div>
<p></p>
<p>Or as follows using Dojo 1.7 (AMD-compatible version) and above:</p>
<div><div id=3D"highlighter_521604" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</=
div><div class=3D"line number19 index18 alt2">19</div><div class=3D"line nu=
mber20 index19 alt1">20</div></td><td class=3D"code"><div class=3D"containe=
r"><div class=3D"line number1 index0 alt2"><code class=3D"js plain">require=
([</code><code class=3D"js string">"dojo/_base/customStore"</code><code cla=
ss=3D"js plain">], </code><code class=3D"js keyword">function</code><code c=
lass=3D"js plain">( store ){</code></div><div class=3D"line number2 index1 =
alt1">&nbsp;</div><div class=3D"line number3 index2 alt2"><code class=3D"js=
 spaces">&nbsp;&nbsp;</code><code class=3D"js comments">// using dojo.setOb=
ject()</code></div><div class=3D"line number4 index3 alt1"><code class=3D"j=
s spaces">&nbsp;&nbsp;</code><code class=3D"js plain">store.setObject( </co=
de><code class=3D"js string">"basket.core"</code><code class=3D"js plain">,=
 (</code><code class=3D"js keyword">function</code><code class=3D"js plain"=
>() {</code></div><div class=3D"line number5 index4 alt2">&nbsp;</div><div =
class=3D"line number6 index5 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">var</code> <code cl=
ass=3D"js plain">basket =3D [];</code></div><div class=3D"line number7 inde=
x6 alt2">&nbsp;</div><div class=3D"line number8 index7 alt1"><code class=3D=
"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js ke=
yword">function</code> <code class=3D"js plain">privateMethod() {</code></d=
iv><div class=3D"line number9 index8 alt2"><code class=3D"js spaces">&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D=
"js plain">console.log(basket);</code></div><div class=3D"line number10 ind=
ex9 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</c=
ode><code class=3D"js plain">}</code></div><div class=3D"line number11 inde=
x10 alt2">&nbsp;</div><div class=3D"line number12 index11 alt1"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js=
 keyword">return</code> <code class=3D"js plain">{</code></div><div class=
=3D"line number13 index12 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">=
publicMethod: </code><code class=3D"js keyword">function</code><code class=
=3D"js plain">(){</code></div><div class=3D"line number14 index13 alt1"><co=
de class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js plain">privateMethod();</code></div><div class=3D"line number15 inde=
x14 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">}</code></div><div cla=
ss=3D"line number16 index15 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">};</code></div><div cl=
ass=3D"line number17 index16 alt2">&nbsp;</div><div class=3D"line number18 =
index17 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"j=
s plain">})());</code></div><div class=3D"line number19 index18 alt2">&nbsp=
;</div><div class=3D"line number20 index19 alt1"><code class=3D"js plain">}=
);</code></div></div></td></tr></tbody></table></div></div>

<p>For more information on <code>dojo.setObject()</code>, see the official =
<a href=3D"http://dojotoolkit.org/reference-guide/1.7/dojo/setObject.html">=
documentation</a>.</p>

<p><strong>ExtJS</strong></p>
<p>For those using Sencha's ExtJS, an example demonstrating how to correctl=
y use the Module pattern with the framework can be found below.</p>

<p>Here, we see an example of how to define a namespace which can then be p=
opulated with a module containing both a private and public API. With the e=
xception of some semantic differences, it's quite close to how the Module p=
attern is implemented in vanilla JavaScript: </p>
<div><div id=3D"highlighter_7467" class=3D"syntaxhighlighter  js acodecode"=
><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources/e=
ssentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help">?=
</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0"><t=
body><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</di=
v><div class=3D"line number2 index1 alt1">2</div><div class=3D"line number3=
 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div cl=
ass=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5 a=
lt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"li=
ne number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9</d=
iv><div class=3D"line number10 index9 alt1">10</div><div class=3D"line numb=
er11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</di=
v><div class=3D"line number13 index12 alt2">13</div><div class=3D"line numb=
er14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</di=
v><div class=3D"line number16 index15 alt1">16</div><div class=3D"line numb=
er17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</di=
v><div class=3D"line number19 index18 alt2">19</div><div class=3D"line numb=
er20 index19 alt1">20</div><div class=3D"line number21 index20 alt2">21</di=
v><div class=3D"line number22 index21 alt1">22</div><div class=3D"line numb=
er23 index22 alt2">23</div><div class=3D"line number24 index23 alt1">24</di=
v><div class=3D"line number25 index24 alt2">25</div><div class=3D"line numb=
er26 index25 alt1">26</div><div class=3D"line number27 index26 alt2">27</di=
v><div class=3D"line number28 index27 alt1">28</div><div class=3D"line numb=
er29 index28 alt2">29</div><div class=3D"line number30 index29 alt1">30</di=
v><div class=3D"line number31 index30 alt2">31</div><div class=3D"line numb=
er32 index31 alt1">32</div><div class=3D"line number33 index32 alt2">33</di=
v><div class=3D"line number34 index33 alt1">34</div><div class=3D"line numb=
er35 index34 alt2">35</div><div class=3D"line number36 index35 alt1">36</di=
v><div class=3D"line number37 index36 alt2">37</div><div class=3D"line numb=
er38 index37 alt1">38</div><div class=3D"line number39 index38 alt2">39</di=
v><div class=3D"line number40 index39 alt1">40</div><div class=3D"line numb=
er41 index40 alt2">41</div><div class=3D"line number42 index41 alt1">42</di=
v><div class=3D"line number43 index42 alt2">43</div><div class=3D"line numb=
er44 index43 alt1">44</div><div class=3D"line number45 index44 alt2">45</di=
v></td><td class=3D"code"><div class=3D"container"><div class=3D"line numbe=
r1 index0 alt2"><code class=3D"js comments">// create namespace</code></div=
><div class=3D"line number2 index1 alt1"><code class=3D"js plain">Ext.names=
pace(</code><code class=3D"js string">"myNameSpace"</code><code class=3D"js=
 plain">);</code></div><div class=3D"line number3 index2 alt2">&nbsp;</div>=
<div class=3D"line number4 index3 alt1"><code class=3D"js comments">// crea=
te application</code></div><div class=3D"line number5 index4 alt2"><code cl=
ass=3D"js plain">myNameSpace.app =3D </code><code class=3D"js keyword">func=
tion</code> <code class=3D"js plain">() {</code></div><div class=3D"line nu=
mber6 index5 alt1">&nbsp;</div><div class=3D"line number7 index6 alt2"><cod=
e class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js comments">// do =
NOT access DOM from here; elements don't exist yet</code></div><div class=
=3D"line number8 index7 alt1">&nbsp;</div><div class=3D"line number9 index8=
 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js comme=
nts">// private variables</code></div><div class=3D"line number10 index9 al=
t1"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js keyword"=
>var</code> <code class=3D"js plain">btn1,</code></div><div class=3D"line n=
umber11 index10 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;</code><code class=3D"js plain">privVar1 =3D 11;</code></div><div =
class=3D"line number12 index11 alt1">&nbsp;</div><div class=3D"line number1=
3 index12 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D=
"js comments">// private functions</code></div><div class=3D"line number14 =
index13 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"j=
s keyword">var</code> <code class=3D"js plain">btn1Handler =3D </code><code=
 class=3D"js keyword">function</code> <code class=3D"js plain">( button, ev=
ent ) {</code></div><div class=3D"line number15 index14 alt2"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js=
 plain">console.log( </code><code class=3D"js string">"privVar1=3D"</code> =
<code class=3D"js plain">+ privVar1 );</code></div><div class=3D"line numbe=
r16 index15 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;</code><code class=3D"js plain">console.log( </code><code class=3D"js =
string">"this.btn1Text=3D"</code> <code class=3D"js plain">+ </code><code c=
lass=3D"js keyword">this</code><code class=3D"js plain">.btn1Text );</code>=
</div><div class=3D"line number17 index16 alt2"><code class=3D"js spaces">&=
nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">};</code></div><div =
class=3D"line number18 index17 alt1">&nbsp;</div><div class=3D"line number1=
9 index18 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D=
"js comments">// public space</code></div><div class=3D"line number20 index=
19 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js key=
word">return</code> <code class=3D"js plain">{</code></div><div class=3D"li=
ne number21 index20 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp=
;</code><code class=3D"js comments">// public properties, e.g. strings to t=
ranslate</code></div><div class=3D"line number22 index21 alt1"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">btn1=
Text: </code><code class=3D"js string">"Button 1"</code><code class=3D"js p=
lain">,</code></div><div class=3D"line number23 index22 alt2">&nbsp;</div><=
div class=3D"line number24 index23 alt1"><code class=3D"js spaces">&nbsp;&n=
bsp;&nbsp;&nbsp;</code><code class=3D"js comments">// public methods</code>=
</div><div class=3D"line number25 index24 alt2"><code class=3D"js spaces">&=
nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">init: </code><code c=
lass=3D"js keyword">function</code> <code class=3D"js plain">() {</code></d=
iv><div class=3D"line number26 index25 alt1">&nbsp;</div><div class=3D"line=
 number27 index26 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;</code><code class=3D"js keyword">if</code> <code class=3D"js pl=
ain">( Ext.Ext2 ) {</code></div><div class=3D"line number28 index27 alt1">&=
nbsp;</div><div class=3D"line number29 index28 alt2"><code class=3D"js spac=
es">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"j=
s plain">btn1 =3D </code><code class=3D"js keyword">new</code> <code class=
=3D"js plain">Ext.Button({</code></div><div class=3D"line number30 index29 =
alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">renderTo: </code><code cla=
ss=3D"js string">"btn1-ct"</code><code class=3D"js plain">,</code></div><di=
v class=3D"line number31 index30 alt2"><code class=3D"js spaces">&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js =
plain">text: </code><code class=3D"js keyword">this</code><code class=3D"js=
 plain">.btn1Text,</code></div><div class=3D"line number32 index31 alt1"><c=
ode class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;</code><code class=3D"js plain">handler: btn1Handler</code></div><=
div class=3D"line number33 index32 alt2"><code class=3D"js spaces">&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">});=
</code></div><div class=3D"line number34 index33 alt1">&nbsp;</div><div cla=
ss=3D"line number35 index34 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">} </code><code class=
=3D"js keyword">else</code> <code class=3D"js plain">{</code></div><div cla=
ss=3D"line number36 index35 alt1">&nbsp;</div><div class=3D"line number37 i=
ndex36 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;</code><code class=3D"js plain">btn1 =3D </code><code class=3D"=
js keyword">new</code> <code class=3D"js plain">Ext.Button( </code><code cl=
ass=3D"js string">"btn1-ct"</code><code class=3D"js plain">, {</code></div>=
<div class=3D"line number38 index37 alt1"><code class=3D"js spaces">&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"=
js plain">text: </code><code class=3D"js keyword">this</code><code class=3D=
"js plain">.btn1Text,</code></div><div class=3D"line number39 index38 alt2"=
><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;</code><code class=3D"js plain">handler: btn1Handler</code></di=
v><div class=3D"line number40 index39 alt1"><code class=3D"js spaces">&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">=
});</code></div><div class=3D"line number41 index40 alt2">&nbsp;</div><div =
class=3D"line number42 index41 alt1"><code class=3D"js spaces">&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">}</code></div><div =
class=3D"line number43 index42 alt2"><code class=3D"js spaces">&nbsp;&nbsp;=
&nbsp;&nbsp;</code><code class=3D"js plain">}</code></div><div class=3D"lin=
e number44 index43 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><code=
 class=3D"js plain">};</code></div><div class=3D"line number45 index44 alt2=
"><code class=3D"js plain">}();</code></div></div></td></tr></tbody></table=
></div></div>

<p>&nbsp;</p>
<p>
<strong>
YUI
</strong>
</p>
<p>
Similarly, we can also implement the Module pattern when building applicati=
ons using YUI3. The following example is heavily based on the original YUI =
Module pattern implementation by Eric Miraglia, but again, isn't vastly dif=
ferent from the vanilla JavaScript version:
</p>
<div><div id=3D"highlighter_974201" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</=
div><div class=3D"line number19 index18 alt2">19</div><div class=3D"line nu=
mber20 index19 alt1">20</div><div class=3D"line number21 index20 alt2">21</=
div><div class=3D"line number22 index21 alt1">22</div><div class=3D"line nu=
mber23 index22 alt2">23</div><div class=3D"line number24 index23 alt1">24</=
div><div class=3D"line number25 index24 alt2">25</div><div class=3D"line nu=
mber26 index25 alt1">26</div><div class=3D"line number27 index26 alt2">27</=
div><div class=3D"line number28 index27 alt1">28</div><div class=3D"line nu=
mber29 index28 alt2">29</div><div class=3D"line number30 index29 alt1">30</=
div></td><td class=3D"code"><div class=3D"container"><div class=3D"line num=
ber1 index0 alt2"><code class=3D"js plain">Y.namespace( </code><code class=
=3D"js string">"store.basket"</code> <code class=3D"js plain">) ;</code></d=
iv><div class=3D"line number2 index1 alt1"><code class=3D"js plain">Y.store=
.basket =3D (</code><code class=3D"js keyword">function</code> <code class=
=3D"js plain">() {</code></div><div class=3D"line number3 index2 alt2">&nbs=
p;</div><div class=3D"line number4 index3 alt1"><code class=3D"js spaces">&=
nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">var</code> <code c=
lass=3D"js plain">myPrivateVar, myPrivateMethod;</code></div><div class=3D"=
line number5 index4 alt2">&nbsp;</div><div class=3D"line number6 index5 alt=
1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"=
js comments">// private variables:</code></div><div class=3D"line number7 i=
ndex6 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code =
class=3D"js plain">myPrivateVar =3D </code><code class=3D"js string">"I can=
 be accessed only within Y.store.basket."</code><code class=3D"js plain">;<=
/code></div><div class=3D"line number8 index7 alt1">&nbsp;</div><div class=
=3D"line number9 index8 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&=
nbsp;</code><code class=3D"js comments">// private method:</code></div><div=
 class=3D"line number10 index9 alt1"><code class=3D"js spaces">&nbsp;&nbsp;=
&nbsp;&nbsp;</code><code class=3D"js plain">myPrivateMethod =3D </code><cod=
e class=3D"js keyword">function</code> <code class=3D"js plain">() {</code>=
</div><div class=3D"line number11 index10 alt2"><code class=3D"js spaces">&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js pla=
in">Y.log( </code><code class=3D"js string">"I can be accessed only from wi=
thin YAHOO.store.basket"</code> <code class=3D"js plain">);</code></div><di=
v class=3D"line number12 index11 alt1"><code class=3D"js spaces">&nbsp;&nbs=
p;&nbsp;&nbsp;</code><code class=3D"js plain">}</code></div><div class=3D"l=
ine number13 index12 alt2">&nbsp;</div><div class=3D"line number14 index13 =
alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js keyword">return</code> <code class=3D"js plain">{</code></div><div c=
lass=3D"line number15 index14 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">myPublic=
Property: </code><code class=3D"js string">"I'm a public property."</code><=
code class=3D"js plain">,</code></div><div class=3D"line number16 index15 a=
lt1">&nbsp;</div><div class=3D"line number17 index16 alt2"><code class=3D"j=
s spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code clas=
s=3D"js plain">myPublicMethod: </code><code class=3D"js keyword">function</=
code> <code class=3D"js plain">() {</code></div><div class=3D"line number18=
 index17 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">Y.log=
( </code><code class=3D"js string">"I'm a public method."</code> <code clas=
s=3D"js plain">);</code></div><div class=3D"line number19 index18 alt2">&nb=
sp;</div><div class=3D"line number20 index19 alt1"><code class=3D"js spaces=
">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<=
/code><code class=3D"js comments">// Within basket, I can access "private" =
vars and methods:</code></div><div class=3D"line number21 index20 alt2"><co=
de class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">Y.log( myPrivateVar );<=
/code></div><div class=3D"line number22 index21 alt1"><code class=3D"js spa=
ces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</code><code class=3D"js plain">Y.log( myPrivateMethod() );</code></div><=
div class=3D"line number23 index22 alt2">&nbsp;</div><div class=3D"line num=
ber24 index23 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comment=
s">// The native scope of myPublicMethod is store so we can</code></div><di=
v class=3D"line number25 index24 alt2"><code class=3D"js spaces">&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code =
class=3D"js comments">// access public members using "this":</code></div><d=
iv class=3D"line number26 index25 alt1"><code class=3D"js spaces">&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code=
 class=3D"js plain">Y.log( </code><code class=3D"js keyword">this</code><co=
de class=3D"js plain">.myPublicProperty );</code></div><div class=3D"line n=
umber27 index26 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">}</code></div><div cla=
ss=3D"line number28 index27 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nb=
sp;&nbsp;</code><code class=3D"js plain">};</code></div><div class=3D"line =
number29 index28 alt2">&nbsp;</div><div class=3D"line number30 index29 alt1=
"><code class=3D"js plain">})();</code></div></div></td></tr></tbody></tabl=
e></div></div>
<p>
<strong>
jQuery
</strong>
</p>
<p>
There are a number of ways in which jQuery code unspecific to plugins can b=
e wrapped inside the Module pattern. Ben Cherry previously suggested an imp=
lementation where a function wrapper is used around module definitions in t=
he event of there being a number of commonalities between modules. </p>
<p>
In the following example, a <code>library</code> function is defined which =
declares a new library and automatically binds up the <code>init</code> fun=
ction to <code>document.ready</code> when new libraries (i.e. modules) are =
created.</p>
<div><div id=3D"highlighter_160391" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</=
div><div class=3D"line number19 index18 alt2">19</div></td><td class=3D"cod=
e"><div class=3D"container"><div class=3D"line number1 index0 alt2"><code c=
lass=3D"js keyword">function</code> <code class=3D"js plain">library( modul=
e ) {</code></div><div class=3D"line number2 index1 alt1">&nbsp;</div><div =
class=3D"line number3 index2 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</=
code><code class=3D"js plain">$( </code><code class=3D"js keyword">function=
</code><code class=3D"js plain">() {</code></div><div class=3D"line number4=
 index3 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><cod=
e class=3D"js keyword">if</code> <code class=3D"js plain">( module.init ) {=
</code></div><div class=3D"line number5 index4 alt2"><code class=3D"js spac=
es">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">mod=
ule.init();</code></div><div class=3D"line number6 index5 alt1"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">}</c=
ode></div><div class=3D"line number7 index6 alt2"><code class=3D"js spaces"=
>&nbsp;&nbsp;</code><code class=3D"js plain">});</code></div><div class=3D"=
line number8 index7 alt1">&nbsp;</div><div class=3D"line number9 index8 alt=
2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js keyword">=
return</code> <code class=3D"js plain">module;</code></div><div class=3D"li=
ne number10 index9 alt1"><code class=3D"js plain">}</code></div><div class=
=3D"line number11 index10 alt2">&nbsp;</div><div class=3D"line number12 ind=
ex11 alt1"><code class=3D"js keyword">var</code> <code class=3D"js plain">m=
yLibrary =3D library(</code><code class=3D"js keyword">function</code> <cod=
e class=3D"js plain">() {</code></div><div class=3D"line number13 index12 a=
lt2">&nbsp;</div><div class=3D"line number14 index13 alt1"><code class=3D"j=
s spaces">&nbsp;&nbsp;</code><code class=3D"js keyword">return</code> <code=
 class=3D"js plain">{</code></div><div class=3D"line number15 index14 alt2"=
><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js=
 plain">init: </code><code class=3D"js keyword">function</code> <code class=
=3D"js plain">() {</code></div><div class=3D"line number16 index15 alt1"><c=
ode class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code cl=
ass=3D"js comments">// module implementation</code></div><div class=3D"line=
 number17 index16 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;<=
/code><code class=3D"js plain">}</code></div><div class=3D"line number18 in=
dex17 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js =
plain">};</code></div><div class=3D"line number19 index18 alt2"><code class=
=3D"js plain">}());</code></div></div></td></tr></tbody></table></div></div=
>

<h4>Advantages</h4>

<p>We've seen why the Constructor pattern can be useful, but why is the Mod=
ule pattern a good choice? For starters, it's a lot cleaner for developers =
coming from an object-oriented background than the idea of true encapsulati=
on, at least from a JavaScript perspective.</p>
<p>Secondly, it supports private data - so, in the Module pattern, public p=
arts of our code are able to touch the private parts, however the outside w=
orld is unable to touch the class's private parts (no laughing! Oh, and tha=
nks to David Engfer for the joke).</p>

<h4>Disadvantages</h4>

<p>The disadvantages of the Module pattern are that as we access both publi=
c and private members differently, when we wish to change visibility, we ac=
tually have to make changes to each place the member was used.</p>
<p>We also can't access private members in methods that are added to the ob=
ject at a later point. That said, in many cases the Module pattern is still=
 quite useful and when used correctly, certainly has the potential to impro=
ve the structure of our application.</p>
<p>Other disadvantages include the inability to create automated unit tests=
 for private members and additional complexity when bugs require hot fixes.=
 It's simply not possible to patch privates. Instead, one must override all=
 public methods which interact with the buggy privates. Developers can't ea=
sily extend privates either, so it's worth remembering privates are not as =
flexible as they may initially appear.</p>

<p>For further reading on the Module pattern, see Ben Cherry's excellent in=
-depth <a href=3D"http://www.adequatelygood.com/2010/3/JavaScript-Module-Pa=
ttern-In-Depth">article</a> on it.</p>

<p>&nbsp;</p>



<h2 id=3D"revealingmodulepatternjavascript">
  <a href=3D"https://addyosmani.com/resources/essentialjsdesignpatterns/boo=
k/#revealingmodulepatternjavascript" class=3D"subhead-link">#</a>
  The Revealing Module Pattern
</h2>

<p>Now that we're a little more familiar with the module pattern, let=E2=80=
=99s take a look at a slightly improved version - Christian Heilmann=E2=80=
=99s Revealing Module pattern.</p>

<p>The Revealing Module pattern came about as Heilmann was frustrated with =
the fact that he had to repeat the name of the main object when we wanted t=
o call one public method from another or access public variables.&nbsp; He =
also disliked the Module pattern=E2=80=99s requirement for having to switch=
 to object literal notation for the things he wished to make public. </p>

<p>The result of his efforts was an updated pattern where we would simply d=
efine all of our functions and variables in the private scope and return an=
 anonymous object with pointers to the private functionality we wished to r=
eveal as public.</p>

<p>An example of how to use the Revealing Module pattern can be found below=
:</p>
<p>
</p><div><div id=3D"highlighter_255950" class=3D"syntaxhighlighter  js acod=
ecode"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resou=
rces/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help h=
elp">?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D=
"0"><tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2"=
>1</div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line n=
umber3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><=
div class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 in=
dex5 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=
=3D"line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2=
">9</div><div class=3D"line number10 index9 alt1">10</div><div class=3D"lin=
e number11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">=
12</div><div class=3D"line number13 index12 alt2">13</div><div class=3D"lin=
e number14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">=
15</div><div class=3D"line number16 index15 alt1">16</div><div class=3D"lin=
e number17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">=
18</div><div class=3D"line number19 index18 alt2">19</div><div class=3D"lin=
e number20 index19 alt1">20</div><div class=3D"line number21 index20 alt2">=
21</div><div class=3D"line number22 index21 alt1">22</div><div class=3D"lin=
e number23 index22 alt2">23</div><div class=3D"line number24 index23 alt1">=
24</div><div class=3D"line number25 index24 alt2">25</div><div class=3D"lin=
e number26 index25 alt1">26</div><div class=3D"line number27 index26 alt2">=
27</div><div class=3D"line number28 index27 alt1">28</div><div class=3D"lin=
e number29 index28 alt2">29</div><div class=3D"line number30 index29 alt1">=
30</div></td><td class=3D"code"><div class=3D"container"><div class=3D"line=
 number1 index0 alt2"><code class=3D"js keyword">var</code> <code class=3D"=
js plain">myRevealingModule =3D (</code><code class=3D"js keyword">function=
</code> <code class=3D"js plain">() {</code></div><div class=3D"line number=
2 index1 alt1">&nbsp;</div><div class=3D"line number3 index2 alt2"><code cl=
ass=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><c=
ode class=3D"js keyword">var</code> <code class=3D"js plain">privateVar =3D=
 </code><code class=3D"js string">"Ben Cherry"</code><code class=3D"js plai=
n">,</code></div><div class=3D"line number4 index3 alt1"><code class=3D"js =
spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;</code><code class=3D"js plain">publicVar =3D </code><code class=3D"js=
 string">"Hey there!"</code><code class=3D"js plain">;</code></div><div cla=
ss=3D"line number5 index4 alt2">&nbsp;</div><div class=3D"line number6 inde=
x5 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;</code><code class=3D"js keyword">function</code> <code class=3D"js=
 plain">privateFunction() {</code></div><div class=3D"line number7 index6 a=
lt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">console.log( </=
code><code class=3D"js string">"Name:"</code> <code class=3D"js plain">+ pr=
ivateVar );</code></div><div class=3D"line number8 index7 alt1"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code=
 class=3D"js plain">}</code></div><div class=3D"line number9 index8 alt2">&=
nbsp;</div><div class=3D"line number10 index9 alt1"><code class=3D"js space=
s">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js=
 keyword">function</code> <code class=3D"js plain">publicSetName( strName )=
 {</code></div><div class=3D"line number11 index10 alt2"><code class=3D"js =
spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;</code><code class=3D"js plain">privateVar =3D strName;</code></div><d=
iv class=3D"line number12 index11 alt1"><code class=3D"js spaces">&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">}</c=
ode></div><div class=3D"line number13 index12 alt2">&nbsp;</div><div class=
=3D"line number14 index13 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">function</=
code> <code class=3D"js plain">publicGetName() {</code></div><div class=3D"=
line number15 index14 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js=
 plain">privateFunction();</code></div><div class=3D"line number16 index15 =
alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;</code><code class=3D"js plain">}</code></div><div class=3D"line numbe=
r17 index16 alt2">&nbsp;</div><div class=3D"line number18 index17 alt1">&nb=
sp;</div><div class=3D"line number19 index18 alt2"><code class=3D"js spaces=
">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js =
comments">// Reveal public pointers to</code></div><div class=3D"line numbe=
r20 index19 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// private functions an=
d properties</code></div><div class=3D"line number21 index20 alt2">&nbsp;</=
div><div class=3D"line number22 index21 alt1"><code class=3D"js spaces">&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keywo=
rd">return</code> <code class=3D"js plain">{</code></div><div class=3D"line=
 number23 index22 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js pla=
in">setName: publicSetName,</code></div><div class=3D"line number24 index23=
 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">greeting: pub=
licVar,</code></div><div class=3D"line number25 index24 alt2"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;</code><code class=3D"js plain">getName: publicGetName</code></=
div><div class=3D"line number26 index25 alt1"><code class=3D"js spaces">&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain=
">};</code></div><div class=3D"line number27 index26 alt2">&nbsp;</div><div=
 class=3D"line number28 index27 alt1"><code class=3D"js spaces">&nbsp;&nbsp=
;&nbsp;&nbsp;</code><code class=3D"js plain">})();</code></div><div class=
=3D"line number29 index28 alt2">&nbsp;</div><div class=3D"line number30 ind=
ex29 alt1"><code class=3D"js plain">myRevealingModule.setName( </code><code=
 class=3D"js string">"Paul Kinlan"</code> <code class=3D"js plain">);</code=
></div></div></td></tr></tbody></table></div></div><p></p>

<p>The pattern can also be used to reveal private functions and properties =
with a more specific naming scheme if we would prefer:</p>

<p></p><div><div id=3D"highlighter_720567" class=3D"syntaxhighlighter  js a=
codecode"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/re=
sources/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_hel=
p help">?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=
=3D"0"><tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 al=
t2">1</div><div class=3D"line number2 index1 alt1">2</div><div class=3D"lin=
e number3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</di=
v><div class=3D"line number5 index4 alt2">5</div><div class=3D"line number6=
 index5 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div cl=
ass=3D"line number8 index7 alt1">8</div><div class=3D"line number9 index8 a=
lt2">9</div><div class=3D"line number10 index9 alt1">10</div><div class=3D"=
line number11 index10 alt2">11</div><div class=3D"line number12 index11 alt=
1">12</div><div class=3D"line number13 index12 alt2">13</div><div class=3D"=
line number14 index13 alt1">14</div><div class=3D"line number15 index14 alt=
2">15</div><div class=3D"line number16 index15 alt1">16</div><div class=3D"=
line number17 index16 alt2">17</div><div class=3D"line number18 index17 alt=
1">18</div><div class=3D"line number19 index18 alt2">19</div><div class=3D"=
line number20 index19 alt1">20</div><div class=3D"line number21 index20 alt=
2">21</div><div class=3D"line number22 index21 alt1">22</div><div class=3D"=
line number23 index22 alt2">23</div><div class=3D"line number24 index23 alt=
1">24</div><div class=3D"line number25 index24 alt2">25</div><div class=3D"=
line number26 index25 alt1">26</div><div class=3D"line number27 index26 alt=
2">27</div><div class=3D"line number28 index27 alt1">28</div><div class=3D"=
line number29 index28 alt2">29</div><div class=3D"line number30 index29 alt=
1">30</div><div class=3D"line number31 index30 alt2">31</div><div class=3D"=
line number32 index31 alt1">32</div></td><td class=3D"code"><div class=3D"c=
ontainer"><div class=3D"line number1 index0 alt2"><code class=3D"js keyword=
">var</code> <code class=3D"js plain">myRevealingModule =3D (</code><code c=
lass=3D"js keyword">function</code> <code class=3D"js plain">() {</code></d=
iv><div class=3D"line number2 index1 alt1">&nbsp;</div><div class=3D"line n=
umber3 index2 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">var</code> <code class=
=3D"js plain">privateCounter =3D 0;</code></div><div class=3D"line number4 =
index3 alt1">&nbsp;</div><div class=3D"line number5 index4 alt2"><code clas=
s=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><cod=
e class=3D"js keyword">function</code> <code class=3D"js plain">privateFunc=
tion() {</code></div><div class=3D"line number6 index5 alt1"><code class=3D=
"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;</code><code class=3D"js plain">privateCounter++;</code></div><div=
 class=3D"line number7 index6 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">}</code>=
</div><div class=3D"line number8 index7 alt1">&nbsp;</div><div class=3D"lin=
e number9 index8 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">function</code> <co=
de class=3D"js plain">publicFunction() {</code></div><div class=3D"line num=
ber10 index9 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">p=
ublicIncrement();</code></div><div class=3D"line number11 index10 alt2"><co=
de class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</co=
de><code class=3D"js plain">}</code></div><div class=3D"line number12 index=
11 alt1">&nbsp;</div><div class=3D"line number13 index12 alt2"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code=
 class=3D"js keyword">function</code> <code class=3D"js plain">publicIncrem=
ent() {</code></div><div class=3D"line number14 index13 alt1"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;</code><code class=3D"js plain">privateFunction();</code></div>=
<div class=3D"line number15 index14 alt2"><code class=3D"js spaces">&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">}<=
/code></div><div class=3D"line number16 index15 alt1">&nbsp;</div><div clas=
s=3D"line number17 index16 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">function<=
/code> <code class=3D"js plain">publicGetCount(){</code></div><div class=3D=
"line number18 index17 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">r=
eturn</code> <code class=3D"js plain">privateCounter;</code></div><div clas=
s=3D"line number19 index18 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">}</code></d=
iv><div class=3D"line number20 index19 alt1">&nbsp;</div><div class=3D"line=
 number21 index20 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// Reveal public =
pointers to</code></div><div class=3D"line number22 index21 alt1"><code cla=
ss=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><co=
de class=3D"js comments">// private functions and properties</code></div><d=
iv class=3D"line number23 index22 alt2">&nbsp;</div><div class=3D"line numb=
er24 index23 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;</code><code class=3D"js keyword">return</code> <code class=3D"=
js plain">{</code></div><div class=3D"line number25 index24 alt2"><code cla=
ss=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;</code><code class=3D"js plain">start: publicFunction,</code>=
</div><div class=3D"line number26 index25 alt1"><code class=3D"js spaces">&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</co=
de><code class=3D"js plain">increment: publicIncrement,</code></div><div cl=
ass=3D"line number27 index26 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code clas=
s=3D"js plain">count: publicGetCount</code></div><div class=3D"line number2=
8 index27 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;</code><code class=3D"js plain">};</code></div><div class=3D=
"line number29 index28 alt2">&nbsp;</div><div class=3D"line number30 index2=
9 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code clas=
s=3D"js plain">})();</code></div><div class=3D"line number31 index30 alt2">=
&nbsp;</div><div class=3D"line number32 index31 alt1"><code class=3D"js pla=
in">myRevealingModule.start();</code></div></div></td></tr></tbody></table>=
</div></div><p></p>

<p><strong>Advantages</strong></p>

<p>This pattern allows the syntax of our scripts to be more consistent. It =
also makes it more clear at the end of the module which of our functions an=
d variables may be accessed publicly which eases readability.</p>

<p><strong>Disadvantages</strong></p>
<p>A disadvantage of this pattern is that if a private function refers to a=
 public function, that public function can't be overridden if a patch is ne=
cessary. This is because the private function will continue to refer to the=
 private implementation and the pattern doesn't apply to public members, on=
ly to functions.</p>
<p>Public object members which refer to private variables are also subject =
to the no-patch rule notes above.</p>

<p>As a result of this, modules created with the Revealing Module pattern m=
ay be more fragile than those created with the original Module pattern, so =
care should be taken during usage.</p>
<p>&nbsp;</p>



<h2 id=3D"singletonpatternjavascript">
  <a href=3D"https://addyosmani.com/resources/essentialjsdesignpatterns/boo=
k/#singletonpatternjavascript" class=3D"subhead-link">#</a>
  The Singleton Pattern
</h2>

<p>The Singleton pattern is thus known because it restricts instantiation o=
f a class to a single object. Classically, the Singleton pattern can be imp=
lemented by creating a class with a method that creates a new instance of t=
he class if one doesn't exist. In the event of an instance already existing=
, it simply returns a reference to that object.</p>

<p>Singletons differ from static <i>classes</i> (or objects) as we can dela=
y their initialization, generally because they require some information tha=
t may not be available during initialization time. They don't provide a way=
 for code that is unaware of a previous reference to them to easily retriev=
e them. This is because it is neither the object or "class" that's returned=
 by a Singleton, it's a structure. Think of how closured variables aren't a=
ctually closures - the function scope that provides the closure is the clos=
ure.</p>

<p>In JavaScript, Singletons serve as a shared resource namespace which iso=
late implementation code from the global namespace so as to provide a singl=
e point of access for functions.</p>

<p>We can implement a Singleton as follows:</p>

<div><div id=3D"highlighter_411916" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</=
div><div class=3D"line number19 index18 alt2">19</div><div class=3D"line nu=
mber20 index19 alt1">20</div><div class=3D"line number21 index20 alt2">21</=
div><div class=3D"line number22 index21 alt1">22</div><div class=3D"line nu=
mber23 index22 alt2">23</div><div class=3D"line number24 index23 alt1">24</=
div><div class=3D"line number25 index24 alt2">25</div><div class=3D"line nu=
mber26 index25 alt1">26</div><div class=3D"line number27 index26 alt2">27</=
div><div class=3D"line number28 index27 alt1">28</div><div class=3D"line nu=
mber29 index28 alt2">29</div><div class=3D"line number30 index29 alt1">30</=
div><div class=3D"line number31 index30 alt2">31</div><div class=3D"line nu=
mber32 index31 alt1">32</div><div class=3D"line number33 index32 alt2">33</=
div><div class=3D"line number34 index33 alt1">34</div><div class=3D"line nu=
mber35 index34 alt2">35</div><div class=3D"line number36 index35 alt1">36</=
div><div class=3D"line number37 index36 alt2">37</div><div class=3D"line nu=
mber38 index37 alt1">38</div><div class=3D"line number39 index38 alt2">39</=
div><div class=3D"line number40 index39 alt1">40</div><div class=3D"line nu=
mber41 index40 alt2">41</div><div class=3D"line number42 index41 alt1">42</=
div><div class=3D"line number43 index42 alt2">43</div><div class=3D"line nu=
mber44 index43 alt1">44</div><div class=3D"line number45 index44 alt2">45</=
div><div class=3D"line number46 index45 alt1">46</div><div class=3D"line nu=
mber47 index46 alt2">47</div><div class=3D"line number48 index47 alt1">48</=
div><div class=3D"line number49 index48 alt2">49</div><div class=3D"line nu=
mber50 index49 alt1">50</div><div class=3D"line number51 index50 alt2">51</=
div><div class=3D"line number52 index51 alt1">52</div><div class=3D"line nu=
mber53 index52 alt2">53</div><div class=3D"line number54 index53 alt1">54</=
div><div class=3D"line number55 index54 alt2">55</div><div class=3D"line nu=
mber56 index55 alt1">56</div><div class=3D"line number57 index56 alt2">57</=
div><div class=3D"line number58 index57 alt1">58</div><div class=3D"line nu=
mber59 index58 alt2">59</div><div class=3D"line number60 index59 alt1">60</=
div><div class=3D"line number61 index60 alt2">61</div><div class=3D"line nu=
mber62 index61 alt1">62</div><div class=3D"line number63 index62 alt2">63</=
div><div class=3D"line number64 index63 alt1">64</div><div class=3D"line nu=
mber65 index64 alt2">65</div><div class=3D"line number66 index65 alt1">66</=
div><div class=3D"line number67 index66 alt2">67</div><div class=3D"line nu=
mber68 index67 alt1">68</div><div class=3D"line number69 index68 alt2">69</=
div><div class=3D"line number70 index69 alt1">70</div><div class=3D"line nu=
mber71 index70 alt2">71</div><div class=3D"line number72 index71 alt1">72</=
div><div class=3D"line number73 index72 alt2">73</div><div class=3D"line nu=
mber74 index73 alt1">74</div><div class=3D"line number75 index74 alt2">75</=
div><div class=3D"line number76 index75 alt1">76</div><div class=3D"line nu=
mber77 index76 alt2">77</div><div class=3D"line number78 index77 alt1">78</=
div><div class=3D"line number79 index78 alt2">79</div><div class=3D"line nu=
mber80 index79 alt1">80</div><div class=3D"line number81 index80 alt2">81</=
div><div class=3D"line number82 index81 alt1">82</div><div class=3D"line nu=
mber83 index82 alt2">83</div><div class=3D"line number84 index83 alt1">84</=
div><div class=3D"line number85 index84 alt2">85</div><div class=3D"line nu=
mber86 index85 alt1">86</div><div class=3D"line number87 index86 alt2">87</=
div><div class=3D"line number88 index87 alt1">88</div><div class=3D"line nu=
mber89 index88 alt2">89</div><div class=3D"line number90 index89 alt1">90</=
div><div class=3D"line number91 index90 alt2">91</div><div class=3D"line nu=
mber92 index91 alt1">92</div><div class=3D"line number93 index92 alt2">93</=
div><div class=3D"line number94 index93 alt1">94</div><div class=3D"line nu=
mber95 index94 alt2">95</div><div class=3D"line number96 index95 alt1">96</=
div><div class=3D"line number97 index96 alt2">97</div><div class=3D"line nu=
mber98 index97 alt1">98</div><div class=3D"line number99 index98 alt2">99</=
div><div class=3D"line number100 index99 alt1">100</div><div class=3D"line =
number101 index100 alt2">101</div><div class=3D"line number102 index101 alt=
1">102</div></td><td class=3D"code"><div class=3D"container"><div class=3D"=
line number1 index0 alt2"><code class=3D"js keyword">var</code> <code class=
=3D"js plain">mySingleton =3D (</code><code class=3D"js keyword">function</=
code> <code class=3D"js plain">() {</code></div><div class=3D"line number2 =
index1 alt1">&nbsp;</div><div class=3D"line number3 index2 alt2"><code clas=
s=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js comments">// Instance =
stores a reference to the Singleton</code></div><div class=3D"line number4 =
index3 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js=
 keyword">var</code> <code class=3D"js plain">instance;</code></div><div cl=
ass=3D"line number5 index4 alt2">&nbsp;</div><div class=3D"line number6 ind=
ex5 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js ke=
yword">function</code> <code class=3D"js plain">init() {</code></div><div c=
lass=3D"line number7 index6 alt2">&nbsp;</div><div class=3D"line number8 in=
dex7 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code c=
lass=3D"js comments">// Singleton</code></div><div class=3D"line number9 in=
dex8 alt2">&nbsp;</div><div class=3D"line number10 index9 alt1"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">/=
/ Private methods and variables</code></div><div class=3D"line number11 ind=
ex10 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code c=
lass=3D"js keyword">function</code> <code class=3D"js plain">privateMethod(=
){</code></div><div class=3D"line number12 index11 alt1"><code class=3D"js =
spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js plain">console.log( </code><code class=3D"js string">"I am private"<=
/code> <code class=3D"js plain">);</code></div><div class=3D"line number13 =
index12 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><cod=
e class=3D"js plain">}</code></div><div class=3D"line number14 index13 alt1=
">&nbsp;</div><div class=3D"line number15 index14 alt2"><code class=3D"js s=
paces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">var</code>=
 <code class=3D"js plain">privateVariable =3D </code><code class=3D"js stri=
ng">"Im also private"</code><code class=3D"js plain">;</code></div><div cla=
ss=3D"line number16 index15 alt1">&nbsp;</div><div class=3D"line number17 i=
ndex16 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code=
 class=3D"js keyword">var</code> <code class=3D"js plain">privateRandomNumb=
er =3D Math.random();</code></div><div class=3D"line number18 index17 alt1"=
>&nbsp;</div><div class=3D"line number19 index18 alt2"><code class=3D"js sp=
aces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">return</cod=
e> <code class=3D"js plain">{</code></div><div class=3D"line number20 index=
19 alt1">&nbsp;</div><div class=3D"line number21 index20 alt2"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js=
 comments">// Public methods and variables</code></div><div class=3D"line n=
umber22 index21 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;</code><code class=3D"js plain">publicMethod: </code><code class=
=3D"js keyword">function</code> <code class=3D"js plain">() {</code></div><=
div class=3D"line number23 index22 alt2"><code class=3D"js spaces">&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">con=
sole.log( </code><code class=3D"js string">"The public can see me!"</code> =
<code class=3D"js plain">);</code></div><div class=3D"line number24 index23=
 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code=
><code class=3D"js plain">},</code></div><div class=3D"line number25 index2=
4 alt2">&nbsp;</div><div class=3D"line number26 index25 alt1"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js=
 plain">publicProperty: </code><code class=3D"js string">"I am also public"=
</code><code class=3D"js plain">,</code></div><div class=3D"line number27 i=
ndex26 alt2">&nbsp;</div><div class=3D"line number28 index27 alt1"><code cl=
ass=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D=
"js plain">getRandomNumber: </code><code class=3D"js keyword">function</cod=
e><code class=3D"js plain">() {</code></div><div class=3D"line number29 ind=
ex28 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;</code><code class=3D"js keyword">return</code> <code class=3D"js=
 plain">privateRandomNumber;</code></div><div class=3D"line number30 index2=
9 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</cod=
e><code class=3D"js plain">}</code></div><div class=3D"line number31 index3=
0 alt2">&nbsp;</div><div class=3D"line number32 index31 alt1"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">};</=
code></div><div class=3D"line number33 index32 alt2">&nbsp;</div><div class=
=3D"line number34 index33 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</cod=
e><code class=3D"js plain">};</code></div><div class=3D"line number35 index=
34 alt2">&nbsp;</div><div class=3D"line number36 index35 alt1"><code class=
=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js keyword">return</code> =
<code class=3D"js plain">{</code></div><div class=3D"line number37 index36 =
alt2">&nbsp;</div><div class=3D"line number38 index37 alt1"><code class=3D"=
js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// Ge=
t the Singleton instance if one exists</code></div><div class=3D"line numbe=
r39 index38 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>=
<code class=3D"js comments">// or create one if it doesn't</code></div><div=
 class=3D"line number40 index39 alt1"><code class=3D"js spaces">&nbsp;&nbsp=
;&nbsp;&nbsp;</code><code class=3D"js plain">getInstance: </code><code clas=
s=3D"js keyword">function</code> <code class=3D"js plain">() {</code></div>=
<div class=3D"line number41 index40 alt2">&nbsp;</div><div class=3D"line nu=
mber42 index41 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;</code><code class=3D"js keyword">if</code> <code class=3D"js plain=
">( !instance ) {</code></div><div class=3D"line number43 index42 alt2"><co=
de class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</co=
de><code class=3D"js plain">instance =3D init();</code></div><div class=3D"=
line number44 index43 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;</code><code class=3D"js plain">}</code></div><div class=3D"=
line number45 index44 alt2">&nbsp;</div><div class=3D"line number46 index45=
 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code=
><code class=3D"js keyword">return</code> <code class=3D"js plain">instance=
;</code></div><div class=3D"line number47 index46 alt2"><code class=3D"js s=
paces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">}</code></di=
v><div class=3D"line number48 index47 alt1">&nbsp;</div><div class=3D"line =
number49 index48 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code c=
lass=3D"js plain">};</code></div><div class=3D"line number50 index49 alt1">=
&nbsp;</div><div class=3D"line number51 index50 alt2"><code class=3D"js pla=
in">})();</code></div><div class=3D"line number52 index51 alt1">&nbsp;</div=
><div class=3D"line number53 index52 alt2"><code class=3D"js keyword">var</=
code> <code class=3D"js plain">myBadSingleton =3D (</code><code class=3D"js=
 keyword">function</code> <code class=3D"js plain">() {</code></div><div cl=
ass=3D"line number54 index53 alt1">&nbsp;</div><div class=3D"line number55 =
index54 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"j=
s comments">// Instance stores a reference to the Singleton</code></div><di=
v class=3D"line number56 index55 alt1"><code class=3D"js spaces">&nbsp;&nbs=
p;</code><code class=3D"js keyword">var</code> <code class=3D"js plain">ins=
tance;</code></div><div class=3D"line number57 index56 alt2">&nbsp;</div><d=
iv class=3D"line number58 index57 alt1"><code class=3D"js spaces">&nbsp;&nb=
sp;</code><code class=3D"js keyword">function</code> <code class=3D"js plai=
n">init() {</code></div><div class=3D"line number59 index58 alt2">&nbsp;</d=
iv><div class=3D"line number60 index59 alt1"><code class=3D"js spaces">&nbs=
p;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// Singleton</code><=
/div><div class=3D"line number61 index60 alt2">&nbsp;</div><div class=3D"li=
ne number62 index61 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp=
;</code><code class=3D"js keyword">var</code> <code class=3D"js plain">priv=
ateRandomNumber =3D Math.random();</code></div><div class=3D"line number63 =
index62 alt2">&nbsp;</div><div class=3D"line number64 index63 alt1"><code c=
lass=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword=
">return</code> <code class=3D"js plain">{</code></div><div class=3D"line n=
umber65 index64 alt2">&nbsp;</div><div class=3D"line number66 index65 alt1"=
><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code=
 class=3D"js plain">getRandomNumber: </code><code class=3D"js keyword">func=
tion</code><code class=3D"js plain">() {</code></div><div class=3D"line num=
ber67 index66 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">return</code> <code cl=
ass=3D"js plain">privateRandomNumber;</code></div><div class=3D"line number=
68 index67 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;</code><code class=3D"js plain">}</code></div><div class=3D"line number=
69 index68 alt2">&nbsp;</div><div class=3D"line number70 index69 alt1"><cod=
e class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plai=
n">};</code></div><div class=3D"line number71 index70 alt2">&nbsp;</div><di=
v class=3D"line number72 index71 alt1"><code class=3D"js spaces">&nbsp;&nbs=
p;</code><code class=3D"js plain">};</code></div><div class=3D"line number7=
3 index72 alt2">&nbsp;</div><div class=3D"line number74 index73 alt1"><code=
 class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js keyword">return</=
code> <code class=3D"js plain">{</code></div><div class=3D"line number75 in=
dex74 alt2">&nbsp;</div><div class=3D"line number76 index75 alt1"><code cla=
ss=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments"=
>// Always create a new Singleton instance</code></div><div class=3D"line n=
umber77 index76 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</c=
ode><code class=3D"js plain">getInstance: </code><code class=3D"js keyword"=
>function</code> <code class=3D"js plain">() {</code></div><div class=3D"li=
ne number78 index77 alt1">&nbsp;</div><div class=3D"line number79 index78 a=
lt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><=
code class=3D"js plain">instance =3D init();</code></div><div class=3D"line=
 number80 index79 alt1">&nbsp;</div><div class=3D"line number81 index80 alt=
2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><co=
de class=3D"js keyword">return</code> <code class=3D"js plain">instance;</c=
ode></div><div class=3D"line number82 index81 alt1"><code class=3D"js space=
s">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">}</code></div><d=
iv class=3D"line number83 index82 alt2">&nbsp;</div><div class=3D"line numb=
er84 index83 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=
=3D"js plain">};</code></div><div class=3D"line number85 index84 alt2">&nbs=
p;</div><div class=3D"line number86 index85 alt1"><code class=3D"js plain">=
})();</code></div><div class=3D"line number87 index86 alt2">&nbsp;</div><di=
v class=3D"line number88 index87 alt1">&nbsp;</div><div class=3D"line numbe=
r89 index88 alt2"><code class=3D"js comments">// Usage:</code></div><div cl=
ass=3D"line number90 index89 alt1">&nbsp;</div><div class=3D"line number91 =
index90 alt2"><code class=3D"js keyword">var</code> <code class=3D"js plain=
">singleA =3D mySingleton.getInstance();</code></div><div class=3D"line num=
ber92 index91 alt1"><code class=3D"js keyword">var</code> <code class=3D"js=
 plain">singleB =3D mySingleton.getInstance();</code></div><div class=3D"li=
ne number93 index92 alt2"><code class=3D"js plain">console.log( singleA.get=
RandomNumber() =3D=3D=3D singleB.getRandomNumber() ); </code><code class=3D=
"js comments">// true</code></div><div class=3D"line number94 index93 alt1"=
>&nbsp;</div><div class=3D"line number95 index94 alt2"><code class=3D"js ke=
yword">var</code> <code class=3D"js plain">badSingleA =3D myBadSingleton.ge=
tInstance();</code></div><div class=3D"line number96 index95 alt1"><code cl=
ass=3D"js keyword">var</code> <code class=3D"js plain">badSingleB =3D myBad=
Singleton.getInstance();</code></div><div class=3D"line number97 index96 al=
t2"><code class=3D"js plain">console.log( badSingleA.getRandomNumber() !=3D=
=3D badSingleB.getRandomNumber() ); </code><code class=3D"js comments">// t=
rue</code></div><div class=3D"line number98 index97 alt1">&nbsp;</div><div =
class=3D"line number99 index98 alt2"><code class=3D"js comments">// Note: a=
s we are working with random numbers, there is a</code></div><div class=3D"=
line number100 index99 alt1"><code class=3D"js comments">// mathematical po=
ssibility both numbers will be the same,</code></div><div class=3D"line num=
ber101 index100 alt2"><code class=3D"js comments">// however unlikely. The =
above example should otherwise still</code></div><div class=3D"line number1=
02 index101 alt1"><code class=3D"js comments">// be valid.</code></div></di=
v></td></tr></tbody></table></div></div>

<p>What makes the Singleton is the global access to the instance (generally=
 through <code>MySingleton.getInstance()</code>) as we don't (at least in s=
tatic languages) call <code>new MySingleton()</code> directly. This is howe=
ver possible in JavaScript.</p>

<p>In the GoF book, the <i>applicability</i> of the Singleton pattern is de=
scribed as follows:</p>

<p>
</p><ul>
<li>There must be exactly one instance of a class, and it must be accessibl=
e to clients from a well-known access point.</li>
<li>When the sole instance should be extensible by subclassing, and clients=
 should be able to use an extended instance without modifying their code.</=
li>
</ul>
<p></p>

<p>The second of these points refers to a case where we might need code suc=
h as:</p>

<div><div id=3D"highlighter_669145" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div></td><td class=3D"cod=
e"><div class=3D"container"><div class=3D"line number1 index0 alt2"><code c=
lass=3D"js plain">mySingleton.getInstance =3D </code><code class=3D"js keyw=
ord">function</code><code class=3D"js plain">(){</code></div><div class=3D"=
line number2 index1 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><cod=
e class=3D"js keyword">if</code> <code class=3D"js plain">( </code><code cl=
ass=3D"js keyword">this</code><code class=3D"js plain">._instance =3D=3D </=
code><code class=3D"js keyword">null</code> <code class=3D"js plain">) {</c=
ode></div><div class=3D"line number3 index2 alt2"><code class=3D"js spaces"=
>&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">if</code> <code =
class=3D"js plain">( isFoo() ) {</code></div><div class=3D"line number4 ind=
ex3 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;</code><code class=3D"js keyword">this</code><code class=3D"js plain">._=
instance =3D </code><code class=3D"js keyword">new</code> <code class=3D"js=
 plain">FooSingleton();</code></div><div class=3D"line number5 index4 alt2"=
><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js=
 plain">} </code><code class=3D"js keyword">else</code> <code class=3D"js p=
lain">{</code></div><div class=3D"line number6 index5 alt1"><code class=3D"=
js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"=
js keyword">this</code><code class=3D"js plain">._instance =3D </code><code=
 class=3D"js keyword">new</code> <code class=3D"js plain">BasicSingleton();=
</code></div><div class=3D"line number7 index6 alt2"><code class=3D"js spac=
es">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">}</code></div><=
div class=3D"line number8 index7 alt1"><code class=3D"js spaces">&nbsp;&nbs=
p;</code><code class=3D"js plain">}</code></div><div class=3D"line number9 =
index8 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js=
 keyword">return</code> <code class=3D"js keyword">this</code><code class=
=3D"js plain">._instance;</code></div><div class=3D"line number10 index9 al=
t1"><code class=3D"js plain">};</code></div></div></td></tr></tbody></table=
></div></div>

<p>&nbsp;</p>
<p>Here, <code>getInstance</code> becomes a little like a Factory method an=
d we don't need to update each point in our code accessing it. <code>FooSin=
gleton</code> above would be a subclass of <code>BasicSingleton</code> and =
implement the same interface.</p>

<p>Why is deferring execution considered important for a Singleton?:</p>

<blockquote>In C++ it serves to isolate from the unpredictability of the or=
der of dynamic initialization, returning control to the programmer.</blockq=
uote>

<p>It is important to note the difference between a static instance of a cl=
ass (object) and a Singleton: whilst a Singleton can be implemented as a st=
atic instance, it can also be constructed lazily, without the need for reso=
urces nor memory until this is actually needed.</p>

<p>If we have a static object that can be initialized directly, we need to =
ensure the code is always executed in the same order (e.g in case <code>obj=
Car</code> needs <code>objWheel</code> during its initialization) and this =
doesn't scale when you have a large number of source files.</p>

<p>Both Singletons and static objects are useful but they shouldn't be over=
used - the same way in which we shouldn't overuse other patterns.</p>

<p>In practice, the Singleton pattern is useful when exactly one object is =
needed to coordinate others across a system. Here is one example with the p=
attern being used in this context:</p>
<p>
</p><div><div id=3D"highlighter_271626" class=3D"syntaxhighlighter  js acod=
ecode"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resou=
rces/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help h=
elp">?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D=
"0"><tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2"=
>1</div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line n=
umber3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><=
div class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 in=
dex5 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=
=3D"line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2=
">9</div><div class=3D"line number10 index9 alt1">10</div><div class=3D"lin=
e number11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">=
12</div><div class=3D"line number13 index12 alt2">13</div><div class=3D"lin=
e number14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">=
15</div><div class=3D"line number16 index15 alt1">16</div><div class=3D"lin=
e number17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">=
18</div><div class=3D"line number19 index18 alt2">19</div><div class=3D"lin=
e number20 index19 alt1">20</div><div class=3D"line number21 index20 alt2">=
21</div><div class=3D"line number22 index21 alt1">22</div><div class=3D"lin=
e number23 index22 alt2">23</div><div class=3D"line number24 index23 alt1">=
24</div><div class=3D"line number25 index24 alt2">25</div><div class=3D"lin=
e number26 index25 alt1">26</div><div class=3D"line number27 index26 alt2">=
27</div><div class=3D"line number28 index27 alt1">28</div><div class=3D"lin=
e number29 index28 alt2">29</div><div class=3D"line number30 index29 alt1">=
30</div><div class=3D"line number31 index30 alt2">31</div><div class=3D"lin=
e number32 index31 alt1">32</div><div class=3D"line number33 index32 alt2">=
33</div><div class=3D"line number34 index33 alt1">34</div><div class=3D"lin=
e number35 index34 alt2">35</div><div class=3D"line number36 index35 alt1">=
36</div><div class=3D"line number37 index36 alt2">37</div><div class=3D"lin=
e number38 index37 alt1">38</div><div class=3D"line number39 index38 alt2">=
39</div><div class=3D"line number40 index39 alt1">40</div><div class=3D"lin=
e number41 index40 alt2">41</div><div class=3D"line number42 index41 alt1">=
42</div><div class=3D"line number43 index42 alt2">43</div><div class=3D"lin=
e number44 index43 alt1">44</div><div class=3D"line number45 index44 alt2">=
45</div><div class=3D"line number46 index45 alt1">46</div><div class=3D"lin=
e number47 index46 alt2">47</div><div class=3D"line number48 index47 alt1">=
48</div><div class=3D"line number49 index48 alt2">49</div><div class=3D"lin=
e number50 index49 alt1">50</div></td><td class=3D"code"><div class=3D"cont=
ainer"><div class=3D"line number1 index0 alt2"><code class=3D"js keyword">v=
ar</code> <code class=3D"js plain">SingletonTester =3D (</code><code class=
=3D"js keyword">function</code> <code class=3D"js plain">() {</code></div><=
div class=3D"line number2 index1 alt1">&nbsp;</div><div class=3D"line numbe=
r3 index2 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D=
"js comments">// options: an object containing configuration options for th=
e singleton</code></div><div class=3D"line number4 index3 alt1"><code class=
=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js comments">// e.g var op=
tions =3D { name: "test", pointX: 5};</code></div><div class=3D"line number=
5 index4 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"=
js keyword">function</code> <code class=3D"js plain">Singleton( options ) {=
</code></div><div class=3D"line number6 index5 alt1">&nbsp;</div><div class=
=3D"line number7 index6 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&=
nbsp;</code><code class=3D"js comments">// set options to the options suppl=
ied</code></div><div class=3D"line number8 index7 alt1"><code class=3D"js s=
paces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// or an =
empty object if none are provided</code></div><div class=3D"line number9 in=
dex8 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code c=
lass=3D"js plain">options =3D options || {};</code></div><div class=3D"line=
 number10 index9 alt1">&nbsp;</div><div class=3D"line number11 index10 alt2=
"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"j=
s comments">// set some properties for our singleton</code></div><div class=
=3D"line number12 index11 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp=
;&nbsp;</code><code class=3D"js keyword">this</code><code class=3D"js plain=
">.name =3D </code><code class=3D"js string">"SingletonTester"</code><code =
class=3D"js plain">;</code></div><div class=3D"line number13 index12 alt2">=
&nbsp;</div><div class=3D"line number14 index13 alt1"><code class=3D"js spa=
ces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">this</code><=
code class=3D"js plain">.pointX =3D options.pointX || 6;</code></div><div c=
lass=3D"line number15 index14 alt2">&nbsp;</div><div class=3D"line number16=
 index15 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><co=
de class=3D"js keyword">this</code><code class=3D"js plain">.pointY =3D opt=
ions.pointY || 10;</code></div><div class=3D"line number17 index16 alt2">&n=
bsp;</div><div class=3D"line number18 index17 alt1"><code class=3D"js space=
s">&nbsp;&nbsp;</code><code class=3D"js plain">}</code></div><div class=3D"=
line number19 index18 alt2">&nbsp;</div><div class=3D"line number20 index19=
 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js comme=
nts">// our instance holder</code></div><div class=3D"line number21 index20=
 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js keywo=
rd">var</code> <code class=3D"js plain">instance;</code></div><div class=3D=
"line number22 index21 alt1">&nbsp;</div><div class=3D"line number23 index2=
2 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js comm=
ents">// an emulation of static variables and methods</code></div><div clas=
s=3D"line number24 index23 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</co=
de><code class=3D"js keyword">var</code> <code class=3D"js plain">_static =
=3D {</code></div><div class=3D"line number25 index24 alt2">&nbsp;</div><di=
v class=3D"line number26 index25 alt1"><code class=3D"js spaces">&nbsp;&nbs=
p;&nbsp;&nbsp;</code><code class=3D"js plain">name: </code><code class=3D"j=
s string">"SingletonTester"</code><code class=3D"js plain">,</code></div><d=
iv class=3D"line number27 index26 alt2">&nbsp;</div><div class=3D"line numb=
er28 index27 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code=
><code class=3D"js comments">// Method for getting an instance. It returns<=
/code></div><div class=3D"line number29 index28 alt2"><code class=3D"js spa=
ces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// a single=
ton instance of a singleton object</code></div><div class=3D"line number30 =
index29 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><cod=
e class=3D"js plain">getInstance: </code><code class=3D"js keyword">functio=
n</code><code class=3D"js plain">( options ) {</code></div><div class=3D"li=
ne number31 index30 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;</code><code class=3D"js keyword">if</code><code class=3D"js p=
lain">( instance =3D=3D=3D undefined ) {</code></div><div class=3D"line num=
ber32 index31 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">instance =3D </code><cod=
e class=3D"js keyword">new</code> <code class=3D"js plain">Singleton( optio=
ns );</code></div><div class=3D"line number33 index32 alt2"><code class=3D"=
js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js pla=
in">}</code></div><div class=3D"line number34 index33 alt1">&nbsp;</div><di=
v class=3D"line number35 index34 alt2"><code class=3D"js spaces">&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">return</code> <=
code class=3D"js plain">instance;</code></div><div class=3D"line number36 i=
ndex35 alt1">&nbsp;</div><div class=3D"line number37 index36 alt2"><code cl=
ass=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">}=
</code></div><div class=3D"line number38 index37 alt1"><code class=3D"js sp=
aces">&nbsp;&nbsp;</code><code class=3D"js plain">};</code></div><div class=
=3D"line number39 index38 alt2">&nbsp;</div><div class=3D"line number40 ind=
ex39 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js k=
eyword">return</code> <code class=3D"js plain">_static;</code></div><div cl=
ass=3D"line number41 index40 alt2">&nbsp;</div><div class=3D"line number42 =
index41 alt1"><code class=3D"js plain">})();</code></div><div class=3D"line=
 number43 index42 alt2">&nbsp;</div><div class=3D"line number44 index43 alt=
1"><code class=3D"js keyword">var</code> <code class=3D"js plain">singleton=
Test =3D SingletonTester.getInstance({</code></div><div class=3D"line numbe=
r45 index44 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=
=3D"js plain">pointX: 5</code></div><div class=3D"line number46 index45 alt=
1"><code class=3D"js plain">});</code></div><div class=3D"line number47 ind=
ex46 alt2">&nbsp;</div><div class=3D"line number48 index47 alt1"><code clas=
s=3D"js comments">// Log the output of pointX just to verify it is correct<=
/code></div><div class=3D"line number49 index48 alt2"><code class=3D"js com=
ments">// Outputs: 5</code></div><div class=3D"line number50 index49 alt1">=
<code class=3D"js plain">console.log( singletonTest.pointX );</code></div><=
/div></td></tr></tbody></table></div></div><p></p>

<p>Whilst the Singleton has valid uses, often when we find ourselves needin=
g it in JavaScript it's a sign that we may need to re-evaluate our design.<=
/p>

<p>They're often an indication that modules in a system are either tightly =
coupled or that logic is overly spread across multiple parts of a codebase.=
 Singletons can be more difficult to test due to issues ranging from hidden=
 dependencies, the difficulty in creating multiple instances, difficulty in=
 stubbing dependencies and so on.</p>

<p>Miller Medeiros has previously recommended <a href=3D"http://www.ibm.com=
/developerworks/webservices/library/co-single/index.html">this</a> excellen=
t article on the Singleton and its various issues for further reading as we=
ll as the comments to <a href=3D"http://misko.hevery.com/2008/10/21/depende=
ncy-injection-myth-reference-passing/">this</a> article, discussing how Sin=
gletons can increase tight coupling. I'm happy to second these recommendati=
ons as both pieces raise many important points about this pattern that are =
also worth noting.</p>

<p>&nbsp;</p>


<h2 id=3D"observerpatternjavascript">
  <a href=3D"https://addyosmani.com/resources/essentialjsdesignpatterns/boo=
k/#observerpatternjavascript" class=3D"subhead-link">#</a>
  The Observer Pattern
</h2>

<p>The Observer is a design pattern where an object (known as a subject) ma=
intains a list of objects depending on it (observers), automatically notify=
ing them of any changes to state.</p>

<p>When a subject needs to notify observers about something interesting hap=
pening, it broadcasts a notification to the observers (which can include sp=
ecific data related to the topic of the notification).</p>

<p>When we no longer wish for a particular observer to be notified of chang=
es by the subject they are registered with, the subject can remove them fro=
m the list of observers.</p>

<p>
It's often useful to refer back to published definitions of design patterns=
 that are language agnostic to get a broader sense of their usage and advan=
tages over time. The definition of the Observer pattern provided in the GoF=
 book, <em>Design Patterns: Elements of Reusable Object-Oriented Software</=
em>, is:</p>

<p>
<i>"One or more observers are interested in the state of a subject and regi=
ster their interest with the subject by attaching themselves. When somethin=
g changes in our subject that the observer may be interested in, a notify m=
essage is sent which calls the update method in each observer. When the obs=
erver is no longer interested in the subject's state, they can simply detac=
h themselves."</i>
</p>

<p>We can now expand on what we've learned to implement the Observer patter=
n with the following components:</p>

<ul>
  <li><strong>Subject</strong>: maintains a list of observers, facilitates =
adding or removing observers</li>
  <li><strong>Observer</strong>: provides an update interface for objects t=
hat need to be notified of a Subject's changes of state</li>
  <li><strong>ConcreteSubject</strong>: broadcasts notifications to observe=
rs on changes of state, stores the state of ConcreteObservers</li>
  <li><strong>ConcreteObserver</strong>: stores a reference to the Concrete=
Subject, implements an update interface for the Observer to ensure state is=
 consistent with the Subject's</li>
</ul>

<p>First, let's model the list of dependent Observers a subject may have:</=
p>

<p>
</p><div><div id=3D"highlighter_375618" class=3D"syntaxhighlighter  js acod=
ecode"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resou=
rces/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help h=
elp">?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D=
"0"><tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2"=
>1</div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line n=
umber3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><=
div class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 in=
dex5 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=
=3D"line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2=
">9</div><div class=3D"line number10 index9 alt1">10</div><div class=3D"lin=
e number11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">=
12</div><div class=3D"line number13 index12 alt2">13</div><div class=3D"lin=
e number14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">=
15</div><div class=3D"line number16 index15 alt1">16</div><div class=3D"lin=
e number17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">=
18</div><div class=3D"line number19 index18 alt2">19</div><div class=3D"lin=
e number20 index19 alt1">20</div><div class=3D"line number21 index20 alt2">=
21</div><div class=3D"line number22 index21 alt1">22</div><div class=3D"lin=
e number23 index22 alt2">23</div><div class=3D"line number24 index23 alt1">=
24</div><div class=3D"line number25 index24 alt2">25</div><div class=3D"lin=
e number26 index25 alt1">26</div><div class=3D"line number27 index26 alt2">=
27</div><div class=3D"line number28 index27 alt1">28</div><div class=3D"lin=
e number29 index28 alt2">29</div><div class=3D"line number30 index29 alt1">=
30</div><div class=3D"line number31 index30 alt2">31</div><div class=3D"lin=
e number32 index31 alt1">32</div><div class=3D"line number33 index32 alt2">=
33</div><div class=3D"line number34 index33 alt1">34</div></td><td class=3D=
"code"><div class=3D"container"><div class=3D"line number1 index0 alt2"><co=
de class=3D"js keyword">function</code> <code class=3D"js plain">ObserverLi=
st(){</code></div><div class=3D"line number2 index1 alt1"><code class=3D"js=
 spaces">&nbsp;&nbsp;</code><code class=3D"js keyword">this</code><code cla=
ss=3D"js plain">.observerList =3D [];</code></div><div class=3D"line number=
3 index2 alt2"><code class=3D"js plain">}</code></div><div class=3D"line nu=
mber4 index3 alt1">&nbsp;</div><div class=3D"line number5 index4 alt2"><cod=
e class=3D"js plain">ObserverList.prototype.add =3D </code><code class=3D"j=
s keyword">function</code><code class=3D"js plain">( obj ){</code></div><di=
v class=3D"line number6 index5 alt1"><code class=3D"js spaces">&nbsp;&nbsp;=
</code><code class=3D"js keyword">return</code> <code class=3D"js keyword">=
this</code><code class=3D"js plain">.observerList.push( obj );</code></div>=
<div class=3D"line number7 index6 alt2"><code class=3D"js plain">};</code><=
/div><div class=3D"line number8 index7 alt1">&nbsp;</div><div class=3D"line=
 number9 index8 alt2"><code class=3D"js plain">ObserverList.prototype.count=
 =3D </code><code class=3D"js keyword">function</code><code class=3D"js pla=
in">(){</code></div><div class=3D"line number10 index9 alt1"><code class=3D=
"js spaces">&nbsp;&nbsp;</code><code class=3D"js keyword">return</code> <co=
de class=3D"js keyword">this</code><code class=3D"js plain">.observerList.l=
ength;</code></div><div class=3D"line number11 index10 alt2"><code class=3D=
"js plain">};</code></div><div class=3D"line number12 index11 alt1">&nbsp;<=
/div><div class=3D"line number13 index12 alt2"><code class=3D"js plain">Obs=
erverList.prototype.get =3D </code><code class=3D"js keyword">function</cod=
e><code class=3D"js plain">( index ){</code></div><div class=3D"line number=
14 index13 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=
=3D"js keyword">if</code><code class=3D"js plain">( index &gt; -1 &amp;&amp=
; index &lt; </code><code class=3D"js keyword">this</code><code class=3D"js=
 plain">.observerList.length ){</code></div><div class=3D"line number15 ind=
ex14 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code c=
lass=3D"js keyword">return</code> <code class=3D"js keyword">this</code><co=
de class=3D"js plain">.observerList[ index ];</code></div><div class=3D"lin=
e number16 index15 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><code=
 class=3D"js plain">}</code></div><div class=3D"line number17 index16 alt2"=
><code class=3D"js plain">};</code></div><div class=3D"line number18 index1=
7 alt1">&nbsp;</div><div class=3D"line number19 index18 alt2"><code class=
=3D"js plain">ObserverList.prototype.indexOf =3D </code><code class=3D"js k=
eyword">function</code><code class=3D"js plain">( obj, startIndex ){</code>=
</div><div class=3D"line number20 index19 alt1"><code class=3D"js spaces">&=
nbsp;&nbsp;</code><code class=3D"js keyword">var</code> <code class=3D"js p=
lain">i =3D startIndex;</code></div><div class=3D"line number21 index20 alt=
2">&nbsp;</div><div class=3D"line number22 index21 alt1"><code class=3D"js =
spaces">&nbsp;&nbsp;</code><code class=3D"js keyword">while</code><code cla=
ss=3D"js plain">( i &lt; </code><code class=3D"js keyword">this</code><code=
 class=3D"js plain">.observerList.length ){</code></div><div class=3D"line =
number23 index22 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</=
code><code class=3D"js keyword">if</code><code class=3D"js plain">( </code>=
<code class=3D"js keyword">this</code><code class=3D"js plain">.observerLis=
t[i] =3D=3D=3D obj ){</code></div><div class=3D"line number24 index23 alt1"=
><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code=
 class=3D"js keyword">return</code> <code class=3D"js plain">i;</code></div=
><div class=3D"line number25 index24 alt2"><code class=3D"js spaces">&nbsp;=
&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">}</code></div><div class=
=3D"line number26 index25 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp=
;&nbsp;</code><code class=3D"js plain">i++;</code></div><div class=3D"line =
number27 index26 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code c=
lass=3D"js plain">}</code></div><div class=3D"line number28 index27 alt1">&=
nbsp;</div><div class=3D"line number29 index28 alt2"><code class=3D"js spac=
es">&nbsp;&nbsp;</code><code class=3D"js keyword">return</code> <code class=
=3D"js plain">-1;</code></div><div class=3D"line number30 index29 alt1"><co=
de class=3D"js plain">};</code></div><div class=3D"line number31 index30 al=
t2">&nbsp;</div><div class=3D"line number32 index31 alt1"><code class=3D"js=
 plain">ObserverList.prototype.removeAt =3D </code><code class=3D"js keywor=
d">function</code><code class=3D"js plain">( index ){</code></div><div clas=
s=3D"line number33 index32 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</co=
de><code class=3D"js keyword">this</code><code class=3D"js plain">.observer=
List.splice( index, 1 );</code></div><div class=3D"line number34 index33 al=
t1"><code class=3D"js plain">};</code></div></div></td></tr></tbody></table=
></div></div>
<p></p>

<p>Next, let's model the Subject and the ability to add, remove or notify o=
bservers on the observer list.</p>

<p>
</p><div><div id=3D"highlighter_827261" class=3D"syntaxhighlighter  js acod=
ecode"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resou=
rces/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help h=
elp">?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D=
"0"><tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2"=
>1</div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line n=
umber3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><=
div class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 in=
dex5 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=
=3D"line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2=
">9</div><div class=3D"line number10 index9 alt1">10</div><div class=3D"lin=
e number11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">=
12</div><div class=3D"line number13 index12 alt2">13</div><div class=3D"lin=
e number14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">=
15</div><div class=3D"line number16 index15 alt1">16</div><div class=3D"lin=
e number17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">=
18</div></td><td class=3D"code"><div class=3D"container"><div class=3D"line=
 number1 index0 alt2"><code class=3D"js keyword">function</code> <code clas=
s=3D"js plain">Subject(){</code></div><div class=3D"line number2 index1 alt=
1"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js keyword">=
this</code><code class=3D"js plain">.observers =3D </code><code class=3D"js=
 keyword">new</code> <code class=3D"js plain">ObserverList();</code></div><=
div class=3D"line number3 index2 alt2"><code class=3D"js plain">}</code></d=
iv><div class=3D"line number4 index3 alt1">&nbsp;</div><div class=3D"line n=
umber5 index4 alt2"><code class=3D"js plain">Subject.prototype.addObserver =
=3D </code><code class=3D"js keyword">function</code><code class=3D"js plai=
n">( observer ){</code></div><div class=3D"line number6 index5 alt1"><code =
class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js keyword">this</cod=
e><code class=3D"js plain">.observers.add( observer );</code></div><div cla=
ss=3D"line number7 index6 alt2"><code class=3D"js plain">};</code></div><di=
v class=3D"line number8 index7 alt1">&nbsp;</div><div class=3D"line number9=
 index8 alt2"><code class=3D"js plain">Subject.prototype.removeObserver =3D=
 </code><code class=3D"js keyword">function</code><code class=3D"js plain">=
( observer ){</code></div><div class=3D"line number10 index9 alt1"><code cl=
ass=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js keyword">this</code>=
<code class=3D"js plain">.observers.removeAt( </code><code class=3D"js keyw=
ord">this</code><code class=3D"js plain">.observers.indexOf( observer, 0 ) =
);</code></div><div class=3D"line number11 index10 alt2"><code class=3D"js =
plain">};</code></div><div class=3D"line number12 index11 alt1">&nbsp;</div=
><div class=3D"line number13 index12 alt2"><code class=3D"js plain">Subject=
.prototype.notify =3D </code><code class=3D"js keyword">function</code><cod=
e class=3D"js plain">( context ){</code></div><div class=3D"line number14 i=
ndex13 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js=
 keyword">var</code> <code class=3D"js plain">observerCount =3D </code><cod=
e class=3D"js keyword">this</code><code class=3D"js plain">.observers.count=
();</code></div><div class=3D"line number15 index14 alt2"><code class=3D"js=
 spaces">&nbsp;&nbsp;</code><code class=3D"js keyword">for</code><code clas=
s=3D"js plain">(</code><code class=3D"js keyword">var</code> <code class=3D=
"js plain">i=3D0; i &lt; observerCount; i++){</code></div><div class=3D"lin=
e number16 index15 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;=
</code><code class=3D"js keyword">this</code><code class=3D"js plain">.obse=
rvers.get(i).update( context );</code></div><div class=3D"line number17 ind=
ex16 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js p=
lain">}</code></div><div class=3D"line number18 index17 alt1"><code class=
=3D"js plain">};</code></div></div></td></tr></tbody></table></div></div>
<p></p>

<p>We then define a skeleton for creating new Observers. The <code>update</=
code> functionality here will be overwritten later with custom behaviour. <=
/p>

<p>
</p><div><div id=3D"highlighter_753346" class=3D"syntaxhighlighter  js acod=
ecode"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resou=
rces/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help h=
elp">?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D=
"0"><tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2"=
>1</div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line n=
umber3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><=
div class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 in=
dex5 alt1">6</div></td><td class=3D"code"><div class=3D"container"><div cla=
ss=3D"line number1 index0 alt2"><code class=3D"js comments">// The Observer=
</code></div><div class=3D"line number2 index1 alt1"><code class=3D"js keyw=
ord">function</code> <code class=3D"js plain">Observer(){</code></div><div =
class=3D"line number3 index2 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</=
code><code class=3D"js keyword">this</code><code class=3D"js plain">.update=
 =3D </code><code class=3D"js keyword">function</code><code class=3D"js pla=
in">(){</code></div><div class=3D"line number4 index3 alt1"><code class=3D"=
js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// ..=
.</code></div><div class=3D"line number5 index4 alt2"><code class=3D"js spa=
ces">&nbsp;&nbsp;</code><code class=3D"js plain">};</code></div><div class=
=3D"line number6 index5 alt1"><code class=3D"js plain">}</code></div></div>=
</td></tr></tbody></table></div></div>
<p></p>

<p>In our sample application using the above Observer components, we now de=
fine:</p>

<ul>
  <li>A button for adding new observable checkboxes to the page</li>
  <li>A control checkbox which will act as a subject, notifying other check=
boxes they should be checked</li>
  <li>A container for the new checkboxes being added</li>
</ul>

<p>We then define ConcreteSubject and ConcreteObserver handlers for both ad=
ding new observers to the page and implementing the updating interface. See=
 below for inline comments on what these components do in the context of ou=
r example.</p>

<p><strong>HTML:</strong></p>
<p>
</p><div><div id=3D"highlighter_241813" class=3D"syntaxhighlighter  js acod=
ecode"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resou=
rces/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help h=
elp">?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D=
"0"><tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2"=
>1</div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line n=
umber3 index2 alt2">3</div></td><td class=3D"code"><div class=3D"container"=
><div class=3D"line number1 index0 alt2"><code class=3D"js plain">&lt;butto=
n id=3D</code><code class=3D"js string">"addNewObserver"</code><code class=
=3D"js plain">&gt;Add New Observer checkbox&lt;/button&gt;</code></div><div=
 class=3D"line number2 index1 alt1"><code class=3D"js plain">&lt;input id=
=3D</code><code class=3D"js string">"mainCheckbox"</code> <code class=3D"js=
 plain">type=3D</code><code class=3D"js string">"checkbox"</code><code clas=
s=3D"js plain">/&gt;</code></div><div class=3D"line number3 index2 alt2"><c=
ode class=3D"js plain">&lt;div id=3D</code><code class=3D"js string">"obser=
versContainer"</code><code class=3D"js plain">&gt;&lt;/div&gt;</code></div>=
</div></td></tr></tbody></table></div></div>
<p></p>
<p><strong>Sample script:</strong></p>
<p>
</p><div><div id=3D"highlighter_474235" class=3D"syntaxhighlighter  js acod=
ecode"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resou=
rces/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help h=
elp">?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D=
"0"><tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2"=
>1</div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line n=
umber3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><=
div class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 in=
dex5 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=
=3D"line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2=
">9</div><div class=3D"line number10 index9 alt1">10</div><div class=3D"lin=
e number11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">=
12</div><div class=3D"line number13 index12 alt2">13</div><div class=3D"lin=
e number14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">=
15</div><div class=3D"line number16 index15 alt1">16</div><div class=3D"lin=
e number17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">=
18</div><div class=3D"line number19 index18 alt2">19</div><div class=3D"lin=
e number20 index19 alt1">20</div><div class=3D"line number21 index20 alt2">=
21</div><div class=3D"line number22 index21 alt1">22</div><div class=3D"lin=
e number23 index22 alt2">23</div><div class=3D"line number24 index23 alt1">=
24</div><div class=3D"line number25 index24 alt2">25</div><div class=3D"lin=
e number26 index25 alt1">26</div><div class=3D"line number27 index26 alt2">=
27</div><div class=3D"line number28 index27 alt1">28</div><div class=3D"lin=
e number29 index28 alt2">29</div><div class=3D"line number30 index29 alt1">=
30</div><div class=3D"line number31 index30 alt2">31</div><div class=3D"lin=
e number32 index31 alt1">32</div><div class=3D"line number33 index32 alt2">=
33</div><div class=3D"line number34 index33 alt1">34</div><div class=3D"lin=
e number35 index34 alt2">35</div><div class=3D"line number36 index35 alt1">=
36</div><div class=3D"line number37 index36 alt2">37</div><div class=3D"lin=
e number38 index37 alt1">38</div><div class=3D"line number39 index38 alt2">=
39</div><div class=3D"line number40 index39 alt1">40</div><div class=3D"lin=
e number41 index40 alt2">41</div><div class=3D"line number42 index41 alt1">=
42</div><div class=3D"line number43 index42 alt2">43</div><div class=3D"lin=
e number44 index43 alt1">44</div><div class=3D"line number45 index44 alt2">=
45</div><div class=3D"line number46 index45 alt1">46</div><div class=3D"lin=
e number47 index46 alt2">47</div><div class=3D"line number48 index47 alt1">=
48</div><div class=3D"line number49 index48 alt2">49</div></td><td class=3D=
"code"><div class=3D"container"><div class=3D"line number1 index0 alt2"><co=
de class=3D"js comments">// Extend an object with an extension</code></div>=
<div class=3D"line number2 index1 alt1"><code class=3D"js keyword">function=
</code> <code class=3D"js plain">extend( obj, extension ){</code></div><div=
 class=3D"line number3 index2 alt2"><code class=3D"js spaces">&nbsp;&nbsp;<=
/code><code class=3D"js keyword">for</code> <code class=3D"js plain">( </co=
de><code class=3D"js keyword">var</code> <code class=3D"js plain">key </cod=
e><code class=3D"js keyword">in</code> <code class=3D"js plain">extension )=
{</code></div><div class=3D"line number4 index3 alt1"><code class=3D"js spa=
ces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">obj[key] =3D e=
xtension[key];</code></div><div class=3D"line number5 index4 alt2"><code cl=
ass=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js plain">}</code></div=
><div class=3D"line number6 index5 alt1"><code class=3D"js plain">}</code><=
/div><div class=3D"line number7 index6 alt2">&nbsp;</div><div class=3D"line=
 number8 index7 alt1"><code class=3D"js comments">// References to our DOM =
elements</code></div><div class=3D"line number9 index8 alt2">&nbsp;</div><d=
iv class=3D"line number10 index9 alt1"><code class=3D"js keyword">var</code=
> <code class=3D"js plain">controlCheckbox =3D document.getElementById( </c=
ode><code class=3D"js string">"mainCheckbox"</code> <code class=3D"js plain=
">),</code></div><div class=3D"line number11 index10 alt2"><code class=3D"j=
s spaces">&nbsp;&nbsp;</code><code class=3D"js plain">addBtn =3D document.g=
etElementById( </code><code class=3D"js string">"addNewObserver"</code> <co=
de class=3D"js plain">),</code></div><div class=3D"line number12 index11 al=
t1"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js plain">c=
ontainer =3D document.getElementById( </code><code class=3D"js string">"obs=
erversContainer"</code> <code class=3D"js plain">);</code></div><div class=
=3D"line number13 index12 alt2">&nbsp;</div><div class=3D"line number14 ind=
ex13 alt1">&nbsp;</div><div class=3D"line number15 index14 alt2"><code clas=
s=3D"js comments">// Concrete Subject</code></div><div class=3D"line number=
16 index15 alt1">&nbsp;</div><div class=3D"line number17 index16 alt2"><cod=
e class=3D"js comments">// Extend the controlling checkbox with the Subject=
 class</code></div><div class=3D"line number18 index17 alt1"><code class=3D=
"js plain">extend( controlCheckbox, </code><code class=3D"js keyword">new</=
code> <code class=3D"js plain">Subject() );</code></div><div class=3D"line =
number19 index18 alt2">&nbsp;</div><div class=3D"line number20 index19 alt1=
"><code class=3D"js comments">// Clicking the checkbox will trigger notific=
ations to its observers</code></div><div class=3D"line number21 index20 alt=
2"><code class=3D"js plain">controlCheckbox.onclick =3D </code><code class=
=3D"js keyword">function</code><code class=3D"js plain">(){</code></div><di=
v class=3D"line number22 index21 alt1"><code class=3D"js spaces">&nbsp;&nbs=
p;</code><code class=3D"js plain">controlCheckbox.notify( controlCheckbox.c=
hecked );</code></div><div class=3D"line number23 index22 alt2"><code class=
=3D"js plain">};</code></div><div class=3D"line number24 index23 alt1">&nbs=
p;</div><div class=3D"line number25 index24 alt2"><code class=3D"js plain">=
addBtn.onclick =3D addNewObserver;</code></div><div class=3D"line number26 =
index25 alt1">&nbsp;</div><div class=3D"line number27 index26 alt2"><code c=
lass=3D"js comments">// Concrete Observer</code></div><div class=3D"line nu=
mber28 index27 alt1">&nbsp;</div><div class=3D"line number29 index28 alt2">=
<code class=3D"js keyword">function</code> <code class=3D"js plain">addNewO=
bserver(){</code></div><div class=3D"line number30 index29 alt1">&nbsp;</di=
v><div class=3D"line number31 index30 alt2"><code class=3D"js spaces">&nbsp=
;&nbsp;</code><code class=3D"js comments">// Create a new checkbox to be ad=
ded</code></div><div class=3D"line number32 index31 alt1"><code class=3D"js=
 spaces">&nbsp;&nbsp;</code><code class=3D"js keyword">var</code> <code cla=
ss=3D"js plain">check =3D document.createElement( </code><code class=3D"js =
string">"input"</code> <code class=3D"js plain">);</code></div><div class=
=3D"line number33 index32 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</cod=
e><code class=3D"js plain">check.type =3D </code><code class=3D"js string">=
"checkbox"</code><code class=3D"js plain">;</code></div><div class=3D"line =
number34 index33 alt1">&nbsp;</div><div class=3D"line number35 index34 alt2=
"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js comments">=
// Extend the checkbox with the Observer class</code></div><div class=3D"li=
ne number36 index35 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><cod=
e class=3D"js plain">extend( check, </code><code class=3D"js keyword">new</=
code> <code class=3D"js plain">Observer() );</code></div><div class=3D"line=
 number37 index36 alt2">&nbsp;</div><div class=3D"line number38 index37 alt=
1"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js comments"=
>// Override with custom update behaviour</code></div><div class=3D"line nu=
mber39 index38 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code cla=
ss=3D"js plain">check.update =3D </code><code class=3D"js keyword">function=
</code><code class=3D"js plain">( value ){</code></div><div class=3D"line n=
umber40 index39 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</c=
ode><code class=3D"js keyword">this</code><code class=3D"js plain">.checked=
 =3D value;</code></div><div class=3D"line number41 index40 alt2"><code cla=
ss=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js plain">};</code></div=
><div class=3D"line number42 index41 alt1">&nbsp;</div><div class=3D"line n=
umber43 index42 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code cl=
ass=3D"js comments">// Add the new observer to our list of observers</code>=
</div><div class=3D"line number44 index43 alt1"><code class=3D"js spaces">&=
nbsp;&nbsp;</code><code class=3D"js comments">// for our main subject</code=
></div><div class=3D"line number45 index44 alt2"><code class=3D"js spaces">=
&nbsp;&nbsp;</code><code class=3D"js plain">controlCheckbox.addObserver( ch=
eck );</code></div><div class=3D"line number46 index45 alt1">&nbsp;</div><d=
iv class=3D"line number47 index46 alt2"><code class=3D"js spaces">&nbsp;&nb=
sp;</code><code class=3D"js comments">// Append the item to the container</=
code></div><div class=3D"line number48 index47 alt1"><code class=3D"js spac=
es">&nbsp;&nbsp;</code><code class=3D"js plain">container.appendChild( chec=
k );</code></div><div class=3D"line number49 index48 alt2"><code class=3D"j=
s plain">}</code></div></div></td></tr></tbody></table></div></div>
<p></p>

<p>In this example, we looked at how to implement and utilize the Observer =
pattern, covering the concepts of a Subject, Observer, ConcreteSubject and =
ConcreteObserver.</p>


<h3>Differences Between The Observer And Publish/Subscribe Pattern</h3>

 <p>Whilst the Observer pattern is useful to be aware of, quite often in th=
e JavaScript world, we'll find it commonly implemented using a variation kn=
own as the Publish/Subscribe pattern. Whilst very similar, there are differ=
ences between these patterns worth noting.</p>

<p>The Observer pattern requires that the observer (or object) wishing to r=
eceive topic notifications must subscribe this interest to the object firin=
g the event (the subject).</p>

<p>The Publish/Subscribe pattern however uses a topic/event channel which s=
its between the objects wishing to receive notifications (subscribers) and =
the object firing the event (the publisher). This event system allows code =
to define application specific events which can pass custom arguments conta=
ining values needed by the subscriber. The idea here is to avoid dependenci=
es between the subscriber and publisher.</p>

<p>This differs from the Observer pattern as it allows any subscriber imple=
menting an appropriate event handler to register for and receive topic noti=
fications broadcast by the publisher.</p>

<p>
Here is an example of how one might use the Publish/Subscribe if provided w=
ith a functional implementation powering <code>publish()</code>,<code>subsc=
ribe()</code> and <code>unsubscribe()</code> behind the scenes:</p>

<div><div id=3D"highlighter_317831" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</=
div><div class=3D"line number19 index18 alt2">19</div><div class=3D"line nu=
mber20 index19 alt1">20</div><div class=3D"line number21 index20 alt2">21</=
div><div class=3D"line number22 index21 alt1">22</div><div class=3D"line nu=
mber23 index22 alt2">23</div><div class=3D"line number24 index23 alt1">24</=
div><div class=3D"line number25 index24 alt2">25</div><div class=3D"line nu=
mber26 index25 alt1">26</div><div class=3D"line number27 index26 alt2">27</=
div><div class=3D"line number28 index27 alt1">28</div><div class=3D"line nu=
mber29 index28 alt2">29</div><div class=3D"line number30 index29 alt1">30</=
div><div class=3D"line number31 index30 alt2">31</div><div class=3D"line nu=
mber32 index31 alt1">32</div><div class=3D"line number33 index32 alt2">33</=
div><div class=3D"line number34 index33 alt1">34</div><div class=3D"line nu=
mber35 index34 alt2">35</div><div class=3D"line number36 index35 alt1">36</=
div><div class=3D"line number37 index36 alt2">37</div><div class=3D"line nu=
mber38 index37 alt1">38</div><div class=3D"line number39 index38 alt2">39</=
div><div class=3D"line number40 index39 alt1">40</div><div class=3D"line nu=
mber41 index40 alt2">41</div><div class=3D"line number42 index41 alt1">42</=
div></td><td class=3D"code"><div class=3D"container"><div class=3D"line num=
ber1 index0 alt2"><code class=3D"js comments">// A very simple new mail han=
dler</code></div><div class=3D"line number2 index1 alt1">&nbsp;</div><div c=
lass=3D"line number3 index2 alt2"><code class=3D"js comments">// A count of=
 the number of messages received</code></div><div class=3D"line number4 ind=
ex3 alt1"><code class=3D"js keyword">var</code> <code class=3D"js plain">ma=
ilCounter =3D 0;</code></div><div class=3D"line number5 index4 alt2">&nbsp;=
</div><div class=3D"line number6 index5 alt1"><code class=3D"js comments">/=
/ Initialize subscribers that will listen out for a topic</code></div><div =
class=3D"line number7 index6 alt2"><code class=3D"js comments">// with the =
name "inbox/newMessage".</code></div><div class=3D"line number8 index7 alt1=
">&nbsp;</div><div class=3D"line number9 index8 alt2"><code class=3D"js com=
ments">// Render a preview of new messages</code></div><div class=3D"line n=
umber10 index9 alt1"><code class=3D"js keyword">var</code> <code class=3D"j=
s plain">subscriber1 =3D subscribe( </code><code class=3D"js string">"inbox=
/newMessage"</code><code class=3D"js plain">, </code><code class=3D"js keyw=
ord">function</code><code class=3D"js plain">( topic, data ) {</code></div>=
<div class=3D"line number11 index10 alt2">&nbsp;</div><div class=3D"line nu=
mber12 index11 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><code cla=
ss=3D"js comments">// Log the topic for debugging purposes</code></div><div=
 class=3D"line number13 index12 alt2"><code class=3D"js spaces">&nbsp;&nbsp=
;</code><code class=3D"js plain">console.log( </code><code class=3D"js stri=
ng">"A new message was received: "</code><code class=3D"js plain">, topic )=
;</code></div><div class=3D"line number14 index13 alt1">&nbsp;</div><div cl=
ass=3D"line number15 index14 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</=
code><code class=3D"js comments">// Use the data that was passed from our s=
ubject</code></div><div class=3D"line number16 index15 alt1"><code class=3D=
"js spaces">&nbsp;&nbsp;</code><code class=3D"js comments">// to display a =
message preview to the user</code></div><div class=3D"line number17 index16=
 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js plain=
">$( </code><code class=3D"js string">".messageSender"</code> <code class=
=3D"js plain">).html( data.sender );</code></div><div class=3D"line number1=
8 index17 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D=
"js plain">$( </code><code class=3D"js string">".messagePreview"</code> <co=
de class=3D"js plain">).html( data.body );</code></div><div class=3D"line n=
umber19 index18 alt2">&nbsp;</div><div class=3D"line number20 index19 alt1"=
><code class=3D"js plain">});</code></div><div class=3D"line number21 index=
20 alt2">&nbsp;</div><div class=3D"line number22 index21 alt1"><code class=
=3D"js comments">// Here's another subscriber using the same data to perfor=
m</code></div><div class=3D"line number23 index22 alt2"><code class=3D"js c=
omments">// a different task.</code></div><div class=3D"line number24 index=
23 alt1">&nbsp;</div><div class=3D"line number25 index24 alt2"><code class=
=3D"js comments">// Update the counter displaying the number of new</code><=
/div><div class=3D"line number26 index25 alt1"><code class=3D"js comments">=
// messages received via the publisher</code></div><div class=3D"line numbe=
r27 index26 alt2">&nbsp;</div><div class=3D"line number28 index27 alt1"><co=
de class=3D"js keyword">var</code> <code class=3D"js plain">subscriber2 =3D=
 subscribe( </code><code class=3D"js string">"inbox/newMessage"</code><code=
 class=3D"js plain">, </code><code class=3D"js keyword">function</code><cod=
e class=3D"js plain">( topic, data ) {</code></div><div class=3D"line numbe=
r29 index28 alt2">&nbsp;</div><div class=3D"line number30 index29 alt1"><co=
de class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js plain">$('.newM=
essageCounter').html( ++mailCounter );</code></div><div class=3D"line numbe=
r31 index30 alt2">&nbsp;</div><div class=3D"line number32 index31 alt1"><co=
de class=3D"js plain">});</code></div><div class=3D"line number33 index32 a=
lt2">&nbsp;</div><div class=3D"line number34 index33 alt1"><code class=3D"j=
s plain">publish( </code><code class=3D"js string">"inbox/newMessage"</code=
><code class=3D"js plain">, [{</code></div><div class=3D"line number35 inde=
x34 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js pl=
ain">sender: </code><code class=3D"js string">"hello@google.com"</code><cod=
e class=3D"js plain">,</code></div><div class=3D"line number36 index35 alt1=
"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js plain">bod=
y: </code><code class=3D"js string">"Hey there! How are you doing today?"</=
code></div><div class=3D"line number37 index36 alt2"><code class=3D"js plai=
n">}]);</code></div><div class=3D"line number38 index37 alt1">&nbsp;</div><=
div class=3D"line number39 index38 alt2"><code class=3D"js comments">// We =
could then at a later point unsubscribe our subscribers</code></div><div cl=
ass=3D"line number40 index39 alt1"><code class=3D"js comments">// from rece=
iving any new topic notifications as follows:</code></div><div class=3D"lin=
e number41 index40 alt2"><code class=3D"js comments">// unsubscribe( subscr=
iber1 );</code></div><div class=3D"line number42 index41 alt1"><code class=
=3D"js comments">// unsubscribe( subscriber2 );</code></div></div></td></tr=
></tbody></table></div></div>

<p>
 The general idea here is the promotion of loose coupling. Rather than sing=
le objects calling on the methods of other objects directly, they instead s=
ubscribe to a specific task or activity of another object and are notified =
when it occurs.</p>

<h3>Advantages</h3>

<p>
The Observer and Publish/Subscribe patterns encourage us to think hard abou=
t the relationships between different parts of our application. They also h=
elp us identify what layers containing direct relationships which could ins=
tead be replaced with sets of subjects and observers. This effectively coul=
d be used to break down an application into smaller, more loosely coupled b=
locks to improve code management and potentials for re-use.</p>

<p>Further motivation behind using the Observer pattern is where we need to=
 maintain consistency between related objects without making classes tightl=
y coupled. For example, when an object needs to be able to notify other obj=
ects without making assumptions regarding those objects. </p>

<p>Dynamic relationships can exist between observers and subjects when usin=
g either pattern. This provides a great deal of flexibility which may not b=
e as easy to implement when disparate parts of our application are tightly =
coupled.</p>

<p>
Whilst it may not always be the best solution to every problem, these patte=
rns remain one of the best tools for designing decoupled systems and should=
 be considered an important tool in any JavaScript developer's utility belt=
.</p>

<h3>Disadvantages</h3>
<p>
Consequently, some of the issues with these patterns actually stem from the=
ir main benefits. In Publish/Subscribe, by decoupling publishers from subsc=
ribers, it can sometimes become difficult to obtain guarantees that particu=
lar parts of our applications are functioning as we may expect.</p>

<p>
For example, publishers may make an assumption that one or more subscribers=
 are listening to them. Say that we're using such an assumption to log or o=
utput errors regarding some application process. If the subscriber performi=
ng the logging crashes (or for some reason fails to function), the publishe=
r won't have a way of seeing this due to the decoupled nature of the system=
.</p>

<p>Another draw-back of the pattern is that subscribers are quite ignorant =
to the existence of each other and are blind to the cost of switching publi=
shers. Due to the dynamic relationship between subscribers and publishers, =
the update dependency can be difficult to track.</p>


<h3>Publish/Subscribe Implementations</h3>

<p>
Publish/Subscribe fits in very well in JavaScript ecosystems, largely becau=
se at the core, ECMAScript implementations are event driven. This is partic=
ularly true in browser environments as the DOM uses events as its main inte=
raction API for scripting.</p>

<p>That said, neither ECMAScript nor DOM provide core objects or methods fo=
r creating custom events systems in implementation code (with the exception=
 of perhaps the DOM3 CustomEvent, which is bound to the DOM and is thus not=
 generically useful).</p>

<p>Luckily, popular JavaScript libraries such as dojo, jQuery (custom event=
s) and YUI already have utilities that can assist in easily implementing a =
Publish/Subscribe system with very little effort. Below we can see some exa=
mples of this:</p>

<div><div id=3D"highlighter_886848" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</=
div><div class=3D"line number19 index18 alt2">19</div><div class=3D"line nu=
mber20 index19 alt1">20</div><div class=3D"line number21 index20 alt2">21</=
div><div class=3D"line number22 index21 alt1">22</div><div class=3D"line nu=
mber23 index22 alt2">23</div><div class=3D"line number24 index23 alt1">24</=
div><div class=3D"line number25 index24 alt2">25</div><div class=3D"line nu=
mber26 index25 alt1">26</div><div class=3D"line number27 index26 alt2">27</=
div><div class=3D"line number28 index27 alt1">28</div><div class=3D"line nu=
mber29 index28 alt2">29</div><div class=3D"line number30 index29 alt1">30</=
div><div class=3D"line number31 index30 alt2">31</div><div class=3D"line nu=
mber32 index31 alt1">32</div><div class=3D"line number33 index32 alt2">33</=
div><div class=3D"line number34 index33 alt1">34</div></td><td class=3D"cod=
e"><div class=3D"container"><div class=3D"line number1 index0 alt2"><code c=
lass=3D"js comments">// Publish</code></div><div class=3D"line number2 inde=
x1 alt1">&nbsp;</div><div class=3D"line number3 index2 alt2"><code class=3D=
"js comments">// jQuery: $(obj).trigger("channel", [arg1, arg2, arg3]);</co=
de></div><div class=3D"line number4 index3 alt1"><code class=3D"js plain">$=
( el ).trigger( </code><code class=3D"js string">"/login"</code><code class=
=3D"js plain">, [{username:</code><code class=3D"js string">"test"</code><c=
ode class=3D"js plain">, userData:</code><code class=3D"js string">"test"</=
code><code class=3D"js plain">}] );</code></div><div class=3D"line number5 =
index4 alt2">&nbsp;</div><div class=3D"line number6 index5 alt1"><code clas=
s=3D"js comments">// Dojo: dojo.publish("channel", [arg1, arg2, arg3] );</c=
ode></div><div class=3D"line number7 index6 alt2"><code class=3D"js plain">=
dojo.publish( </code><code class=3D"js string">"/login"</code><code class=
=3D"js plain">, [{username:</code><code class=3D"js string">"test"</code><c=
ode class=3D"js plain">, userData:</code><code class=3D"js string">"test"</=
code><code class=3D"js plain">}] );</code></div><div class=3D"line number8 =
index7 alt1">&nbsp;</div><div class=3D"line number9 index8 alt2"><code clas=
s=3D"js comments">// YUI: el.publish("channel", [arg1, arg2, arg3]);</code>=
</div><div class=3D"line number10 index9 alt1"><code class=3D"js plain">el.=
publish( </code><code class=3D"js string">"/login"</code><code class=3D"js =
plain">, {username:</code><code class=3D"js string">"test"</code><code clas=
s=3D"js plain">, userData:</code><code class=3D"js string">"test"</code><co=
de class=3D"js plain">} );</code></div><div class=3D"line number11 index10 =
alt2">&nbsp;</div><div class=3D"line number12 index11 alt1">&nbsp;</div><di=
v class=3D"line number13 index12 alt2"><code class=3D"js comments">// Subsc=
ribe</code></div><div class=3D"line number14 index13 alt1">&nbsp;</div><div=
 class=3D"line number15 index14 alt2"><code class=3D"js comments">// jQuery=
: $(obj).on( "channel", [data], fn );</code></div><div class=3D"line number=
16 index15 alt1"><code class=3D"js plain">$( el ).on( </code><code class=3D=
"js string">"/login"</code><code class=3D"js plain">, </code><code class=3D=
"js keyword">function</code><code class=3D"js plain">( event ){...} );</cod=
e></div><div class=3D"line number17 index16 alt2">&nbsp;</div><div class=3D=
"line number18 index17 alt1"><code class=3D"js comments">// Dojo: dojo.subs=
cribe( "channel", fn);</code></div><div class=3D"line number19 index18 alt2=
"><code class=3D"js keyword">var</code> <code class=3D"js plain">handle =3D=
 dojo.subscribe( </code><code class=3D"js string">"/login"</code><code clas=
s=3D"js plain">, </code><code class=3D"js keyword">function</code><code cla=
ss=3D"js plain">(data){..} );</code></div><div class=3D"line number20 index=
19 alt1">&nbsp;</div><div class=3D"line number21 index20 alt2"><code class=
=3D"js comments">// YUI: el.on("channel", handler);</code></div><div class=
=3D"line number22 index21 alt1"><code class=3D"js plain">el.on( </code><cod=
e class=3D"js string">"/login"</code><code class=3D"js plain">, </code><cod=
e class=3D"js keyword">function</code><code class=3D"js plain">( data ){...=
} );</code></div><div class=3D"line number23 index22 alt2">&nbsp;</div><div=
 class=3D"line number24 index23 alt1">&nbsp;</div><div class=3D"line number=
25 index24 alt2"><code class=3D"js comments">// Unsubscribe</code></div><di=
v class=3D"line number26 index25 alt1">&nbsp;</div><div class=3D"line numbe=
r27 index26 alt2"><code class=3D"js comments">// jQuery: $(obj).off( "chann=
el" );</code></div><div class=3D"line number28 index27 alt1"><code class=3D=
"js plain">$( el ).off( </code><code class=3D"js string">"/login"</code> <c=
ode class=3D"js plain">);</code></div><div class=3D"line number29 index28 a=
lt2">&nbsp;</div><div class=3D"line number30 index29 alt1"><code class=3D"j=
s comments">// Dojo: dojo.unsubscribe( handle );</code></div><div class=3D"=
line number31 index30 alt2"><code class=3D"js plain">dojo.unsubscribe( hand=
le );</code></div><div class=3D"line number32 index31 alt1">&nbsp;</div><di=
v class=3D"line number33 index32 alt2"><code class=3D"js comments">// YUI: =
el.detach("channel");</code></div><div class=3D"line number34 index33 alt1"=
><code class=3D"js plain">el.detach( </code><code class=3D"js string">"/log=
in"</code> <code class=3D"js plain">);</code></div></div></td></tr></tbody>=
</table></div></div>

<p>
For those wishing to use the Publish/Subscribe pattern with vanilla JavaScr=
ipt (or another library) <a href=3D"http://amplifyjs.com/">AmplifyJS</a> in=
cludes a clean, library-agnostic implementation that can be used with any l=
ibrary or toolkit. Radio.js (<a href=3D"http://radio.uxder.com/">http://rad=
io.uxder.com/</a>), PubSubJS (<a href=3D"https://github.com/mroderick/PubSu=
bJS">https://github.com/mroderick/PubSubJS</a>) or Pure JS PubSub by Peter =
Higgins (<a href=3D"https://github.com/phiggins42/bloody-jquery-plugins/blo=
b/55e41df9bf08f42378bb08b93efcb28555b61aeb/pubsub.js">https://github.com/ph=
iggins42/bloody-jquery-plugins/blob/55e41df9bf08f42378bb08b93efcb28555b61ae=
b/pubsub.js</a>) are also similar alternatives worth checking out.</p>

<p>
jQuery developers in particular have quite a few other options and can opt =
to use one of the many well-developed implementations ranging from Peter Hi=
ggins's jQuery plugin to Ben Alman's (optimized) Pub/Sub jQuery gist on Git=
Hub. Links to just a few of these can be found below.
</p>

<ul>
<li>Ben Alman's Pub/Sub gist <a href=3D"https://gist.github.com/661855">htt=
ps://gist.github.com/661855</a> (recommended)</li>
<li>Rick Waldron's jQuery-core style take on the above <a href=3D"https://g=
ist.github.com/705311">https://gist.github.com/705311</a></li>
<li>Peter Higgins" plugin <a href=3D"http://github.com/phiggins42/bloody-jq=
uery-plugins/blob/master/pubsub.js">http://github.com/phiggins42/bloody-jqu=
ery-plugins/blob/master/pubsub.js</a>.</li>
<li>AppendTo's Pub/Sub in AmplifyJS <a href=3D"http://amplifyjs.com/">http:=
//amplifyjs.com</a></li>
<li>Ben Truyman's gist <a href=3D"https://gist.github.com/826794">https://g=
ist.github.com/826794</a></li>
</ul>

<p>
So that we are able to get an appreciation for how many of the vanilla Java=
Script implementations of the Observer pattern might work, let's take a wal=
k through of a minimalist version of Publish/Subscribe I released on GitHub=
 under a project called <a href=3D"http://github.com/addyosmani/pubsubz">pu=
bsubz</a>. This demonstrates the core concepts of subscribe, publish as wel=
l as the concept of unsubscribing.</p>

<p>
I've opted to base our examples on this code as it sticks closely to both t=
he method signatures and approach of implementation I would expect to see i=
n a JavaScript version of the classic Observer pattern.</p>


<h4>A Publish/Subscribe Implementation</h4>
<p>
</p><div><div id=3D"highlighter_910411" class=3D"syntaxhighlighter  js acod=
ecode"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resou=
rces/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help h=
elp">?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D=
"0"><tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2"=
>1</div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line n=
umber3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><=
div class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 in=
dex5 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=
=3D"line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2=
">9</div><div class=3D"line number10 index9 alt1">10</div><div class=3D"lin=
e number11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">=
12</div><div class=3D"line number13 index12 alt2">13</div><div class=3D"lin=
e number14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">=
15</div><div class=3D"line number16 index15 alt1">16</div><div class=3D"lin=
e number17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">=
18</div><div class=3D"line number19 index18 alt2">19</div><div class=3D"lin=
e number20 index19 alt1">20</div><div class=3D"line number21 index20 alt2">=
21</div><div class=3D"line number22 index21 alt1">22</div><div class=3D"lin=
e number23 index22 alt2">23</div><div class=3D"line number24 index23 alt1">=
24</div><div class=3D"line number25 index24 alt2">25</div><div class=3D"lin=
e number26 index25 alt1">26</div><div class=3D"line number27 index26 alt2">=
27</div><div class=3D"line number28 index27 alt1">28</div><div class=3D"lin=
e number29 index28 alt2">29</div><div class=3D"line number30 index29 alt1">=
30</div><div class=3D"line number31 index30 alt2">31</div><div class=3D"lin=
e number32 index31 alt1">32</div><div class=3D"line number33 index32 alt2">=
33</div><div class=3D"line number34 index33 alt1">34</div><div class=3D"lin=
e number35 index34 alt2">35</div><div class=3D"line number36 index35 alt1">=
36</div><div class=3D"line number37 index36 alt2">37</div><div class=3D"lin=
e number38 index37 alt1">38</div><div class=3D"line number39 index38 alt2">=
39</div><div class=3D"line number40 index39 alt1">40</div><div class=3D"lin=
e number41 index40 alt2">41</div><div class=3D"line number42 index41 alt1">=
42</div><div class=3D"line number43 index42 alt2">43</div><div class=3D"lin=
e number44 index43 alt1">44</div><div class=3D"line number45 index44 alt2">=
45</div><div class=3D"line number46 index45 alt1">46</div><div class=3D"lin=
e number47 index46 alt2">47</div><div class=3D"line number48 index47 alt1">=
48</div><div class=3D"line number49 index48 alt2">49</div><div class=3D"lin=
e number50 index49 alt1">50</div><div class=3D"line number51 index50 alt2">=
51</div><div class=3D"line number52 index51 alt1">52</div><div class=3D"lin=
e number53 index52 alt2">53</div><div class=3D"line number54 index53 alt1">=
54</div><div class=3D"line number55 index54 alt2">55</div><div class=3D"lin=
e number56 index55 alt1">56</div><div class=3D"line number57 index56 alt2">=
57</div><div class=3D"line number58 index57 alt1">58</div><div class=3D"lin=
e number59 index58 alt2">59</div><div class=3D"line number60 index59 alt1">=
60</div><div class=3D"line number61 index60 alt2">61</div><div class=3D"lin=
e number62 index61 alt1">62</div><div class=3D"line number63 index62 alt2">=
63</div><div class=3D"line number64 index63 alt1">64</div><div class=3D"lin=
e number65 index64 alt2">65</div></td><td class=3D"code"><div class=3D"cont=
ainer"><div class=3D"line number1 index0 alt2"><code class=3D"js keyword">v=
ar</code> <code class=3D"js plain">pubsub =3D {};</code></div><div class=3D=
"line number2 index1 alt1">&nbsp;</div><div class=3D"line number3 index2 al=
t2"><code class=3D"js plain">(</code><code class=3D"js keyword">function</c=
ode><code class=3D"js plain">(myObject) {</code></div><div class=3D"line nu=
mber4 index3 alt1">&nbsp;</div><div class=3D"line number5 index4 alt2"><cod=
e class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comm=
ents">// Storage for topics that can be broadcast</code></div><div class=3D=
"line number6 index5 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbs=
p;</code><code class=3D"js comments">// or listened to</code></div><div cla=
ss=3D"line number7 index6 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp=
;&nbsp;</code><code class=3D"js keyword">var</code> <code class=3D"js plain=
">topics =3D {};</code></div><div class=3D"line number8 index7 alt1">&nbsp;=
</div><div class=3D"line number9 index8 alt2"><code class=3D"js spaces">&nb=
sp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// A topic identifi=
er</code></div><div class=3D"line number10 index9 alt1"><code class=3D"js s=
paces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">var</code>=
 <code class=3D"js plain">subUid =3D -1;</code></div><div class=3D"line num=
ber11 index10 alt2">&nbsp;</div><div class=3D"line number12 index11 alt1"><=
code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js c=
omments">// Publish or broadcast events of interest</code></div><div class=
=3D"line number13 index12 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp=
;&nbsp;</code><code class=3D"js comments">// with a specific topic name and=
 arguments</code></div><div class=3D"line number14 index13 alt1"><code clas=
s=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">=
// such as the data to pass along</code></div><div class=3D"line number15 i=
ndex14 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code=
 class=3D"js plain">myObject.publish =3D </code><code class=3D"js keyword">=
function</code><code class=3D"js plain">( topic, args ) {</code></div><div =
class=3D"line number16 index15 alt1">&nbsp;</div><div class=3D"line number1=
7 index16 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;</code><code class=3D"js keyword">if</code> <code class=3D"j=
s plain">( !topics[topic] ) {</code></div><div class=3D"line number18 index=
17 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">return</c=
ode> <code class=3D"js keyword">false</code><code class=3D"js plain">;</cod=
e></div><div class=3D"line number19 index18 alt2"><code class=3D"js spaces"=
>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js p=
lain">}</code></div><div class=3D"line number20 index19 alt1">&nbsp;</div><=
div class=3D"line number21 index20 alt2"><code class=3D"js spaces">&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">v=
ar</code> <code class=3D"js plain">subscribers =3D topics[topic],</code></d=
iv><div class=3D"line number22 index21 alt1"><code class=3D"js spaces">&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>=
<code class=3D"js plain">len =3D subscribers ? subscribers.length : 0;</cod=
e></div><div class=3D"line number23 index22 alt2">&nbsp;</div><div class=3D=
"line number24 index23 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">while</code> =
<code class=3D"js plain">(len--) {</code></div><div class=3D"line number25 =
index24 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">subscr=
ibers[len].func( topic, args );</code></div><div class=3D"line number26 ind=
ex25 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;</code><code class=3D"js plain">}</code></div><div class=3D"line =
number27 index26 alt2">&nbsp;</div><div class=3D"line number28 index27 alt1=
"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;</code><code class=3D"js keyword">return</code> <code class=3D"js keyword"=
>this</code><code class=3D"js plain">;</code></div><div class=3D"line numbe=
r29 index28 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>=
<code class=3D"js plain">};</code></div><div class=3D"line number30 index29=
 alt1">&nbsp;</div><div class=3D"line number31 index30 alt2"><code class=3D=
"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// S=
ubscribe to events of interest</code></div><div class=3D"line number32 inde=
x31 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code cl=
ass=3D"js comments">// with a specific topic name and a</code></div><div cl=
ass=3D"line number33 index32 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&n=
bsp;&nbsp;</code><code class=3D"js comments">// callback function, to be ex=
ecuted</code></div><div class=3D"line number34 index33 alt1"><code class=3D=
"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// w=
hen the topic/event is observed</code></div><div class=3D"line number35 ind=
ex34 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code c=
lass=3D"js plain">myObject.subscribe =3D </code><code class=3D"js keyword">=
function</code><code class=3D"js plain">( topic, func ) {</code></div><div =
class=3D"line number36 index35 alt1">&nbsp;</div><div class=3D"line number3=
7 index36 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;</code><code class=3D"js keyword">if</code> <code class=3D"j=
s plain">(!topics[topic]) {</code></div><div class=3D"line number38 index37=
 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">topics[topic]=
 =3D [];</code></div><div class=3D"line number39 index38 alt2"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code=
 class=3D"js plain">}</code></div><div class=3D"line number40 index39 alt1"=
>&nbsp;</div><div class=3D"line number41 index40 alt2"><code class=3D"js sp=
aces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D=
"js keyword">var</code> <code class=3D"js plain">token =3D ( ++subUid ).toS=
tring();</code></div><div class=3D"line number42 index41 alt1"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code=
 class=3D"js plain">topics[topic].push({</code></div><div class=3D"line num=
ber43 index42 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">=
token: token,</code></div><div class=3D"line number44 index43 alt1"><code c=
lass=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</code><code class=3D"js plain">func: func</code></div><div=
 class=3D"line number45 index44 alt2"><code class=3D"js spaces">&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">});</c=
ode></div><div class=3D"line number46 index45 alt1"><code class=3D"js space=
s">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js=
 keyword">return</code> <code class=3D"js plain">token;</code></div><div cl=
ass=3D"line number47 index46 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&n=
bsp;&nbsp;</code><code class=3D"js plain">};</code></div><div class=3D"line=
 number48 index47 alt1">&nbsp;</div><div class=3D"line number49 index48 alt=
2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"=
js comments">// Unsubscribe from a specific</code></div><div class=3D"line =
number50 index49 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</=
code><code class=3D"js comments">// topic, based on a tokenized reference</=
code></div><div class=3D"line number51 index50 alt2"><code class=3D"js spac=
es">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// to the su=
bscription</code></div><div class=3D"line number52 index51 alt1"><code clas=
s=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">myO=
bject.unsubscribe =3D </code><code class=3D"js keyword">function</code><cod=
e class=3D"js plain">( token ) {</code></div><div class=3D"line number53 in=
dex52 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;</code><code class=3D"js keyword">for</code> <code class=3D"js p=
lain">( </code><code class=3D"js keyword">var</code> <code class=3D"js plai=
n">m </code><code class=3D"js keyword">in</code> <code class=3D"js plain">t=
opics ) {</code></div><div class=3D"line number54 index53 alt1"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;</code><code class=3D"js keyword">if</code> <code class=3D"js p=
lain">( topics[m] ) {</code></div><div class=3D"line number55 index54 alt2"=
><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js ke=
yword">for</code> <code class=3D"js plain">( </code><code class=3D"js keywo=
rd">var</code> <code class=3D"js plain">i =3D 0, j =3D topics[m].length; i =
&lt; j; i++ ) {</code></div><div class=3D"line number56 index55 alt1"><code=
 class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><c=
ode class=3D"js keyword">if</code> <code class=3D"js plain">( topics[m][i].=
token =3D=3D=3D token ) {</code></div><div class=3D"line number57 index56 a=
lt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">topics[m].splice( =
i, 1 );</code></div><div class=3D"line number58 index57 alt1"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;</code><code class=3D"js keyword">return</code> <code class=3D"js =
plain">token;</code></div><div class=3D"line number59 index58 alt2"><code c=
lass=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><cod=
e class=3D"js plain">}</code></div><div class=3D"line number60 index59 alt1=
"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js p=
lain">}</code></div><div class=3D"line number61 index60 alt2"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;</code><code class=3D"js plain">}</code></div><div class=3D"lin=
e number62 index61 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">}</code></div><div =
class=3D"line number63 index62 alt2"><code class=3D"js spaces">&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">retur=
n</code> <code class=3D"js keyword">this</code><code class=3D"js plain">;</=
code></div><div class=3D"line number64 index63 alt1"><code class=3D"js spac=
es">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">};</code></div>=
<div class=3D"line number65 index64 alt2"><code class=3D"js plain">}( pubsu=
b ));</code></div></div></td></tr></tbody></table></div></div>
<p></p>

<h4>Example: Using Our Implementation</h4>

<p>We can now use the implementation to publish and subscribe to events of =
interest as follows:</p>
<p>
</p><div><div id=3D"highlighter_450134" class=3D"syntaxhighlighter  js acod=
ecode"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resou=
rces/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help h=
elp">?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D=
"0"><tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2"=
>1</div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line n=
umber3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><=
div class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 in=
dex5 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=
=3D"line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2=
">9</div><div class=3D"line number10 index9 alt1">10</div><div class=3D"lin=
e number11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">=
12</div><div class=3D"line number13 index12 alt2">13</div><div class=3D"lin=
e number14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">=
15</div><div class=3D"line number16 index15 alt1">16</div><div class=3D"lin=
e number17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">=
18</div><div class=3D"line number19 index18 alt2">19</div><div class=3D"lin=
e number20 index19 alt1">20</div><div class=3D"line number21 index20 alt2">=
21</div><div class=3D"line number22 index21 alt1">22</div><div class=3D"lin=
e number23 index22 alt2">23</div><div class=3D"line number24 index23 alt1">=
24</div><div class=3D"line number25 index24 alt2">25</div><div class=3D"lin=
e number26 index25 alt1">26</div><div class=3D"line number27 index26 alt2">=
27</div><div class=3D"line number28 index27 alt1">28</div><div class=3D"lin=
e number29 index28 alt2">29</div><div class=3D"line number30 index29 alt1">=
30</div><div class=3D"line number31 index30 alt2">31</div><div class=3D"lin=
e number32 index31 alt1">32</div><div class=3D"line number33 index32 alt2">=
33</div><div class=3D"line number34 index33 alt1">34</div><div class=3D"lin=
e number35 index34 alt2">35</div></td><td class=3D"code"><div class=3D"cont=
ainer"><div class=3D"line number1 index0 alt2"><code class=3D"js comments">=
// Another simple message handler</code></div><div class=3D"line number2 in=
dex1 alt1">&nbsp;</div><div class=3D"line number3 index2 alt2"><code class=
=3D"js comments">// A simple message logger that logs any topics and data r=
eceived through our</code></div><div class=3D"line number4 index3 alt1"><co=
de class=3D"js comments">// subscriber</code></div><div class=3D"line numbe=
r5 index4 alt2"><code class=3D"js keyword">var</code> <code class=3D"js pla=
in">messageLogger =3D </code><code class=3D"js keyword">function</code> <co=
de class=3D"js plain">( topics, data ) {</code></div><div class=3D"line num=
ber6 index5 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>=
<code class=3D"js plain">console.log( </code><code class=3D"js string">"Log=
ging: "</code> <code class=3D"js plain">+ topics + </code><code class=3D"js=
 string">": "</code> <code class=3D"js plain">+ data );</code></div><div cl=
ass=3D"line number7 index6 alt2"><code class=3D"js plain">};</code></div><d=
iv class=3D"line number8 index7 alt1">&nbsp;</div><div class=3D"line number=
9 index8 alt2"><code class=3D"js comments">// Subscribers listen for topics=
 they have subscribed to and</code></div><div class=3D"line number10 index9=
 alt1"><code class=3D"js comments">// invoke a callback function (e.g messa=
geLogger) once a new</code></div><div class=3D"line number11 index10 alt2">=
<code class=3D"js comments">// notification is broadcast on that topic</cod=
e></div><div class=3D"line number12 index11 alt1"><code class=3D"js keyword=
">var</code> <code class=3D"js plain">subscription =3D pubsub.subscribe( </=
code><code class=3D"js string">"inbox/newMessage"</code><code class=3D"js p=
lain">, messageLogger );</code></div><div class=3D"line number13 index12 al=
t2">&nbsp;</div><div class=3D"line number14 index13 alt1"><code class=3D"js=
 comments">// Publishers are in charge of publishing topics or notification=
s of</code></div><div class=3D"line number15 index14 alt2"><code class=3D"j=
s comments">// interest to the application. e.g:</code></div><div class=3D"=
line number16 index15 alt1">&nbsp;</div><div class=3D"line number17 index16=
 alt2"><code class=3D"js plain">pubsub.publish( </code><code class=3D"js st=
ring">"inbox/newMessage"</code><code class=3D"js plain">, </code><code clas=
s=3D"js string">"hello world!"</code> <code class=3D"js plain">);</code></d=
iv><div class=3D"line number18 index17 alt1">&nbsp;</div><div class=3D"line=
 number19 index18 alt2"><code class=3D"js comments">// or</code></div><div =
class=3D"line number20 index19 alt1"><code class=3D"js plain">pubsub.publis=
h( </code><code class=3D"js string">"inbox/newMessage"</code><code class=3D=
"js plain">, [</code><code class=3D"js string">"test"</code><code class=3D"=
js plain">, </code><code class=3D"js string">"a"</code><code class=3D"js pl=
ain">, </code><code class=3D"js string">"b"</code><code class=3D"js plain">=
, </code><code class=3D"js string">"c"</code><code class=3D"js plain">] );<=
/code></div><div class=3D"line number21 index20 alt2">&nbsp;</div><div clas=
s=3D"line number22 index21 alt1"><code class=3D"js comments">// or</code></=
div><div class=3D"line number23 index22 alt2"><code class=3D"js plain">pubs=
ub.publish( </code><code class=3D"js string">"inbox/newMessage"</code><code=
 class=3D"js plain">, {</code></div><div class=3D"line number24 index23 alt=
1"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js plain">se=
nder: </code><code class=3D"js string">"hello@google.com"</code><code class=
=3D"js plain">,</code></div><div class=3D"line number25 index24 alt2"><code=
 class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js plain">body: </co=
de><code class=3D"js string">"Hey again!"</code></div><div class=3D"line nu=
mber26 index25 alt1"><code class=3D"js plain">});</code></div><div class=3D=
"line number27 index26 alt2">&nbsp;</div><div class=3D"line number28 index2=
7 alt1"><code class=3D"js comments">// We can also unsubscribe if we no lon=
ger wish for our subscribers</code></div><div class=3D"line number29 index2=
8 alt2"><code class=3D"js comments">// to be notified</code></div><div clas=
s=3D"line number30 index29 alt1"><code class=3D"js plain">pubsub.unsubscrib=
e( subscription );</code></div><div class=3D"line number31 index30 alt2">&n=
bsp;</div><div class=3D"line number32 index31 alt1"><code class=3D"js comme=
nts">// Once unsubscribed, this for example won't result in our</code></div=
><div class=3D"line number33 index32 alt2"><code class=3D"js comments">// m=
essageLogger being executed as the subscriber is</code></div><div class=3D"=
line number34 index33 alt1"><code class=3D"js comments">// no longer listen=
ing</code></div><div class=3D"line number35 index34 alt2"><code class=3D"js=
 plain">pubsub.publish( </code><code class=3D"js string">"inbox/newMessage"=
</code><code class=3D"js plain">, </code><code class=3D"js string">"Hello! =
are you still there?"</code> <code class=3D"js plain">);</code></div></div>=
</td></tr></tbody></table></div></div>
<p></p>

<h4>Example: User-Interface Notifications</h4>

<p>Next, let's imagine we have a web application responsible for displaying=
 real-time stock information.</p>

<p>
The application might have a grid for displaying the stock stats and a coun=
ter for displaying the last point of update. When the data model changes, t=
he application will need to update the grid and counter. In this scenario, =
our subject (which will be publishing topics/notifications) is the data mod=
el and our subscribers are the grid and counter.</p>

<p>
When our subscribers receive notification that the model itself has changed=
, they can update themselves accordingly.
</p>

<p>
In our implementation, our subscriber will listen to the topic "newDataAvai=
lable" to find out if new stock information is available. If a new notifica=
tion is published to this topic, it will trigger <code>gridUpdate</code> to=
 add a new row to our grid containing this information. It will also update=
 a <em>last updated</em> counter to log the last time data was added
</p>

<div><div id=3D"highlighter_318711" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</=
div><div class=3D"line number19 index18 alt2">19</div><div class=3D"line nu=
mber20 index19 alt1">20</div><div class=3D"line number21 index20 alt2">21</=
div><div class=3D"line number22 index21 alt1">22</div><div class=3D"line nu=
mber23 index22 alt2">23</div><div class=3D"line number24 index23 alt1">24</=
div><div class=3D"line number25 index24 alt2">25</div><div class=3D"line nu=
mber26 index25 alt1">26</div><div class=3D"line number27 index26 alt2">27</=
div><div class=3D"line number28 index27 alt1">28</div><div class=3D"line nu=
mber29 index28 alt2">29</div><div class=3D"line number30 index29 alt1">30</=
div><div class=3D"line number31 index30 alt2">31</div><div class=3D"line nu=
mber32 index31 alt1">32</div><div class=3D"line number33 index32 alt2">33</=
div><div class=3D"line number34 index33 alt1">34</div><div class=3D"line nu=
mber35 index34 alt2">35</div><div class=3D"line number36 index35 alt1">36</=
div><div class=3D"line number37 index36 alt2">37</div><div class=3D"line nu=
mber38 index37 alt1">38</div><div class=3D"line number39 index38 alt2">39</=
div><div class=3D"line number40 index39 alt1">40</div><div class=3D"line nu=
mber41 index40 alt2">41</div><div class=3D"line number42 index41 alt1">42</=
div><div class=3D"line number43 index42 alt2">43</div><div class=3D"line nu=
mber44 index43 alt1">44</div><div class=3D"line number45 index44 alt2">45</=
div><div class=3D"line number46 index45 alt1">46</div><div class=3D"line nu=
mber47 index46 alt2">47</div><div class=3D"line number48 index47 alt1">48</=
div><div class=3D"line number49 index48 alt2">49</div><div class=3D"line nu=
mber50 index49 alt1">50</div><div class=3D"line number51 index50 alt2">51</=
div><div class=3D"line number52 index51 alt1">52</div><div class=3D"line nu=
mber53 index52 alt2">53</div><div class=3D"line number54 index53 alt1">54</=
div><div class=3D"line number55 index54 alt2">55</div><div class=3D"line nu=
mber56 index55 alt1">56</div><div class=3D"line number57 index56 alt2">57</=
div><div class=3D"line number58 index57 alt1">58</div></td><td class=3D"cod=
e"><div class=3D"container"><div class=3D"line number1 index0 alt2"><code c=
lass=3D"js comments">// Return the current local time to be used in our UI =
later</code></div><div class=3D"line number2 index1 alt1"><code class=3D"js=
 plain">getCurrentTime =3D </code><code class=3D"js keyword">function</code=
> <code class=3D"js plain">(){</code></div><div class=3D"line number3 index=
2 alt2">&nbsp;</div><div class=3D"line number4 index3 alt1"><code class=3D"=
js spaces">&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">var</code> <=
code class=3D"js plain">date =3D </code><code class=3D"js keyword">new</cod=
e> <code class=3D"js plain">Date(),</code></div><div class=3D"line number5 =
index4 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">m =3D date.getMonth() + 1=
,</code></div><div class=3D"line number6 index5 alt1"><code class=3D"js spa=
ces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code cla=
ss=3D"js plain">d =3D date.getDate(),</code></div><div class=3D"line number=
7 index6 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">y =3D date.getFullYear(=
),</code></div><div class=3D"line number8 index7 alt1"><code class=3D"js sp=
aces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code cl=
ass=3D"js plain">t =3D date.toLocaleTimeString().toLowerCase();</code></div=
><div class=3D"line number9 index8 alt2">&nbsp;</div><div class=3D"line num=
ber10 index9 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">return</code> <code cla=
ss=3D"js plain">(m + </code><code class=3D"js string">"/"</code> <code clas=
s=3D"js plain">+ d + </code><code class=3D"js string">"/"</code> <code clas=
s=3D"js plain">+ y + </code><code class=3D"js string">" "</code> <code clas=
s=3D"js plain">+ t);</code></div><div class=3D"line number11 index10 alt2">=
<code class=3D"js plain">};</code></div><div class=3D"line number12 index11=
 alt1">&nbsp;</div><div class=3D"line number13 index12 alt2"><code class=3D=
"js comments">// Add a new row of data to our fictional grid component</cod=
e></div><div class=3D"line number14 index13 alt1"><code class=3D"js keyword=
">function</code> <code class=3D"js plain">addGridRow( data ) {</code></div=
><div class=3D"line number15 index14 alt2">&nbsp;</div><div class=3D"line n=
umber16 index15 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;</code><c=
ode class=3D"js comments">// ui.grid.addRow( data );</code></div><div class=
=3D"line number17 index16 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp=
;</code><code class=3D"js plain">console.log( </code><code class=3D"js stri=
ng">"updated grid component with:"</code> <code class=3D"js plain">+ data )=
;</code></div><div class=3D"line number18 index17 alt1">&nbsp;</div><div cl=
ass=3D"line number19 index18 alt2"><code class=3D"js plain">}</code></div><=
div class=3D"line number20 index19 alt1">&nbsp;</div><div class=3D"line num=
ber21 index20 alt2"><code class=3D"js comments">// Update our fictional gri=
d to show the time it was last</code></div><div class=3D"line number22 inde=
x21 alt1"><code class=3D"js comments">// updated</code></div><div class=3D"=
line number23 index22 alt2"><code class=3D"js keyword">function</code> <cod=
e class=3D"js plain">updateCounter( data ) {</code></div><div class=3D"line=
 number24 index23 alt1">&nbsp;</div><div class=3D"line number25 index24 alt=
2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;</code><code class=3D"js com=
ments">// ui.grid.updateLastChanged( getCurrentTime() );</code></div><div c=
lass=3D"line number26 index25 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&=
nbsp;</code><code class=3D"js plain">console.log( </code><code class=3D"js =
string">"data last updated at: "</code> <code class=3D"js plain">+ getCurre=
ntTime() + </code><code class=3D"js string">" with "</code> <code class=3D"=
js plain">+ data);</code></div><div class=3D"line number27 index26 alt2">&n=
bsp;</div><div class=3D"line number28 index27 alt1"><code class=3D"js plain=
">}</code></div><div class=3D"line number29 index28 alt2">&nbsp;</div><div =
class=3D"line number30 index29 alt1"><code class=3D"js comments">// Update =
the grid using the data passed to our subscribers</code></div><div class=3D=
"line number31 index30 alt2"><code class=3D"js plain">gridUpdate =3D </code=
><code class=3D"js keyword">function</code><code class=3D"js plain">( topic=
, data ){</code></div><div class=3D"line number32 index31 alt1">&nbsp;</div=
><div class=3D"line number33 index32 alt2"><code class=3D"js spaces">&nbsp;=
&nbsp;</code><code class=3D"js keyword">if</code> <code class=3D"js plain">=
( data !=3D=3D undefined ) {</code></div><div class=3D"line number34 index3=
3 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><cod=
e class=3D"js plain">addGridRow( data );</code></div><div class=3D"line num=
ber35 index34 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;</code><code class=3D"js plain">updateCounter( data );</code></div><div cl=
ass=3D"line number36 index35 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&n=
bsp;</code><code class=3D"js plain">}</code></div><div class=3D"line number=
37 index36 alt2">&nbsp;</div><div class=3D"line number38 index37 alt1"><cod=
e class=3D"js plain">};</code></div><div class=3D"line number39 index38 alt=
2">&nbsp;</div><div class=3D"line number40 index39 alt1"><code class=3D"js =
comments">// Create a subscription to the newDataAvailable topic</code></di=
v><div class=3D"line number41 index40 alt2"><code class=3D"js keyword">var<=
/code> <code class=3D"js plain">subscriber =3D pubsub.subscribe( </code><co=
de class=3D"js string">"newDataAvailable"</code><code class=3D"js plain">, =
gridUpdate );</code></div><div class=3D"line number42 index41 alt1">&nbsp;<=
/div><div class=3D"line number43 index42 alt2"><code class=3D"js comments">=
// The following represents updates to our data layer. This could be</code>=
</div><div class=3D"line number44 index43 alt1"><code class=3D"js comments"=
>// powered by ajax requests which broadcast that new data is available</co=
de></div><div class=3D"line number45 index44 alt2"><code class=3D"js commen=
ts">// to the rest of the application.</code></div><div class=3D"line numbe=
r46 index45 alt1">&nbsp;</div><div class=3D"line number47 index46 alt2"><co=
de class=3D"js comments">// Publish changes to the gridUpdated topic repres=
enting new entries</code></div><div class=3D"line number48 index47 alt1"><c=
ode class=3D"js plain">pubsub.publish( </code><code class=3D"js string">"ne=
wDataAvailable"</code><code class=3D"js plain">, {</code></div><div class=
=3D"line number49 index48 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</cod=
e><code class=3D"js plain">summary: </code><code class=3D"js string">"Apple=
 made $5 billion"</code><code class=3D"js plain">,</code></div><div class=
=3D"line number50 index49 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</cod=
e><code class=3D"js plain">identifier: </code><code class=3D"js string">"AP=
PL"</code><code class=3D"js plain">,</code></div><div class=3D"line number5=
1 index50 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D=
"js plain">stockPrice: 570.91</code></div><div class=3D"line number52 index=
51 alt1"><code class=3D"js plain">});</code></div><div class=3D"line number=
53 index52 alt2">&nbsp;</div><div class=3D"line number54 index53 alt1"><cod=
e class=3D"js plain">pubsub.publish( </code><code class=3D"js string">"newD=
ataAvailable"</code><code class=3D"js plain">, {</code></div><div class=3D"=
line number55 index54 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><c=
ode class=3D"js plain">summary: </code><code class=3D"js string">"Microsoft=
 made $20 million"</code><code class=3D"js plain">,</code></div><div class=
=3D"line number56 index55 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</cod=
e><code class=3D"js plain">identifier: </code><code class=3D"js string">"MS=
FT"</code><code class=3D"js plain">,</code></div><div class=3D"line number5=
7 index56 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D=
"js plain">stockPrice: 30.85</code></div><div class=3D"line number58 index5=
7 alt1"><code class=3D"js plain">});</code></div></div></td></tr></tbody></=
table></div></div>


<h4>Example: Decoupling applications using Ben Alman's Pub/Sub implementati=
on</h4>

<p>
In the following movie ratings example, we'll be using Ben Alman's jQuery i=
mplementation of Publish/Subscribe to demonstrate how we can decouple a use=
r interface. Notice how submitting a rating only has the effect of publishi=
ng the fact that new user and rating data is available.
</p>

<p>
It's left up to the subscribers to those topics to then delegate what happe=
ns with that data. In our case we're pushing that new data into existing ar=
rays and then rendering them using the Underscore library's <code>.template=
()</code> method for templating.</p>

<strong>HTML/Templates</strong>

<div><div id=3D"highlighter_189404" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</=
div><div class=3D"line number19 index18 alt2">19</div><div class=3D"line nu=
mber20 index19 alt1">20</div><div class=3D"line number21 index20 alt2">21</=
div><div class=3D"line number22 index21 alt1">22</div><div class=3D"line nu=
mber23 index22 alt2">23</div><div class=3D"line number24 index23 alt1">24</=
div><div class=3D"line number25 index24 alt2">25</div><div class=3D"line nu=
mber26 index25 alt1">26</div><div class=3D"line number27 index26 alt2">27</=
div><div class=3D"line number28 index27 alt1">28</div><div class=3D"line nu=
mber29 index28 alt2">29</div><div class=3D"line number30 index29 alt1">30</=
div><div class=3D"line number31 index30 alt2">31</div><div class=3D"line nu=
mber32 index31 alt1">32</div><div class=3D"line number33 index32 alt2">33</=
div><div class=3D"line number34 index33 alt1">34</div><div class=3D"line nu=
mber35 index34 alt2">35</div><div class=3D"line number36 index35 alt1">36</=
div><div class=3D"line number37 index36 alt2">37</div><div class=3D"line nu=
mber38 index37 alt1">38</div><div class=3D"line number39 index38 alt2">39</=
div><div class=3D"line number40 index39 alt1">40</div><div class=3D"line nu=
mber41 index40 alt2">41</div><div class=3D"line number42 index41 alt1">42</=
div><div class=3D"line number43 index42 alt2">43</div><div class=3D"line nu=
mber44 index43 alt1">44</div><div class=3D"line number45 index44 alt2">45</=
div><div class=3D"line number46 index45 alt1">46</div><div class=3D"line nu=
mber47 index46 alt2">47</div></td><td class=3D"code"><div class=3D"containe=
r"><div class=3D"line number1 index0 alt2"><code class=3D"js plain">&lt;scr=
ipt id=3D</code><code class=3D"js string">"userTemplate"</code> <code class=
=3D"js plain">type=3D</code><code class=3D"js string">"text/html"</code><co=
de class=3D"js plain">&gt;</code></div><div class=3D"line number2 index1 al=
t1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;</code><code class=3D"js pl=
ain">&lt;li&gt;&lt;%=3D name %&gt;&lt;/li&gt;</code></div><div class=3D"lin=
e number3 index2 alt2"><code class=3D"js plain">&lt;/script&gt;</code></div=
><div class=3D"line number4 index3 alt1">&nbsp;</div><div class=3D"line num=
ber5 index4 alt2">&nbsp;</div><div class=3D"line number6 index5 alt1"><code=
 class=3D"js plain">&lt;script id=3D</code><code class=3D"js string">"ratin=
gsTemplate"</code> <code class=3D"js plain">type=3D</code><code class=3D"js=
 string">"text/html"</code><code class=3D"js plain">&gt;</code></div><div c=
lass=3D"line number7 index6 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nb=
sp;</code><code class=3D"js plain">&lt;li&gt;&lt;strong&gt;&lt;%=3D title %=
&gt;&lt;/strong&gt; was rated &lt;%=3D rating %&gt;/5&lt;/li&gt;</code></di=
v><div class=3D"line number8 index7 alt1"><code class=3D"js plain">&lt;/scr=
ipt&gt;</code></div><div class=3D"line number9 index8 alt2">&nbsp;</div><di=
v class=3D"line number10 index9 alt1">&nbsp;</div><div class=3D"line number=
11 index10 alt2"><code class=3D"js plain">&lt;div id=3D</code><code class=
=3D"js string">"container"</code><code class=3D"js plain">&gt;</code></div>=
<div class=3D"line number12 index11 alt1">&nbsp;</div><div class=3D"line nu=
mber13 index12 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;</code><co=
de class=3D"js plain">&lt;div </code><code class=3D"js keyword">class</code=
><code class=3D"js plain">=3D</code><code class=3D"js string">"sampleForm"<=
/code><code class=3D"js plain">&gt;</code></div><div class=3D"line number14=
 index13 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;</code><code class=3D"js plain">&lt;p&gt;</code></div><div class=3D=
"line number15 index14 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plai=
n">&lt;label </code><code class=3D"js keyword">for</code><code class=3D"js =
plain">=3D</code><code class=3D"js string">"twitter_handle"</code><code cla=
ss=3D"js plain">&gt;Twitter handle:&lt;/label&gt;</code></div><div class=3D=
"line number16 index15 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plai=
n">&lt;input type=3D</code><code class=3D"js string">"text"</code> <code cl=
ass=3D"js plain">id=3D</code><code class=3D"js string">"twitter_handle"</co=
de> <code class=3D"js plain">/&gt;</code></div><div class=3D"line number17 =
index16 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;</code><code class=3D"js plain">&lt;/p&gt;</code></div><div class=3D=
"line number18 index17 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">&lt;p&gt;</code></div=
><div class=3D"line number19 index18 alt2"><code class=3D"js spaces">&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code cl=
ass=3D"js plain">&lt;label </code><code class=3D"js keyword">for</code><cod=
e class=3D"js plain">=3D</code><code class=3D"js string">"movie_seen"</code=
><code class=3D"js plain">&gt;Name a movie you've seen </code><code class=
=3D"js keyword">this</code> <code class=3D"js plain">year:&lt;/label&gt;</c=
ode></div><div class=3D"line number20 index19 alt1"><code class=3D"js space=
s">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code=
><code class=3D"js plain">&lt;input type=3D</code><code class=3D"js string"=
>"text"</code> <code class=3D"js plain">id=3D</code><code class=3D"js strin=
g">"movie_seen"</code> <code class=3D"js plain">/&gt;</code></div><div clas=
s=3D"line number21 index20 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">&lt;/p&gt;</code>=
</div><div class=3D"line number22 index21 alt1"><code class=3D"js spaces">&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">&l=
t;p&gt;</code></div><div class=3D"line number23 index22 alt2">&nbsp;</div><=
div class=3D"line number24 index23 alt1"><code class=3D"js spaces">&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code clas=
s=3D"js plain">&lt;label </code><code class=3D"js keyword">for</code><code =
class=3D"js plain">=3D</code><code class=3D"js string">"movie_rating"</code=
><code class=3D"js plain">&gt;Rate the movie you saw:&lt;/label&gt;</code><=
/div><div class=3D"line number25 index24 alt2"><code class=3D"js spaces">&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><cod=
e class=3D"js plain">&lt;select id=3D</code><code class=3D"js string">"movi=
e_rating"</code><code class=3D"js plain">&gt;</code></div><div class=3D"lin=
e number26 index25 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;</code><code class=3D"js plain">&lt;option value=3D</code><code class=3D=
"js string">"1"</code><code class=3D"js plain">&gt;1&lt;/option&gt;</code><=
/div><div class=3D"line number27 index26 alt2"><code class=3D"js spaces">&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">&lt;option v=
alue=3D</code><code class=3D"js string">"2"</code><code class=3D"js plain">=
&gt;2&lt;/option&gt;</code></div><div class=3D"line number28 index27 alt1">=
<code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code cla=
ss=3D"js plain">&lt;option value=3D</code><code class=3D"js string">"3"</co=
de><code class=3D"js plain">&gt;3&lt;/option&gt;</code></div><div class=3D"=
line number29 index28 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;</code><code class=3D"js plain">&lt;option value=3D</code><code=
 class=3D"js string">"4"</code><code class=3D"js plain">&gt;4&lt;/option&gt=
;</code></div><div class=3D"line number30 index29 alt1"><code class=3D"js s=
paces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">&lt=
;option value=3D</code><code class=3D"js string">"5"</code> <code class=3D"=
js plain">selected&gt;5&lt;/option&gt;</code></div><div class=3D"line numbe=
r31 index30 alt2">&nbsp;</div><div class=3D"line number32 index31 alt1"><co=
de class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;</code><code class=3D"js plain">&lt;/select&gt;</code></div><div cl=
ass=3D"line number33 index32 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">&lt;/p&gt=
;</code></div><div class=3D"line number34 index33 alt1"><code class=3D"js s=
paces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js plain">&lt;p&gt;</code></div><div class=3D"line number35 index34 alt=
2">&nbsp;</div><div class=3D"line number36 index35 alt1"><code class=3D"js =
spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;</code><code class=3D"js plain">&lt;button id=3D</code><code class=3D"=
js string">"add"</code><code class=3D"js plain">&gt;Submit rating&lt;/butto=
n&gt;</code></div><div class=3D"line number37 index36 alt2"><code class=3D"=
js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code cla=
ss=3D"js plain">&lt;/p&gt;</code></div><div class=3D"line number38 index37 =
alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js plain">&lt;/div&gt;</code></div><div class=3D"line number39 index38 =
alt2">&nbsp;</div><div class=3D"line number40 index39 alt1">&nbsp;</div><di=
v class=3D"line number41 index40 alt2">&nbsp;</div><div class=3D"line numbe=
r42 index41 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>=
<code class=3D"js plain">&lt;div </code><code class=3D"js keyword">class</c=
ode><code class=3D"js plain">=3D</code><code class=3D"js string">"summaryTa=
ble"</code><code class=3D"js plain">&gt;</code></div><div class=3D"line num=
ber43 index42 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">&lt;div id=3D</code><cod=
e class=3D"js string">"users"</code><code class=3D"js plain">&gt;&lt;h3&gt;=
Recent users&lt;/h3&gt;&lt;/div&gt;</code></div><div class=3D"line number44=
 index43 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;</code><code class=3D"js plain">&lt;div id=3D</code><code cla=
ss=3D"js string">"ratings"</code><code class=3D"js plain">&gt;&lt;h3&gt;Rec=
ent movies rated&lt;/h3&gt;&lt;/div&gt;</code></div><div class=3D"line numb=
er45 index44 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code=
><code class=3D"js plain">&lt;/div&gt;</code></div><div class=3D"line numbe=
r46 index45 alt1">&nbsp;</div><div class=3D"line number47 index46 alt2"><co=
de class=3D"js spaces">&nbsp;</code><code class=3D"js plain">&lt;/div&gt;</=
code></div></div></td></tr></tbody></table></div></div>

<strong>JavaScript</strong>

<div><div id=3D"highlighter_268857" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</=
div><div class=3D"line number19 index18 alt2">19</div><div class=3D"line nu=
mber20 index19 alt1">20</div><div class=3D"line number21 index20 alt2">21</=
div><div class=3D"line number22 index21 alt1">22</div><div class=3D"line nu=
mber23 index22 alt2">23</div><div class=3D"line number24 index23 alt1">24</=
div><div class=3D"line number25 index24 alt2">25</div><div class=3D"line nu=
mber26 index25 alt1">26</div><div class=3D"line number27 index26 alt2">27</=
div><div class=3D"line number28 index27 alt1">28</div><div class=3D"line nu=
mber29 index28 alt2">29</div><div class=3D"line number30 index29 alt1">30</=
div><div class=3D"line number31 index30 alt2">31</div><div class=3D"line nu=
mber32 index31 alt1">32</div><div class=3D"line number33 index32 alt2">33</=
div><div class=3D"line number34 index33 alt1">34</div><div class=3D"line nu=
mber35 index34 alt2">35</div><div class=3D"line number36 index35 alt1">36</=
div><div class=3D"line number37 index36 alt2">37</div><div class=3D"line nu=
mber38 index37 alt1">38</div><div class=3D"line number39 index38 alt2">39</=
div><div class=3D"line number40 index39 alt1">40</div><div class=3D"line nu=
mber41 index40 alt2">41</div><div class=3D"line number42 index41 alt1">42</=
div><div class=3D"line number43 index42 alt2">43</div><div class=3D"line nu=
mber44 index43 alt1">44</div><div class=3D"line number45 index44 alt2">45</=
div><div class=3D"line number46 index45 alt1">46</div><div class=3D"line nu=
mber47 index46 alt2">47</div><div class=3D"line number48 index47 alt1">48</=
div><div class=3D"line number49 index48 alt2">49</div><div class=3D"line nu=
mber50 index49 alt1">50</div></td><td class=3D"code"><div class=3D"containe=
r"><div class=3D"line number1 index0 alt2"><code class=3D"js plain">;(</cod=
e><code class=3D"js keyword">function</code><code class=3D"js plain">( $ ) =
{</code></div><div class=3D"line number2 index1 alt1">&nbsp;</div><div clas=
s=3D"line number3 index2 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code=
><code class=3D"js comments">// Pre-compile templates and "cache" them usin=
g closure</code></div><div class=3D"line number4 index3 alt1"><code class=
=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js keyword">var</code></di=
v><div class=3D"line number5 index4 alt2"><code class=3D"js spaces">&nbsp;&=
nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">userTemplate =3D _.templat=
e($( </code><code class=3D"js string">"#userTemplate"</code> <code class=3D=
"js plain">).html()),</code></div><div class=3D"line number6 index5 alt1"><=
code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js p=
lain">ratingsTemplate =3D _.template($( </code><code class=3D"js string">"#=
ratingsTemplate"</code> <code class=3D"js plain">).html());</code></div><di=
v class=3D"line number7 index6 alt2">&nbsp;</div><div class=3D"line number8=
 index7 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"j=
s comments">// Subscribe to the new user topic, which adds a user</code></d=
iv><div class=3D"line number9 index8 alt2"><code class=3D"js spaces">&nbsp;=
&nbsp;</code><code class=3D"js comments">// to a list of users who have sub=
mitted reviews</code></div><div class=3D"line number10 index9 alt1"><code c=
lass=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js plain">$.subscribe(=
 </code><code class=3D"js string">"/new/user"</code><code class=3D"js plain=
">, </code><code class=3D"js keyword">function</code><code class=3D"js plai=
n">( e, data ){</code></div><div class=3D"line number11 index10 alt2">&nbsp=
;</div><div class=3D"line number12 index11 alt1"><code class=3D"js spaces">=
&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">if</code><code cl=
ass=3D"js plain">( data ){</code></div><div class=3D"line number13 index12 =
alt2">&nbsp;</div><div class=3D"line number14 index13 alt1"><code class=3D"=
js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js pla=
in">$(</code><code class=3D"js string">'#users'</code><code class=3D"js pla=
in">).append( userTemplate( data ));</code></div><div class=3D"line number1=
5 index14 alt2">&nbsp;</div><div class=3D"line number16 index15 alt1"><code=
 class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain=
">}</code></div><div class=3D"line number17 index16 alt2">&nbsp;</div><div =
class=3D"line number18 index17 alt1"><code class=3D"js spaces">&nbsp;&nbsp;=
</code><code class=3D"js plain">});</code></div><div class=3D"line number19=
 index18 alt2">&nbsp;</div><div class=3D"line number20 index19 alt1"><code =
class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js comments">// Subsc=
ribe to the new rating topic. This is composed of a title and</code></div><=
div class=3D"line number21 index20 alt2"><code class=3D"js spaces">&nbsp;&n=
bsp;</code><code class=3D"js comments">// rating. New ratings are appended =
to a running list of added user</code></div><div class=3D"line number22 ind=
ex21 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js c=
omments">// ratings.</code></div><div class=3D"line number23 index22 alt2">=
<code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js plain">$.sub=
scribe( </code><code class=3D"js string">"/new/rating"</code><code class=3D=
"js plain">, </code><code class=3D"js keyword">function</code><code class=
=3D"js plain">( e, data ){</code></div><div class=3D"line number24 index23 =
alt1">&nbsp;</div><div class=3D"line number25 index24 alt2"><code class=3D"=
js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">if</co=
de><code class=3D"js plain">( data ){</code></div><div class=3D"line number=
26 index25 alt1">&nbsp;</div><div class=3D"line number27 index26 alt2"><cod=
e class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code clas=
s=3D"js plain">$( </code><code class=3D"js string">"#ratings"</code> <code =
class=3D"js plain">).append( ratingsTemplate( data ) );</code></div><div cl=
ass=3D"line number28 index27 alt1">&nbsp;</div><div class=3D"line number29 =
index28 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><cod=
e class=3D"js plain">}</code></div><div class=3D"line number30 index29 alt1=
">&nbsp;</div><div class=3D"line number31 index30 alt2"><code class=3D"js s=
paces">&nbsp;&nbsp;</code><code class=3D"js plain">});</code></div><div cla=
ss=3D"line number32 index31 alt1">&nbsp;</div><div class=3D"line number33 i=
ndex32 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js=
 comments">// Handler for adding a new user</code></div><div class=3D"line =
number34 index33 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><code c=
lass=3D"js plain">$(</code><code class=3D"js string">"#add"</code><code cla=
ss=3D"js plain">).on(</code><code class=3D"js string">"click"</code><code c=
lass=3D"js plain">, </code><code class=3D"js keyword">function</code><code =
class=3D"js plain">( e ) {</code></div><div class=3D"line number35 index34 =
alt2">&nbsp;</div><div class=3D"line number36 index35 alt1"><code class=3D"=
js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">e.preven=
tDefault();</code></div><div class=3D"line number37 index36 alt2">&nbsp;</d=
iv><div class=3D"line number38 index37 alt1"><code class=3D"js spaces">&nbs=
p;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">var</code> <code clas=
s=3D"js plain">strUser =3D $(</code><code class=3D"js string">"#twitter_han=
dle"</code><code class=3D"js plain">).val(),</code></div><div class=3D"line=
 number39 index38 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">strMovie =3D $(</code><cod=
e class=3D"js string">"#movie_seen"</code><code class=3D"js plain">).val(),=
</code></div><div class=3D"line number40 index39 alt1"><code class=3D"js sp=
aces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js pl=
ain">strRating =3D $(</code><code class=3D"js string">"#movie_rating"</code=
><code class=3D"js plain">).val();</code></div><div class=3D"line number41 =
index40 alt2">&nbsp;</div><div class=3D"line number42 index41 alt1"><code c=
lass=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comment=
s">// Inform the application a new user is available</code></div><div class=
=3D"line number43 index42 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp=
;&nbsp;</code><code class=3D"js plain">$.publish( </code><code class=3D"js =
string">"/new/user"</code><code class=3D"js plain">, { name: strUser } );</=
code></div><div class=3D"line number44 index43 alt1">&nbsp;</div><div class=
=3D"line number45 index44 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp=
;&nbsp;</code><code class=3D"js comments">// Inform the app a new rating is=
 available</code></div><div class=3D"line number46 index45 alt1"><code clas=
s=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">$.p=
ublish( </code><code class=3D"js string">"/new/rating"</code><code class=3D=
"js plain">, { title: strMovie, rating: strRating} );</code></div><div clas=
s=3D"line number47 index46 alt2">&nbsp;</div><div class=3D"line number48 in=
dex47 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code =
class=3D"js plain">});</code></div><div class=3D"line number49 index48 alt2=
">&nbsp;</div><div class=3D"line number50 index49 alt1"><code class=3D"js p=
lain">})( jQuery );</code></div></div></td></tr></tbody></table></div></div=
>

<h4>Example: Decoupling an Ajax-based jQuery application</h4>

<p>
In our final example, we're going to take a practical look at how decouplin=
g our code using Pub/Sub early on in the development process can save us so=
me potentially painful refactoring later on.</p>

<p>
Quite often in Ajax-heavy applications, once we've received a response to a=
 request we want to achieve more than just one unique action. One could sim=
ply add all of their post-request logic into a success callback, but there =
are drawbacks to this approach.</p>

<p>
Highly coupled applications sometimes increase the effort required to reuse=
 functionality due to the increased inter-function/code dependency. What th=
is means is that although keeping our post-request logic hardcoded in a cal=
lback might be fine if we're just trying to grab a result set once, it's no=
t as appropriate when we want to make further Ajax-calls to the same data s=
ource (and different end-behavior) without rewriting parts of the code mult=
iple times. Rather than having to go back through each layer that calls the=
 same data-source and generalizing them later on, we can use pub/sub from t=
he start and save time.</p>

<p>
Using Observers, we can also easily separate application-wide notifications=
 regarding different events down to whatever level of granularity we're com=
fortable with - something which can be less elegantly done using other patt=
erns.</p>

<p>
Notice how in our sample below, one topic notification is made when a user =
indicates they want to make a search query and another is made when the req=
uest returns and actual data is available for consumption. It's left up to =
the subscribers to then decide how to use knowledge of these events (or the=
 data returned). The benefits of this are that, if we wanted, we could have=
 10 different subscribers utilizing the data returned in different ways but=
 as far as the Ajax-layer is concerned, it doesn't care. Its sole duty is t=
o request and return data then pass it on to whoever wants to use it. This =
separation of concerns can make the overall design of our code a little cle=
aner.</p>


<strong>HTML/Templates</strong>:

<div><div id=3D"highlighter_125341" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</=
div><div class=3D"line number19 index18 alt2">19</div><div class=3D"line nu=
mber20 index19 alt1">20</div><div class=3D"line number21 index20 alt2">21</=
div></td><td class=3D"code"><div class=3D"container"><div class=3D"line num=
ber1 index0 alt2"><code class=3D"js plain">&lt;form id=3D</code><code class=
=3D"js string">"flickrSearch"</code><code class=3D"js plain">&gt;</code></d=
iv><div class=3D"line number2 index1 alt1">&nbsp;</div><div class=3D"line n=
umber3 index2 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;</code><cod=
e class=3D"js plain">&lt;input type=3D</code><code class=3D"js string">"tex=
t"</code> <code class=3D"js plain">name=3D</code><code class=3D"js string">=
"tag"</code> <code class=3D"js plain">id=3D</code><code class=3D"js string"=
>"query"</code><code class=3D"js plain">/&gt;</code></div><div class=3D"lin=
e number4 index3 alt1">&nbsp;</div><div class=3D"line number5 index4 alt2">=
<code class=3D"js spaces">&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain"=
>&lt;input type=3D</code><code class=3D"js string">"submit"</code> <code cl=
ass=3D"js plain">name=3D</code><code class=3D"js string">"submit"</code> <c=
ode class=3D"js plain">value=3D</code><code class=3D"js string">"submit"</c=
ode><code class=3D"js plain">/&gt;</code></div><div class=3D"line number6 i=
ndex5 alt1">&nbsp;</div><div class=3D"line number7 index6 alt2"><code class=
=3D"js plain">&lt;/form&gt;</code></div><div class=3D"line number8 index7 a=
lt1">&nbsp;</div><div class=3D"line number9 index8 alt2">&nbsp;</div><div c=
lass=3D"line number10 index9 alt1">&nbsp;</div><div class=3D"line number11 =
index10 alt2"><code class=3D"js plain">&lt;div id=3D</code><code class=3D"j=
s string">"lastQuery"</code><code class=3D"js plain">&gt;&lt;/div&gt;</code=
></div><div class=3D"line number12 index11 alt1">&nbsp;</div><div class=3D"=
line number13 index12 alt2"><code class=3D"js plain">&lt;ol id=3D</code><co=
de class=3D"js string">"searchResults"</code><code class=3D"js plain">&gt;&=
lt;/ol&gt;</code></div><div class=3D"line number14 index13 alt1">&nbsp;</di=
v><div class=3D"line number15 index14 alt2">&nbsp;</div><div class=3D"line =
number16 index15 alt1">&nbsp;</div><div class=3D"line number17 index16 alt2=
"><code class=3D"js plain">&lt;script id=3D</code><code class=3D"js string"=
>"resultTemplate"</code> <code class=3D"js plain">type=3D</code><code class=
=3D"js string">"text/html"</code><code class=3D"js plain">&gt;</code></div>=
<div class=3D"line number18 index17 alt1"><code class=3D"js spaces">&nbsp;&=
nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">&lt;% _.each(items, </code=
><code class=3D"js keyword">function</code><code class=3D"js plain">( item =
){ %&gt;</code></div><div class=3D"line number19 index18 alt2"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code=
 class=3D"js plain">&lt;li&gt;&lt;img src=3D</code><code class=3D"js string=
">"&lt;%=3D item.media.m %&gt;"</code><code class=3D"js plain">/&gt;&lt;/li=
&gt;</code></div><div class=3D"line number20 index19 alt1"><code class=3D"j=
s spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">&lt;% });=
%&gt;</code></div><div class=3D"line number21 index20 alt2"><code class=3D"=
js plain">&lt;/script&gt;</code></div></div></td></tr></tbody></table></div=
></div>

<strong>JavaScript</strong>:
<div><div id=3D"highlighter_685531" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</=
div><div class=3D"line number19 index18 alt2">19</div><div class=3D"line nu=
mber20 index19 alt1">20</div><div class=3D"line number21 index20 alt2">21</=
div><div class=3D"line number22 index21 alt1">22</div><div class=3D"line nu=
mber23 index22 alt2">23</div><div class=3D"line number24 index23 alt1">24</=
div><div class=3D"line number25 index24 alt2">25</div><div class=3D"line nu=
mber26 index25 alt1">26</div><div class=3D"line number27 index26 alt2">27</=
div><div class=3D"line number28 index27 alt1">28</div><div class=3D"line nu=
mber29 index28 alt2">29</div><div class=3D"line number30 index29 alt1">30</=
div><div class=3D"line number31 index30 alt2">31</div><div class=3D"line nu=
mber32 index31 alt1">32</div><div class=3D"line number33 index32 alt2">33</=
div><div class=3D"line number34 index33 alt1">34</div><div class=3D"line nu=
mber35 index34 alt2">35</div><div class=3D"line number36 index35 alt1">36</=
div><div class=3D"line number37 index36 alt2">37</div><div class=3D"line nu=
mber38 index37 alt1">38</div><div class=3D"line number39 index38 alt2">39</=
div><div class=3D"line number40 index39 alt1">40</div><div class=3D"line nu=
mber41 index40 alt2">41</div><div class=3D"line number42 index41 alt1">42</=
div><div class=3D"line number43 index42 alt2">43</div><div class=3D"line nu=
mber44 index43 alt1">44</div><div class=3D"line number45 index44 alt2">45</=
div><div class=3D"line number46 index45 alt1">46</div><div class=3D"line nu=
mber47 index46 alt2">47</div><div class=3D"line number48 index47 alt1">48</=
div><div class=3D"line number49 index48 alt2">49</div><div class=3D"line nu=
mber50 index49 alt1">50</div><div class=3D"line number51 index50 alt2">51</=
div><div class=3D"line number52 index51 alt1">52</div><div class=3D"line nu=
mber53 index52 alt2">53</div><div class=3D"line number54 index53 alt1">54</=
div><div class=3D"line number55 index54 alt2">55</div><div class=3D"line nu=
mber56 index55 alt1">56</div><div class=3D"line number57 index56 alt2">57</=
div><div class=3D"line number58 index57 alt1">58</div><div class=3D"line nu=
mber59 index58 alt2">59</div></td><td class=3D"code"><div class=3D"containe=
r"><div class=3D"line number1 index0 alt2"><code class=3D"js plain">;(</cod=
e><code class=3D"js keyword">function</code><code class=3D"js plain">( $ ) =
{</code></div><div class=3D"line number2 index1 alt1">&nbsp;</div><div clas=
s=3D"line number3 index2 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;=
</code><code class=3D"js comments">// Pre-compile template and "cache" it u=
sing closure</code></div><div class=3D"line number4 index3 alt1"><code clas=
s=3D"js spaces">&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">var</co=
de> <code class=3D"js plain">resultTemplate =3D _.template($( </code><code =
class=3D"js string">"#resultTemplate"</code> <code class=3D"js plain">).htm=
l());</code></div><div class=3D"line number5 index4 alt2">&nbsp;</div><div =
class=3D"line number6 index5 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&n=
bsp;</code><code class=3D"js comments">// Subscribe to the new search tags =
topic</code></div><div class=3D"line number7 index6 alt2"><code class=3D"js=
 spaces">&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">$.subscribe( </c=
ode><code class=3D"js string">"/search/tags"</code><code class=3D"js plain"=
>, </code><code class=3D"js keyword">function</code><code class=3D"js plain=
">( e, tags ) {</code></div><div class=3D"line number8 index7 alt1"><code c=
lass=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code c=
lass=3D"js plain">$( </code><code class=3D"js string">"#lastQuery"</code> <=
code class=3D"js plain">)</code></div><div class=3D"line number9 index8 alt=
2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js =
plain">.html(</code><code class=3D"js string">"&lt;p&gt;Searched for:&lt;st=
rong&gt;"</code> <code class=3D"js plain">+ tags + </code><code class=3D"js=
 string">"&lt;/strong&gt;&lt;/p&gt;"</code><code class=3D"js plain">);</cod=
e></div><div class=3D"line number10 index9 alt1"><code class=3D"js spaces">=
&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">});</code></div><div clas=
s=3D"line number11 index10 alt2">&nbsp;</div><div class=3D"line number12 in=
dex11 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js comments">// Subscribe to the new results topic</code></div><div cla=
ss=3D"line number13 index12 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nb=
sp;</code><code class=3D"js plain">$.subscribe( </code><code class=3D"js st=
ring">"/search/resultSet"</code><code class=3D"js plain">, </code><code cla=
ss=3D"js keyword">function</code><code class=3D"js plain">( e, results ){</=
code></div><div class=3D"line number14 index13 alt1">&nbsp;</div><div class=
=3D"line number15 index14 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">$( </code><code cl=
ass=3D"js string">"#searchResults"</code> <code class=3D"js plain">).empty(=
).append(resultTemplate( results ));</code></div><div class=3D"line number1=
6 index15 alt1">&nbsp;</div><div class=3D"line number17 index16 alt2"><code=
 class=3D"js spaces">&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">});<=
/code></div><div class=3D"line number18 index17 alt1">&nbsp;</div><div clas=
s=3D"line number19 index18 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbs=
p;</code><code class=3D"js comments">// Submit a search query and publish t=
ags on the /search/tags topic</code></div><div class=3D"line number20 index=
19 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;</code><code class=3D"=
js plain">$( </code><code class=3D"js string">"#flickrSearch"</code> <code =
class=3D"js plain">).submit( </code><code class=3D"js keyword">function</co=
de><code class=3D"js plain">( e ) {</code></div><div class=3D"line number21=
 index20 alt2">&nbsp;</div><div class=3D"line number22 index21 alt1"><code =
class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code =
class=3D"js plain">e.preventDefault();</code></div><div class=3D"line numbe=
r23 index22 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;</code><code class=3D"js keyword">var</code> <code class=3D"js p=
lain">tags =3D $(</code><code class=3D"js keyword">this</code><code class=
=3D"js plain">).find( </code><code class=3D"js string">"#query"</code><code=
 class=3D"js plain">).val();</code></div><div class=3D"line number24 index2=
3 alt1">&nbsp;</div><div class=3D"line number25 index24 alt2"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js keyword">if</code> <code class=3D"js plain">( !tags ){</code></div><=
div class=3D"line number26 index25 alt1"><code class=3D"js spaces">&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">r=
eturn</code><code class=3D"js plain">;</code></div><div class=3D"line numbe=
r27 index26 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;</code><code class=3D"js plain">}</code></div><div class=3D"line=
 number28 index27 alt1">&nbsp;</div><div class=3D"line number29 index28 alt=
2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</co=
de><code class=3D"js plain">$.publish( </code><code class=3D"js string">"/s=
earch/tags"</code><code class=3D"js plain">, [ $.trim(tags) ]);</code></div=
><div class=3D"line number30 index29 alt1">&nbsp;</div><div class=3D"line n=
umber31 index30 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;</code><c=
ode class=3D"js plain">});</code></div><div class=3D"line number32 index31 =
alt1">&nbsp;</div><div class=3D"line number33 index32 alt2">&nbsp;</div><di=
v class=3D"line number34 index33 alt1"><code class=3D"js spaces">&nbsp;&nbs=
p;&nbsp;</code><code class=3D"js comments">// Subscribe to new tags being p=
ublished and perform</code></div><div class=3D"line number35 index34 alt2">=
<code class=3D"js spaces">&nbsp;&nbsp;&nbsp;</code><code class=3D"js commen=
ts">// a search query using them. Once data has returned</code></div><div c=
lass=3D"line number36 index35 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&=
nbsp;</code><code class=3D"js comments">// publish this data for the rest o=
f the application</code></div><div class=3D"line number37 index36 alt2"><co=
de class=3D"js spaces">&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments"=
>// to consume</code></div><div class=3D"line number38 index37 alt1">&nbsp;=
</div><div class=3D"line number39 index38 alt2"><code class=3D"js spaces">&=
nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">$.subscribe(</code><code c=
lass=3D"js string">"/search/tags"</code><code class=3D"js plain">, </code><=
code class=3D"js keyword">function</code><code class=3D"js plain">( e, tags=
 ) {</code></div><div class=3D"line number40 index39 alt1">&nbsp;</div><div=
 class=3D"line number41 index40 alt2"><code class=3D"js spaces">&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">$.getJSON( <=
/code><code class=3D"js string">"<a href=3D"http://api.flickr.com/services/=
feeds/photos_public.gne?jsoncallback=3D?">http://api.flickr.com/services/fe=
eds/photos_public.gne?jsoncallback=3D?</a>"</code><code class=3D"js plain">=
, {</code></div><div class=3D"line number42 index41 alt1"><code class=3D"js=
 spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">tags: tags,</code></div><=
div class=3D"line number43 index42 alt2"><code class=3D"js spaces">&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;</code><code class=3D"js plain">tagmode: </code><code class=3D"js string">=
"any"</code><code class=3D"js plain">,</code></div><div class=3D"line numbe=
r44 index43 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"=
js plain">format: </code><code class=3D"js string">"json"</code></div><div =
class=3D"line number45 index44 alt2"><code class=3D"js spaces">&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code cl=
ass=3D"js plain">},</code></div><div class=3D"line number46 index45 alt1">&=
nbsp;</div><div class=3D"line number47 index46 alt2"><code class=3D"js spac=
es">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><cod=
e class=3D"js keyword">function</code><code class=3D"js plain">( data ){</c=
ode></div><div class=3D"line number48 index47 alt1">&nbsp;</div><div class=
=3D"line number49 index48 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><=
code class=3D"js keyword">if</code><code class=3D"js plain">( !data.items.l=
ength ) {</code></div><div class=3D"line number50 index49 alt1"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">retur=
n</code><code class=3D"js plain">;</code></div><div class=3D"line number51 =
index50 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js p=
lain">}</code></div><div class=3D"line number52 index51 alt1">&nbsp;</div><=
div class=3D"line number53 index52 alt2"><code class=3D"js spaces">&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;</code><code class=3D"js plain">$.publish( </code><code class=3D"js string=
">"/search/resultSet"</code><code class=3D"js plain">, { items: data.items =
} );</code></div><div class=3D"line number54 index53 alt1"><code class=3D"j=
s spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"j=
s plain">});</code></div><div class=3D"line number55 index54 alt2">&nbsp;</=
div><div class=3D"line number56 index55 alt1"><code class=3D"js spaces">&nb=
sp;&nbsp;&nbsp;</code><code class=3D"js plain">});</code></div><div class=
=3D"line number57 index56 alt2">&nbsp;</div><div class=3D"line number58 ind=
ex57 alt1">&nbsp;</div><div class=3D"line number59 index58 alt2"><code clas=
s=3D"js plain">})( jQuery );</code></div></div></td></tr></tbody></table></=
div></div>

<p>
The Observer pattern is useful for decoupling a number of different scenari=
os in application design and if you haven't been using it, I recommend pick=
ing up one of the pre-written implementations mentioned today and just givi=
ng it a try out. It's one of the easier design patterns to get started with=
 but also one of the most powerful.</p>
<p>&nbsp;</p>


<!--end tood-->
<h2 id=3D"mediatorpatternjavascript">
  <a href=3D"https://addyosmani.com/resources/essentialjsdesignpatterns/boo=
k/#mediatorpatternjavascript" class=3D"subhead-link">#</a>
  The Mediator Pattern
</h2>

<p>
In the section on the Observer pattern, we were introduced to a way of chan=
neling multiple event sources through a single object. This is also known a=
s Publish/Subscribe or Event Aggregation. It's common for developers to thi=
nk of Mediators when faced with this problem, so let's explore how they dif=
fer.
</p>

<p>
The dictionary refers to a mediator as <i>a neutral party that assists in n=
egotiations and conflict resolution</i>. In our world, a mediator is a beha=
vioral design pattern that allows us to expose a unified interface through =
which the different parts of a system may communicate.</p>

<p>If it appears a system has too many direct relationships between compone=
nts, it may be time to have a central point of control that components comm=
unicate through instead. The Mediator promotes loose coupling by ensuring t=
hat instead of components referring to each other explicitly, their interac=
tion is handled through this central point. This can help us decouple syste=
ms and improve the potential for component reusability.
</p>
<p>
A real-world analogy could be a typical airport traffic control system. A t=
ower (Mediator) handles what planes can take off and land because all commu=
nications (notifications being listened out for or broadcast) are done from=
 the planes to the control tower, rather than from plane-to-plane. A centra=
lized controller is key to the success of this system and that's really the=
 role a Mediator plays in software design.</p>

<p>Another analogy would be DOM event bubbling and event delegation. If all=
 subscriptions in a system are made against the document rather than indivi=
dual nodes, the document effectively serves as a Mediator. Instead of bindi=
ng to the events of the individual nodes, a higher level object is given th=
e responsibility of notifying subscribers about interaction events.</p>


<p>When it comes to the Mediator and Event Aggregator patterns, there are s=
ome times where it may look like the patterns are interchangeable due to im=
plementation similarities. However, the semantics and intent of these patte=
rns are very different.</p>

<p>And even if the implementations both use some of the same core construct=
s, I believe there is a distinct difference between them. I also believe th=
ey should not be interchanged or confused in communication because of the d=
ifferences.</p>

<p><strong>A Simple Mediator</strong></p>

<p>A Mediator is an object that coordinates interactions (logic and behavio=
r) between multiple objects. It makes decisions on when to call which objec=
ts, based on the actions (or inaction) of other objects and input.</p>

<p>You can write a mediator using a single line of code:</p>

<div><div id=3D"highlighter_803996" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div></td><td class=3D"code"><div class=3D"container"><div class=3D"line num=
ber1 index0 alt2"><code class=3D"js keyword">var</code> <code class=3D"js p=
lain">mediator =3D {};</code></div></div></td></tr></tbody></table></div></=
div>

<p>Yes, of course this is just an object literal in JavaScript. Once again,=
 we=E2=80=99re talking about semantics here. The purpose of the mediator is=
 to control the workflow between objects and we really don=E2=80=99t need a=
nything more than an object literal to do this.</p>

<div><div id=3D"highlighter_607627" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</=
div><div class=3D"line number19 index18 alt2">19</div><div class=3D"line nu=
mber20 index19 alt1">20</div><div class=3D"line number21 index20 alt2">21</=
div><div class=3D"line number22 index21 alt1">22</div><div class=3D"line nu=
mber23 index22 alt2">23</div></td><td class=3D"code"><div class=3D"containe=
r"><div class=3D"line number1 index0 alt2"><code class=3D"js keyword">var</=
code> <code class=3D"js plain">orgChart =3D {</code></div><div class=3D"lin=
e number2 index1 alt1">&nbsp;</div><div class=3D"line number3 index2 alt2">=
<code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js plain">addNe=
wEmployee: </code><code class=3D"js keyword">function</code><code class=3D"=
js plain">(){</code></div><div class=3D"line number4 index3 alt1">&nbsp;</d=
iv><div class=3D"line number5 index4 alt2"><code class=3D"js spaces">&nbsp;=
&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// getEmployeeDetail p=
rovides a view that users interact with</code></div><div class=3D"line numb=
er6 index5 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><=
code class=3D"js keyword">var</code> <code class=3D"js plain">employeeDetai=
l =3D </code><code class=3D"js keyword">this</code><code class=3D"js plain"=
>.getEmployeeDetail();</code></div><div class=3D"line number7 index6 alt2">=
&nbsp;</div><div class=3D"line number8 index7 alt1"><code class=3D"js space=
s">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// when the e=
mployee detail is complete, the mediator (the 'orgchart' object)</code></di=
v><div class=3D"line number9 index8 alt2"><code class=3D"js spaces">&nbsp;&=
nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// decides what should =
happen next</code></div><div class=3D"line number10 index9 alt1"><code clas=
s=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">emp=
loyeeDetail.on(</code><code class=3D"js string">"complete"</code><code clas=
s=3D"js plain">, </code><code class=3D"js keyword">function</code><code cla=
ss=3D"js plain">(employee){</code></div><div class=3D"line number11 index10=
 alt2">&nbsp;</div><div class=3D"line number12 index11 alt1"><code class=3D=
"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js co=
mments">// set up additional objects that have additional events, which are=
 used</code></div><div class=3D"line number13 index12 alt2"><code class=3D"=
js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js com=
ments">// by the mediator to do additional things</code></div><div class=3D=
"line number14 index13 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</code><code class=3D"js keyword">var</code> <code class=3D=
"js plain">managerSelector =3D </code><code class=3D"js keyword">this</code=
><code class=3D"js plain">.selectManager(employee);</code></div><div class=
=3D"line number15 index14 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">managerSelector.on(</cod=
e><code class=3D"js string">"save"</code><code class=3D"js plain">, </code>=
<code class=3D"js keyword">function</code><code class=3D"js plain">(employe=
e){</code></div><div class=3D"line number16 index15 alt1"><code class=3D"js=
 spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js plain">employee.save();</code></div><div class=3D"line number17 inde=
x16 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</c=
ode><code class=3D"js plain">});</code></div><div class=3D"line number18 in=
dex17 alt1">&nbsp;</div><div class=3D"line number19 index18 alt2"><code cla=
ss=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">})=
;</code></div><div class=3D"line number20 index19 alt1"><code class=3D"js s=
paces">&nbsp;&nbsp;</code><code class=3D"js plain">},</code></div><div clas=
s=3D"line number21 index20 alt2">&nbsp;</div><div class=3D"line number22 in=
dex21 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js =
comments">// ...</code></div><div class=3D"line number23 index22 alt2"><cod=
e class=3D"js plain">}</code></div></div></td></tr></tbody></table></div></=
div>

<p>This example shows a very basic implementation of a mediator object with=
 some utility methods that can trigger and subscribe to events.</p>

<p>I=E2=80=99ve often referred to this type of object as a =E2=80=9Cworkflo=
w=E2=80=9D object in the past, but the truth is that it is a mediator. It i=
s an object that handles the workflow between many other objects, aggregati=
ng the responsibility of that workflow knowledge into a single object. The =
result is workflow that is easier to understand and maintain.</p>

<h5>Similarities And Differences</h5>

<p>There are, without a doubt, similarities between the event aggregator an=
d mediator examples that I=E2=80=99ve shown here. The similarities boil dow=
n to two primary items: events and third-party objects. These differences a=
re superficial at best, though. When we dig into the intent of the pattern =
and see that the implementations can be dramatically different, the nature =
of the patterns become more apparent.</p>

<h6>Events</h6>

<p>Both the event aggregator and mediator use events, in the above examples=
. An event aggregator obviously deals with events =E2=80=93 it=E2=80=99s in=
 the name after all. The mediator only uses events because it makes life ea=
sy when dealing with modern JavaScript webapp frameworks. There is nothing =
that says a mediator must be built with events. You can build a mediator wi=
th callback methods, by handing the mediator reference to the child object,=
 or by any of a number of other means.</p>

<p>The difference, then, is why these two patterns are both using events. T=
he event aggregator, as a pattern, is designed to deal with events. The med=
iator, though, only uses them because it=E2=80=99s convenient.</p>

<h6>Third-Party Objects</h6>

<p>Both the event aggregator and mediator, by design, use a third-party obj=
ect to facilitate things. The event aggregator itself is a third-party to t=
he event publisher and the event subscriber. It acts as a central hub for e=
vents to pass through. The mediator is also a third party to other objects,=
 though. So where is the difference? Why don=E2=80=99t we call an event agg=
regator a mediator? The answer largely comes down to where the application =
logic and workflow is coded.</p>

<p>In the case of an event aggregator, the third party object is there only=
 to facilitate the pass-through of events from an unknown number of sources=
 to an unknown number of handlers. All workflow and business logic that nee=
ds to be kicked off is put directly into the object that triggers the event=
s and the objects that handle the events.</p>

<p>In the case of the mediator, though, the business logic and workflow is =
aggregated into the mediator itself. The mediator decides when an object sh=
ould have its methods called and attributes updated based on factors that t=
he mediator knows about. It encapsulates the workflow and process, coordina=
ting multiple objects to produce the desired system behaviour. The individu=
al objects involved in this workflow each know how to perform their own tas=
k. But it=E2=80=99s the mediator that tells the objects when to perform the=
 tasks by making decisions at a higher level than the individual objects.</=
p>

<p>An event aggregator facilitates a =E2=80=9Cfire and forget=E2=80=9D mode=
l of communication. The object triggering the event doesn=E2=80=99t care if=
 there are any subscribers. It just fires the event and moves on. A mediato=
r, though, might use events to make decisions, but it is definitely not =E2=
=80=9Cfire and forget=E2=80=9D. A mediator pays attention to a known set of=
 input or activities so that it can facilitate and coordinate additional be=
havior with a known set of actors (objects).</p>

<h5>Relationships: When To Use Which</h5>

<p>Understanding the similarities and differences between an event aggregat=
or and mediator is important for semantic reasons. It=E2=80=99s equally as =
important to understand when to use which pattern, though. The basic semant=
ics and intent of the patterns does inform the question of when, but actual=
 experience in using the patterns will help you understand the more subtle =
points and nuanced decisions that have to be made.</p>

<h6>Event Aggregator Use</h6>

<p>In general, an event aggregator is used when you either have too many ob=
jects to listen to directly, or you have objects that are entirely unrelate=
d.</p>

<p>When two objects have a direct relationship already =E2=80=93 say, a par=
ent view and child view =E2=80=93 there may be benefit in using an event ag=
gregator. Have the child view trigger an event and the parent view can hand=
le the event. In JavaScript framework terms, this is most commonly seen in =
Backbone=E2=80=99s Collection and Model, where all Model events are bubbled=
 up to and through its parent Collection. A Collection often uses model eve=
nts to modify the state of itself or other models. Handling =E2=80=9Cselect=
ed=E2=80=9D items in a collection is a good example of this.</p>

<p>jQuery=E2=80=99s on method as an event aggregator is a great example of =
too many objects to listen to. If you have 10, 20 or 200 DOM elements that =
can trigger a =E2=80=9Cclick=E2=80=9D event, it might be a bad idea to set =
up a listener on all of them individually. This could quickly deteriorate p=
erformance of the application and user experience. Instead, using jQuery=E2=
=80=99s on method allows us to aggregate all of the events and reduce the o=
verhead of 10, 20, or 200 event handlers down to 1.</p>

<p>Indirect relationships are also a great time to use event aggregators. I=
n modern applications, it is very common to have multiple view objects that=
 need to communicate, but have no direct relationship. For example, a menu =
system might have a view that handles the menu item clicks. But we don=E2=
=80=99t want the menu to be directly tied to the content views that show al=
l of the details and information when a menu item is clicked. Having the co=
ntent and menu coupled together would make the code very difficult to maint=
ain, in the long run. Instead, we can use an event aggregator to trigger =
=E2=80=9Cmenu:click:foo=E2=80=9D events, and have a =E2=80=9Cfoo=E2=80=9D o=
bject handle the click event to show its content on the screen.</p>

<h6>Mediator Use</h6>

<p>A mediator is best applied when two or more objects have an indirect wor=
king relationship, and business logic or workflow needs to dictate the inte=
ractions and coordination of these objects.</p>

<p>A wizard interface is a good example of this, as shown with the =E2=80=
=9CorgChart=E2=80=9D example, above. There are multiple views that facilita=
te the entire workflow of the wizard. Rather than tightly coupling the view=
 together by having them reference each other directly, we can decouple the=
m and more explicitly model the workflow between them by introducing a medi=
ator.</p>

<p>The mediator extracts the workflow from the implementation details and c=
reates a more natural abstraction at a higher level, showing us at a much f=
aster glance what that workflow is. We no longer have to dig into the detai=
ls of each view in the workflow, to see what the workflow actually is.</p>

<h5>Event Aggregator (Pub/Sub) And Mediator Together</h5>

<p>The crux of the difference between an event aggregator and a mediator, a=
nd why these pattern names should not be interchanged with each other, is i=
llustrated best by showing how they can be used together. The menu example =
for an event aggregator is the perfect place to introduce a mediator as wel=
l.</p>

<p>Clicking a menu item may trigger a series of changes throughout an appli=
cation. Some of these changes will be independent of others, and using an e=
vent aggregator for this makes sense. Some of these changes may be internal=
ly related to each other, though, and may use a mediator to enact those cha=
nges.</p>

<p>A mediator, then, could be set up to listen to the event aggregator. It =
could run its logic and process to facilitate and coordinate many objects t=
hat are related to each other, but unrelated to the original event source.<=
/p>

<div><div id=3D"highlighter_31931" class=3D"syntaxhighlighter  js acodecode=
"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources/=
essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help">=
?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0"><=
tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</d=
iv><div class=3D"line number2 index1 alt1">2</div><div class=3D"line number=
3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div c=
lass=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5 =
alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"l=
ine number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9</=
div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line num=
ber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</d=
iv><div class=3D"line number13 index12 alt2">13</div><div class=3D"line num=
ber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</d=
iv><div class=3D"line number16 index15 alt1">16</div><div class=3D"line num=
ber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</d=
iv><div class=3D"line number19 index18 alt2">19</div><div class=3D"line num=
ber20 index19 alt1">20</div><div class=3D"line number21 index20 alt2">21</d=
iv><div class=3D"line number22 index21 alt1">22</div><div class=3D"line num=
ber23 index22 alt2">23</div><div class=3D"line number24 index23 alt1">24</d=
iv><div class=3D"line number25 index24 alt2">25</div><div class=3D"line num=
ber26 index25 alt1">26</div></td><td class=3D"code"><div class=3D"container=
"><div class=3D"line number1 index0 alt2"><code class=3D"js keyword">var</c=
ode> <code class=3D"js plain">MenuItem =3D MyFrameworkView.extend({</code><=
/div><div class=3D"line number2 index1 alt1">&nbsp;</div><div class=3D"line=
 number3 index2 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code cl=
ass=3D"js plain">events: {</code></div><div class=3D"line number4 index3 al=
t1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D=
"js string">"click .thatThing"</code><code class=3D"js plain">: </code><cod=
e class=3D"js string">"clickedIt"</code></div><div class=3D"line number5 in=
dex4 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js p=
lain">},</code></div><div class=3D"line number6 index5 alt1">&nbsp;</div><d=
iv class=3D"line number7 index6 alt2"><code class=3D"js spaces">&nbsp;&nbsp=
;</code><code class=3D"js plain">clickedIt: </code><code class=3D"js keywor=
d">function</code><code class=3D"js plain">(e){</code></div><div class=3D"l=
ine number8 index7 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;=
</code><code class=3D"js plain">e.preventDefault();</code></div><div class=
=3D"line number9 index8 alt2">&nbsp;</div><div class=3D"line number10 index=
9 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code clas=
s=3D"js comments">// assume this triggers "menu:click:foo"</code></div><div=
 class=3D"line number11 index10 alt2"><code class=3D"js spaces">&nbsp;&nbsp=
;&nbsp;&nbsp;</code><code class=3D"js plain">MyFramework.trigger(</code><co=
de class=3D"js string">"menu:click:"</code> <code class=3D"js plain">+ </co=
de><code class=3D"js keyword">this</code><code class=3D"js plain">.model.ge=
t(</code><code class=3D"js string">"name"</code><code class=3D"js plain">))=
;</code></div><div class=3D"line number12 index11 alt1"><code class=3D"js s=
paces">&nbsp;&nbsp;</code><code class=3D"js plain">}</code></div><div class=
=3D"line number13 index12 alt2">&nbsp;</div><div class=3D"line number14 ind=
ex13 alt1"><code class=3D"js plain">});</code></div><div class=3D"line numb=
er15 index14 alt2">&nbsp;</div><div class=3D"line number16 index15 alt1"><c=
ode class=3D"js comments">// ... somewhere else in the app</code></div><div=
 class=3D"line number17 index16 alt2">&nbsp;</div><div class=3D"line number=
18 index17 alt1"><code class=3D"js keyword">var</code> <code class=3D"js pl=
ain">MyWorkflow =3D </code><code class=3D"js keyword">function</code><code =
class=3D"js plain">(){</code></div><div class=3D"line number19 index18 alt2=
"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js plain">MyF=
ramework.on(</code><code class=3D"js string">"menu:click:foo"</code><code c=
lass=3D"js plain">, </code><code class=3D"js keyword">this</code><code clas=
s=3D"js plain">.doStuff, </code><code class=3D"js keyword">this</code><code=
 class=3D"js plain">);</code></div><div class=3D"line number20 index19 alt1=
"><code class=3D"js plain">};</code></div><div class=3D"line number21 index=
20 alt2">&nbsp;</div><div class=3D"line number22 index21 alt1"><code class=
=3D"js plain">MyWorkflow.prototype.doStuff =3D </code><code class=3D"js key=
word">function</code><code class=3D"js plain">(){</code></div><div class=3D=
"line number23 index22 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><=
code class=3D"js comments">// instantiate multiple objects here.</code></di=
v><div class=3D"line number24 index23 alt1"><code class=3D"js spaces">&nbsp=
;&nbsp;</code><code class=3D"js comments">// set up event handlers for thos=
e objects.</code></div><div class=3D"line number25 index24 alt2"><code clas=
s=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js comments">// coordinat=
e all of the objects into a meaningful workflow.</code></div><div class=3D"=
line number26 index25 alt1"><code class=3D"js plain">};</code></div></div><=
/td></tr></tbody></table></div></div>

<p>In this example, when the MenuItem with the right model is clicked, the =
<code>=E2=80=9Cmenu:click:foo=E2=80=9D</code> event will be triggered. An i=
nstance of the =E2=80=9CMyWorkflow=E2=80=9D object, assuming one is already=
 instantiated, will handle this specific event and will coordinate all of t=
he objects that it knows about, to create the desired user experience and w=
orkflow.</p>

<p>An event aggregator and a mediator have been combined to create a much m=
ore meaningful experience in both the code and the application itself. We n=
ow have a clean separation between the menu and the workflow through an eve=
nt aggregator and we are still keeping the workflow itself clean and mainta=
inable through the use of a mediator.</p>

<p>
</p><h3 id=3D"advantagesanddisadvantages">
  <a href=3D"https://addyosmani.com/resources/essentialjsdesignpatterns/boo=
k/#advantagesanddisadvantages" class=3D"subhead-link">#</a>
  Advantages &amp; Disadvantages
</h3>

<p>The largest benefit of the Mediator pattern is that it reduces the commu=
nication channels needed between objects or components in a system from man=
y to many to just many to one. Adding new publishers and subscribers is rel=
atively easy due to the level of decoupling present.</p>

<p>
Perhaps the biggest downside of using the pattern is that it can introduce =
a single point of failure. Placing a Mediator between modules can also caus=
e a performance hit as they are always communicating indirectly. Because of=
 the nature of loose coupling, it's difficult to establish how a system mig=
ht react by only looking at the broadcasts.</p>

<p>That said, it's useful to remind ourselves that decoupled systems have a=
 number of other benefits - if our modules communicated with each other dir=
ectly, changes to modules (e.g another module throwing an exception) could =
easily have a domino effect on the rest of our application. This problem is=
 less of a concern with decoupled systems.</p>

<p>At the end of the day, tight coupling causes all kinds of headaches and =
this is just another alternative solution, but one which can work very well=
 if implemented correctly.</p>

<p></p>

<h3 id=3D"mediatorvsfacade">
  <a href=3D"https://addyosmani.com/resources/essentialjsdesignpatterns/boo=
k/#mediatorvsfacade" class=3D"subhead-link">#</a>
  Mediator Vs. Facade
</h3>

<p>We will be covering the Facade pattern shortly, but for reference purpos=
es some developers may also wonder whether there are similarities between t=
he Mediator and Facade patterns. They do both abstract the functionality of=
 existing modules, but there are some subtle differences.</p>

<p>
The Mediator centralizes communication between modules where it's explicitl=
y referenced by these modules. In a sense this is multidirectional. The Fac=
ade however just defines a simpler interface to a module or system but does=
n't add any additional functionality. Other modules in the system aren't di=
rectly aware of the concept of a facade and could be considered unidirectio=
nal.
</p>

<p>
 </p><p>&nbsp;</p>
  <p>&nbsp;</p>
<p></p>
<h2 id=3D"prototypepatternjavascript">
  <a href=3D"https://addyosmani.com/resources/essentialjsdesignpatterns/boo=
k/#prototypepatternjavascript" class=3D"subhead-link">#</a>
  The Prototype Pattern
</h2>

<p>The GoF refer to the prototype pattern as one which creates objects base=
d on a template of an existing object through cloning.</p>

<p>We can think of the prototype pattern as being based on prototypal inher=
itance where we create objects which act as prototypes for other objects. T=
he prototype object itself is effectively used as a blueprint for each obje=
ct the constructor creates. If the prototype of the constructor function us=
ed contains a property called <code>name</code> for example (as per the cod=
e sample lower down), then each object created by that same constructor wil=
l also have this same property.</p>

<p>Reviewing the definitions for this pattern in existing (non-JavaScript) =
literature, we <strong>may</strong> find references to classes once again. =
The reality is that prototypal inheritance avoids using classes altogether.=
 There isn't a "definition" object nor a core object in theory. We're simpl=
y creating copies of existing functional objects.</p>

<p>One of the benefits of using the prototype pattern is that we're working=
 with the prototypal strengths JavaScript has to offer natively rather than=
 attempting to imitate features of other languages. With other design patte=
rns, this isn't always the case.</p>

<p>Not only is the pattern an easy way to implement inheritance, but it can=
 also come with a performance boost as well: when defining a function in an=
 object, they're all created by reference (so all child objects point to th=
e same function) instead of creating their own individual copies. </p>

<p>For those interested, real prototypal inheritance, as defined in the ECM=
AScript 5 standard, requires the use of <code>Object.create</code> (which w=
e previously looked at earlier in this section). To remind ourselves, <code=
>Object.create</code> creates an object which has a specified prototype and=
 optionally contains specified properties as well (e.g <code>Object.create(=
 prototype, optionalDescriptorObjects )</code>).</p>

<p>We can see this demonstrated in the example below:</p>

<div><div id=3D"highlighter_327893" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</=
div><div class=3D"line number19 index18 alt2">19</div></td><td class=3D"cod=
e"><div class=3D"container"><div class=3D"line number1 index0 alt2"><code c=
lass=3D"js keyword">var</code> <code class=3D"js plain">myCar =3D {</code><=
/div><div class=3D"line number2 index1 alt1">&nbsp;</div><div class=3D"line=
 number3 index2 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code cl=
ass=3D"js plain">name: </code><code class=3D"js string">"Ford Escort"</code=
><code class=3D"js plain">,</code></div><div class=3D"line number4 index3 a=
lt1">&nbsp;</div><div class=3D"line number5 index4 alt2"><code class=3D"js =
spaces">&nbsp;&nbsp;</code><code class=3D"js plain">drive: </code><code cla=
ss=3D"js keyword">function</code> <code class=3D"js plain">() {</code></div=
><div class=3D"line number6 index5 alt1"><code class=3D"js spaces">&nbsp;&n=
bsp;&nbsp;&nbsp;</code><code class=3D"js plain">console.log( </code><code c=
lass=3D"js string">"Weeee. I'm driving!"</code> <code class=3D"js plain">);=
</code></div><div class=3D"line number7 index6 alt2"><code class=3D"js spac=
es">&nbsp;&nbsp;</code><code class=3D"js plain">},</code></div><div class=
=3D"line number8 index7 alt1">&nbsp;</div><div class=3D"line number9 index8=
 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js plain=
">panic: </code><code class=3D"js keyword">function</code> <code class=3D"j=
s plain">() {</code></div><div class=3D"line number10 index9 alt1"><code cl=
ass=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">c=
onsole.log( </code><code class=3D"js string">"Wait. How do you stop this th=
ing?"</code> <code class=3D"js plain">);</code></div><div class=3D"line num=
ber11 index10 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code clas=
s=3D"js plain">}</code></div><div class=3D"line number12 index11 alt1">&nbs=
p;</div><div class=3D"line number13 index12 alt2"><code class=3D"js plain">=
};</code></div><div class=3D"line number14 index13 alt1">&nbsp;</div><div c=
lass=3D"line number15 index14 alt2"><code class=3D"js comments">// Use Obje=
ct.create to instantiate a new car</code></div><div class=3D"line number16 =
index15 alt1"><code class=3D"js keyword">var</code> <code class=3D"js plain=
">yourCar =3D Object.create( myCar );</code></div><div class=3D"line number=
17 index16 alt2">&nbsp;</div><div class=3D"line number18 index17 alt1"><cod=
e class=3D"js comments">// Now we can see that one is a prototype of the ot=
her</code></div><div class=3D"line number19 index18 alt2"><code class=3D"js=
 plain">console.log( yourCar.name );</code></div></div></td></tr></tbody></=
table></div></div><p></p>
<p>
<code>Object.create</code> also allows us to easily implement advanced conc=
epts such as differential inheritance where objects are able to directly in=
herit from other objects. We saw earlier that <code>Object.create</code> al=
lows us to initialise object properties using the second supplied argument.=
 For example:
</p>
<p>
</p><div><div id=3D"highlighter_135051" class=3D"syntaxhighlighter  js acod=
ecode"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resou=
rces/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help h=
elp">?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D=
"0"><tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2"=
>1</div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line n=
umber3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><=
div class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 in=
dex5 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=
=3D"line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2=
">9</div><div class=3D"line number10 index9 alt1">10</div><div class=3D"lin=
e number11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">=
12</div><div class=3D"line number13 index12 alt2">13</div><div class=3D"lin=
e number14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">=
15</div><div class=3D"line number16 index15 alt1">16</div><div class=3D"lin=
e number17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">=
18</div><div class=3D"line number19 index18 alt2">19</div><div class=3D"lin=
e number20 index19 alt1">20</div></td><td class=3D"code"><div class=3D"cont=
ainer"><div class=3D"line number1 index0 alt2"><code class=3D"js keyword">v=
ar</code> <code class=3D"js plain">vehicle =3D {</code></div><div class=3D"=
line number2 index1 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><cod=
e class=3D"js plain">getModel: </code><code class=3D"js keyword">function</=
code> <code class=3D"js plain">() {</code></div><div class=3D"line number3 =
index2 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code=
 class=3D"js plain">console.log( </code><code class=3D"js string">"The mode=
l of this vehicle is.."</code> <code class=3D"js plain">+ </code><code clas=
s=3D"js keyword">this</code><code class=3D"js plain">.model );</code></div>=
<div class=3D"line number4 index3 alt1"><code class=3D"js spaces">&nbsp;&nb=
sp;</code><code class=3D"js plain">}</code></div><div class=3D"line number5=
 index4 alt2"><code class=3D"js plain">};</code></div><div class=3D"line nu=
mber6 index5 alt1">&nbsp;</div><div class=3D"line number7 index6 alt2"><cod=
e class=3D"js keyword">var</code> <code class=3D"js plain">car =3D Object.c=
reate(vehicle, {</code></div><div class=3D"line number8 index7 alt1">&nbsp;=
</div><div class=3D"line number9 index8 alt2"><code class=3D"js spaces">&nb=
sp;&nbsp;</code><code class=3D"js string">"id"</code><code class=3D"js plai=
n">: {</code></div><div class=3D"line number10 index9 alt1"><code class=3D"=
js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">value: M=
Y_GLOBAL.nextId(),</code></div><div class=3D"line number11 index10 alt2"><c=
ode class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js co=
mments">// writable:false, configurable:false by default</code></div><div c=
lass=3D"line number12 index11 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&=
nbsp;&nbsp;</code><code class=3D"js plain">enumerable: </code><code class=
=3D"js keyword">true</code></div><div class=3D"line number13 index12 alt2">=
<code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js plain">},</c=
ode></div><div class=3D"line number14 index13 alt1">&nbsp;</div><div class=
=3D"line number15 index14 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</cod=
e><code class=3D"js string">"model"</code><code class=3D"js plain">: {</cod=
e></div><div class=3D"line number16 index15 alt1"><code class=3D"js spaces"=
>&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">value: </code><cod=
e class=3D"js string">"Ford"</code><code class=3D"js plain">,</code></div><=
div class=3D"line number17 index16 alt2"><code class=3D"js spaces">&nbsp;&n=
bsp;&nbsp;&nbsp;</code><code class=3D"js plain">enumerable: </code><code cl=
ass=3D"js keyword">true</code></div><div class=3D"line number18 index17 alt=
1"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js plain">}<=
/code></div><div class=3D"line number19 index18 alt2">&nbsp;</div><div clas=
s=3D"line number20 index19 alt1"><code class=3D"js plain">});</code></div><=
/div></td></tr></tbody></table></div></div>
<p></p>
<p>
Here the properties can be initialized on the second argument of <code>Obje=
ct.create</code> using an object literal with a syntax similar to that used=
 by the <code>Object.defineProperties</code> and <code>Object.definePropert=
y</code> methods that we looked at previously.</p>

<p>It is worth noting that prototypal relationships can cause trouble when =
enumerating properties of objects and (as Crockford recommends) wrapping th=
e contents of the loop in a <code>hasOwnProperty()</code> check.</p>

<p>If we wish to implement the prototype pattern without directly using <co=
de>Object.create</code>, we can simulate the pattern as per the above examp=
le as follows:</p>
<p>&nbsp;</p>
<p>
</p><div><div id=3D"highlighter_148591" class=3D"syntaxhighlighter  js acod=
ecode"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resou=
rces/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help h=
elp">?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D=
"0"><tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2"=
>1</div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line n=
umber3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><=
div class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 in=
dex5 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=
=3D"line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2=
">9</div><div class=3D"line number10 index9 alt1">10</div><div class=3D"lin=
e number11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">=
12</div><div class=3D"line number13 index12 alt2">13</div><div class=3D"lin=
e number14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">=
15</div><div class=3D"line number16 index15 alt1">16</div><div class=3D"lin=
e number17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">=
18</div><div class=3D"line number19 index18 alt2">19</div><div class=3D"lin=
e number20 index19 alt1">20</div><div class=3D"line number21 index20 alt2">=
21</div><div class=3D"line number22 index21 alt1">22</div><div class=3D"lin=
e number23 index22 alt2">23</div><div class=3D"line number24 index23 alt1">=
24</div><div class=3D"line number25 index24 alt2">25</div><div class=3D"lin=
e number26 index25 alt1">26</div></td><td class=3D"code"><div class=3D"cont=
ainer"><div class=3D"line number1 index0 alt2"><code class=3D"js keyword">v=
ar</code> <code class=3D"js plain">vehiclePrototype =3D {</code></div><div =
class=3D"line number2 index1 alt1">&nbsp;</div><div class=3D"line number3 i=
ndex2 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js =
plain">init: </code><code class=3D"js keyword">function</code> <code class=
=3D"js plain">( carModel ) {</code></div><div class=3D"line number4 index3 =
alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js keyword">this</code><code class=3D"js plain">.model =3D carModel;</c=
ode></div><div class=3D"line number5 index4 alt2"><code class=3D"js spaces"=
>&nbsp;&nbsp;</code><code class=3D"js plain">},</code></div><div class=3D"l=
ine number6 index5 alt1">&nbsp;</div><div class=3D"line number7 index6 alt2=
"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js plain">get=
Model: </code><code class=3D"js keyword">function</code> <code class=3D"js =
plain">() {</code></div><div class=3D"line number8 index7 alt1"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">cons=
ole.log( </code><code class=3D"js string">"The model of this vehicle is.."<=
/code> <code class=3D"js plain">+ </code><code class=3D"js keyword">this</c=
ode><code class=3D"js plain">.model);</code></div><div class=3D"line number=
9 index8 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"=
js plain">}</code></div><div class=3D"line number10 index9 alt1"><code clas=
s=3D"js plain">};</code></div><div class=3D"line number11 index10 alt2">&nb=
sp;</div><div class=3D"line number12 index11 alt1">&nbsp;</div><div class=
=3D"line number13 index12 alt2"><code class=3D"js keyword">function</code> =
<code class=3D"js plain">vehicle( model ) {</code></div><div class=3D"line =
number14 index13 alt1">&nbsp;</div><div class=3D"line number15 index14 alt2=
"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js keyword">f=
unction</code> <code class=3D"js plain">F() {};</code></div><div class=3D"l=
ine number16 index15 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><co=
de class=3D"js plain">F.prototype =3D vehiclePrototype;</code></div><div cl=
ass=3D"line number17 index16 alt2">&nbsp;</div><div class=3D"line number18 =
index17 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"j=
s keyword">var</code> <code class=3D"js plain">f =3D </code><code class=3D"=
js keyword">new</code> <code class=3D"js plain">F();</code></div><div class=
=3D"line number19 index18 alt2">&nbsp;</div><div class=3D"line number20 ind=
ex19 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js p=
lain">f.init( model );</code></div><div class=3D"line number21 index20 alt2=
"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js keyword">r=
eturn</code> <code class=3D"js plain">f;</code></div><div class=3D"line num=
ber22 index21 alt1">&nbsp;</div><div class=3D"line number23 index22 alt2"><=
code class=3D"js plain">}</code></div><div class=3D"line number24 index23 a=
lt1">&nbsp;</div><div class=3D"line number25 index24 alt2"><code class=3D"j=
s keyword">var</code> <code class=3D"js plain">car =3D vehicle( </code><cod=
e class=3D"js string">"Ford Escort"</code> <code class=3D"js plain">);</cod=
e></div><div class=3D"line number26 index25 alt1"><code class=3D"js plain">=
car.getModel();</code></div></div></td></tr></tbody></table></div></div>
<p></p>

<p><strong>Note:</strong> This alternative does not allow the user to defin=
e read-only properties in the same manner (as the vehiclePrototype may be a=
ltered if not careful).</p>

<p>A final alternative implementation of the Prototype pattern could be the=
 following:</p>

<div><div id=3D"highlighter_929705" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div></td><td class=3D"code"><div class=3D"container"><div class=3D"line nu=
mber1 index0 alt2"><code class=3D"js keyword">var</code> <code class=3D"js =
plain">beget =3D (</code><code class=3D"js keyword">function</code> <code c=
lass=3D"js plain">() {</code></div><div class=3D"line number2 index1 alt1">=
&nbsp;</div><div class=3D"line number3 index2 alt2"><code class=3D"js space=
s">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">function</code=
> <code class=3D"js plain">F() {}</code></div><div class=3D"line number4 in=
dex3 alt1">&nbsp;</div><div class=3D"line number5 index4 alt2"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">re=
turn</code> <code class=3D"js keyword">function</code> <code class=3D"js pl=
ain">( proto ) {</code></div><div class=3D"line number6 index5 alt1"><code =
class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>=
<code class=3D"js plain">F.prototype =3D proto;</code></div><div class=3D"l=
ine number7 index6 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">return</code> <co=
de class=3D"js keyword">new</code> <code class=3D"js plain">F();</code></di=
v><div class=3D"line number8 index7 alt1"><code class=3D"js spaces">&nbsp;&=
nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">};</code></div><div class=
=3D"line number9 index8 alt2"><code class=3D"js plain">})();</code></div></=
div></td></tr></tbody></table></div></div>

<p>One could reference this method from the <code>vehicle</code> function. =
Note, however that <code>vehicle</code> here is emulating a constructor, si=
nce the prototype pattern does not include any notion of initialization bey=
ond linking an object to a prototype.</p>

<p>&nbsp;</p>
<h2 id=3D"commandpatternjavascript">
  <a href=3D"https://addyosmani.com/resources/essentialjsdesignpatterns/boo=
k/#commandpatternjavascript" class=3D"subhead-link">#</a>
  The Command Pattern
</h2>

<p>The Command pattern aims to encapsulate method invocation, requests or o=
perations into a single object and gives us the ability to both parameteriz=
e and pass method calls around that can be executed at our discretion. In a=
ddition, it enables us to decouple objects invoking the action from the obj=
ects which implement them, giving us a greater degree of overall flexibilit=
y in swapping out concrete <em>classes</em> (objects).</p>

<p><em>Concrete</em> classes are best explained in terms of class-based pro=
gramming languages and are related to the idea of abstract classes. An <em>=
abstract</em> class defines an interface, but doesn't necessarily provide i=
mplementations for all of its member functions. It acts as a base class fro=
m which others are derived. A derived class which implements the missing fu=
nctionality is called a <em>concrete</em> class. </p>

<p>The general idea behind the Command pattern is that it provides us a mea=
ns to separate the responsibilities of issuing commands from anything execu=
ting commands, delegating this responsibility to different objects instead.=
</p>

<p>Implementation wise, simple command objects bind together both an action=
 and the object wishing to invoke the action. They consistently include an =
execution operation (such as <code>run()</code> or <code>execute()</code>).=
 All Command objects with the same interface can easily be swapped as neede=
d and this is considered one of the larger benefits of the pattern.</p>

<p>To demonstrate the Command pattern we're going to create a simple car pu=
rchasing service.</p>
<p></p><div><div id=3D"highlighter_204261" class=3D"syntaxhighlighter  js a=
codecode"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/re=
sources/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_hel=
p help">?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=
=3D"0"><tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 al=
t2">1</div><div class=3D"line number2 index1 alt1">2</div><div class=3D"lin=
e number3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</di=
v><div class=3D"line number5 index4 alt2">5</div><div class=3D"line number6=
 index5 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div cl=
ass=3D"line number8 index7 alt1">8</div><div class=3D"line number9 index8 a=
lt2">9</div><div class=3D"line number10 index9 alt1">10</div><div class=3D"=
line number11 index10 alt2">11</div><div class=3D"line number12 index11 alt=
1">12</div><div class=3D"line number13 index12 alt2">13</div><div class=3D"=
line number14 index13 alt1">14</div><div class=3D"line number15 index14 alt=
2">15</div><div class=3D"line number16 index15 alt1">16</div><div class=3D"=
line number17 index16 alt2">17</div><div class=3D"line number18 index17 alt=
1">18</div><div class=3D"line number19 index18 alt2">19</div><div class=3D"=
line number20 index19 alt1">20</div><div class=3D"line number21 index20 alt=
2">21</div><div class=3D"line number22 index21 alt1">22</div></td><td class=
=3D"code"><div class=3D"container"><div class=3D"line number1 index0 alt2">=
<code class=3D"js plain">(</code><code class=3D"js keyword">function</code>=
<code class=3D"js plain">(){</code></div><div class=3D"line number2 index1 =
alt1">&nbsp;</div><div class=3D"line number3 index2 alt2"><code class=3D"js=
 spaces">&nbsp;&nbsp;</code><code class=3D"js keyword">var</code> <code cla=
ss=3D"js plain">carManager =3D {</code></div><div class=3D"line number4 ind=
ex3 alt1">&nbsp;</div><div class=3D"line number5 index4 alt2"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">/=
/ request information</code></div><div class=3D"line number6 index5 alt1"><=
code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js p=
lain">requestInfo: </code><code class=3D"js keyword">function</code><code c=
lass=3D"js plain">( model, id ){</code></div><div class=3D"line number7 ind=
ex6 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</c=
ode><code class=3D"js keyword">return</code> <code class=3D"js string">"The=
 information for "</code> <code class=3D"js plain">+ model + </code><code c=
lass=3D"js string">" with ID "</code> <code class=3D"js plain">+ id + </cod=
e><code class=3D"js string">" is foobar"</code><code class=3D"js plain">;</=
code></div><div class=3D"line number8 index7 alt1"><code class=3D"js spaces=
">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">},</code></div><d=
iv class=3D"line number9 index8 alt2">&nbsp;</div><div class=3D"line number=
10 index9 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><c=
ode class=3D"js comments">// purchase the car</code></div><div class=3D"lin=
e number11 index10 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;=
</code><code class=3D"js plain">buyVehicle: </code><code class=3D"js keywor=
d">function</code><code class=3D"js plain">( model, id ){</code></div><div =
class=3D"line number12 index11 alt1"><code class=3D"js spaces">&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">return</code> <co=
de class=3D"js string">"You have successfully purchased Item "</code> <code=
 class=3D"js plain">+ id + </code><code class=3D"js string">", a "</code> <=
code class=3D"js plain">+ model;</code></div><div class=3D"line number13 in=
dex12 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code =
class=3D"js plain">},</code></div><div class=3D"line number14 index13 alt1"=
>&nbsp;</div><div class=3D"line number15 index14 alt2"><code class=3D"js sp=
aces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// arrange=
 a viewing</code></div><div class=3D"line number16 index15 alt1"><code clas=
s=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">arr=
angeViewing: </code><code class=3D"js keyword">function</code><code class=
=3D"js plain">( model, id ){</code></div><div class=3D"line number17 index1=
6 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</cod=
e><code class=3D"js keyword">return</code> <code class=3D"js string">"You h=
ave successfully booked a viewing of "</code> <code class=3D"js plain">+ mo=
del + </code><code class=3D"js string">" ( "</code> <code class=3D"js plain=
">+ id + </code><code class=3D"js string">" ) "</code><code class=3D"js pla=
in">;</code></div><div class=3D"line number18 index17 alt1"><code class=3D"=
js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">}</code>=
</div><div class=3D"line number19 index18 alt2">&nbsp;</div><div class=3D"l=
ine number20 index19 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><co=
de class=3D"js plain">};</code></div><div class=3D"line number21 index20 al=
t2">&nbsp;</div><div class=3D"line number22 index21 alt1"><code class=3D"js=
 plain">})();</code></div></div></td></tr></tbody></table></div></div><p></=
p>

<p>Taking a look at the above code, it would be trivial to invoke our <code=
>carManager</code> methods by directly accessing the object. We would all b=
e forgiven for thinking there is nothing wrong with this - technically, it'=
s completely valid JavaScript. There are however scenarios where this may b=
e disadvantageous.</p>

<p>For example, imagine if the core API behind the <code>carManager</code> =
changed. This would require all objects directly accessing these methods wi=
thin our application to also be modified. This could be viewed as a layer o=
f coupling which effectively goes against the OOP methodology of loosely co=
upling objects as much as possible. Instead, we could solve this problem by=
 abstracting the API away further.</p>

<p>Let's now expand on our <code>carManager</code> so that our application =
of the Command pattern results in the following: accept any named methods t=
hat can be performed on the <code>carManager</code> object, passing along a=
ny data that might be used such as the Car model and ID.</p>

<p>Here is what we would like to be able to achieve:</p>

<p></p><div><div id=3D"highlighter_270478" class=3D"syntaxhighlighter  js a=
codecode"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/re=
sources/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_hel=
p help">?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=
=3D"0"><tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 al=
t2">1</div></td><td class=3D"code"><div class=3D"container"><div class=3D"l=
ine number1 index0 alt2"><code class=3D"js plain">carManager.execute( </cod=
e><code class=3D"js string">"buyVehicle"</code><code class=3D"js plain">, <=
/code><code class=3D"js string">"Ford Escort"</code><code class=3D"js plain=
">, </code><code class=3D"js string">"453543"</code> <code class=3D"js plai=
n">);</code></div></div></td></tr></tbody></table></div></div>
<p></p>
<p>
As per this structure we should now add a definition for the <code>carManag=
er.execute</code> method as follows:
</p>
<p></p><div><div id=3D"highlighter_300438" class=3D"syntaxhighlighter  js a=
codecode"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/re=
sources/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_hel=
p help">?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=
=3D"0"><tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 al=
t2">1</div><div class=3D"line number2 index1 alt1">2</div><div class=3D"lin=
e number3 index2 alt2">3</div></td><td class=3D"code"><div class=3D"contain=
er"><div class=3D"line number1 index0 alt2"><code class=3D"js plain">carMan=
ager.execute =3D </code><code class=3D"js keyword">function</code> <code cl=
ass=3D"js plain">( name ) {</code></div><div class=3D"line number2 index1 a=
lt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js keyword">return</code> <code class=3D"js plain">carManager[name] &am=
p;&amp; carManager[name].apply( carManager, [].slice.call(arguments, 1) );<=
/code></div><div class=3D"line number3 index2 alt2"><code class=3D"js plain=
">};</code></div></div></td></tr></tbody></table></div></div><p></p>
<p>Our final sample calls would thus look as follows:</p>

<p></p><div><div id=3D"highlighter_397413" class=3D"syntaxhighlighter  js a=
codecode"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/re=
sources/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_hel=
p help">?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=
=3D"0"><tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 al=
t2">1</div><div class=3D"line number2 index1 alt1">2</div><div class=3D"lin=
e number3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</di=
v></td><td class=3D"code"><div class=3D"container"><div class=3D"line numbe=
r1 index0 alt2"><code class=3D"js plain">carManager.execute( </code><code c=
lass=3D"js string">"arrangeViewing"</code><code class=3D"js plain">, </code=
><code class=3D"js string">"Ferrari"</code><code class=3D"js plain">, </cod=
e><code class=3D"js string">"14523"</code> <code class=3D"js plain">);</cod=
e></div><div class=3D"line number2 index1 alt1"><code class=3D"js plain">ca=
rManager.execute( </code><code class=3D"js string">"requestInfo"</code><cod=
e class=3D"js plain">, </code><code class=3D"js string">"Ford Mondeo"</code=
><code class=3D"js plain">, </code><code class=3D"js string">"54323"</code>=
 <code class=3D"js plain">);</code></div><div class=3D"line number3 index2 =
alt2"><code class=3D"js plain">carManager.execute( </code><code class=3D"js=
 string">"requestInfo"</code><code class=3D"js plain">, </code><code class=
=3D"js string">"Ford Escort"</code><code class=3D"js plain">, </code><code =
class=3D"js string">"34232"</code> <code class=3D"js plain">);</code></div>=
<div class=3D"line number4 index3 alt1"><code class=3D"js plain">carManager=
.execute( </code><code class=3D"js string">"buyVehicle"</code><code class=
=3D"js plain">, </code><code class=3D"js string">"Ford Escort"</code><code =
class=3D"js plain">, </code><code class=3D"js string">"34232"</code> <code =
class=3D"js plain">);</code></div></div></td></tr></tbody></table></div></d=
iv><p></p>
<p>&nbsp;</p>

<p>&nbsp;</p>
<h2 id=3D"facadepatternjavascript">
  <a href=3D"https://addyosmani.com/resources/essentialjsdesignpatterns/boo=
k/#facadepatternjavascript" class=3D"subhead-link">#</a>
  The Facade Pattern
</h2>

<p>When we put up a facade, we present an outward appearance to the world w=
hich may conceal a very different reality. This was the inspiration for the=
 name behind the next pattern we're going to review - the Facade pattern. T=
his pattern provides a convenient higher-level interface to a larger body o=
f code, hiding its true underlying complexity. Think of it as simplifying t=
he API being presented to other developers, something which almost always i=
mproves usability.</p>

<p>
Facades are a structural pattern which can often be seen in JavaScript libr=
aries like jQuery where, although an implementation may support methods wit=
h a wide range of behaviors, only a "facade" or limited abstraction of thes=
e methods is presented to the public for use.</p>

<p>
This allows us to interact with the Facade directly rather than the subsyst=
em behind the scenes. Whenever we use jQuery's <code>$(el).css()</code> or =
<code>$(el).animate()</code> methods, we're actually using a Facade - the s=
impler public interface that avoids us having to manually call the many int=
ernal methods in jQuery core required to get some behavior working. This al=
so avoids the need to manually interact with DOM APIs and maintain state va=
riables.</p>

<p>The jQuery core methods should be considered intermediate abstractions. =
The more immediate burden to developers is the DOM API and facades are what=
 make the jQuery library so easy to use.</p>

<p>
To build on what we've learned, the Facade pattern both simplifies the inte=
rface of a class and it also decouples the class from the code that utilize=
s it. This gives us the ability to indirectly interact with subsystems in a=
 way that can sometimes be less prone to error than accessing the subsystem=
 directly. A Facade's advantages include ease of use and often a small size=
-footprint in implementing the pattern. </p>

<p>
Let=E2=80=99s take a look at the pattern in action. This is an unoptimized =
code example, but here we're utilizing a Facade to simplify an interface fo=
r listening to events cross-browser. We do this by creating a common method=
 that can be used in one=E2=80=99s code which does the task of checking for=
 the existence of features so that it can provide a safe and cross-browser =
compatible solution.</p>

<div><div id=3D"highlighter_168865" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div></td><td class=3D"code"><div class=3D"containe=
r"><div class=3D"line number1 index0 alt2"><code class=3D"js keyword">var</=
code> <code class=3D"js plain">addMyEvent =3D </code><code class=3D"js keyw=
ord">function</code><code class=3D"js plain">( el,ev,fn ){</code></div><div=
 class=3D"line number2 index1 alt1">&nbsp;</div><div class=3D"line number3 =
index2 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js keyword">if</code><code class=3D"js plain">( el.addEventListener ){<=
/code></div><div class=3D"line number4 index3 alt1"><code class=3D"js space=
s">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
</code><code class=3D"js plain">el.addEventListener( ev,fn, </code><code cl=
ass=3D"js keyword">false</code> <code class=3D"js plain">);</code></div><di=
v class=3D"line number5 index4 alt2"><code class=3D"js spaces">&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">}</code><code class=
=3D"js keyword">else</code> <code class=3D"js keyword">if</code><code class=
=3D"js plain">(el.attachEvent){</code></div><div class=3D"line number6 inde=
x5 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">el.attachEv=
ent( </code><code class=3D"js string">"on"</code> <code class=3D"js plain">=
+ ev, fn );</code></div><div class=3D"line number7 index6 alt2"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js=
 plain">} </code><code class=3D"js keyword">else</code><code class=3D"js pl=
ain">{</code></div><div class=3D"line number8 index7 alt1"><code class=3D"j=
s spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;</code><code class=3D"js plain">el[</code><code class=3D"js string">"on"</=
code> <code class=3D"js plain">+ ev] =3D fn;</code></div><div class=3D"line=
 number9 index8 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</c=
ode><code class=3D"js plain">}</code></div><div class=3D"line number10 inde=
x9 alt1">&nbsp;</div><div class=3D"line number11 index10 alt2"><code class=
=3D"js plain">};</code></div></div></td></tr></tbody></table></div></div>

<p>
In a similar manner, we're all familiar with jQuery's <code>$(document).rea=
dy(..)</code>. Internally, this is actually being powered by a method calle=
d <code>bindReady()</code>, which is doing this:</p>

<div><div id=3D"highlighter_681459" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div></td><td class=3D"code"><div class=3D"containe=
r"><div class=3D"line number1 index0 alt2"><code class=3D"js plain">bindRea=
dy: </code><code class=3D"js keyword">function</code><code class=3D"js plai=
n">() {</code></div><div class=3D"line number2 index1 alt1"><code class=3D"=
js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">...</cod=
e></div><div class=3D"line number3 index2 alt2"><code class=3D"js spaces">&=
nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">if</code> <code cl=
ass=3D"js plain">( document.addEventListener ) {</code></div><div class=3D"=
line number4 index3 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;</code><code class=3D"js comments">// Use the handy event call=
back</code></div><div class=3D"line number5 index4 alt2"><code class=3D"js =
spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain"=
>document.addEventListener( </code><code class=3D"js string">"DOMContentLoa=
ded"</code><code class=3D"js plain">, DOMContentLoaded, </code><code class=
=3D"js keyword">false</code> <code class=3D"js plain">);</code></div><div c=
lass=3D"line number6 index5 alt1">&nbsp;</div><div class=3D"line number7 in=
dex6 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</=
code><code class=3D"js comments">// A fallback to window.onload, that will =
always work</code></div><div class=3D"line number8 index7 alt1"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js=
 plain">window.addEventListener( </code><code class=3D"js string">"load"</c=
ode><code class=3D"js plain">, jQuery.ready, </code><code class=3D"js keywo=
rd">false</code> <code class=3D"js plain">);</code></div><div class=3D"line=
 number9 index8 alt2">&nbsp;</div><div class=3D"line number10 index9 alt1">=
<code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js =
comments">// If IE event model is used</code></div><div class=3D"line numbe=
r11 index10 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>=
<code class=3D"js plain">} </code><code class=3D"js keyword">else</code> <c=
ode class=3D"js keyword">if</code> <code class=3D"js plain">( document.atta=
chEvent ) {</code></div><div class=3D"line number12 index11 alt1">&nbsp;</d=
iv><div class=3D"line number13 index12 alt2"><code class=3D"js spaces">&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">document.at=
tachEvent( </code><code class=3D"js string">"onreadystatechange"</code><cod=
e class=3D"js plain">, DOMContentLoaded );</code></div><div class=3D"line n=
umber14 index13 alt1">&nbsp;</div><div class=3D"line number15 index14 alt2"=
><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code=
 class=3D"js comments">// A fallback to window.onload, that will always wor=
k</code></div><div class=3D"line number16 index15 alt1"><code class=3D"js s=
paces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">=
window.attachEvent( </code><code class=3D"js string">"onload"</code><code c=
lass=3D"js plain">, jQuery.ready );</code></div><div class=3D"line number17=
 index16 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js plain">...</code></div></div></td></tr></tbody></table></div></div>
<p>
This is another example of a Facade, where the rest of the world simply use=
s the limited interface exposed by <code>$(document).ready(..)</code> and t=
he more complex implementation powering it is kept hidden from sight.</p>

<p>
Facades don't just have to be used on their own, however. They can also be =
integrated with other patterns such as the Module pattern. As we can see be=
low, our instance of the module patterns contains a number of methods which=
 have been privately defined. A Facade is then used to supply a much simple=
r API to accessing these methods:
</p>
<div><div id=3D"highlighter_762624" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</=
div><div class=3D"line number19 index18 alt2">19</div><div class=3D"line nu=
mber20 index19 alt1">20</div><div class=3D"line number21 index20 alt2">21</=
div><div class=3D"line number22 index21 alt1">22</div><div class=3D"line nu=
mber23 index22 alt2">23</div><div class=3D"line number24 index23 alt1">24</=
div><div class=3D"line number25 index24 alt2">25</div><div class=3D"line nu=
mber26 index25 alt1">26</div><div class=3D"line number27 index26 alt2">27</=
div><div class=3D"line number28 index27 alt1">28</div><div class=3D"line nu=
mber29 index28 alt2">29</div><div class=3D"line number30 index29 alt1">30</=
div><div class=3D"line number31 index30 alt2">31</div><div class=3D"line nu=
mber32 index31 alt1">32</div><div class=3D"line number33 index32 alt2">33</=
div></td><td class=3D"code"><div class=3D"container"><div class=3D"line num=
ber1 index0 alt2"><code class=3D"js keyword">var</code> <code class=3D"js p=
lain">module =3D (</code><code class=3D"js keyword">function</code><code cl=
ass=3D"js plain">() {</code></div><div class=3D"line number2 index1 alt1">&=
nbsp;</div><div class=3D"line number3 index2 alt2"><code class=3D"js spaces=
">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">var</code> <cod=
e class=3D"js plain">_private =3D {</code></div><div class=3D"line number4 =
index3 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;</code><code class=3D"js plain">i: 5,</code></div><div class=3D=
"line number5 index4 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">get: </code><code=
 class=3D"js keyword">function</code><code class=3D"js plain">() {</code></=
div><div class=3D"line number6 index5 alt1"><code class=3D"js spaces">&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><=
code class=3D"js plain">console.log( </code><code class=3D"js string">"curr=
ent value:"</code> <code class=3D"js plain">+ </code><code class=3D"js keyw=
ord">this</code><code class=3D"js plain">.i);</code></div><div class=3D"lin=
e number7 index6 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">},</code></div><div c=
lass=3D"line number8 index7 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">set: </cod=
e><code class=3D"js keyword">function</code><code class=3D"js plain">( val =
) {</code></div><div class=3D"line number9 index8 alt2"><code class=3D"js s=
paces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;</code><code class=3D"js keyword">this</code><code class=3D"js plain">.=
i =3D val;</code></div><div class=3D"line number10 index9 alt1"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code=
 class=3D"js plain">},</code></div><div class=3D"line number11 index10 alt2=
"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;</code><code class=3D"js plain">run: </code><code class=3D"js keyword">fun=
ction</code><code class=3D"js plain">() {</code></div><div class=3D"line nu=
mber12 index11 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain"=
>console.log( </code><code class=3D"js string">"running"</code> <code class=
=3D"js plain">);</code></div><div class=3D"line number13 index12 alt2"><cod=
e class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</cod=
e><code class=3D"js plain">},</code></div><div class=3D"line number14 index=
13 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;</code><code class=3D"js plain">jump: </code><code class=3D"js keyw=
ord">function</code><code class=3D"js plain">(){</code></div><div class=3D"=
line number15 index14 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js=
 plain">console.log( </code><code class=3D"js string">"jumping"</code> <cod=
e class=3D"js plain">);</code></div><div class=3D"line number16 index15 alt=
1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</code><code class=3D"js plain">}</code></div><div class=3D"line number17=
 index16 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><co=
de class=3D"js plain">};</code></div><div class=3D"line number18 index17 al=
t1">&nbsp;</div><div class=3D"line number19 index18 alt2"><code class=3D"js=
 spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">return</=
code> <code class=3D"js plain">{</code></div><div class=3D"line number20 in=
dex19 alt1">&nbsp;</div><div class=3D"line number21 index20 alt2"><code cla=
ss=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><co=
de class=3D"js plain">facade: </code><code class=3D"js keyword">function</c=
ode><code class=3D"js plain">( args ) {</code></div><div class=3D"line numb=
er22 index21 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">_=
private.set(args.val);</code></div><div class=3D"line number23 index22 alt2=
"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">_private.get();</c=
ode></div><div class=3D"line number24 index23 alt1"><code class=3D"js space=
s">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
</code><code class=3D"js keyword">if</code> <code class=3D"js plain">( args=
.run ) {</code></div><div class=3D"line number25 index24 alt2"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">_privat=
e.run();</code></div><div class=3D"line number26 index25 alt1"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;</code><code class=3D"js plain">}</code></div><div class=3D"lin=
e number27 index26 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">}</code></div><div =
class=3D"line number28 index27 alt1"><code class=3D"js spaces">&nbsp;&nbsp;=
&nbsp;&nbsp;</code><code class=3D"js plain">};</code></div><div class=3D"li=
ne number29 index28 alt2"><code class=3D"js plain">}());</code></div><div c=
lass=3D"line number30 index29 alt1">&nbsp;</div><div class=3D"line number31=
 index30 alt2">&nbsp;</div><div class=3D"line number32 index31 alt1"><code =
class=3D"js comments">// Outputs: "current value: 10" and "running"</code><=
/div><div class=3D"line number33 index32 alt2"><code class=3D"js plain">mod=
ule.facade( {run: </code><code class=3D"js keyword">true</code><code class=
=3D"js plain">, val: 10} );</code></div></div></td></tr></tbody></table></d=
iv></div>

<p>
In this example, calling <code>module.facade()</code> will actually trigger=
 a set of private behavior within the module, but again, the user isn't con=
cerned with this. we've made it much easier for them to consume a feature w=
ithout needing to worry about implementation-level details.
</p>

<h3>Notes on abstraction</h3>

<p>Facades generally have few disadvantages, but one concern worth noting i=
s performance. Namely, one must determine whether there is an implicit cost=
 to the abstraction a Facade offers to our implementation and if so, whethe=
r this cost is justifiable. Going back to the jQuery library, most of us ar=
e aware that both <code>getElementById("identifier")</code> and <code>$("#i=
dentifier")</code> can be used to query an element on a page by its ID.</p>

<p>Did you know however that <code>getElementById()</code> on its own is si=
gnificantly faster by a high order of magnitude? Take a look at this jsPerf=
 test to see results on a per-browser level: <a href=3D"http://jsperf.com/g=
etelementbyid-vs-jquery-id">http://jsperf.com/getelementbyid-vs-jquery-id</=
a>. Now of course, we have to keep in mind that jQuery (and Sizzle - its se=
lector engine) are doing a lot more behind the scenes to optimize our query=
 (and that a jQuery object, not just a DOM node is returned). </p>

<p>The challenge with this particular Facade is that in order to provide an=
 elegant selector function capable of accepting and parsing multiple types =
of queries, there is an implicit cost of abstraction. The user isn't requir=
ed to access <code>jQuery.getById("identifier")</code> or <code>jQuery.getB=
yClass("identifier")</code> and so on. That said, the trade-off in performa=
nce has been tested in practice over the years and given the success of jQu=
ery, a simple Facade actually worked out very well for the team.</p>

<p>When using the pattern, try to be aware of any performance costs involve=
d and make a call on whether they are worth the level of abstraction offere=
d.</p>



<p>&nbsp;</p>
<h2 id=3D"factorypatternjavascript">
  <a href=3D"https://addyosmani.com/resources/essentialjsdesignpatterns/boo=
k/#factorypatternjavascript" class=3D"subhead-link">#</a>
  The Factory Pattern
</h2>


<p>The Factory pattern is another creational pattern concerned with the not=
ion of creating objects. Where it differs from the other patterns in its ca=
tegory is that it doesn't explicitly require us to use a constructor. Inste=
ad, a Factory can provide a generic interface for creating objects, where w=
e can specify the type of factory object we wish to be created.</p>

<p>Imagine that we have a UI factory where we are asked to create a type of=
 UI component. Rather than creating this component directly using the <code=
>new</code> operator or via another creational constructor, we ask a Factor=
y object for a new component instead. We inform the Factory what type of ob=
ject is required (e.g "Button", "Panel") and it instantiates this, returnin=
g it to us for use.</p>

<p>This is particularly useful if the object creation process is relatively=
 complex, e.g. if it strongly depends on dynamic factors or application con=
figuration.</p>

<p>Examples of this pattern can be found in UI libraries such as ExtJS wher=
e the methods for creating objects or components may be further subclassed.=
</p>

<p>The following is an example that builds upon our previous snippets using=
 the Constructor pattern logic to define cars. It demonstrates how a Vehicl=
e <em>Factory</em> may be implemented using the Factory pattern:</p>

<p>
</p><div><div id=3D"highlighter_259259" class=3D"syntaxhighlighter  js acod=
ecode"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resou=
rces/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help h=
elp">?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D=
"0"><tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2"=
>1</div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line n=
umber3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><=
div class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 in=
dex5 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=
=3D"line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2=
">9</div><div class=3D"line number10 index9 alt1">10</div><div class=3D"lin=
e number11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">=
12</div><div class=3D"line number13 index12 alt2">13</div><div class=3D"lin=
e number14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">=
15</div><div class=3D"line number16 index15 alt1">16</div><div class=3D"lin=
e number17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">=
18</div><div class=3D"line number19 index18 alt2">19</div><div class=3D"lin=
e number20 index19 alt1">20</div><div class=3D"line number21 index20 alt2">=
21</div><div class=3D"line number22 index21 alt1">22</div><div class=3D"lin=
e number23 index22 alt2">23</div><div class=3D"line number24 index23 alt1">=
24</div><div class=3D"line number25 index24 alt2">25</div><div class=3D"lin=
e number26 index25 alt1">26</div><div class=3D"line number27 index26 alt2">=
27</div><div class=3D"line number28 index27 alt1">28</div><div class=3D"lin=
e number29 index28 alt2">29</div><div class=3D"line number30 index29 alt1">=
30</div><div class=3D"line number31 index30 alt2">31</div><div class=3D"lin=
e number32 index31 alt1">32</div><div class=3D"line number33 index32 alt2">=
33</div><div class=3D"line number34 index33 alt1">34</div><div class=3D"lin=
e number35 index34 alt2">35</div><div class=3D"line number36 index35 alt1">=
36</div><div class=3D"line number37 index36 alt2">37</div><div class=3D"lin=
e number38 index37 alt1">38</div><div class=3D"line number39 index38 alt2">=
39</div><div class=3D"line number40 index39 alt1">40</div><div class=3D"lin=
e number41 index40 alt2">41</div><div class=3D"line number42 index41 alt1">=
42</div><div class=3D"line number43 index42 alt2">43</div><div class=3D"lin=
e number44 index43 alt1">44</div><div class=3D"line number45 index44 alt2">=
45</div><div class=3D"line number46 index45 alt1">46</div><div class=3D"lin=
e number47 index46 alt2">47</div><div class=3D"line number48 index47 alt1">=
48</div><div class=3D"line number49 index48 alt2">49</div><div class=3D"lin=
e number50 index49 alt1">50</div><div class=3D"line number51 index50 alt2">=
51</div><div class=3D"line number52 index51 alt1">52</div><div class=3D"lin=
e number53 index52 alt2">53</div><div class=3D"line number54 index53 alt1">=
54</div><div class=3D"line number55 index54 alt2">55</div><div class=3D"lin=
e number56 index55 alt1">56</div><div class=3D"line number57 index56 alt2">=
57</div><div class=3D"line number58 index57 alt1">58</div><div class=3D"lin=
e number59 index58 alt2">59</div><div class=3D"line number60 index59 alt1">=
60</div><div class=3D"line number61 index60 alt2">61</div><div class=3D"lin=
e number62 index61 alt1">62</div></td><td class=3D"code"><div class=3D"cont=
ainer"><div class=3D"line number1 index0 alt2"><code class=3D"js comments">=
// Types.js - Constructors used behind the scenes</code></div><div class=3D=
"line number2 index1 alt1">&nbsp;</div><div class=3D"line number3 index2 al=
t2"><code class=3D"js comments">// A constructor for defining new cars</cod=
e></div><div class=3D"line number4 index3 alt1"><code class=3D"js keyword">=
function</code> <code class=3D"js plain">Car( options ) {</code></div><div =
class=3D"line number5 index4 alt2">&nbsp;</div><div class=3D"line number6 i=
ndex5 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js =
comments">// some defaults</code></div><div class=3D"line number7 index6 al=
t2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js keyword"=
>this</code><code class=3D"js plain">.doors =3D options.doors || 4;</code><=
/div><div class=3D"line number8 index7 alt1"><code class=3D"js spaces">&nbs=
p;&nbsp;</code><code class=3D"js keyword">this</code><code class=3D"js plai=
n">.state =3D options.state || </code><code class=3D"js string">"brand new"=
</code><code class=3D"js plain">;</code></div><div class=3D"line number9 in=
dex8 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js k=
eyword">this</code><code class=3D"js plain">.color =3D options.color || </c=
ode><code class=3D"js string">"silver"</code><code class=3D"js plain">;</co=
de></div><div class=3D"line number10 index9 alt1">&nbsp;</div><div class=3D=
"line number11 index10 alt2"><code class=3D"js plain">}</code></div><div cl=
ass=3D"line number12 index11 alt1">&nbsp;</div><div class=3D"line number13 =
index12 alt2"><code class=3D"js comments">// A constructor for defining new=
 trucks</code></div><div class=3D"line number14 index13 alt1"><code class=
=3D"js keyword">function</code> <code class=3D"js plain">Truck( options){</=
code></div><div class=3D"line number15 index14 alt2">&nbsp;</div><div class=
=3D"line number16 index15 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</cod=
e><code class=3D"js keyword">this</code><code class=3D"js plain">.state =3D=
 options.state || </code><code class=3D"js string">"used"</code><code class=
=3D"js plain">;</code></div><div class=3D"line number17 index16 alt2"><code=
 class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js keyword">this</co=
de><code class=3D"js plain">.wheelSize =3D options.wheelSize || </code><cod=
e class=3D"js string">"large"</code><code class=3D"js plain">;</code></div>=
<div class=3D"line number18 index17 alt1"><code class=3D"js spaces">&nbsp;&=
nbsp;</code><code class=3D"js keyword">this</code><code class=3D"js plain">=
.color =3D options.color || </code><code class=3D"js string">"blue"</code><=
code class=3D"js plain">;</code></div><div class=3D"line number19 index18 a=
lt2"><code class=3D"js plain">}</code></div><div class=3D"line number20 ind=
ex19 alt1">&nbsp;</div><div class=3D"line number21 index20 alt2">&nbsp;</di=
v><div class=3D"line number22 index21 alt1"><code class=3D"js comments">// =
FactoryExample.js</code></div><div class=3D"line number23 index22 alt2">&nb=
sp;</div><div class=3D"line number24 index23 alt1"><code class=3D"js commen=
ts">// Define a skeleton vehicle factory</code></div><div class=3D"line num=
ber25 index24 alt2"><code class=3D"js keyword">function</code> <code class=
=3D"js plain">VehicleFactory() {}</code></div><div class=3D"line number26 i=
ndex25 alt1">&nbsp;</div><div class=3D"line number27 index26 alt2"><code cl=
ass=3D"js comments">// Define the prototypes and utilities for this factory=
</code></div><div class=3D"line number28 index27 alt1">&nbsp;</div><div cla=
ss=3D"line number29 index28 alt2"><code class=3D"js comments">// Our defaul=
t vehicleClass is Car</code></div><div class=3D"line number30 index29 alt1"=
><code class=3D"js plain">VehicleFactory.prototype.vehicleClass =3D Car;</c=
ode></div><div class=3D"line number31 index30 alt2">&nbsp;</div><div class=
=3D"line number32 index31 alt1"><code class=3D"js comments">// Our Factory =
method for creating new Vehicle instances</code></div><div class=3D"line nu=
mber33 index32 alt2"><code class=3D"js plain">VehicleFactory.prototype.crea=
teVehicle =3D </code><code class=3D"js keyword">function</code> <code class=
=3D"js plain">( options ) {</code></div><div class=3D"line number34 index33=
 alt1">&nbsp;</div><div class=3D"line number35 index34 alt2"><code class=3D=
"js spaces">&nbsp;&nbsp;</code><code class=3D"js keyword">switch</code><cod=
e class=3D"js plain">(options.vehicleType){</code></div><div class=3D"line =
number36 index35 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</=
code><code class=3D"js keyword">case</code> <code class=3D"js string">"car"=
</code><code class=3D"js plain">:</code></div><div class=3D"line number37 i=
ndex36 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
</code><code class=3D"js keyword">this</code><code class=3D"js plain">.vehi=
cleClass =3D Car;</code></div><div class=3D"line number38 index37 alt1"><co=
de class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code cla=
ss=3D"js keyword">break</code><code class=3D"js plain">;</code></div><div c=
lass=3D"line number39 index38 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&=
nbsp;&nbsp;</code><code class=3D"js keyword">case</code> <code class=3D"js =
string">"truck"</code><code class=3D"js plain">:</code></div><div class=3D"=
line number40 index39 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;</code><code class=3D"js keyword">this</code><code class=3D"=
js plain">.vehicleClass =3D Truck;</code></div><div class=3D"line number41 =
index40 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;</code><code class=3D"js keyword">break</code><code class=3D"js plain">;</=
code></div><div class=3D"line number42 index41 alt1"><code class=3D"js spac=
es">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">//defaults t=
o VehicleFactory.prototype.vehicleClass (Car)</code></div><div class=3D"lin=
e number43 index42 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code=
 class=3D"js plain">}</code></div><div class=3D"line number44 index43 alt1"=
>&nbsp;</div><div class=3D"line number45 index44 alt2"><code class=3D"js sp=
aces">&nbsp;&nbsp;</code><code class=3D"js keyword">return</code> <code cla=
ss=3D"js keyword">new</code> <code class=3D"js keyword">this</code><code cl=
ass=3D"js plain">.vehicleClass( options );</code></div><div class=3D"line n=
umber46 index45 alt1">&nbsp;</div><div class=3D"line number47 index46 alt2"=
><code class=3D"js plain">};</code></div><div class=3D"line number48 index4=
7 alt1">&nbsp;</div><div class=3D"line number49 index48 alt2"><code class=
=3D"js comments">// Create an instance of our factory that makes cars</code=
></div><div class=3D"line number50 index49 alt1"><code class=3D"js keyword"=
>var</code> <code class=3D"js plain">carFactory =3D </code><code class=3D"j=
s keyword">new</code> <code class=3D"js plain">VehicleFactory();</code></di=
v><div class=3D"line number51 index50 alt2"><code class=3D"js keyword">var<=
/code> <code class=3D"js plain">car =3D carFactory.createVehicle( {</code><=
/div><div class=3D"line number52 index51 alt1"><code class=3D"js spaces">&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</cod=
e><code class=3D"js plain">vehicleType: </code><code class=3D"js string">"c=
ar"</code><code class=3D"js plain">,</code></div><div class=3D"line number5=
3 index52 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">colo=
r: </code><code class=3D"js string">"yellow"</code><code class=3D"js plain"=
>,</code></div><div class=3D"line number54 index53 alt1"><code class=3D"js =
spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;</code><code class=3D"js plain">doors: 6 } );</code></div><div class=
=3D"line number55 index54 alt2">&nbsp;</div><div class=3D"line number56 ind=
ex55 alt1"><code class=3D"js comments">// Test to confirm our car was creat=
ed using the vehicleClass/prototype Car</code></div><div class=3D"line numb=
er57 index56 alt2">&nbsp;</div><div class=3D"line number58 index57 alt1"><c=
ode class=3D"js comments">// Outputs: true</code></div><div class=3D"line n=
umber59 index58 alt2"><code class=3D"js plain">console.log( car </code><cod=
e class=3D"js keyword">instanceof</code> <code class=3D"js plain">Car );</c=
ode></div><div class=3D"line number60 index59 alt1">&nbsp;</div><div class=
=3D"line number61 index60 alt2"><code class=3D"js comments">// Outputs: Car=
 object of color "yellow", doors: 6 in a "brand new" state</code></div><div=
 class=3D"line number62 index61 alt1"><code class=3D"js plain">console.log(=
 car );</code></div></div></td></tr></tbody></table></div></div>

<p><strong>Approach #1: Modify a VehicleFactory instance to use the Truck c=
lass</strong></p>

<div><div id=3D"highlighter_752276" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div></td><td class=3D"code"><div class=3D"containe=
r"><div class=3D"line number1 index0 alt2"><code class=3D"js keyword">var</=
code> <code class=3D"js plain">movingTruck =3D carFactory.createVehicle( {<=
/code></div><div class=3D"line number2 index1 alt1"><code class=3D"js space=
s">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code cl=
ass=3D"js plain">vehicleType: </code><code class=3D"js string">"truck"</cod=
e><code class=3D"js plain">,</code></div><div class=3D"line number3 index2 =
alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;</code><code class=3D"js plain">state: </code><code class=3D"=
js string">"like new"</code><code class=3D"js plain">,</code></div><div cla=
ss=3D"line number4 index3 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">col=
or: </code><code class=3D"js string">"red"</code><code class=3D"js plain">,=
</code></div><div class=3D"line number5 index4 alt2"><code class=3D"js spac=
es">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code c=
lass=3D"js plain">wheelSize: </code><code class=3D"js string">"small"</code=
> <code class=3D"js plain">} );</code></div><div class=3D"line number6 inde=
x5 alt1">&nbsp;</div><div class=3D"line number7 index6 alt2"><code class=3D=
"js comments">// Test to confirm our truck was created with the vehicleClas=
s/prototype Truck</code></div><div class=3D"line number8 index7 alt1">&nbsp=
;</div><div class=3D"line number9 index8 alt2"><code class=3D"js comments">=
// Outputs: true</code></div><div class=3D"line number10 index9 alt1"><code=
 class=3D"js plain">console.log( movingTruck </code><code class=3D"js keywo=
rd">instanceof</code> <code class=3D"js plain">Truck );</code></div><div cl=
ass=3D"line number11 index10 alt2">&nbsp;</div><div class=3D"line number12 =
index11 alt1"><code class=3D"js comments">// Outputs: Truck object of color=
 "red", a "like new" state</code></div><div class=3D"line number13 index12 =
alt2"><code class=3D"js comments">// and a "small" wheelSize</code></div><d=
iv class=3D"line number14 index13 alt1"><code class=3D"js plain">console.lo=
g( movingTruck );</code></div></div></td></tr></tbody></table></div></div>

<p><strong>Approach #2: Subclass VehicleFactory to create a factory class t=
hat builds Trucks</strong></p>

<div><div id=3D"highlighter_796691" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div></td><td class=3D"code"><div class=3D"containe=
r"><div class=3D"line number1 index0 alt2"><code class=3D"js keyword">funct=
ion</code> <code class=3D"js plain">TruckFactory () {}</code></div><div cla=
ss=3D"line number2 index1 alt1"><code class=3D"js plain">TruckFactory.proto=
type =3D </code><code class=3D"js keyword">new</code> <code class=3D"js pla=
in">VehicleFactory();</code></div><div class=3D"line number3 index2 alt2"><=
code class=3D"js plain">TruckFactory.prototype.vehicleClass =3D Truck;</cod=
e></div><div class=3D"line number4 index3 alt1">&nbsp;</div><div class=3D"l=
ine number5 index4 alt2"><code class=3D"js keyword">var</code> <code class=
=3D"js plain">truckFactory =3D </code><code class=3D"js keyword">new</code>=
 <code class=3D"js plain">TruckFactory();</code></div><div class=3D"line nu=
mber6 index5 alt1"><code class=3D"js keyword">var</code> <code class=3D"js =
plain">myBigTruck =3D truckFactory.createVehicle( {</code></div><div class=
=3D"line number7 index6 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">state: </code><co=
de class=3D"js string">"omg..so bad."</code><code class=3D"js plain">,</cod=
e></div><div class=3D"line number8 index7 alt1"><code class=3D"js spaces">&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain"=
>color: </code><code class=3D"js string">"pink"</code><code class=3D"js pla=
in">,</code></div><div class=3D"line number9 index8 alt2"><code class=3D"js=
 spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D=
"js plain">wheelSize: </code><code class=3D"js string">"so big"</code> <cod=
e class=3D"js plain">} );</code></div><div class=3D"line number10 index9 al=
t1">&nbsp;</div><div class=3D"line number11 index10 alt2"><code class=3D"js=
 comments">// Confirms that myBigTruck was created with the prototype Truck=
</code></div><div class=3D"line number12 index11 alt1"><code class=3D"js co=
mments">// Outputs: true</code></div><div class=3D"line number13 index12 al=
t2"><code class=3D"js plain">console.log( myBigTruck </code><code class=3D"=
js keyword">instanceof</code> <code class=3D"js plain">Truck );</code></div=
><div class=3D"line number14 index13 alt1">&nbsp;</div><div class=3D"line n=
umber15 index14 alt2"><code class=3D"js comments">// Outputs: Truck object =
with the color "pink", wheelSize "so big"</code></div><div class=3D"line nu=
mber16 index15 alt1"><code class=3D"js comments">// and state "omg. so bad"=
</code></div><div class=3D"line number17 index16 alt2"><code class=3D"js pl=
ain">console.log( myBigTruck );</code></div></div></td></tr></tbody></table=
></div></div>

<p>&nbsp;</p>
<h3>When To Use The Factory Pattern</h3>

<p>The Factory pattern can be especially useful when applied to the followi=
ng situations:
</p><ul>
  <li>When our object or component setup involves a high level of complexit=
y</li>
  <li>When we need to easily generate different instances of objects depend=
ing on the environment we are in</li>
  <li>When we're working with many small objects or components that share t=
he same properties</li>
  <li>When composing objects with instances of other objects that need only=
 satisfy an API contract (aka, duck typing) to work. This is useful for dec=
oupling.</li>
</ul>
<p></p>
<p>&nbsp;</p>
<h3>When Not To Use The Factory Pattern</h3>

<p>
When applied to the wrong type of problem, this pattern can introduce an un=
necessarily great deal of complexity to an application. Unless providing an=
 interface for object creation is a design goal for the library or framewor=
k we are writing, I would suggest sticking to explicit constructors to avoi=
d the unnecessary overhead.</p>

<p>Due to the fact that the process of object creation is effectively abstr=
acted behind an interface, this can also introduce problems with unit testi=
ng depending on just how complex this process might be.</p>

<h3>Abstract Factories</h3>

<p>It is also useful to be aware of the <strong>Abstract Factory</strong> p=
attern, which aims to encapsulate a group of individual factories with a co=
mmon goal. It separates the details of implementation of a set of objects f=
rom their general usage.</p>

<p>An Abstract Factory should be used where a system must be independent fr=
om the way the objects it creates are generated or it needs to work with mu=
ltiple types of objects.</p>

<p>An example which is both simple and easier to understand is a vehicle fa=
ctory, which defines ways to get or register vehicles types. The abstract f=
actory can be named abstractVehicleFactory. The Abstract factory will allow=
 the definition of types of vehicle like "car" or "truck" and concrete fact=
ories will implement only classes that fulfill the vehicle contract (e.g <c=
ode>Vehicle.prototype.drive</code> and <code>Vehicle.prototype.breakDown</c=
ode>).</p>

<div><div id=3D"highlighter_249230" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</=
div><div class=3D"line number19 index18 alt2">19</div><div class=3D"line nu=
mber20 index19 alt1">20</div><div class=3D"line number21 index20 alt2">21</=
div><div class=3D"line number22 index21 alt1">22</div><div class=3D"line nu=
mber23 index22 alt2">23</div><div class=3D"line number24 index23 alt1">24</=
div><div class=3D"line number25 index24 alt2">25</div><div class=3D"line nu=
mber26 index25 alt1">26</div><div class=3D"line number27 index26 alt2">27</=
div><div class=3D"line number28 index27 alt1">28</div><div class=3D"line nu=
mber29 index28 alt2">29</div><div class=3D"line number30 index29 alt1">30</=
div><div class=3D"line number31 index30 alt2">31</div><div class=3D"line nu=
mber32 index31 alt1">32</div><div class=3D"line number33 index32 alt2">33</=
div><div class=3D"line number34 index33 alt1">34</div><div class=3D"line nu=
mber35 index34 alt2">35</div><div class=3D"line number36 index35 alt1">36</=
div><div class=3D"line number37 index36 alt2">37</div><div class=3D"line nu=
mber38 index37 alt1">38</div><div class=3D"line number39 index38 alt2">39</=
div><div class=3D"line number40 index39 alt1">40</div></td><td class=3D"cod=
e"><div class=3D"container"><div class=3D"line number1 index0 alt2"><code c=
lass=3D"js keyword">var</code> <code class=3D"js plain">abstractVehicleFact=
ory =3D (</code><code class=3D"js keyword">function</code> <code class=3D"j=
s plain">() {</code></div><div class=3D"line number2 index1 alt1">&nbsp;</d=
iv><div class=3D"line number3 index2 alt2"><code class=3D"js spaces">&nbsp;=
&nbsp;</code><code class=3D"js comments">// Storage for our vehicle types</=
code></div><div class=3D"line number4 index3 alt1"><code class=3D"js spaces=
">&nbsp;&nbsp;</code><code class=3D"js keyword">var</code> <code class=3D"j=
s plain">types =3D {};</code></div><div class=3D"line number5 index4 alt2">=
&nbsp;</div><div class=3D"line number6 index5 alt1"><code class=3D"js space=
s">&nbsp;&nbsp;</code><code class=3D"js keyword">return</code> <code class=
=3D"js plain">{</code></div><div class=3D"line number7 index6 alt2"><code c=
lass=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js plain">getVehicle: </code><code class=3D"js keyword">function</code>=
 <code class=3D"js plain">( type, customizations ) {</code></div><div class=
=3D"line number8 index7 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">=
var</code> <code class=3D"js plain">Vehicle =3D types[type];</code></div><d=
iv class=3D"line number9 index8 alt2">&nbsp;</div><div class=3D"line number=
10 index9 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">return</code> =
<code class=3D"js plain">(Vehicle ? </code><code class=3D"js keyword">new</=
code> <code class=3D"js plain">Vehicle(customizations) : </code><code class=
=3D"js keyword">null</code><code class=3D"js plain">);</code></div><div cla=
ss=3D"line number11 index10 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">},</code></div><div cl=
ass=3D"line number12 index11 alt1">&nbsp;</div><div class=3D"line number13 =
index12 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;</code><code class=3D"js plain">registerVehicle: </code><code class=3D"js =
keyword">function</code> <code class=3D"js plain">( type, Vehicle ) {</code=
></div><div class=3D"line number14 index13 alt1"><code class=3D"js spaces">=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code cl=
ass=3D"js keyword">var</code> <code class=3D"js plain">proto =3D Vehicle.pr=
ototype;</code></div><div class=3D"line number15 index14 alt2">&nbsp;</div>=
<div class=3D"line number16 index15 alt1"><code class=3D"js spaces">&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"=
js comments">// only register classes that fulfill the vehicle contract</co=
de></div><div class=3D"line number17 index16 alt2"><code class=3D"js spaces=
">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code =
class=3D"js keyword">if</code> <code class=3D"js plain">( proto.drive &amp;=
&amp; proto.breakDown ) {</code></div><div class=3D"line number18 index17 a=
lt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">typ=
es[type] =3D Vehicle;</code></div><div class=3D"line number19 index18 alt2"=
><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;</code><code class=3D"js plain">}</code></div><div class=3D"lin=
e number20 index19 alt1">&nbsp;</div><div class=3D"line number21 index20 al=
t2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;</code><code class=3D"js keyword">return</code> <code class=
=3D"js plain">abstractVehicleFactory;</code></div><div class=3D"line number=
22 index21 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;</code><code class=3D"js plain">}</code></div><div class=3D"line number=
23 index22 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=
=3D"js plain">};</code></div><div class=3D"line number24 index23 alt1"><cod=
e class=3D"js plain">})();</code></div><div class=3D"line number25 index24 =
alt2">&nbsp;</div><div class=3D"line number26 index25 alt1">&nbsp;</div><di=
v class=3D"line number27 index26 alt2"><code class=3D"js comments">// Usage=
:</code></div><div class=3D"line number28 index27 alt1">&nbsp;</div><div cl=
ass=3D"line number29 index28 alt2"><code class=3D"js plain">abstractVehicle=
Factory.registerVehicle( </code><code class=3D"js string">"car"</code><code=
 class=3D"js plain">, Car );</code></div><div class=3D"line number30 index2=
9 alt1"><code class=3D"js plain">abstractVehicleFactory.registerVehicle( </=
code><code class=3D"js string">"truck"</code><code class=3D"js plain">, Tru=
ck );</code></div><div class=3D"line number31 index30 alt2">&nbsp;</div><di=
v class=3D"line number32 index31 alt1"><code class=3D"js comments">// Insta=
ntiate a new car based on the abstract vehicle type</code></div><div class=
=3D"line number33 index32 alt2"><code class=3D"js keyword">var</code> <code=
 class=3D"js plain">car =3D abstractVehicleFactory.getVehicle( </code><code=
 class=3D"js string">"car"</code><code class=3D"js plain">, {</code></div><=
div class=3D"line number34 index33 alt1"><code class=3D"js spaces">&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><cod=
e class=3D"js plain">color: </code><code class=3D"js string">"lime green"</=
code><code class=3D"js plain">,</code></div><div class=3D"line number35 ind=
ex34 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">state: </=
code><code class=3D"js string">"like new"</code> <code class=3D"js plain">}=
 );</code></div><div class=3D"line number36 index35 alt1">&nbsp;</div><div =
class=3D"line number37 index36 alt2"><code class=3D"js comments">// Instant=
iate a new truck in a similar manner</code></div><div class=3D"line number3=
8 index37 alt1"><code class=3D"js keyword">var</code> <code class=3D"js pla=
in">truck =3D abstractVehicleFactory.getVehicle( </code><code class=3D"js s=
tring">"truck"</code><code class=3D"js plain">, {</code></div><div class=3D=
"line number39 index38 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"j=
s plain">wheelSize: </code><code class=3D"js string">"medium"</code><code c=
lass=3D"js plain">,</code></div><div class=3D"line number40 index39 alt1"><=
code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">color: </code><code c=
lass=3D"js string">"neon yellow"</code> <code class=3D"js plain">} );</code=
></div></div></td></tr></tbody></table></div></div>


<br>
<br>


<h2 id=3D"mixinpatternjavascript">
  <a href=3D"https://addyosmani.com/resources/essentialjsdesignpatterns/boo=
k/#mixinpatternjavascript" class=3D"subhead-link">#</a>
  The Mixin Pattern
</h2>

<p>In traditional programming languages such as C++ and Lisp, Mixins are cl=
asses which offer functionality that can be easily inherited by a sub-class=
 or group of sub-classes for the purpose of function re-use.</p>


<h2>Sub-classing</h2>

<p>For developers unfamiliar with sub-classing, we will go through a brief =
beginners primer on them before diving into Mixins and Decorators further.<=
/p>

<p><em>Sub-classing</em> is a term that refers to inheriting properties for=
 a new object from a base or <em>superclass</em> object. In traditional obj=
ect-oriented programming, a class <code>B</code> is able to extend another =
class <code>A</code>. Here we consider <code>A</code> a superclass and <cod=
e>B</code> a subclass of <code>A</code>. As such, all instances of <code>B<=
/code> inherit the methods from <code>A</code>. <code>B</code> is however s=
till able to define its own methods, including those that override methods =
originally defined by <code>A</code>.</p>

<p>Should <code>B</code> need to invoke a method in <code>A</code> that has=
 been overridden, we refer to this as method chaining. Should <code>B</code=
> need to invoke the constructor <code>A</code> (the superclass), we call t=
his constructor chaining.</p>

<p>In order to demonstrate sub-classing, we first need a base object that c=
an have new instances of itself created. let's model this around the concep=
t of a person.</p>

<div><div id=3D"highlighter_102815" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div></td><td class=
=3D"code"><div class=3D"container"><div class=3D"line number1 index0 alt2">=
<code class=3D"js keyword">var</code> <code class=3D"js plain">Person =3D <=
/code><code class=3D"js keyword">function</code><code class=3D"js plain">( =
firstName, lastName ){</code></div><div class=3D"line number2 index1 alt1">=
&nbsp;</div><div class=3D"line number3 index2 alt2"><code class=3D"js space=
s">&nbsp;&nbsp;</code><code class=3D"js keyword">this</code><code class=3D"=
js plain">.firstName =3D firstName;</code></div><div class=3D"line number4 =
index3 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js=
 keyword">this</code><code class=3D"js plain">.lastName =3D lastName;</code=
></div><div class=3D"line number5 index4 alt2"><code class=3D"js spaces">&n=
bsp;&nbsp;</code><code class=3D"js keyword">this</code><code class=3D"js pl=
ain">.gender =3D </code><code class=3D"js string">"male"</code><code class=
=3D"js plain">;</code></div><div class=3D"line number6 index5 alt1">&nbsp;<=
/div><div class=3D"line number7 index6 alt2"><code class=3D"js plain">};</c=
ode></div></div></td></tr></tbody></table></div></div>

<p>Next, we'll want to specify a new class (object) that's a subclass of th=
e existing <code>Person</code> object. Let us imagine we want to add distin=
ct properties to distinguish a <code>Person</code> from a <code>Superhero</=
code> whilst inheriting the properties of the <code>Person</code> "supercla=
ss". As superheroes share many common traits with normal people (e.g. name,=
 gender), this should hopefully illustrate how sub-classing works adequatel=
y.</p>

<div><div id=3D"highlighter_952473" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</=
div><div class=3D"line number19 index18 alt2">19</div><div class=3D"line nu=
mber20 index19 alt1">20</div><div class=3D"line number21 index20 alt2">21</=
div></td><td class=3D"code"><div class=3D"container"><div class=3D"line num=
ber1 index0 alt2"><code class=3D"js comments">// a new instance of Person c=
an then easily be created as follows:</code></div><div class=3D"line number=
2 index1 alt1"><code class=3D"js keyword">var</code> <code class=3D"js plai=
n">clark =3D </code><code class=3D"js keyword">new</code> <code class=3D"js=
 plain">Person( </code><code class=3D"js string">"Clark"</code><code class=
=3D"js plain">, </code><code class=3D"js string">"Kent"</code> <code class=
=3D"js plain">);</code></div><div class=3D"line number3 index2 alt2">&nbsp;=
</div><div class=3D"line number4 index3 alt1"><code class=3D"js comments">/=
/ Define a subclass constructor for for "Superhero":</code></div><div class=
=3D"line number5 index4 alt2"><code class=3D"js keyword">var</code> <code c=
lass=3D"js plain">Superhero =3D </code><code class=3D"js keyword">function<=
/code><code class=3D"js plain">( firstName, lastName, powers ){</code></div=
><div class=3D"line number6 index5 alt1">&nbsp;</div><div class=3D"line num=
ber7 index6 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>=
<code class=3D"js comments">// Invoke the superclass constructor on the new=
 object</code></div><div class=3D"line number8 index7 alt1"><code class=3D"=
js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// th=
en use .call() to invoke the constructor as a method of</code></div><div cl=
ass=3D"line number9 index8 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbs=
p;&nbsp;</code><code class=3D"js comments">// the object to be initialized.=
</code></div><div class=3D"line number10 index9 alt1">&nbsp;</div><div clas=
s=3D"line number11 index10 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbs=
p;&nbsp;</code><code class=3D"js plain">Person.call( </code><code class=3D"=
js keyword">this</code><code class=3D"js plain">, firstName, lastName );</c=
ode></div><div class=3D"line number12 index11 alt1">&nbsp;</div><div class=
=3D"line number13 index12 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp=
;&nbsp;</code><code class=3D"js comments">// Finally, store their powers, a=
 new array of traits not found in a normal "Person"</code></div><div class=
=3D"line number14 index13 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp=
;&nbsp;</code><code class=3D"js keyword">this</code><code class=3D"js plain=
">.powers =3D powers;</code></div><div class=3D"line number15 index14 alt2"=
><code class=3D"js plain">};</code></div><div class=3D"line number16 index1=
5 alt1">&nbsp;</div><div class=3D"line number17 index16 alt2"><code class=
=3D"js plain">Superhero.prototype =3D Object.create( Person.prototype );</c=
ode></div><div class=3D"line number18 index17 alt1"><code class=3D"js keywo=
rd">var</code> <code class=3D"js plain">superman =3D </code><code class=3D"=
js keyword">new</code> <code class=3D"js plain">Superhero( </code><code cla=
ss=3D"js string">"Clark"</code><code class=3D"js plain">, </code><code clas=
s=3D"js string">"Kent"</code><code class=3D"js plain">, [</code><code class=
=3D"js string">"flight"</code><code class=3D"js plain">,</code><code class=
=3D"js string">"heat-vision"</code><code class=3D"js plain">] );</code></di=
v><div class=3D"line number19 index18 alt2"><code class=3D"js plain">consol=
e.log( superman );</code></div><div class=3D"line number20 index19 alt1">&n=
bsp;</div><div class=3D"line number21 index20 alt2"><code class=3D"js comme=
nts">// Outputs Person attributes as well as powers</code></div></div></td>=
</tr></tbody></table></div></div>

<p>The <code>Superhero</code> constructor creates an object which descends =
from <code>Person</code>. Objects of this type have attributes of the objec=
ts that are above it in the chain and if we had set default values in the <=
code>Person</code> object, <code>Superhero</code> is capable of overriding =
any inherited values with values specific to it's object.</p>

<h2>Mixins</h2>

<p>In JavaScript, we can look at inheriting from Mixins as a means of colle=
cting functionality through extension. Each new object we define has a prot=
otype from which it can inherit further properties. Prototypes can inherit =
from other object prototypes but, even more importantly, can define propert=
ies for any number of object instances. We can leverage this fact to promot=
e function re-use.</p>

<p>Mixins allow objects to borrow (or inherit) functionality from them with=
 a minimal amount of complexity. As the pattern works well with JavaScripts=
 object prototypes, it gives us a fairly flexible way to share functionalit=
y from not just one Mixin, but effectively many through multiple inheritanc=
e.</p>

<p>They can be viewed as objects with attributes and methods that can be ea=
sily shared across a number of other object prototypes. Imagine that we def=
ine a Mixin containing utility functions in a standard object literal as fo=
llows:</p>

<div><div id=3D"highlighter_259944" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div></td><td class=3D"code"><div class=3D"container"><div class=3D"line num=
ber1 index0 alt2"><code class=3D"js keyword">var</code> <code class=3D"js p=
lain">myMixins =3D {</code></div><div class=3D"line number2 index1 alt1">&n=
bsp;</div><div class=3D"line number3 index2 alt2"><code class=3D"js spaces"=
>&nbsp;&nbsp;</code><code class=3D"js plain">moveUp: </code><code class=3D"=
js keyword">function</code><code class=3D"js plain">(){</code></div><div cl=
ass=3D"line number4 index3 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbs=
p;&nbsp;</code><code class=3D"js plain">console.log( </code><code class=3D"=
js string">"move up"</code> <code class=3D"js plain">);</code></div><div cl=
ass=3D"line number5 index4 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</co=
de><code class=3D"js plain">},</code></div><div class=3D"line number6 index=
5 alt1">&nbsp;</div><div class=3D"line number7 index6 alt2"><code class=3D"=
js spaces">&nbsp;&nbsp;</code><code class=3D"js plain">moveDown: </code><co=
de class=3D"js keyword">function</code><code class=3D"js plain">(){</code><=
/div><div class=3D"line number8 index7 alt1"><code class=3D"js spaces">&nbs=
p;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">console.log( </code><co=
de class=3D"js string">"move down"</code> <code class=3D"js plain">);</code=
></div><div class=3D"line number9 index8 alt2"><code class=3D"js spaces">&n=
bsp;&nbsp;</code><code class=3D"js plain">},</code></div><div class=3D"line=
 number10 index9 alt1">&nbsp;</div><div class=3D"line number11 index10 alt2=
"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js plain">sto=
p: </code><code class=3D"js keyword">function</code><code class=3D"js plain=
">(){</code></div><div class=3D"line number12 index11 alt1"><code class=3D"=
js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">console.=
log( </code><code class=3D"js string">"stop! in the name of love!"</code> <=
code class=3D"js plain">);</code></div><div class=3D"line number13 index12 =
alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js plain"=
>}</code></div><div class=3D"line number14 index13 alt1">&nbsp;</div><div c=
lass=3D"line number15 index14 alt2"><code class=3D"js plain">};</code></div=
></div></td></tr></tbody></table></div></div>

<p>We can then easily extend the prototype of existing constructor function=
s to include this behavior using a helper such as the Underscore.js <code>_=
.extend()</code> method:</p>

<div><div id=3D"highlighter_188403" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</=
div><div class=3D"line number19 index18 alt2">19</div><div class=3D"line nu=
mber20 index19 alt1">20</div><div class=3D"line number21 index20 alt2">21</=
div><div class=3D"line number22 index21 alt1">22</div><div class=3D"line nu=
mber23 index22 alt2">23</div><div class=3D"line number24 index23 alt1">24</=
div><div class=3D"line number25 index24 alt2">25</div><div class=3D"line nu=
mber26 index25 alt1">26</div></td><td class=3D"code"><div class=3D"containe=
r"><div class=3D"line number1 index0 alt2"><code class=3D"js comments">// A=
 skeleton carAnimator constructor</code></div><div class=3D"line number2 in=
dex1 alt1"><code class=3D"js keyword">function</code> <code class=3D"js pla=
in">CarAnimator(){</code></div><div class=3D"line number3 index2 alt2"><cod=
e class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js keyword">this</c=
ode><code class=3D"js plain">.moveLeft =3D </code><code class=3D"js keyword=
">function</code><code class=3D"js plain">(){</code></div><div class=3D"lin=
e number4 index3 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</=
code><code class=3D"js plain">console.log( </code><code class=3D"js string"=
>"move left"</code> <code class=3D"js plain">);</code></div><div class=3D"l=
ine number5 index4 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code=
 class=3D"js plain">};</code></div><div class=3D"line number6 index5 alt1">=
<code class=3D"js plain">}</code></div><div class=3D"line number7 index6 al=
t2">&nbsp;</div><div class=3D"line number8 index7 alt1"><code class=3D"js c=
omments">// A skeleton personAnimator constructor</code></div><div class=3D=
"line number9 index8 alt2"><code class=3D"js keyword">function</code> <code=
 class=3D"js plain">PersonAnimator(){</code></div><div class=3D"line number=
10 index9 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D=
"js keyword">this</code><code class=3D"js plain">.moveRandomly =3D </code><=
code class=3D"js keyword">function</code><code class=3D"js plain">(){ </cod=
e><code class=3D"js comments">/*..*/</code> <code class=3D"js plain">};</co=
de></div><div class=3D"line number11 index10 alt2"><code class=3D"js plain"=
>}</code></div><div class=3D"line number12 index11 alt1">&nbsp;</div><div c=
lass=3D"line number13 index12 alt2"><code class=3D"js comments">// Extend b=
oth constructors with our Mixin</code></div><div class=3D"line number14 ind=
ex13 alt1"><code class=3D"js plain">_.extend( CarAnimator.prototype, myMixi=
ns );</code></div><div class=3D"line number15 index14 alt2"><code class=3D"=
js plain">_.extend( PersonAnimator.prototype, myMixins );</code></div><div =
class=3D"line number16 index15 alt1">&nbsp;</div><div class=3D"line number1=
7 index16 alt2"><code class=3D"js comments">// Create a new instance of car=
Animator</code></div><div class=3D"line number18 index17 alt1"><code class=
=3D"js keyword">var</code> <code class=3D"js plain">myAnimator =3D </code><=
code class=3D"js keyword">new</code> <code class=3D"js plain">CarAnimator()=
;</code></div><div class=3D"line number19 index18 alt2"><code class=3D"js p=
lain">myAnimator.moveLeft();</code></div><div class=3D"line number20 index1=
9 alt1"><code class=3D"js plain">myAnimator.moveDown();</code></div><div cl=
ass=3D"line number21 index20 alt2"><code class=3D"js plain">myAnimator.stop=
();</code></div><div class=3D"line number22 index21 alt1">&nbsp;</div><div =
class=3D"line number23 index22 alt2"><code class=3D"js comments">// Outputs=
:</code></div><div class=3D"line number24 index23 alt1"><code class=3D"js c=
omments">// move left</code></div><div class=3D"line number25 index24 alt2"=
><code class=3D"js comments">// move down</code></div><div class=3D"line nu=
mber26 index25 alt1"><code class=3D"js comments">// stop! in the name of lo=
ve!</code></div></div></td></tr></tbody></table></div></div>

<p>As we can see, this allows us to easily "mix" in common behaviour into o=
bject constructors fairly trivially. </p>

<p>In the next example, we have two constructors: a Car and a Mixin. What w=
e're going to do is augment (another way of saying extend) the Car so that =
it can inherit specific methods defined in the Mixin, namely <code>driveFor=
ward()</code> and <code>driveBackward()</code>. This time we won't be using=
 Underscore.js.</p>

<p>Instead, this example will demonstrate how to augment a constructor to i=
nclude functionality without the need to duplicate this process for every c=
onstructor function we may have.</p>

<p>
</p><div><div id=3D"highlighter_327209" class=3D"syntaxhighlighter  js acod=
ecode"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resou=
rces/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help h=
elp">?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D=
"0"><tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2"=
>1</div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line n=
umber3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><=
div class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 in=
dex5 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=
=3D"line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2=
">9</div><div class=3D"line number10 index9 alt1">10</div><div class=3D"lin=
e number11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">=
12</div><div class=3D"line number13 index12 alt2">13</div><div class=3D"lin=
e number14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">=
15</div><div class=3D"line number16 index15 alt1">16</div><div class=3D"lin=
e number17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">=
18</div><div class=3D"line number19 index18 alt2">19</div><div class=3D"lin=
e number20 index19 alt1">20</div><div class=3D"line number21 index20 alt2">=
21</div><div class=3D"line number22 index21 alt1">22</div><div class=3D"lin=
e number23 index22 alt2">23</div><div class=3D"line number24 index23 alt1">=
24</div><div class=3D"line number25 index24 alt2">25</div><div class=3D"lin=
e number26 index25 alt1">26</div><div class=3D"line number27 index26 alt2">=
27</div><div class=3D"line number28 index27 alt1">28</div><div class=3D"lin=
e number29 index28 alt2">29</div><div class=3D"line number30 index29 alt1">=
30</div><div class=3D"line number31 index30 alt2">31</div><div class=3D"lin=
e number32 index31 alt1">32</div><div class=3D"line number33 index32 alt2">=
33</div><div class=3D"line number34 index33 alt1">34</div><div class=3D"lin=
e number35 index34 alt2">35</div><div class=3D"line number36 index35 alt1">=
36</div><div class=3D"line number37 index36 alt2">37</div><div class=3D"lin=
e number38 index37 alt1">38</div><div class=3D"line number39 index38 alt2">=
39</div><div class=3D"line number40 index39 alt1">40</div><div class=3D"lin=
e number41 index40 alt2">41</div><div class=3D"line number42 index41 alt1">=
42</div><div class=3D"line number43 index42 alt2">43</div><div class=3D"lin=
e number44 index43 alt1">44</div><div class=3D"line number45 index44 alt2">=
45</div><div class=3D"line number46 index45 alt1">46</div><div class=3D"lin=
e number47 index46 alt2">47</div><div class=3D"line number48 index47 alt1">=
48</div><div class=3D"line number49 index48 alt2">49</div><div class=3D"lin=
e number50 index49 alt1">50</div><div class=3D"line number51 index50 alt2">=
51</div><div class=3D"line number52 index51 alt1">52</div><div class=3D"lin=
e number53 index52 alt2">53</div><div class=3D"line number54 index53 alt1">=
54</div><div class=3D"line number55 index54 alt2">55</div><div class=3D"lin=
e number56 index55 alt1">56</div><div class=3D"line number57 index56 alt2">=
57</div><div class=3D"line number58 index57 alt1">58</div><div class=3D"lin=
e number59 index58 alt2">59</div><div class=3D"line number60 index59 alt1">=
60</div><div class=3D"line number61 index60 alt2">61</div><div class=3D"lin=
e number62 index61 alt1">62</div><div class=3D"line number63 index62 alt2">=
63</div><div class=3D"line number64 index63 alt1">64</div><div class=3D"lin=
e number65 index64 alt2">65</div><div class=3D"line number66 index65 alt1">=
66</div><div class=3D"line number67 index66 alt2">67</div><div class=3D"lin=
e number68 index67 alt1">68</div><div class=3D"line number69 index68 alt2">=
69</div><div class=3D"line number70 index69 alt1">70</div><div class=3D"lin=
e number71 index70 alt2">71</div><div class=3D"line number72 index71 alt1">=
72</div><div class=3D"line number73 index72 alt2">73</div><div class=3D"lin=
e number74 index73 alt1">74</div><div class=3D"line number75 index74 alt2">=
75</div><div class=3D"line number76 index75 alt1">76</div><div class=3D"lin=
e number77 index76 alt2">77</div><div class=3D"line number78 index77 alt1">=
78</div><div class=3D"line number79 index78 alt2">79</div><div class=3D"lin=
e number80 index79 alt1">80</div><div class=3D"line number81 index80 alt2">=
81</div><div class=3D"line number82 index81 alt1">82</div><div class=3D"lin=
e number83 index82 alt2">83</div><div class=3D"line number84 index83 alt1">=
84</div><div class=3D"line number85 index84 alt2">85</div><div class=3D"lin=
e number86 index85 alt1">86</div><div class=3D"line number87 index86 alt2">=
87</div></td><td class=3D"code"><div class=3D"container"><div class=3D"line=
 number1 index0 alt2"><code class=3D"js comments">// Define a simple Car co=
nstructor</code></div><div class=3D"line number2 index1 alt1"><code class=
=3D"js keyword">var</code> <code class=3D"js plain">Car =3D </code><code cl=
ass=3D"js keyword">function</code> <code class=3D"js plain">( settings ) {<=
/code></div><div class=3D"line number3 index2 alt2">&nbsp;</div><div class=
=3D"line number4 index3 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&=
nbsp;</code><code class=3D"js keyword">this</code><code class=3D"js plain">=
.model =3D settings.model || </code><code class=3D"js string">"no model pro=
vided"</code><code class=3D"js plain">;</code></div><div class=3D"line numb=
er5 index4 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><=
code class=3D"js keyword">this</code><code class=3D"js plain">.color =3D se=
ttings.color || </code><code class=3D"js string">"no colour provided"</code=
><code class=3D"js plain">;</code></div><div class=3D"line number6 index5 a=
lt1">&nbsp;</div><div class=3D"line number7 index6 alt2"><code class=3D"js =
plain">};</code></div><div class=3D"line number8 index7 alt1">&nbsp;</div><=
div class=3D"line number9 index8 alt2"><code class=3D"js comments">// Mixin=
</code></div><div class=3D"line number10 index9 alt1"><code class=3D"js key=
word">var</code> <code class=3D"js plain">Mixin =3D </code><code class=3D"j=
s keyword">function</code> <code class=3D"js plain">() {};</code></div><div=
 class=3D"line number11 index10 alt2">&nbsp;</div><div class=3D"line number=
12 index11 alt1"><code class=3D"js plain">Mixin.prototype =3D {</code></div=
><div class=3D"line number13 index12 alt2">&nbsp;</div><div class=3D"line n=
umber14 index13 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</c=
ode><code class=3D"js plain">driveForward: </code><code class=3D"js keyword=
">function</code> <code class=3D"js plain">() {</code></div><div class=3D"l=
ine number15 index14 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">console.log( </co=
de><code class=3D"js string">"drive forward"</code> <code class=3D"js plain=
">);</code></div><div class=3D"line number16 index15 alt1"><code class=3D"j=
s spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">},</code>=
</div><div class=3D"line number17 index16 alt2">&nbsp;</div><div class=3D"l=
ine number18 index17 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbs=
p;</code><code class=3D"js plain">driveBackward: </code><code class=3D"js k=
eyword">function</code> <code class=3D"js plain">() {</code></div><div clas=
s=3D"line number19 index18 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">console.log=
( </code><code class=3D"js string">"drive backward"</code> <code class=3D"j=
s plain">);</code></div><div class=3D"line number20 index19 alt1"><code cla=
ss=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">},=
</code></div><div class=3D"line number21 index20 alt2">&nbsp;</div><div cla=
ss=3D"line number22 index21 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nb=
sp;&nbsp;</code><code class=3D"js plain">driveSideways: </code><code class=
=3D"js keyword">function</code> <code class=3D"js plain">() {</code></div><=
div class=3D"line number23 index22 alt2"><code class=3D"js spaces">&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">con=
sole.log( </code><code class=3D"js string">"drive sideways"</code> <code cl=
ass=3D"js plain">);</code></div><div class=3D"line number24 index23 alt1"><=
code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js p=
lain">}</code></div><div class=3D"line number25 index24 alt2">&nbsp;</div><=
div class=3D"line number26 index25 alt1"><code class=3D"js plain">};</code>=
</div><div class=3D"line number27 index26 alt2">&nbsp;</div><div class=3D"l=
ine number28 index27 alt1">&nbsp;</div><div class=3D"line number29 index28 =
alt2"><code class=3D"js comments">// Extend an existing object with a metho=
d from another</code></div><div class=3D"line number30 index29 alt1"><code =
class=3D"js keyword">function</code> <code class=3D"js plain">augment( rece=
ivingClass, givingClass ) {</code></div><div class=3D"line number31 index30=
 alt2">&nbsp;</div><div class=3D"line number32 index31 alt1"><code class=3D=
"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// o=
nly provide certain methods</code></div><div class=3D"line number33 index32=
 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js keyword">if</code> <code class=3D"js plain">( arguments[2] ) {</code=
></div><div class=3D"line number34 index33 alt1"><code class=3D"js spaces">=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js ke=
yword">for</code> <code class=3D"js plain">( </code><code class=3D"js keywo=
rd">var</code> <code class=3D"js plain">i =3D 2, len =3D arguments.length; =
i &lt; len; i++ ) {</code></div><div class=3D"line number35 index34 alt2"><=
code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">receivingClass.protot=
ype[arguments[i]] =3D givingClass.prototype[arguments[i]];</code></div><div=
 class=3D"line number36 index35 alt1"><code class=3D"js spaces">&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">}</cod=
e></div><div class=3D"line number37 index36 alt2"><code class=3D"js spaces"=
>&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">}</code></div><div=
 class=3D"line number38 index37 alt1"><code class=3D"js spaces">&nbsp;&nbsp=
;&nbsp;&nbsp;</code><code class=3D"js comments">// provide all methods</cod=
e></div><div class=3D"line number39 index38 alt2"><code class=3D"js spaces"=
>&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">else</code> <cod=
e class=3D"js plain">{</code></div><div class=3D"line number40 index39 alt1=
"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;</code><code class=3D"js keyword">for</code> <code class=3D"js plain">( </=
code><code class=3D"js keyword">var</code> <code class=3D"js plain">methodN=
ame </code><code class=3D"js keyword">in</code> <code class=3D"js plain">gi=
vingClass.prototype ) {</code></div><div class=3D"line number41 index40 alt=
2">&nbsp;</div><div class=3D"line number42 index41 alt1"><code class=3D"js =
spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;</code><code class=3D"js comments">// check to make sure the receiving=
 class doesn't</code></div><div class=3D"line number43 index42 alt2"><code =
class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// have a method of the=
 same name as the one currently</code></div><div class=3D"line number44 ind=
ex43 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// bei=
ng processed</code></div><div class=3D"line number45 index44 alt2"><code cl=
ass=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;</code><code class=3D"js keyword">if</code> <code class=3D"j=
s plain">( !Object.hasOwnProperty.call(receivingClass.prototype, methodName=
) ) {</code></div><div class=3D"line number46 index45 alt1"><code class=3D"=
js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">receivingCl=
ass.prototype[methodName] =3D givingClass.prototype[methodName];</code></di=
v><div class=3D"line number47 index46 alt2"><code class=3D"js spaces">&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><=
code class=3D"js plain">}</code></div><div class=3D"line number48 index47 a=
lt1">&nbsp;</div><div class=3D"line number49 index48 alt2"><code class=3D"j=
s spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;</code><code class=3D"js comments">// Alternatively (check prototype=
 chain as well):</code></div><div class=3D"line number50 index49 alt1"><cod=
e class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// if ( !receivingCla=
ss.prototype[methodName] ) {</code></div><div class=3D"line number51 index5=
0 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// receiv=
ingClass.prototype[methodName] =3D givingClass.prototype[methodName];</code=
></div><div class=3D"line number52 index51 alt1"><code class=3D"js spaces">=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</c=
ode><code class=3D"js comments">// }</code></div><div class=3D"line number5=
3 index52 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;</code><code class=3D"js plain">}</code></div><div class=3D"=
line number54 index53 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nb=
sp;</code><code class=3D"js plain">}</code></div><div class=3D"line number5=
5 index54 alt2"><code class=3D"js plain">}</code></div><div class=3D"line n=
umber56 index55 alt1">&nbsp;</div><div class=3D"line number57 index56 alt2"=
>&nbsp;</div><div class=3D"line number58 index57 alt1"><code class=3D"js co=
mments">// Augment the Car constructor to include "driveForward" and "drive=
Backward"</code></div><div class=3D"line number59 index58 alt2"><code class=
=3D"js plain">augment( Car, Mixin, </code><code class=3D"js string">"driveF=
orward"</code><code class=3D"js plain">, </code><code class=3D"js string">"=
driveBackward"</code> <code class=3D"js plain">);</code></div><div class=3D=
"line number60 index59 alt1">&nbsp;</div><div class=3D"line number61 index6=
0 alt2"><code class=3D"js comments">// Create a new Car</code></div><div cl=
ass=3D"line number62 index61 alt1"><code class=3D"js keyword">var</code> <c=
ode class=3D"js plain">myCar =3D </code><code class=3D"js keyword">new</cod=
e> <code class=3D"js plain">Car({</code></div><div class=3D"line number63 i=
ndex62 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code=
 class=3D"js plain">model: </code><code class=3D"js string">"Ford Escort"</=
code><code class=3D"js plain">,</code></div><div class=3D"line number64 ind=
ex63 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code c=
lass=3D"js plain">color: </code><code class=3D"js string">"blue"</code></di=
v><div class=3D"line number65 index64 alt2"><code class=3D"js plain">});</c=
ode></div><div class=3D"line number66 index65 alt1">&nbsp;</div><div class=
=3D"line number67 index66 alt2"><code class=3D"js comments">// Test to make=
 sure we now have access to the methods</code></div><div class=3D"line numb=
er68 index67 alt1"><code class=3D"js plain">myCar.driveForward();</code></d=
iv><div class=3D"line number69 index68 alt2"><code class=3D"js plain">myCar=
.driveBackward();</code></div><div class=3D"line number70 index69 alt1">&nb=
sp;</div><div class=3D"line number71 index70 alt2"><code class=3D"js commen=
ts">// Outputs:</code></div><div class=3D"line number72 index71 alt1"><code=
 class=3D"js comments">// drive forward</code></div><div class=3D"line numb=
er73 index72 alt2"><code class=3D"js comments">// drive backward</code></di=
v><div class=3D"line number74 index73 alt1">&nbsp;</div><div class=3D"line =
number75 index74 alt2"><code class=3D"js comments">// We can also augment C=
ar to include all functions from our mixin</code></div><div class=3D"line n=
umber76 index75 alt1"><code class=3D"js comments">// by not explicitly list=
ing a selection of them</code></div><div class=3D"line number77 index76 alt=
2"><code class=3D"js plain">augment( Car, Mixin );</code></div><div class=
=3D"line number78 index77 alt1">&nbsp;</div><div class=3D"line number79 ind=
ex78 alt2"><code class=3D"js keyword">var</code> <code class=3D"js plain">m=
ySportsCar =3D </code><code class=3D"js keyword">new</code> <code class=3D"=
js plain">Car({</code></div><div class=3D"line number80 index79 alt1"><code=
 class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain=
">model: </code><code class=3D"js string">"Porsche"</code><code class=3D"js=
 plain">,</code></div><div class=3D"line number81 index80 alt2"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">colo=
r: </code><code class=3D"js string">"red"</code></div><div class=3D"line nu=
mber82 index81 alt1"><code class=3D"js plain">});</code></div><div class=3D=
"line number83 index82 alt2">&nbsp;</div><div class=3D"line number84 index8=
3 alt1"><code class=3D"js plain">mySportsCar.driveSideways();</code></div><=
div class=3D"line number85 index84 alt2">&nbsp;</div><div class=3D"line num=
ber86 index85 alt1"><code class=3D"js comments">// Outputs:</code></div><di=
v class=3D"line number87 index86 alt2"><code class=3D"js comments">// drive=
 sideways</code></div></div></td></tr></tbody></table></div></div>
<p></p>

<h3>Advantages &amp; Disadvantages</h3>

<p>Mixins assist in decreasing functional repetition and increasing functio=
n re-use in a system. Where an application is likely to require shared beha=
viour across object instances, we can easily avoid any duplication by maint=
aining this shared functionality in a Mixin and thus focusing on implementi=
ng only the functionality in our system which is truly distinct.</p>

<p>That said, the downsides to Mixins are a little more debatable. Some dev=
elopers feel that injecting functionality into an object prototype is a bad=
 idea as it leads to both prototype pollution and a level of uncertainty re=
garding the origin of our functions. In large systems this may well be the =
case.</p>

<p>I would argue that strong documentation can assist in minimizing the amo=
unt of confusion regarding the source of mixed in functions, but as with ev=
ery pattern, if care is taken during implementation we should be okay.</p>

<p>&nbsp;</p>


<h2 id=3D"decoratorpatternjavascript">The Decorator Pattern</h2>


<p>Decorators are a structural design pattern that aim to promote code re-u=
se. Similar to Mixins, they can be considered another viable alternative to=
 object sub-classing.</p>

<p>Classically, Decorators offered the ability to add behaviour to existing=
 classes in a system dynamically. The idea was that the <em>decoration</em>=
 itself wasn't essential to the base functionality of the class, otherwise =
it would be baked into the <em>superclass</em> itself.</p>

<p>They can be used to modify existing systems where we wish to add additio=
nal features to objects without the need to heavily modify the underlying c=
ode using them. A common reason why developers use them is their applicatio=
ns may contain features requiring a large quantity of distinct types of obj=
ect. Imagine having to define hundreds of different object constructors for=
 say, a JavaScript game.</p>

<p>The object constructors could represent distinct player types, each with=
 differing capabilities. A <em>Lord of the Rings</em> game could require co=
nstructors for <code>Hobbit</code>, <code>Elf</code>, <code>Orc</code>, <co=
de>Wizard</code>, <code>Mountain Giant</code>, <code>Stone Giant</code> and=
 so on, but there could easily be hundreds of these. If we then factored in=
 capabilities, imagine having to create sub-classes for each combination of=
 capability type e.g <code>HobbitWithRing</code>,<code>HobbitWithSword</cod=
e>, <code>HobbitWithRingAndSword</code> and so on.This isn't very practical=
 and certainly isn't manageable when we factor in a growing number of diffe=
rent abilities.</p>

<p>The Decorator pattern isn't heavily tied to how objects are created but =
instead focuses on the problem of extending their functionality. Rather tha=
n just relying on prototypal inheritance, we work with a single base object=
 and progressively add decorator objects which provide the additional capab=
ilities. The idea is that rather than sub-classing, we add (decorate) prope=
rties or methods to a base object so it's a little more streamlined.</p>

<p>Adding new attributes to objects in JavaScript is a very straight-forwar=
d process so with this in mind, a very simplistic decorator may be implemen=
ted as follows:</p>

<h3>Example 1: Decorating Constructors With New Functionality</h3>

<div><div id=3D"highlighter_43235" class=3D"syntaxhighlighter  js acodecode=
"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources/=
essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help">=
?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0"><=
tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</d=
iv><div class=3D"line number2 index1 alt1">2</div><div class=3D"line number=
3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div c=
lass=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5 =
alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"l=
ine number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9</=
div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line num=
ber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</d=
iv><div class=3D"line number13 index12 alt2">13</div><div class=3D"line num=
ber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</d=
iv><div class=3D"line number16 index15 alt1">16</div><div class=3D"line num=
ber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</d=
iv><div class=3D"line number19 index18 alt2">19</div><div class=3D"line num=
ber20 index19 alt1">20</div><div class=3D"line number21 index20 alt2">21</d=
iv><div class=3D"line number22 index21 alt1">22</div><div class=3D"line num=
ber23 index22 alt2">23</div><div class=3D"line number24 index23 alt1">24</d=
iv><div class=3D"line number25 index24 alt2">25</div><div class=3D"line num=
ber26 index25 alt1">26</div><div class=3D"line number27 index26 alt2">27</d=
iv><div class=3D"line number28 index27 alt1">28</div><div class=3D"line num=
ber29 index28 alt2">29</div><div class=3D"line number30 index29 alt1">30</d=
iv><div class=3D"line number31 index30 alt2">31</div><div class=3D"line num=
ber32 index31 alt1">32</div><div class=3D"line number33 index32 alt2">33</d=
iv><div class=3D"line number34 index33 alt1">34</div><div class=3D"line num=
ber35 index34 alt2">35</div><div class=3D"line number36 index35 alt1">36</d=
iv><div class=3D"line number37 index36 alt2">37</div><div class=3D"line num=
ber38 index37 alt1">38</div><div class=3D"line number39 index38 alt2">39</d=
iv><div class=3D"line number40 index39 alt1">40</div><div class=3D"line num=
ber41 index40 alt2">41</div><div class=3D"line number42 index41 alt1">42</d=
iv><div class=3D"line number43 index42 alt2">43</div><div class=3D"line num=
ber44 index43 alt1">44</div></td><td class=3D"code"><div class=3D"container=
"><div class=3D"line number1 index0 alt2"><code class=3D"js comments">// A =
vehicle constructor</code></div><div class=3D"line number2 index1 alt1"><co=
de class=3D"js keyword">function</code> <code class=3D"js plain">Vehicle( v=
ehicleType ){</code></div><div class=3D"line number3 index2 alt2">&nbsp;</d=
iv><div class=3D"line number4 index3 alt1"><code class=3D"js spaces">&nbsp;=
&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// some sane defaults<=
/code></div><div class=3D"line number5 index4 alt2"><code class=3D"js space=
s">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">this</code><co=
de class=3D"js plain">.vehicleType =3D vehicleType || </code><code class=3D=
"js string">"car"</code><code class=3D"js plain">;</code></div><div class=
=3D"line number6 index5 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&=
nbsp;</code><code class=3D"js keyword">this</code><code class=3D"js plain">=
.model =3D </code><code class=3D"js string">"default"</code><code class=3D"=
js plain">;</code></div><div class=3D"line number7 index6 alt2"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">th=
is</code><code class=3D"js plain">.license =3D </code><code class=3D"js str=
ing">"00000-000"</code><code class=3D"js plain">;</code></div><div class=3D=
"line number8 index7 alt1">&nbsp;</div><div class=3D"line number9 index8 al=
t2"><code class=3D"js plain">}</code></div><div class=3D"line number10 inde=
x9 alt1">&nbsp;</div><div class=3D"line number11 index10 alt2"><code class=
=3D"js comments">// Test instance for a basic vehicle</code></div><div clas=
s=3D"line number12 index11 alt1"><code class=3D"js keyword">var</code> <cod=
e class=3D"js plain">testInstance =3D </code><code class=3D"js keyword">new=
</code> <code class=3D"js plain">Vehicle( </code><code class=3D"js string">=
"car"</code> <code class=3D"js plain">);</code></div><div class=3D"line num=
ber13 index12 alt2"><code class=3D"js plain">console.log( testInstance );</=
code></div><div class=3D"line number14 index13 alt1">&nbsp;</div><div class=
=3D"line number15 index14 alt2"><code class=3D"js comments">// Outputs:</co=
de></div><div class=3D"line number16 index15 alt1"><code class=3D"js commen=
ts">// vehicle: car, model:default, license: 00000-000</code></div><div cla=
ss=3D"line number17 index16 alt2">&nbsp;</div><div class=3D"line number18 i=
ndex17 alt1"><code class=3D"js comments">// Lets create a new instance of v=
ehicle, to be decorated</code></div><div class=3D"line number19 index18 alt=
2"><code class=3D"js keyword">var</code> <code class=3D"js plain">truck =3D=
 </code><code class=3D"js keyword">new</code> <code class=3D"js plain">Vehi=
cle( </code><code class=3D"js string">"truck"</code> <code class=3D"js plai=
n">);</code></div><div class=3D"line number20 index19 alt1">&nbsp;</div><di=
v class=3D"line number21 index20 alt2"><code class=3D"js comments">// New f=
unctionality we're decorating vehicle with</code></div><div class=3D"line n=
umber22 index21 alt1"><code class=3D"js plain">truck.setModel =3D </code><c=
ode class=3D"js keyword">function</code><code class=3D"js plain">( modelNam=
e ){</code></div><div class=3D"line number23 index22 alt2"><code class=3D"j=
s spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">this</c=
ode><code class=3D"js plain">.model =3D modelName;</code></div><div class=
=3D"line number24 index23 alt1"><code class=3D"js plain">};</code></div><di=
v class=3D"line number25 index24 alt2">&nbsp;</div><div class=3D"line numbe=
r26 index25 alt1"><code class=3D"js plain">truck.setColor =3D </code><code =
class=3D"js keyword">function</code><code class=3D"js plain">( color ){</co=
de></div><div class=3D"line number27 index26 alt2"><code class=3D"js spaces=
">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">this</code><cod=
e class=3D"js plain">.color =3D color;</code></div><div class=3D"line numbe=
r28 index27 alt1"><code class=3D"js plain">};</code></div><div class=3D"lin=
e number29 index28 alt2">&nbsp;</div><div class=3D"line number30 index29 al=
t1"><code class=3D"js comments">// Test the value setters and value assignm=
ent works correctly</code></div><div class=3D"line number31 index30 alt2"><=
code class=3D"js plain">truck.setModel( </code><code class=3D"js string">"C=
AT"</code> <code class=3D"js plain">);</code></div><div class=3D"line numbe=
r32 index31 alt1"><code class=3D"js plain">truck.setColor( </code><code cla=
ss=3D"js string">"blue"</code> <code class=3D"js plain">);</code></div><div=
 class=3D"line number33 index32 alt2">&nbsp;</div><div class=3D"line number=
34 index33 alt1"><code class=3D"js plain">console.log( truck );</code></div=
><div class=3D"line number35 index34 alt2">&nbsp;</div><div class=3D"line n=
umber36 index35 alt1"><code class=3D"js comments">// Outputs:</code></div><=
div class=3D"line number37 index36 alt2"><code class=3D"js comments">// veh=
icle:truck, model:CAT, color: blue</code></div><div class=3D"line number38 =
index37 alt1">&nbsp;</div><div class=3D"line number39 index38 alt2"><code c=
lass=3D"js comments">// Demonstrate "vehicle" is still unaltered</code></di=
v><div class=3D"line number40 index39 alt1"><code class=3D"js keyword">var<=
/code> <code class=3D"js plain">secondInstance =3D </code><code class=3D"js=
 keyword">new</code> <code class=3D"js plain">Vehicle( </code><code class=
=3D"js string">"car"</code> <code class=3D"js plain">);</code></div><div cl=
ass=3D"line number41 index40 alt2"><code class=3D"js plain">console.log( se=
condInstance );</code></div><div class=3D"line number42 index41 alt1">&nbsp=
;</div><div class=3D"line number43 index42 alt2"><code class=3D"js comments=
">// Outputs:</code></div><div class=3D"line number44 index43 alt1"><code c=
lass=3D"js comments">// vehicle: car, model:default, license: 00000-000</co=
de></div></div></td></tr></tbody></table></div></div>

<p>This type of simplistic implementation is functional, but it doesn't rea=
lly demonstrate all of the strengths Decorators have to offer. For this, we=
're first going to go through my variation of the Coffee example from an ex=
cellent book called <em>Head First Design Patterns</em> by Freeman, Sierra =
and Bates, which is modeled around a Macbook purchase.</p>

<h3>Example 2: Decorating Objects With Multiple Decorators</h3>
<div><div id=3D"highlighter_855574" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</=
div><div class=3D"line number19 index18 alt2">19</div><div class=3D"line nu=
mber20 index19 alt1">20</div><div class=3D"line number21 index20 alt2">21</=
div><div class=3D"line number22 index21 alt1">22</div><div class=3D"line nu=
mber23 index22 alt2">23</div><div class=3D"line number24 index23 alt1">24</=
div><div class=3D"line number25 index24 alt2">25</div><div class=3D"line nu=
mber26 index25 alt1">26</div><div class=3D"line number27 index26 alt2">27</=
div><div class=3D"line number28 index27 alt1">28</div><div class=3D"line nu=
mber29 index28 alt2">29</div><div class=3D"line number30 index29 alt1">30</=
div><div class=3D"line number31 index30 alt2">31</div><div class=3D"line nu=
mber32 index31 alt1">32</div><div class=3D"line number33 index32 alt2">33</=
div><div class=3D"line number34 index33 alt1">34</div><div class=3D"line nu=
mber35 index34 alt2">35</div><div class=3D"line number36 index35 alt1">36</=
div><div class=3D"line number37 index36 alt2">37</div><div class=3D"line nu=
mber38 index37 alt1">38</div><div class=3D"line number39 index38 alt2">39</=
div><div class=3D"line number40 index39 alt1">40</div><div class=3D"line nu=
mber41 index40 alt2">41</div><div class=3D"line number42 index41 alt1">42</=
div><div class=3D"line number43 index42 alt2">43</div><div class=3D"line nu=
mber44 index43 alt1">44</div><div class=3D"line number45 index44 alt2">45</=
div><div class=3D"line number46 index45 alt1">46</div><div class=3D"line nu=
mber47 index46 alt2">47</div><div class=3D"line number48 index47 alt1">48</=
div></td><td class=3D"code"><div class=3D"container"><div class=3D"line num=
ber1 index0 alt2"><code class=3D"js comments">// The constructor to decorat=
e</code></div><div class=3D"line number2 index1 alt1"><code class=3D"js key=
word">function</code> <code class=3D"js plain">MacBook() {</code></div><div=
 class=3D"line number3 index2 alt2">&nbsp;</div><div class=3D"line number4 =
index3 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js=
 keyword">this</code><code class=3D"js plain">.cost =3D </code><code class=
=3D"js keyword">function</code> <code class=3D"js plain">() { </code><code =
class=3D"js keyword">return</code> <code class=3D"js plain">997; };</code><=
/div><div class=3D"line number5 index4 alt2"><code class=3D"js spaces">&nbs=
p;&nbsp;</code><code class=3D"js keyword">this</code><code class=3D"js plai=
n">.screenSize =3D </code><code class=3D"js keyword">function</code> <code =
class=3D"js plain">() { </code><code class=3D"js keyword">return</code> <co=
de class=3D"js plain">11.6; };</code></div><div class=3D"line number6 index=
5 alt1">&nbsp;</div><div class=3D"line number7 index6 alt2"><code class=3D"=
js plain">}</code></div><div class=3D"line number8 index7 alt1">&nbsp;</div=
><div class=3D"line number9 index8 alt2"><code class=3D"js comments">// Dec=
orator 1</code></div><div class=3D"line number10 index9 alt1"><code class=
=3D"js keyword">function</code> <code class=3D"js plain">memory( macbook ) =
{</code></div><div class=3D"line number11 index10 alt2">&nbsp;</div><div cl=
ass=3D"line number12 index11 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</=
code><code class=3D"js keyword">var</code> <code class=3D"js plain">v =3D m=
acbook.cost();</code></div><div class=3D"line number13 index12 alt2"><code =
class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js plain">macbook.cos=
t =3D </code><code class=3D"js keyword">function</code><code class=3D"js pl=
ain">() {</code></div><div class=3D"line number14 index13 alt1"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">re=
turn</code> <code class=3D"js plain">v + 75;</code></div><div class=3D"line=
 number15 index14 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code =
class=3D"js plain">};</code></div><div class=3D"line number16 index15 alt1"=
>&nbsp;</div><div class=3D"line number17 index16 alt2"><code class=3D"js pl=
ain">}</code></div><div class=3D"line number18 index17 alt1">&nbsp;</div><d=
iv class=3D"line number19 index18 alt2"><code class=3D"js comments">// Deco=
rator 2</code></div><div class=3D"line number20 index19 alt1"><code class=
=3D"js keyword">function</code> <code class=3D"js plain">engraving( macbook=
 ){</code></div><div class=3D"line number21 index20 alt2">&nbsp;</div><div =
class=3D"line number22 index21 alt1"><code class=3D"js spaces">&nbsp;&nbsp;=
</code><code class=3D"js keyword">var</code> <code class=3D"js plain">v =3D=
 macbook.cost();</code></div><div class=3D"line number23 index22 alt2"><cod=
e class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js plain">macbook.c=
ost =3D </code><code class=3D"js keyword">function</code><code class=3D"js =
plain">(){</code></div><div class=3D"line number24 index23 alt1"><code clas=
s=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">r=
eturn</code> <code class=3D"js plain">v + 200;</code></div><div class=3D"li=
ne number25 index24 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><cod=
e class=3D"js plain">};</code></div><div class=3D"line number26 index25 alt=
1">&nbsp;</div><div class=3D"line number27 index26 alt2"><code class=3D"js =
plain">}</code></div><div class=3D"line number28 index27 alt1">&nbsp;</div>=
<div class=3D"line number29 index28 alt2"><code class=3D"js comments">// De=
corator 3</code></div><div class=3D"line number30 index29 alt1"><code class=
=3D"js keyword">function</code> <code class=3D"js plain">insurance( macbook=
 ){</code></div><div class=3D"line number31 index30 alt2">&nbsp;</div><div =
class=3D"line number32 index31 alt1"><code class=3D"js spaces">&nbsp;&nbsp;=
</code><code class=3D"js keyword">var</code> <code class=3D"js plain">v =3D=
 macbook.cost();</code></div><div class=3D"line number33 index32 alt2"><cod=
e class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js plain">macbook.c=
ost =3D </code><code class=3D"js keyword">function</code><code class=3D"js =
plain">(){</code></div><div class=3D"line number34 index33 alt1"><code clas=
s=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyw=
ord">return</code> <code class=3D"js plain">v + 250;</code></div><div class=
=3D"line number35 index34 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</cod=
e><code class=3D"js plain">};</code></div><div class=3D"line number36 index=
35 alt1">&nbsp;</div><div class=3D"line number37 index36 alt2"><code class=
=3D"js plain">}</code></div><div class=3D"line number38 index37 alt1">&nbsp=
;</div><div class=3D"line number39 index38 alt2"><code class=3D"js keyword"=
>var</code> <code class=3D"js plain">mb =3D </code><code class=3D"js keywor=
d">new</code> <code class=3D"js plain">MacBook();</code></div><div class=3D=
"line number40 index39 alt1"><code class=3D"js plain">memory( mb );</code><=
/div><div class=3D"line number41 index40 alt2"><code class=3D"js plain">eng=
raving( mb );</code></div><div class=3D"line number42 index41 alt1"><code c=
lass=3D"js plain">insurance( mb );</code></div><div class=3D"line number43 =
index42 alt2">&nbsp;</div><div class=3D"line number44 index43 alt1"><code c=
lass=3D"js comments">// Outputs: 1522</code></div><div class=3D"line number=
45 index44 alt2"><code class=3D"js plain">console.log( mb.cost() );</code><=
/div><div class=3D"line number46 index45 alt1">&nbsp;</div><div class=3D"li=
ne number47 index46 alt2"><code class=3D"js comments">// Outputs: 11.6</cod=
e></div><div class=3D"line number48 index47 alt1"><code class=3D"js plain">=
console.log( mb.screenSize() );</code></div></div></td></tr></tbody></table=
></div></div>

<p>In the above example, our Decorators are overriding the <code>MacBook()<=
/code> super-class objects <code>.cost()</code> function to return the curr=
ent price of the <code>Macbook</code> plus the cost of the upgrade being sp=
ecified.</p>

<p>It's considered a decoration as the original <code>Macbook</code> object=
s constructor methods which are not overridden (e.g. <code>screenSize()</co=
de>) as well as any other properties which we may define as a part of the <=
code>Macbook</code> remain unchanged and intact.</p>

<p>There isn't really a defined <em>interface</em> in the above example and=
 we're shifting away the responsibility of ensuring an object meets an inte=
rface when moving from the creator to the receiver.</p>

<h2>Pseudo-classical Decorators</h2>

<p>We're now going to examine a variation of the Decorator first presented =
in a JavaScript form in <em>Pro JavaScript Design Patterns</em> (PJDP) by D=
ustin Diaz and Ross Harmes.</p>

<p>Unlike some of the examples from earlier, Diaz and Harmes stick more clo=
sely to how decorators are implemented in other programming languages (such=
 as Java or C++) using the concept of an "interface", which we will define =
in more detail shortly.</p>

<p><strong>Note:</strong> This particular variation of the Decorator patter=
n is provided for reference purposes. If finding it overly complex, I recom=
mend opting for one of the simpler implementations covered earlier.</p>

<h3>Interfaces</h3>

<p>PJDP describes the Decorator as a pattern that is used to transparently =
wrap objects inside other objects of the same interface. An interface is a =
way of defining the methods an object <strong>should</strong> have, however=
, it doesn't actually directly specify how those methods should be implemen=
ted.</p>

<p>They can also indicate what parameters the methods take, but this is con=
sidered optional.</p>

<p>So, why would we use an interface in JavaScript? The idea is that they'r=
e self-documenting and promote reusability. In theory, interfaces also make=
 code more stable by ensuring changes to them must also be made to the obje=
cts implementing them.</p>

<p>Below is an example of an implementation of interfaces in JavaScript usi=
ng duck-typing - an approach that helps determine whether an object is an i=
nstance of constructor/object based on the methods it implements.</p>

<div><div id=3D"highlighter_175875" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</=
div><div class=3D"line number19 index18 alt2">19</div><div class=3D"line nu=
mber20 index19 alt1">20</div><div class=3D"line number21 index20 alt2">21</=
div><div class=3D"line number22 index21 alt1">22</div><div class=3D"line nu=
mber23 index22 alt2">23</div><div class=3D"line number24 index23 alt1">24</=
div><div class=3D"line number25 index24 alt2">25</div><div class=3D"line nu=
mber26 index25 alt1">26</div><div class=3D"line number27 index26 alt2">27</=
div><div class=3D"line number28 index27 alt1">28</div><div class=3D"line nu=
mber29 index28 alt2">29</div><div class=3D"line number30 index29 alt1">30</=
div><div class=3D"line number31 index30 alt2">31</div><div class=3D"line nu=
mber32 index31 alt1">32</div><div class=3D"line number33 index32 alt2">33</=
div><div class=3D"line number34 index33 alt1">34</div><div class=3D"line nu=
mber35 index34 alt2">35</div><div class=3D"line number36 index35 alt1">36</=
div><div class=3D"line number37 index36 alt2">37</div><div class=3D"line nu=
mber38 index37 alt1">38</div><div class=3D"line number39 index38 alt2">39</=
div><div class=3D"line number40 index39 alt1">40</div><div class=3D"line nu=
mber41 index40 alt2">41</div><div class=3D"line number42 index41 alt1">42</=
div><div class=3D"line number43 index42 alt2">43</div><div class=3D"line nu=
mber44 index43 alt1">44</div><div class=3D"line number45 index44 alt2">45</=
div><div class=3D"line number46 index45 alt1">46</div><div class=3D"line nu=
mber47 index46 alt2">47</div><div class=3D"line number48 index47 alt1">48</=
div><div class=3D"line number49 index48 alt2">49</div><div class=3D"line nu=
mber50 index49 alt1">50</div></td><td class=3D"code"><div class=3D"containe=
r"><div class=3D"line number1 index0 alt2"><code class=3D"js comments">// C=
reate interfaces using a pre-defined Interface</code></div><div class=3D"li=
ne number2 index1 alt1"><code class=3D"js comments">// constructor that acc=
epts an interface name and</code></div><div class=3D"line number3 index2 al=
t2"><code class=3D"js comments">// skeleton methods to expose.</code></div>=
<div class=3D"line number4 index3 alt1">&nbsp;</div><div class=3D"line numb=
er5 index4 alt2"><code class=3D"js comments">// In our reminder example sum=
mary() and placeOrder()</code></div><div class=3D"line number6 index5 alt1"=
><code class=3D"js comments">// represent functionality the interface shoul=
d</code></div><div class=3D"line number7 index6 alt2"><code class=3D"js com=
ments">// support</code></div><div class=3D"line number8 index7 alt1"><code=
 class=3D"js keyword">var</code> <code class=3D"js plain">reminder =3D </co=
de><code class=3D"js keyword">new</code> <code class=3D"js plain">Interface=
( </code><code class=3D"js string">"List"</code><code class=3D"js plain">, =
[</code><code class=3D"js string">"summary"</code><code class=3D"js plain">=
, </code><code class=3D"js string">"placeOrder"</code><code class=3D"js pla=
in">] );</code></div><div class=3D"line number9 index8 alt2">&nbsp;</div><d=
iv class=3D"line number10 index9 alt1"><code class=3D"js keyword">var</code=
> <code class=3D"js plain">properties =3D {</code></div><div class=3D"line =
number11 index10 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code c=
lass=3D"js plain">name: </code><code class=3D"js string">"Remember to buy t=
he milk"</code><code class=3D"js plain">,</code></div><div class=3D"line nu=
mber12 index11 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><code cla=
ss=3D"js plain">date: </code><code class=3D"js string">"05/06/2016"</code><=
code class=3D"js plain">,</code></div><div class=3D"line number13 index12 a=
lt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js plain">=
actions:{</code></div><div class=3D"line number14 index13 alt1"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">summ=
ary: </code><code class=3D"js keyword">function</code> <code class=3D"js pl=
ain">(){</code></div><div class=3D"line number15 index14 alt2"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js=
 keyword">return</code> <code class=3D"js string">"Remember to buy the milk=
, we are almost out!"</code><code class=3D"js plain">;</code></div><div cla=
ss=3D"line number16 index15 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nb=
sp;</code><code class=3D"js plain">},</code></div><div class=3D"line number=
17 index16 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><=
code class=3D"js plain">placeOrder: </code><code class=3D"js keyword">funct=
ion</code> <code class=3D"js plain">(){</code></div><div class=3D"line numb=
er18 index17 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;</code><code class=3D"js keyword">return</code> <code class=3D"js str=
ing">"Ordering milk from your local grocery store"</code><code class=3D"js =
plain">;</code></div><div class=3D"line number19 index18 alt2"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">}</c=
ode></div><div class=3D"line number20 index19 alt1"><code class=3D"js space=
s">&nbsp;&nbsp;</code><code class=3D"js plain">}</code></div><div class=3D"=
line number21 index20 alt2"><code class=3D"js plain">};</code></div><div cl=
ass=3D"line number22 index21 alt1">&nbsp;</div><div class=3D"line number23 =
index22 alt2"><code class=3D"js comments">// Now create a constructor imple=
menting the above properties</code></div><div class=3D"line number24 index2=
3 alt1"><code class=3D"js comments">// and methods</code></div><div class=
=3D"line number25 index24 alt2">&nbsp;</div><div class=3D"line number26 ind=
ex25 alt1"><code class=3D"js keyword">function</code> <code class=3D"js pla=
in">Todo( config ){</code></div><div class=3D"line number27 index26 alt2">&=
nbsp;</div><div class=3D"line number28 index27 alt1"><code class=3D"js spac=
es">&nbsp;&nbsp;</code><code class=3D"js comments">// State the methods we =
expect to be supported</code></div><div class=3D"line number29 index28 alt2=
"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js comments">=
// as well as the Interface instance being checked</code></div><div class=
=3D"line number30 index29 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</cod=
e><code class=3D"js comments">// against</code></div><div class=3D"line num=
ber31 index30 alt2">&nbsp;</div><div class=3D"line number32 index31 alt1"><=
code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js plain">Interf=
ace.ensureImplements( config.actions, reminder );</code></div><div class=3D=
"line number33 index32 alt2">&nbsp;</div><div class=3D"line number34 index3=
3 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js keyw=
ord">this</code><code class=3D"js plain">.name =3D config.name;</code></div=
><div class=3D"line number35 index34 alt2"><code class=3D"js spaces">&nbsp;=
&nbsp;</code><code class=3D"js keyword">this</code><code class=3D"js plain"=
>.methods =3D config.actions;</code></div><div class=3D"line number36 index=
35 alt1">&nbsp;</div><div class=3D"line number37 index36 alt2"><code class=
=3D"js plain">}</code></div><div class=3D"line number38 index37 alt1">&nbsp=
;</div><div class=3D"line number39 index38 alt2"><code class=3D"js comments=
">// Create a new instance of our Todo constructor</code></div><div class=
=3D"line number40 index39 alt1">&nbsp;</div><div class=3D"line number41 ind=
ex40 alt2"><code class=3D"js keyword">var</code> <code class=3D"js plain">t=
odoItem =3D </code><code class=3D"js keyword">new</code> <code class=3D"js =
plain">Todo( properties );</code></div><div class=3D"line number42 index41 =
alt1">&nbsp;</div><div class=3D"line number43 index42 alt2"><code class=3D"=
js comments">// Finally test to make sure these function correctly</code></=
div><div class=3D"line number44 index43 alt1">&nbsp;</div><div class=3D"lin=
e number45 index44 alt2"><code class=3D"js plain">console.log( todoItem.met=
hods.summary() );</code></div><div class=3D"line number46 index45 alt1"><co=
de class=3D"js plain">console.log( todoItem.methods.placeOrder() );</code><=
/div><div class=3D"line number47 index46 alt2">&nbsp;</div><div class=3D"li=
ne number48 index47 alt1"><code class=3D"js comments">// Outputs:</code></d=
iv><div class=3D"line number49 index48 alt2"><code class=3D"js comments">//=
 Remember to buy the milk, we are almost out!</code></div><div class=3D"lin=
e number50 index49 alt1"><code class=3D"js comments">// Ordering milk from =
your local grocery store</code></div></div></td></tr></tbody></table></div>=
</div>

<p>In the above, <code>Interface.ensureImplements</code> provides strict fu=
nctionality checking and code for both this and the <code>Interface</code> =
constructor can be found <a href=3D"https://gist.github.com/1057989">here</=
a>.</p>

<p>The biggest problem with interfaces is that, as there isn't built-in sup=
port for them in JavaScript, there is a danger of us attempting to emulate =
a feature of another language that may not be an ideal fit. Lightweight int=
erfaces can be used without a great performance cost however and we will ne=
xt look at <em>Abstract</em> Decorators using this same concept.</p>

<h3>Abstract Decorators</h3>

<p>To demonstrate the structure of this version of the Decorator pattern, w=
e're going to imagine we have a superclass that models a <code>Macbook</cod=
e> once again and a store that allows us to "decorate" our Macbook with a n=
umber of enhancements for an additional fee.</p>

<p>Enhancements can include upgrades to 4GB or 8GB Ram, engraving, Parallel=
s or a case. Now if we were to model this using an individual sub-class for=
 each combination of enhancement options, it might look something like this=
:</p>

<div><div id=3D"highlighter_324569" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div></td><td class=3D"code"><div class=3D"containe=
r"><div class=3D"line number1 index0 alt2"><code class=3D"js keyword">var</=
code> <code class=3D"js plain">Macbook =3D </code><code class=3D"js keyword=
">function</code><code class=3D"js plain">(){</code></div><div class=3D"lin=
e number2 index1 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">//...</code></div>=
<div class=3D"line number3 index2 alt2"><code class=3D"js plain">};</code><=
/div><div class=3D"line number4 index3 alt1">&nbsp;</div><div class=3D"line=
 number5 index4 alt2"><code class=3D"js keyword">var</code>&nbsp; <code cla=
ss=3D"js plain">MacbookWith4GBRam =3D </code><code class=3D"js keyword">fun=
ction</code><code class=3D"js plain">(){},</code></div><div class=3D"line n=
umber6 index5 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;</code><code class=3D"js plain">MacbookWith8GBRam =3D </code><code class=
=3D"js keyword">function</code><code class=3D"js plain">(){},</code></div><=
div class=3D"line number7 index6 alt2"><code class=3D"js spaces">&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">MacbookWith4GBRamAndEng=
raving =3D </code><code class=3D"js keyword">function</code><code class=3D"=
js plain">(){},</code></div><div class=3D"line number8 index7 alt1"><code c=
lass=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js p=
lain">MacbookWith8GBRamAndEngraving =3D </code><code class=3D"js keyword">f=
unction</code><code class=3D"js plain">(){},</code></div><div class=3D"line=
 number9 index8 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;</code><code class=3D"js plain">MacbookWith8GBRamAndParallels =3D </code=
><code class=3D"js keyword">function</code><code class=3D"js plain">(){},</=
code></div><div class=3D"line number10 index9 alt1"><code class=3D"js space=
s">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">MacbookWit=
h4GBRamAndParallels =3D </code><code class=3D"js keyword">function</code><c=
ode class=3D"js plain">(){},</code></div><div class=3D"line number11 index1=
0 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><cod=
e class=3D"js plain">MacbookWith8GBRamAndParallelsAndCase =3D </code><code =
class=3D"js keyword">function</code><code class=3D"js plain">(){},</code></=
div><div class=3D"line number12 index11 alt1"><code class=3D"js spaces">&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">MacbookWith4GBRa=
mAndParallelsAndCase =3D </code><code class=3D"js keyword">function</code><=
code class=3D"js plain">(){},</code></div><div class=3D"line number13 index=
12 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><co=
de class=3D"js plain">MacbookWith8GBRamAndParallelsAndCaseAndInsurance =3D =
</code><code class=3D"js keyword">function</code><code class=3D"js plain">(=
){},</code></div><div class=3D"line number14 index13 alt1"><code class=3D"j=
s spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">Mac=
bookWith4GBRamAndParallelsAndCaseAndInsurance =3D </code><code class=3D"js =
keyword">function</code><code class=3D"js plain">(){};</code></div></div></=
td></tr></tbody></table></div></div>
<p>and so on.</p>
<p>This would be an impractical solution as a new subclass would be require=
d for every possible combination of enhancements that are available. As we =
would prefer to keep things simple without maintaining a large set of subcl=
asses, let's look at how decorators may be used to solve this problem bette=
r.</p>

<p>Rather than requiring all of the combinations we saw earlier, we should =
simply have to create five new decorator classes. Methods that are called o=
n these enhancement classes would be passed on to our <code>Macbook</code> =
class.</p>

<p>In our next example, decorators transparently wrap around their componen=
ts and can interestingly be interchanged as they use the same interface.</p=
>

<p>Here's the interface we're going to define for the Macbook:</p>
<div><div id=3D"highlighter_873840" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</=
div><div class=3D"line number19 index18 alt2">19</div><div class=3D"line nu=
mber20 index19 alt1">20</div><div class=3D"line number21 index20 alt2">21</=
div><div class=3D"line number22 index21 alt1">22</div><div class=3D"line nu=
mber23 index22 alt2">23</div><div class=3D"line number24 index23 alt1">24</=
div><div class=3D"line number25 index24 alt2">25</div><div class=3D"line nu=
mber26 index25 alt1">26</div><div class=3D"line number27 index26 alt2">27</=
div><div class=3D"line number28 index27 alt1">28</div></td><td class=3D"cod=
e"><div class=3D"container"><div class=3D"line number1 index0 alt2"><code c=
lass=3D"js keyword">var</code> <code class=3D"js plain">Macbook =3D </code>=
<code class=3D"js keyword">new</code> <code class=3D"js plain">Interface( <=
/code><code class=3D"js string">"Macbook"</code><code class=3D"js plain">,<=
/code></div><div class=3D"line number2 index1 alt1"><code class=3D"js space=
s">&nbsp;&nbsp;</code><code class=3D"js plain">[</code><code class=3D"js st=
ring">"addEngraving"</code><code class=3D"js plain">,</code></div><div clas=
s=3D"line number3 index2 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code=
><code class=3D"js string">"addParallels"</code><code class=3D"js plain">,<=
/code></div><div class=3D"line number4 index3 alt1"><code class=3D"js space=
s">&nbsp;&nbsp;</code><code class=3D"js string">"add4GBRam"</code><code cla=
ss=3D"js plain">,</code></div><div class=3D"line number5 index4 alt2"><code=
 class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js string">"add8GBRa=
m"</code><code class=3D"js plain">,</code></div><div class=3D"line number6 =
index5 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js=
 string">"addCase"</code><code class=3D"js plain">]);</code></div><div clas=
s=3D"line number7 index6 alt2">&nbsp;</div><div class=3D"line number8 index=
7 alt1"><code class=3D"js comments">// A Macbook Pro might thus be represen=
ted as follows:</code></div><div class=3D"line number9 index8 alt2"><code c=
lass=3D"js keyword">var</code> <code class=3D"js plain">MacbookPro =3D </co=
de><code class=3D"js keyword">function</code><code class=3D"js plain">(){</=
code></div><div class=3D"line number10 index9 alt1"><code class=3D"js space=
s">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// implements=
 Macbook</code></div><div class=3D"line number11 index10 alt2"><code class=
=3D"js plain">};</code></div><div class=3D"line number12 index11 alt1">&nbs=
p;</div><div class=3D"line number13 index12 alt2"><code class=3D"js plain">=
MacbookPro.prototype =3D {</code></div><div class=3D"line number14 index13 =
alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js plain">addEngraving: </code><code class=3D"js keyword">function</cod=
e><code class=3D"js plain">(){</code></div><div class=3D"line number15 inde=
x14 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code cl=
ass=3D"js plain">},</code></div><div class=3D"line number16 index15 alt1"><=
code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js p=
lain">addParallels: </code><code class=3D"js keyword">function</code><code =
class=3D"js plain">(){</code></div><div class=3D"line number17 index16 alt2=
"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"j=
s plain">},</code></div><div class=3D"line number18 index17 alt1"><code cla=
ss=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">ad=
d4GBRam: </code><code class=3D"js keyword">function</code><code class=3D"js=
 plain">(){</code></div><div class=3D"line number19 index18 alt2"><code cla=
ss=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">},=
</code></div><div class=3D"line number20 index19 alt1"><code class=3D"js sp=
aces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">add8GBRam:</c=
ode><code class=3D"js keyword">function</code><code class=3D"js plain">(){<=
/code></div><div class=3D"line number21 index20 alt2"><code class=3D"js spa=
ces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">},</code></div=
><div class=3D"line number22 index21 alt1"><code class=3D"js spaces">&nbsp;=
&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">addCase: </code><code cla=
ss=3D"js keyword">function</code><code class=3D"js plain">(){</code></div><=
div class=3D"line number23 index22 alt2"><code class=3D"js spaces">&nbsp;&n=
bsp;&nbsp;&nbsp;</code><code class=3D"js plain">},</code></div><div class=
=3D"line number24 index23 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp=
;&nbsp;</code><code class=3D"js plain">getPrice: </code><code class=3D"js k=
eyword">function</code><code class=3D"js plain">(){</code></div><div class=
=3D"line number25 index24 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// Base price</code><=
/div><div class=3D"line number26 index25 alt1"><code class=3D"js spaces">&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">return<=
/code> <code class=3D"js plain">900.00;</code></div><div class=3D"line numb=
er27 index26 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code=
><code class=3D"js plain">}</code></div><div class=3D"line number28 index27=
 alt1"><code class=3D"js plain">};</code></div></div></td></tr></tbody></ta=
ble></div></div>

<p>To make it easier for us to add as many more options as needed later on,=
 an Abstract Decorator class is defined with default methods required to im=
plement the <code>Macbook</code> interface, which the rest of the options w=
ill sub-class. Abstract Decorators ensure that we can decorate a base class=
 independently with as many decorators as needed in different combinations =
(remember the example earlier?) without needing to derive a class for every=
 possible combination.</p>

<div><div id=3D"highlighter_691516" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</=
div><div class=3D"line number19 index18 alt2">19</div><div class=3D"line nu=
mber20 index19 alt1">20</div><div class=3D"line number21 index20 alt2">21</=
div><div class=3D"line number22 index21 alt1">22</div><div class=3D"line nu=
mber23 index22 alt2">23</div><div class=3D"line number24 index23 alt1">24</=
div><div class=3D"line number25 index24 alt2">25</div><div class=3D"line nu=
mber26 index25 alt1">26</div><div class=3D"line number27 index26 alt2">27</=
div><div class=3D"line number28 index27 alt1">28</div><div class=3D"line nu=
mber29 index28 alt2">29</div></td><td class=3D"code"><div class=3D"containe=
r"><div class=3D"line number1 index0 alt2"><code class=3D"js comments">// M=
acbook decorator abstract decorator class</code></div><div class=3D"line nu=
mber2 index1 alt1">&nbsp;</div><div class=3D"line number3 index2 alt2"><cod=
e class=3D"js keyword">var</code> <code class=3D"js plain">MacbookDecorator=
 =3D </code><code class=3D"js keyword">function</code><code class=3D"js pla=
in">( macbook ){</code></div><div class=3D"line number4 index3 alt1">&nbsp;=
</div><div class=3D"line number5 index4 alt2"><code class=3D"js spaces">&nb=
sp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">Interface.ensureImplem=
ents( macbook, Macbook );</code></div><div class=3D"line number6 index5 alt=
1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"=
js keyword">this</code><code class=3D"js plain">.macbook =3D macbook;</code=
></div><div class=3D"line number7 index6 alt2">&nbsp;</div><div class=3D"li=
ne number8 index7 alt1"><code class=3D"js plain">};</code></div><div class=
=3D"line number9 index8 alt2">&nbsp;</div><div class=3D"line number10 index=
9 alt1"><code class=3D"js plain">MacbookDecorator.prototype =3D {</code></d=
iv><div class=3D"line number11 index10 alt2"><code class=3D"js spaces">&nbs=
p;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">addEngraving: </code><c=
ode class=3D"js keyword">function</code><code class=3D"js plain">(){</code>=
</div><div class=3D"line number12 index11 alt1"><code class=3D"js spaces">&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js key=
word">return</code> <code class=3D"js keyword">this</code><code class=3D"js=
 plain">.macbook.addEngraving();</code></div><div class=3D"line number13 in=
dex12 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code =
class=3D"js plain">},</code></div><div class=3D"line number14 index13 alt1"=
><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js=
 plain">addParallels: </code><code class=3D"js keyword">function</code><cod=
e class=3D"js plain">(){</code></div><div class=3D"line number15 index14 al=
t2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;</code><code class=3D"js keyword">return</code> <code class=3D"js keywor=
d">this</code><code class=3D"js plain">.macbook.addParallels();</code></div=
><div class=3D"line number16 index15 alt1"><code class=3D"js spaces">&nbsp;=
&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">},</code></div><div class=
=3D"line number17 index16 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp=
;&nbsp;</code><code class=3D"js plain">add4GBRam: </code><code class=3D"js =
keyword">function</code><code class=3D"js plain">(){</code></div><div class=
=3D"line number18 index17 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">return</co=
de> <code class=3D"js keyword">this</code><code class=3D"js plain">.macbook=
.add4GBRam();</code></div><div class=3D"line number19 index18 alt2"><code c=
lass=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">=
},</code></div><div class=3D"line number20 index19 alt1"><code class=3D"js =
spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">add8GBRam:<=
/code><code class=3D"js keyword">function</code><code class=3D"js plain">()=
{</code></div><div class=3D"line number21 index20 alt2"><code class=3D"js s=
paces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js keyword">return</code> <code class=3D"js keyword">this</code><code c=
lass=3D"js plain">.macbook.add8GBRam();</code></div><div class=3D"line numb=
er22 index21 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code=
><code class=3D"js plain">},</code></div><div class=3D"line number23 index2=
2 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code clas=
s=3D"js plain">addCase: </code><code class=3D"js keyword">function</code><c=
ode class=3D"js plain">(){</code></div><div class=3D"line number24 index23 =
alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;</code><code class=3D"js keyword">return</code> <code class=3D"js keyw=
ord">this</code><code class=3D"js plain">.macbook.addCase();</code></div><d=
iv class=3D"line number25 index24 alt2"><code class=3D"js spaces">&nbsp;&nb=
sp;&nbsp;&nbsp;</code><code class=3D"js plain">},</code></div><div class=3D=
"line number26 index25 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&n=
bsp;</code><code class=3D"js plain">getPrice: </code><code class=3D"js keyw=
ord">function</code><code class=3D"js plain">(){</code></div><div class=3D"=
line number27 index26 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">return</code> =
<code class=3D"js keyword">this</code><code class=3D"js plain">.macbook.get=
Price();</code></div><div class=3D"line number28 index27 alt1"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">}</c=
ode></div><div class=3D"line number29 index28 alt2"><code class=3D"js plain=
">};</code></div></div></td></tr></tbody></table></div></div>

<p>What's happening in the above sample is that the <code>Macbook</code> De=
corator accepts an object (a Macbook) to use as our base component. It's us=
ing the <code>Macbook</code> interface we defined earlier and for each meth=
od is just calling the same method on the component. We can now create our =
option classes for what can be added, just by using the <code>Macbook</code=
> Decorator.</p>

<div><div id=3D"highlighter_647013" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</=
div><div class=3D"line number19 index18 alt2">19</div><div class=3D"line nu=
mber20 index19 alt1">20</div><div class=3D"line number21 index20 alt2">21</=
div><div class=3D"line number22 index21 alt1">22</div><div class=3D"line nu=
mber23 index22 alt2">23</div><div class=3D"line number24 index23 alt1">24</=
div><div class=3D"line number25 index24 alt2">25</div></td><td class=3D"cod=
e"><div class=3D"container"><div class=3D"line number1 index0 alt2"><code c=
lass=3D"js comments">// First, define a way to extend an object a</code></d=
iv><div class=3D"line number2 index1 alt1"><code class=3D"js comments">// w=
ith the properties in object b. We'll use</code></div><div class=3D"line nu=
mber3 index2 alt2"><code class=3D"js comments">// this shortly!</code></div=
><div class=3D"line number4 index3 alt1"><code class=3D"js keyword">functio=
n</code> <code class=3D"js plain">extend( a, b ){</code></div><div class=3D=
"line number5 index4 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbs=
p;</code><code class=3D"js keyword">for</code><code class=3D"js plain">( </=
code><code class=3D"js keyword">var</code> <code class=3D"js plain">key </c=
ode><code class=3D"js keyword">in</code> <code class=3D"js plain">b )</code=
></div><div class=3D"line number6 index5 alt1"><code class=3D"js spaces">&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyw=
ord">if</code><code class=3D"js plain">( b.hasOwnProperty(key) )</code></di=
v><div class=3D"line number7 index6 alt2"><code class=3D"js spaces">&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><co=
de class=3D"js plain">a[key] =3D b[key];</code></div><div class=3D"line num=
ber8 index7 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>=
<code class=3D"js keyword">return</code> <code class=3D"js plain">a;</code>=
</div><div class=3D"line number9 index8 alt2"><code class=3D"js plain">}</c=
ode></div><div class=3D"line number10 index9 alt1">&nbsp;</div><div class=
=3D"line number11 index10 alt2"><code class=3D"js keyword">var</code> <code=
 class=3D"js plain">CaseDecorator =3D </code><code class=3D"js keyword">fun=
ction</code><code class=3D"js plain">( macbook ){</code></div><div class=3D=
"line number12 index11 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;</=
code><code class=3D"js keyword">this</code><code class=3D"js plain">.macboo=
k =3D macbook;</code></div><div class=3D"line number13 index12 alt2"><code =
class=3D"js plain">};</code></div><div class=3D"line number14 index13 alt1"=
>&nbsp;</div><div class=3D"line number15 index14 alt2"><code class=3D"js co=
mments">// Let's now extend (decorate) the CaseDecorator</code></div><div c=
lass=3D"line number16 index15 alt1"><code class=3D"js comments">// with a M=
acbookDecorator</code></div><div class=3D"line number17 index16 alt2"><code=
 class=3D"js plain">extend( CaseDecorator, MacbookDecorator );</code></div>=
<div class=3D"line number18 index17 alt1">&nbsp;</div><div class=3D"line nu=
mber19 index18 alt2"><code class=3D"js plain">CaseDecorator.prototype.addCa=
se =3D </code><code class=3D"js keyword">function</code><code class=3D"js p=
lain">(){</code></div><div class=3D"line number20 index19 alt1"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">re=
turn</code> <code class=3D"js keyword">this</code><code class=3D"js plain">=
.macbook.addCase() + </code><code class=3D"js string">"Adding case to macbo=
ok"</code><code class=3D"js plain">;</code></div><div class=3D"line number2=
1 index20 alt2"><code class=3D"js plain">};</code></div><div class=3D"line =
number22 index21 alt1">&nbsp;</div><div class=3D"line number23 index22 alt2=
"><code class=3D"js plain">CaseDecorator.prototype.getPrice =3D </code><cod=
e class=3D"js keyword">function</code><code class=3D"js plain">(){</code></=
div><div class=3D"line number24 index23 alt1"><code class=3D"js spaces">&nb=
sp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">return</code> <code =
class=3D"js keyword">this</code><code class=3D"js plain">.macbook.getPrice(=
) + 45.00;</code></div><div class=3D"line number25 index24 alt2"><code clas=
s=3D"js plain">};</code></div></div></td></tr></tbody></table></div></div>

<p>What we're doing here is overriding the <code>addCase()</code> and <code=
>getPrice()</code> methods that need to be decorated and we're achieving th=
is by first calling these methods on the original <code>macbook</code> and =
then simply appending a string or numeric value (e.g 45.00) to them accordi=
ngly.</p>

<p>As there's been quite a lot of information presented in this section so =
far, let's try to bring it all together in a single example that will hopef=
ully highlight what we have learned.</p>

<div><div id=3D"highlighter_538606" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div></td><td class=3D"code"><div class=3D"containe=
r"><div class=3D"line number1 index0 alt2"><code class=3D"js comments">// I=
nstantiation of the macbook</code></div><div class=3D"line number2 index1 a=
lt1"><code class=3D"js keyword">var</code> <code class=3D"js plain">myMacbo=
okPro =3D </code><code class=3D"js keyword">new</code> <code class=3D"js pl=
ain">MacbookPro();</code></div><div class=3D"line number3 index2 alt2">&nbs=
p;</div><div class=3D"line number4 index3 alt1"><code class=3D"js comments"=
>// Outputs: 900.00</code></div><div class=3D"line number5 index4 alt2"><co=
de class=3D"js plain">console.log( myMacbookPro.getPrice() );</code></div><=
div class=3D"line number6 index5 alt1">&nbsp;</div><div class=3D"line numbe=
r7 index6 alt2"><code class=3D"js comments">// Decorate the macbook</code><=
/div><div class=3D"line number8 index7 alt1"><code class=3D"js keyword">var=
</code> <code class=3D"js plain">decoratedMacbookPro =3D </code><code class=
=3D"js keyword">new</code> <code class=3D"js plain">CaseDecorator( myMacboo=
kPro );</code></div><div class=3D"line number9 index8 alt2">&nbsp;</div><di=
v class=3D"line number10 index9 alt1"><code class=3D"js comments">// This w=
ill return 945.00</code></div><div class=3D"line number11 index10 alt2"><co=
de class=3D"js plain">console.log( decoratedMacbookPro.getPrice() );</code>=
</div></div></td></tr></tbody></table></div></div>

<p>As decorators are able to modify objects dynamically, they're a perfect =
pattern for changing existing systems. Occasionally, it's just simpler to c=
reate decorators around an object versus the trouble of maintaining individ=
ual sub-classes for each object type. This makes maintaining applications t=
hat may require a large number of sub-classed objects significantly more st=
raight-forward.</p>

<p>A functional version of this example can be found on <a href=3D"http://j=
sbin.com/UMEJaXu/1/edit">JSBin</a>.</p>

<h2>Decorators With jQuery</h2>

<p>As with other patterns we've covered, there are also examples of the Dec=
orator pattern that can be implemented with jQuery. <code>jQuery.extend()</=
code> allows us to extend (or merge) two or more objects (and their propert=
ies) together into a single object at run-time.</p>

<p>In this scenario, a target object can be decorated with new functionalit=
y without necessarily breaking or overriding existing methods in the source=
/superclass object (although this can be done).</p>

<p>In the following example, we define three objects: defaults, options and=
 settings. The aim of the task is to decorate the <code>defaults</code> obj=
ect with additional functionality found in <code>optionssettings</code>. We=
 must:</p>

<p>(a) Leave "defaults" in an untouched state where we don't lose the abili=
ty to access the properties or functions found in it a later point (b) Gain=
 the ability to use the decorated properties and functions found in "option=
s"</p>

<div><div id=3D"highlighter_200843" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</=
div><div class=3D"line number19 index18 alt2">19</div><div class=3D"line nu=
mber20 index19 alt1">20</div><div class=3D"line number21 index20 alt2">21</=
div><div class=3D"line number22 index21 alt1">22</div><div class=3D"line nu=
mber23 index22 alt2">23</div><div class=3D"line number24 index23 alt1">24</=
div><div class=3D"line number25 index24 alt2">25</div><div class=3D"line nu=
mber26 index25 alt1">26</div><div class=3D"line number27 index26 alt2">27</=
div><div class=3D"line number28 index27 alt1">28</div><div class=3D"line nu=
mber29 index28 alt2">29</div><div class=3D"line number30 index29 alt1">30</=
div><div class=3D"line number31 index30 alt2">31</div><div class=3D"line nu=
mber32 index31 alt1">32</div><div class=3D"line number33 index32 alt2">33</=
div><div class=3D"line number34 index33 alt1">34</div><div class=3D"line nu=
mber35 index34 alt2">35</div><div class=3D"line number36 index35 alt1">36</=
div><div class=3D"line number37 index36 alt2">37</div><div class=3D"line nu=
mber38 index37 alt1">38</div><div class=3D"line number39 index38 alt2">39</=
div><div class=3D"line number40 index39 alt1">40</div><div class=3D"line nu=
mber41 index40 alt2">41</div><div class=3D"line number42 index41 alt1">42</=
div><div class=3D"line number43 index42 alt2">43</div><div class=3D"line nu=
mber44 index43 alt1">44</div><div class=3D"line number45 index44 alt2">45</=
div><div class=3D"line number46 index45 alt1">46</div><div class=3D"line nu=
mber47 index46 alt2">47</div><div class=3D"line number48 index47 alt1">48</=
div><div class=3D"line number49 index48 alt2">49</div><div class=3D"line nu=
mber50 index49 alt1">50</div><div class=3D"line number51 index50 alt2">51</=
div><div class=3D"line number52 index51 alt1">52</div><div class=3D"line nu=
mber53 index52 alt2">53</div><div class=3D"line number54 index53 alt1">54</=
div></td><td class=3D"code"><div class=3D"container"><div class=3D"line num=
ber1 index0 alt2"><code class=3D"js keyword">var</code> <code class=3D"js p=
lain">decoratorApp =3D decoratorApp || {};</code></div><div class=3D"line n=
umber2 index1 alt1">&nbsp;</div><div class=3D"line number3 index2 alt2"><co=
de class=3D"js comments">// define the objects we're going to use</code></d=
iv><div class=3D"line number4 index3 alt1"><code class=3D"js plain">decorat=
orApp =3D {</code></div><div class=3D"line number5 index4 alt2">&nbsp;</div=
><div class=3D"line number6 index5 alt1"><code class=3D"js spaces">&nbsp;&n=
bsp;&nbsp;&nbsp;</code><code class=3D"js plain">defaults: {</code></div><di=
v class=3D"line number7 index6 alt2"><code class=3D"js spaces">&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">validat=
e: </code><code class=3D"js keyword">false</code><code class=3D"js plain">,=
</code></div><div class=3D"line number8 index7 alt1"><code class=3D"js spac=
es">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"j=
s plain">limit: 5,</code></div><div class=3D"line number9 index8 alt2"><cod=
e class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</cod=
e><code class=3D"js plain">name: </code><code class=3D"js string">"foo"</co=
de><code class=3D"js plain">,</code></div><div class=3D"line number10 index=
9 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;</code><code class=3D"js plain">welcome: </code><code class=3D"js ke=
yword">function</code> <code class=3D"js plain">() {</code></div><div class=
=3D"line number11 index10 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js plain">console.log( </code><code class=3D"js string">"welcome!"</cod=
e> <code class=3D"js plain">);</code></div><div class=3D"line number12 inde=
x11 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;</code><code class=3D"js plain">}</code></div><div class=3D"line n=
umber13 index12 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</c=
ode><code class=3D"js plain">},</code></div><div class=3D"line number14 ind=
ex13 alt1">&nbsp;</div><div class=3D"line number15 index14 alt2"><code clas=
s=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">opt=
ions: {</code></div><div class=3D"line number16 index15 alt1"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code=
 class=3D"js plain">validate: </code><code class=3D"js keyword">true</code>=
<code class=3D"js plain">,</code></div><div class=3D"line number17 index16 =
alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;</code><code class=3D"js plain">name: </code><code class=3D"js string"=
>"bar"</code><code class=3D"js plain">,</code></div><div class=3D"line numb=
er18 index17 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">helloWorld: </code><code =
class=3D"js keyword">function</code> <code class=3D"js plain">() {</code></=
div><div class=3D"line number19 index18 alt2"><code class=3D"js spaces">&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code=
><code class=3D"js plain">console.log( </code><code class=3D"js string">"he=
llo world"</code> <code class=3D"js plain">);</code></div><div class=3D"lin=
e number20 index19 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">}</code></div><div =
class=3D"line number21 index20 alt2"><code class=3D"js spaces">&nbsp;&nbsp;=
&nbsp;&nbsp;</code><code class=3D"js plain">},</code></div><div class=3D"li=
ne number22 index21 alt1">&nbsp;</div><div class=3D"line number23 index22 a=
lt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js plain">settings: {},</code></div><div class=3D"line number24 index23=
 alt1">&nbsp;</div><div class=3D"line number25 index24 alt2"><code class=3D=
"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">printOb=
j: </code><code class=3D"js keyword">function</code> <code class=3D"js plai=
n">( obj ) {</code></div><div class=3D"line number26 index25 alt1"><code cl=
ass=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><c=
ode class=3D"js keyword">var</code> <code class=3D"js plain">arr =3D [],</c=
ode></div><div class=3D"line number27 index26 alt2"><code class=3D"js space=
s">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
</code><code class=3D"js plain">next;</code></div><div class=3D"line number=
28 index27 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</code><code class=3D"js plain">$.each( obj, </code><code c=
lass=3D"js keyword">function</code> <code class=3D"js plain">( key, val ) {=
</code></div><div class=3D"line number29 index28 alt2"><code class=3D"js sp=
aces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;</code><code class=3D"js plain">next =3D key + </code><code class=3D"js =
string">": "</code><code class=3D"js plain">;</code></div><div class=3D"lin=
e number30 index29 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js pl=
ain">next +=3D $.isPlainObject(val) ? printObj( val ) : val;</code></div><d=
iv class=3D"line number31 index30 alt2"><code class=3D"js spaces">&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code=
 class=3D"js plain">arr.push( next );</code></div><div class=3D"line number=
32 index31 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</code><code class=3D"js plain">} );</code></div><div class=
=3D"line number33 index32 alt2">&nbsp;</div><div class=3D"line number34 ind=
ex33 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;</code><code class=3D"js keyword">return</code> <code class=3D"js=
 string">"{ "</code> <code class=3D"js plain">+ arr.join(</code><code class=
=3D"js string">", "</code><code class=3D"js plain">) + </code><code class=
=3D"js string">" }"</code><code class=3D"js plain">;</code></div><div class=
=3D"line number35 index34 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp=
;&nbsp;</code><code class=3D"js plain">}</code></div><div class=3D"line num=
ber36 index35 alt1">&nbsp;</div><div class=3D"line number37 index36 alt2"><=
code class=3D"js plain">};</code></div><div class=3D"line number38 index37 =
alt1">&nbsp;</div><div class=3D"line number39 index38 alt2"><code class=3D"=
js comments">// merge defaults and options, without modifying defaults expl=
icitly</code></div><div class=3D"line number40 index39 alt1"><code class=3D=
"js plain">decoratorApp.settings =3D $.extend({}, decoratorApp.defaults, de=
coratorApp.options);</code></div><div class=3D"line number41 index40 alt2">=
&nbsp;</div><div class=3D"line number42 index41 alt1"><code class=3D"js com=
ments">// what we have done here is decorated defaults in a way that provid=
es</code></div><div class=3D"line number43 index42 alt2"><code class=3D"js =
comments">// access to the properties and functionality it has to offer (as=
 well as</code></div><div class=3D"line number44 index43 alt1"><code class=
=3D"js comments">// that of the decorator "options"). defaults itself is le=
ft unchanged</code></div><div class=3D"line number45 index44 alt2">&nbsp;</=
div><div class=3D"line number46 index45 alt1"><code class=3D"js plain">$(</=
code><code class=3D"js string">"#log"</code><code class=3D"js plain">)</cod=
e></div><div class=3D"line number47 index46 alt2"><code class=3D"js spaces"=
>&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">.append( decorator=
App.printObj(decoratorApp.settings) +</code></div><div class=3D"line number=
48 index47 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">+ decoratorApp.=
printObj(decoratorApp.options) +</code></div><div class=3D"line number49 in=
dex48 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">+ decoratorApp.print=
Obj(decoratorApp.defaults));</code></div><div class=3D"line number50 index4=
9 alt1">&nbsp;</div><div class=3D"line number51 index50 alt2"><code class=
=3D"js comments">// settings -- { validate: true, limit: 5, name: bar, welc=
ome: function (){ console.log( "welcome!" ); },</code></div><div class=3D"l=
ine number52 index51 alt1"><code class=3D"js comments">// helloWorld: funct=
ion (){ console.log( "hello world" ); } }</code></div><div class=3D"line nu=
mber53 index52 alt2"><code class=3D"js comments">// options -- { validate: =
true, name: bar, helloWorld: function (){ console.log( "hello world" ); } }=
</code></div><div class=3D"line number54 index53 alt1"><code class=3D"js co=
mments">// defaults -- { validate: false, limit: 5, name: foo, welcome: fun=
ction (){ console.log("welcome!"); } }</code></div></div></td></tr></tbody>=
</table></div></div>
<h2>Advantages &amp; Disadvantages</h2>

<p>Developers enjoy using this pattern as it can be used transparently and =
is also fairly flexible - as we've seen, objects can be wrapped or "decorat=
ed" with new behavior and then continue to be used without needing to worry=
 about the base object being modified. In a broader context, this pattern a=
lso avoids us needing to rely on large numbers of subclasses to get the sam=
e benefits.</p>

<p>There are however drawbacks that we should be aware of when implementing=
 the pattern. If poorly managed, it can significantly complicate our applic=
ation architecture as it introduces many small, but similar objects into ou=
r namespace. The concern here is that in addition to becoming hard to manag=
e, other developers unfamiliar with the pattern may have a hard time graspi=
ng why it's being used.</p>

<p>Sufficient commenting or pattern research should assist with the latter,=
 however as long as we keep a handle on how widespread we use the decorator=
 in our applications we should be fine on both counts.</p>

<p>&nbsp;</p>
<!--end detail-->

<p>&nbsp;</p>
<h1 id=3D"detailflyweight">
  <a href=3D"https://addyosmani.com/resources/essentialjsdesignpatterns/boo=
k/#detailflyweight" class=3D"subhead-link">#</a>
  Flyweight
</h1>
<p>&nbsp;</p>


<p>The Flyweight pattern is a classical structural solution for optimizing =
code that is repetitive, slow and inefficiently shares data. It aims to min=
imize the use of memory in an application by sharing as much data as possib=
le with related objects (e.g application configuration, state and so on).</=
p>

<p>The pattern was first conceived by Paul Calder and Mark Linton in 1990 a=
nd was named after the boxing weight class that includes fighters weighing =
less than 112lb. The name Flyweight itself is derived from this weight clas=
sification as it refers to the small weight (memory footprint) the pattern =
aims to help us achieve.</p>

<p>In practice, Flyweight data sharing can involve taking several similar o=
bjects or data constructs used by a number of objects and placing this data=
 into a single external object. We can pass through this object to those de=
pending on this data, rather than storing identical data across each one.</=
p>

<h2>Using Flyweights</h2>

<p>There are two ways in which the Flyweight pattern can be applied. The fi=
rst is at the data-layer, where we deal with the concept of sharing data be=
tween large quantities of similar objects stored in memory.</p>

<p>The second is at the DOM-layer where the Flyweight can be used as a cent=
ral event-manager to avoid attaching event handlers to every child element =
in a parent container we wish to have some similar behavior.</p>

<p>As the data-layer is where the flyweight pattern is most used traditiona=
lly, we'll take a look at this first.</p>

<h2>Flyweights and sharing data</h2>

<p>For this application, there are a few more concepts around the classical=
 Flyweight pattern that we need to be aware of. In the Flyweight pattern th=
ere's a concept of two states - intrinsic and extrinsic. Intrinsic informat=
ion may be required by internal methods in our objects which they absolutel=
y cannot function without. Extrinsic information can however be removed and=
 stored externally.</p>

<p>Objects with the same intrinsic data can be replaced with a single share=
d object, created by a factory method. This allows us to reduce the overall=
 quantity of implicit data being stored quite significantly.</p>

<p>The benefit of this is that we're able to keep an eye on objects that ha=
ve already been instantiated so that new copies are only ever created shoul=
d the intrinsic state differ from the object we already have.</p>

<p>We use a manager to handle the extrinsic states. How this is implemented=
 can vary, but one approach to this to have the manager object contain a ce=
ntral database of the extrinsic states and the flyweight objects which they=
 belong to.</p>


<h2>Implementing Classical Flyweights</h2>

<p>As the Flyweight pattern hasn't been heavily used in JavaScript in recen=
t years, many of the implementations we might use for inspiration come from=
 the Java and C++ worlds.</p>

<p>Our first look at Flyweights in code is my JavaScript implementation of =
the Java sample of the Flyweight pattern from Wikipedia (<a href=3D"http://=
en.wikipedia.org/wiki/Flyweight_pattern">http://en.wikipedia.org/wiki/Flywe=
ight_pattern</a>).

</p><p>We will be making use of three types of Flyweight components in this=
 implementation, which are listed below:</p>

<p>
  </p><ul>
    <li><strong>Flyweight</strong> corresponds to an interface through whic=
h flyweights are able to receive and act on extrinsic states</li>
    <li><strong>Concrete Flyweight</strong> actually implements the Flyweig=
ht interface and stores intrinsic state. Concrete Flyweights need to be sha=
rable and capable of manipulating state that is extrinsic</li>
    <li><strong>Flyweight Factory</strong> manages flyweight objects and cr=
eates them too. It makes sure that our flyweights are shared and manages th=
em as a group of objects which can be queried if we require individual inst=
ances. If an object has been already created in the group it returns it, ot=
herwise it adds a new object to the pool and returns it.</li>
  </ul>
<p></p>

<p>These correspond to the following definitions in our implementation:</p>
<p>
  </p><ul>
    <li>CoffeeOrder: Flyweight</li>
    <li>CoffeeFlavor: Concrete Flyweight </li>
    <li>CoffeeOrderContext: Helper</li>
    <li>CoffeeFlavorFactory: Flyweight Factory</li>
    <li>testFlyweight: Utilization of our Flyweights</li>
  </ul>
<p></p>

<h3>Duck punching "implements"</h3>

<p>Duck punching allows us to extend the capabilities of a language or solu=
tion without necessarily needing to modify the runtime source. As this next=
 solution requires the use of a Java keyword (<code>implements</code>) for =
implementing interfaces and isn't found in JavaScript natively, let's first=
 duck punch it.</p>

<p><code>Function.prototype.implementsFor</code> works on an object constru=
ctor and will accept a parent class (function) or object and either inherit=
 from this using normal inheritance (for functions) or virtual inheritance =
(for objects).</p>

<div><div id=3D"highlighter_302327" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</=
div></td><td class=3D"code"><div class=3D"container"><div class=3D"line num=
ber1 index0 alt2"><code class=3D"js comments">// Simulate pure virtual inhe=
ritance/"implement" keyword for JS</code></div><div class=3D"line number2 i=
ndex1 alt1"><code class=3D"js plain">Function.prototype.implementsFor =3D <=
/code><code class=3D"js keyword">function</code><code class=3D"js plain">( =
parentClassOrObject ){</code></div><div class=3D"line number3 index2 alt2">=
<code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js =
keyword">if</code> <code class=3D"js plain">( parentClassOrObject.construct=
or =3D=3D=3D Function )</code></div><div class=3D"line number4 index3 alt1"=
><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js=
 plain">{</code></div><div class=3D"line number5 index4 alt2"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code=
 class=3D"js comments">// Normal Inheritance</code></div><div class=3D"line=
 number6 index5 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">this</code><code cla=
ss=3D"js plain">.prototype =3D </code><code class=3D"js keyword">new</code>=
 <code class=3D"js plain">parentClassOrObject();</code></div><div class=3D"=
line number7 index6 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">this</code><code=
 class=3D"js plain">.prototype.constructor =3D </code><code class=3D"js key=
word">this</code><code class=3D"js plain">;</code></div><div class=3D"line =
number8 index7 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">this</code><code clas=
s=3D"js plain">.prototype.parent =3D parentClassOrObject.prototype;</code><=
/div><div class=3D"line number9 index8 alt2"><code class=3D"js spaces">&nbs=
p;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">}</code></div><div clas=
s=3D"line number10 index9 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp=
;&nbsp;</code><code class=3D"js keyword">else</code></div><div class=3D"lin=
e number11 index10 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;=
</code><code class=3D"js plain">{</code></div><div class=3D"line number12 i=
ndex11 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;</code><code class=3D"js comments">// Pure Virtual Inheritance<=
/code></div><div class=3D"line number13 index12 alt2"><code class=3D"js spa=
ces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"=
js keyword">this</code><code class=3D"js plain">.prototype =3D parentClassO=
rObject;</code></div><div class=3D"line number14 index13 alt1"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code=
 class=3D"js keyword">this</code><code class=3D"js plain">.prototype.constr=
uctor =3D </code><code class=3D"js keyword">this</code><code class=3D"js pl=
ain">;</code></div><div class=3D"line number15 index14 alt2"><code class=3D=
"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code cl=
ass=3D"js keyword">this</code><code class=3D"js plain">.prototype.parent =
=3D parentClassOrObject;</code></div><div class=3D"line number16 index15 al=
t1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D=
"js plain">}</code></div><div class=3D"line number17 index16 alt2"><code cl=
ass=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword"=
>return</code> <code class=3D"js keyword">this</code><code class=3D"js plai=
n">;</code></div><div class=3D"line number18 index17 alt1"><code class=3D"j=
s plain">};</code></div></div></td></tr></tbody></table></div></div>

<p>We can use this to patch the lack of an <code>implements</code> keyword =
by having a function inherit an interface explicitly. Below, <code>CoffeeFl=
avor</code> implements the <code>CoffeeOrder</code> interface and must cont=
ain its interface methods in order for us to assign the functionality power=
ing these implementations to an object.</p>

<div><div id=3D"highlighter_376227" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</=
div><div class=3D"line number19 index18 alt2">19</div><div class=3D"line nu=
mber20 index19 alt1">20</div><div class=3D"line number21 index20 alt2">21</=
div><div class=3D"line number22 index21 alt1">22</div><div class=3D"line nu=
mber23 index22 alt2">23</div><div class=3D"line number24 index23 alt1">24</=
div><div class=3D"line number25 index24 alt2">25</div><div class=3D"line nu=
mber26 index25 alt1">26</div><div class=3D"line number27 index26 alt2">27</=
div><div class=3D"line number28 index27 alt1">28</div><div class=3D"line nu=
mber29 index28 alt2">29</div><div class=3D"line number30 index29 alt1">30</=
div><div class=3D"line number31 index30 alt2">31</div><div class=3D"line nu=
mber32 index31 alt1">32</div><div class=3D"line number33 index32 alt2">33</=
div><div class=3D"line number34 index33 alt1">34</div><div class=3D"line nu=
mber35 index34 alt2">35</div><div class=3D"line number36 index35 alt1">36</=
div><div class=3D"line number37 index36 alt2">37</div><div class=3D"line nu=
mber38 index37 alt1">38</div><div class=3D"line number39 index38 alt2">39</=
div><div class=3D"line number40 index39 alt1">40</div><div class=3D"line nu=
mber41 index40 alt2">41</div><div class=3D"line number42 index41 alt1">42</=
div><div class=3D"line number43 index42 alt2">43</div><div class=3D"line nu=
mber44 index43 alt1">44</div><div class=3D"line number45 index44 alt2">45</=
div><div class=3D"line number46 index45 alt1">46</div><div class=3D"line nu=
mber47 index46 alt2">47</div><div class=3D"line number48 index47 alt1">48</=
div><div class=3D"line number49 index48 alt2">49</div><div class=3D"line nu=
mber50 index49 alt1">50</div><div class=3D"line number51 index50 alt2">51</=
div><div class=3D"line number52 index51 alt1">52</div><div class=3D"line nu=
mber53 index52 alt2">53</div><div class=3D"line number54 index53 alt1">54</=
div><div class=3D"line number55 index54 alt2">55</div><div class=3D"line nu=
mber56 index55 alt1">56</div><div class=3D"line number57 index56 alt2">57</=
div><div class=3D"line number58 index57 alt1">58</div><div class=3D"line nu=
mber59 index58 alt2">59</div><div class=3D"line number60 index59 alt1">60</=
div><div class=3D"line number61 index60 alt2">61</div><div class=3D"line nu=
mber62 index61 alt1">62</div><div class=3D"line number63 index62 alt2">63</=
div><div class=3D"line number64 index63 alt1">64</div><div class=3D"line nu=
mber65 index64 alt2">65</div><div class=3D"line number66 index65 alt1">66</=
div><div class=3D"line number67 index66 alt2">67</div><div class=3D"line nu=
mber68 index67 alt1">68</div><div class=3D"line number69 index68 alt2">69</=
div><div class=3D"line number70 index69 alt1">70</div><div class=3D"line nu=
mber71 index70 alt2">71</div><div class=3D"line number72 index71 alt1">72</=
div><div class=3D"line number73 index72 alt2">73</div><div class=3D"line nu=
mber74 index73 alt1">74</div><div class=3D"line number75 index74 alt2">75</=
div><div class=3D"line number76 index75 alt1">76</div><div class=3D"line nu=
mber77 index76 alt2">77</div><div class=3D"line number78 index77 alt1">78</=
div><div class=3D"line number79 index78 alt2">79</div><div class=3D"line nu=
mber80 index79 alt1">80</div><div class=3D"line number81 index80 alt2">81</=
div><div class=3D"line number82 index81 alt1">82</div><div class=3D"line nu=
mber83 index82 alt2">83</div><div class=3D"line number84 index83 alt1">84</=
div><div class=3D"line number85 index84 alt2">85</div><div class=3D"line nu=
mber86 index85 alt1">86</div><div class=3D"line number87 index86 alt2">87</=
div><div class=3D"line number88 index87 alt1">88</div><div class=3D"line nu=
mber89 index88 alt2">89</div><div class=3D"line number90 index89 alt1">90</=
div><div class=3D"line number91 index90 alt2">91</div><div class=3D"line nu=
mber92 index91 alt1">92</div><div class=3D"line number93 index92 alt2">93</=
div><div class=3D"line number94 index93 alt1">94</div><div class=3D"line nu=
mber95 index94 alt2">95</div><div class=3D"line number96 index95 alt1">96</=
div><div class=3D"line number97 index96 alt2">97</div><div class=3D"line nu=
mber98 index97 alt1">98</div><div class=3D"line number99 index98 alt2">99</=
div><div class=3D"line number100 index99 alt1">100</div><div class=3D"line =
number101 index100 alt2">101</div><div class=3D"line number102 index101 alt=
1">102</div><div class=3D"line number103 index102 alt2">103</div><div class=
=3D"line number104 index103 alt1">104</div><div class=3D"line number105 ind=
ex104 alt2">105</div><div class=3D"line number106 index105 alt1">106</div><=
div class=3D"line number107 index106 alt2">107</div><div class=3D"line numb=
er108 index107 alt1">108</div><div class=3D"line number109 index108 alt2">1=
09</div><div class=3D"line number110 index109 alt1">110</div><div class=3D"=
line number111 index110 alt2">111</div><div class=3D"line number112 index11=
1 alt1">112</div><div class=3D"line number113 index112 alt2">113</div><div =
class=3D"line number114 index113 alt1">114</div><div class=3D"line number11=
5 index114 alt2">115</div><div class=3D"line number116 index115 alt1">116</=
div><div class=3D"line number117 index116 alt2">117</div><div class=3D"line=
 number118 index117 alt1">118</div></td><td class=3D"code"><div class=3D"co=
ntainer"><div class=3D"line number1 index0 alt2"><code class=3D"js comments=
">// Flyweight object</code></div><div class=3D"line number2 index1 alt1"><=
code class=3D"js keyword">var</code> <code class=3D"js plain">CoffeeOrder =
=3D {</code></div><div class=3D"line number3 index2 alt2">&nbsp;</div><div =
class=3D"line number4 index3 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</=
code><code class=3D"js comments">// Interfaces</code></div><div class=3D"li=
ne number5 index4 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code =
class=3D"js plain">serveCoffee:</code><code class=3D"js keyword">function</=
code><code class=3D"js plain">(context){},</code></div><div class=3D"line n=
umber6 index5 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</cod=
e><code class=3D"js plain">getFlavor:</code><code class=3D"js keyword">func=
tion</code><code class=3D"js plain">(){}</code></div><div class=3D"line num=
ber7 index6 alt2">&nbsp;</div><div class=3D"line number8 index7 alt1"><code=
 class=3D"js plain">};</code></div><div class=3D"line number9 index8 alt2">=
&nbsp;</div><div class=3D"line number10 index9 alt1">&nbsp;</div><div class=
=3D"line number11 index10 alt2"><code class=3D"js comments">// ConcreteFlyw=
eight object that creates ConcreteFlyweight</code></div><div class=3D"line =
number12 index11 alt1"><code class=3D"js comments">// Implements CoffeeOrde=
r</code></div><div class=3D"line number13 index12 alt2"><code class=3D"js k=
eyword">function</code> <code class=3D"js plain">CoffeeFlavor( newFlavor ){=
</code></div><div class=3D"line number14 index13 alt1">&nbsp;</div><div cla=
ss=3D"line number15 index14 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nb=
sp;&nbsp;</code><code class=3D"js keyword">var</code> <code class=3D"js pla=
in">flavor =3D newFlavor;</code></div><div class=3D"line number16 index15 a=
lt1">&nbsp;</div><div class=3D"line number17 index16 alt2"><code class=3D"j=
s spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// If =
an interface has been defined for a feature</code></div><div class=3D"line =
number18 index17 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</=
code><code class=3D"js comments">// implement the feature</code></div><div =
class=3D"line number19 index18 alt2"><code class=3D"js spaces">&nbsp;&nbsp;=
&nbsp;&nbsp;</code><code class=3D"js keyword">if</code><code class=3D"js pl=
ain">( </code><code class=3D"js keyword">typeof</code> <code class=3D"js ke=
yword">this</code><code class=3D"js plain">.getFlavor =3D=3D=3D </code><cod=
e class=3D"js string">"function"</code> <code class=3D"js plain">){</code><=
/div><div class=3D"line number20 index19 alt1"><code class=3D"js spaces">&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">this</c=
ode><code class=3D"js plain">.getFlavor =3D </code><code class=3D"js keywor=
d">function</code><code class=3D"js plain">() {</code></div><div class=3D"l=
ine number21 index20 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">ret=
urn</code> <code class=3D"js plain">flavor;</code></div><div class=3D"line =
number22 index21 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;</code><code class=3D"js plain">};</code></div><div class=3D"line=
 number23 index22 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;<=
/code><code class=3D"js plain">}</code></div><div class=3D"line number24 in=
dex23 alt1">&nbsp;</div><div class=3D"line number25 index24 alt2"><code cla=
ss=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">=
if</code><code class=3D"js plain">( </code><code class=3D"js keyword">typeo=
f</code> <code class=3D"js keyword">this</code><code class=3D"js plain">.se=
rveCoffee =3D=3D=3D </code><code class=3D"js string">"function"</code> <cod=
e class=3D"js plain">){</code></div><div class=3D"line number26 index25 alt=
1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><co=
de class=3D"js keyword">this</code><code class=3D"js plain">.serveCoffee =
=3D </code><code class=3D"js keyword">function</code><code class=3D"js plai=
n">( context ) {</code></div><div class=3D"line number27 index26 alt2"><cod=
e class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</cod=
e><code class=3D"js plain">console.log(</code><code class=3D"js string">"Se=
rving Coffee flavor "</code></div><div class=3D"line number28 index27 alt1"=
><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;</code><code class=3D"js plain">+ flavor</code></div><div class=
=3D"line number29 index28 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">=
+ </code><code class=3D"js string">" to table number "</code></div><div cla=
ss=3D"line number30 index29 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain=
">+ context.getTable());</code></div><div class=3D"line number31 index30 al=
t2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><c=
ode class=3D"js plain">};</code></div><div class=3D"line number32 index31 a=
lt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js plain">}</code></div><div class=3D"line number33 index32 alt2">&nbsp=
;</div><div class=3D"line number34 index33 alt1"><code class=3D"js plain">}=
</code></div><div class=3D"line number35 index34 alt2">&nbsp;</div><div cla=
ss=3D"line number36 index35 alt1">&nbsp;</div><div class=3D"line number37 i=
ndex36 alt2"><code class=3D"js comments">// Implement interface for CoffeeO=
rder</code></div><div class=3D"line number38 index37 alt1"><code class=3D"j=
s plain">CoffeeFlavor.implementsFor( CoffeeOrder );</code></div><div class=
=3D"line number39 index38 alt2">&nbsp;</div><div class=3D"line number40 ind=
ex39 alt1">&nbsp;</div><div class=3D"line number41 index40 alt2"><code clas=
s=3D"js comments">// Handle table numbers for a coffee order</code></div><d=
iv class=3D"line number42 index41 alt1"><code class=3D"js keyword">function=
</code> <code class=3D"js plain">CoffeeOrderContext( tableNumber ) {</code>=
</div><div class=3D"line number43 index42 alt2"><code class=3D"js spaces">&=
nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">return</code><code class=
=3D"js plain">{</code></div><div class=3D"line number44 index43 alt1"><code=
 class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js plain">getTable: </code><code class=3D"js keyword">function</code><c=
ode class=3D"js plain">() {</code></div><div class=3D"line number45 index44=
 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;</code><code class=3D"js keyword">return</code> <code class=3D"=
js plain">tableNumber;</code></div><div class=3D"line number46 index45 alt1=
"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code clas=
s=3D"js plain">}</code></div><div class=3D"line number47 index46 alt2"><cod=
e class=3D"js spaces">&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">};<=
/code></div><div class=3D"line number48 index47 alt1"><code class=3D"js pla=
in">}</code></div><div class=3D"line number49 index48 alt2">&nbsp;</div><di=
v class=3D"line number50 index49 alt1">&nbsp;</div><div class=3D"line numbe=
r51 index50 alt2"><code class=3D"js keyword">function</code> <code class=3D=
"js plain">CoffeeFlavorFactory() {</code></div><div class=3D"line number52 =
index51 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><cod=
e class=3D"js keyword">var</code> <code class=3D"js plain">flavors =3D {},<=
/code></div><div class=3D"line number53 index52 alt2"><code class=3D"js spa=
ces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">length =3D 0;<=
/code></div><div class=3D"line number54 index53 alt1">&nbsp;</div><div clas=
s=3D"line number55 index54 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbs=
p;&nbsp;</code><code class=3D"js keyword">return</code> <code class=3D"js p=
lain">{</code></div><div class=3D"line number56 index55 alt1"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code=
 class=3D"js plain">getCoffeeFlavor: </code><code class=3D"js keyword">func=
tion</code> <code class=3D"js plain">(flavorName) {</code></div><div class=
=3D"line number57 index56 alt2">&nbsp;</div><div class=3D"line number58 ind=
ex57 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">var</co=
de> <code class=3D"js plain">flavor =3D flavors[flavorName];</code></div><d=
iv class=3D"line number59 index58 alt2"><code class=3D"js spaces">&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code=
 class=3D"js keyword">if</code> <code class=3D"js plain">(</code><code clas=
s=3D"js keyword">typeof</code> <code class=3D"js plain">flavor =3D=3D=3D </=
code><code class=3D"js string">"undefined"</code><code class=3D"js plain">)=
 {</code></div><div class=3D"line number60 index59 alt1"><code class=3D"js =
spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">flavor =3D </c=
ode><code class=3D"js keyword">new</code> <code class=3D"js plain">CoffeeFl=
avor(flavorName);</code></div><div class=3D"line number61 index60 alt2"><co=
de class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain"=
>flavors[flavorName] =3D flavor;</code></div><div class=3D"line number62 in=
dex61 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code cla=
ss=3D"js plain">length++;</code></div><div class=3D"line number63 index62 a=
lt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">}</code></div><=
div class=3D"line number64 index63 alt1"><code class=3D"js spaces">&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><cod=
e class=3D"js keyword">return</code> <code class=3D"js plain">flavor;</code=
></div><div class=3D"line number65 index64 alt2"><code class=3D"js spaces">=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js pl=
ain">},</code></div><div class=3D"line number66 index65 alt1">&nbsp;</div><=
div class=3D"line number67 index66 alt2"><code class=3D"js spaces">&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">get=
TotalCoffeeFlavorsMade: </code><code class=3D"js keyword">function</code> <=
code class=3D"js plain">() {</code></div><div class=3D"line number68 index6=
7 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">return</co=
de> <code class=3D"js plain">length;</code></div><div class=3D"line number6=
9 index68 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;</code><code class=3D"js plain">}</code></div><div class=3D"=
line number70 index69 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nb=
sp;</code><code class=3D"js plain">};</code></div><div class=3D"line number=
71 index70 alt2"><code class=3D"js plain">}</code></div><div class=3D"line =
number72 index71 alt1">&nbsp;</div><div class=3D"line number73 index72 alt2=
"><code class=3D"js comments">// Sample usage:</code></div><div class=3D"li=
ne number74 index73 alt1"><code class=3D"js comments">// testFlyweight()</c=
ode></div><div class=3D"line number75 index74 alt2">&nbsp;</div><div class=
=3D"line number76 index75 alt1"><code class=3D"js keyword">function</code> =
<code class=3D"js plain">testFlyweight(){</code></div><div class=3D"line nu=
mber77 index76 alt2">&nbsp;</div><div class=3D"line number78 index77 alt1">=
&nbsp;</div><div class=3D"line number79 index78 alt2"><code class=3D"js spa=
ces">&nbsp;&nbsp;</code><code class=3D"js comments">// The flavors ordered.=
</code></div><div class=3D"line number80 index79 alt1"><code class=3D"js sp=
aces">&nbsp;&nbsp;</code><code class=3D"js keyword">var</code> <code class=
=3D"js plain">flavors =3D [],</code></div><div class=3D"line number81 index=
80 alt2">&nbsp;</div><div class=3D"line number82 index81 alt1"><code class=
=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js comments">// The tables=
 for the orders.</code></div><div class=3D"line number83 index82 alt2"><cod=
e class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plai=
n">tables =3D [],</code></div><div class=3D"line number84 index83 alt1">&nb=
sp;</div><div class=3D"line number85 index84 alt2"><code class=3D"js spaces=
">&nbsp;&nbsp;</code><code class=3D"js comments">// Number of orders made</=
code></div><div class=3D"line number86 index85 alt1"><code class=3D"js spac=
es">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">ordersMade =3D =
0,</code></div><div class=3D"line number87 index86 alt2">&nbsp;</div><div c=
lass=3D"line number88 index87 alt1"><code class=3D"js spaces">&nbsp;&nbsp;<=
/code><code class=3D"js comments">// The CoffeeFlavorFactory instance</code=
></div><div class=3D"line number89 index88 alt2"><code class=3D"js spaces">=
&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">flavorFactory =3D <=
/code><code class=3D"js keyword">new</code> <code class=3D"js plain">Coffee=
FlavorFactory();</code></div><div class=3D"line number90 index89 alt1">&nbs=
p;</div><div class=3D"line number91 index90 alt2"><code class=3D"js spaces"=
>&nbsp;&nbsp;</code><code class=3D"js keyword">function</code> <code class=
=3D"js plain">takeOrders( flavorIn, table) {</code></div><div class=3D"line=
 number92 index91 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;</code><code class=3D"js plain">flavors.push( flavorFactory.getCoffeeF=
lavor( flavorIn ) );</code></div><div class=3D"line number93 index92 alt2">=
<code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js plain">tables.push( </code><code class=3D"js keyword">new</code> <co=
de class=3D"js plain">CoffeeOrderContext( table ) );</code></div><div class=
=3D"line number94 index93 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;</code><code class=3D"js plain">ordersMade++;</code></div><div=
 class=3D"line number95 index94 alt2"><code class=3D"js spaces">&nbsp;&nbsp=
;</code><code class=3D"js plain">}</code></div><div class=3D"line number96 =
index95 alt1">&nbsp;</div><div class=3D"line number97 index96 alt2"><code c=
lass=3D"js spaces">&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">takeOr=
ders(</code><code class=3D"js string">"Cappuccino"</code><code class=3D"js =
plain">, 2);</code></div><div class=3D"line number98 index97 alt1"><code cl=
ass=3D"js spaces">&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">takeOrd=
ers(</code><code class=3D"js string">"Cappuccino"</code><code class=3D"js p=
lain">, 2);</code></div><div class=3D"line number99 index98 alt2"><code cla=
ss=3D"js spaces">&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">takeOrde=
rs(</code><code class=3D"js string">"Frappe"</code><code class=3D"js plain"=
>, 1);</code></div><div class=3D"line number100 index99 alt1"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">takeOrders=
(</code><code class=3D"js string">"Frappe"</code><code class=3D"js plain">,=
 1);</code></div><div class=3D"line number101 index100 alt2"><code class=3D=
"js spaces">&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">takeOrders(</=
code><code class=3D"js string">"Xpresso"</code><code class=3D"js plain">, 1=
);</code></div><div class=3D"line number102 index101 alt1"><code class=3D"j=
s spaces">&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">takeOrders(</co=
de><code class=3D"js string">"Frappe"</code><code class=3D"js plain">, 897)=
;</code></div><div class=3D"line number103 index102 alt2"><code class=3D"js=
 spaces">&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">takeOrders(</cod=
e><code class=3D"js string">"Cappuccino"</code><code class=3D"js plain">, 9=
7);</code></div><div class=3D"line number104 index103 alt1"><code class=3D"=
js spaces">&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">takeOrders(</c=
ode><code class=3D"js string">"Cappuccino"</code><code class=3D"js plain">,=
 97);</code></div><div class=3D"line number105 index104 alt2"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">takeOrders=
(</code><code class=3D"js string">"Frappe"</code><code class=3D"js plain">,=
 3);</code></div><div class=3D"line number106 index105 alt1"><code class=3D=
"js spaces">&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">takeOrders(</=
code><code class=3D"js string">"Xpresso"</code><code class=3D"js plain">, 3=
);</code></div><div class=3D"line number107 index106 alt2"><code class=3D"j=
s spaces">&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">takeOrders(</co=
de><code class=3D"js string">"Cappuccino"</code><code class=3D"js plain">, =
3);</code></div><div class=3D"line number108 index107 alt1"><code class=3D"=
js spaces">&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">takeOrders(</c=
ode><code class=3D"js string">"Xpresso"</code><code class=3D"js plain">, 96=
);</code></div><div class=3D"line number109 index108 alt2"><code class=3D"j=
s spaces">&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">takeOrders(</co=
de><code class=3D"js string">"Frappe"</code><code class=3D"js plain">, 552)=
;</code></div><div class=3D"line number110 index109 alt1"><code class=3D"js=
 spaces">&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">takeOrders(</cod=
e><code class=3D"js string">"Cappuccino"</code><code class=3D"js plain">, 1=
21);</code></div><div class=3D"line number111 index110 alt2"><code class=3D=
"js spaces">&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">takeOrders(</=
code><code class=3D"js string">"Xpresso"</code><code class=3D"js plain">, 1=
21);</code></div><div class=3D"line number112 index111 alt1">&nbsp;</div><d=
iv class=3D"line number113 index112 alt2"><code class=3D"js spaces">&nbsp;&=
nbsp;&nbsp;</code><code class=3D"js keyword">for</code> <code class=3D"js p=
lain">(</code><code class=3D"js keyword">var</code> <code class=3D"js plain=
">i =3D 0; i &lt; ordersMade; ++i) {</code></div><div class=3D"line number1=
14 index113 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;</code><code class=3D"js plain">flavors[i].serveCoffee(tables[i]=
);</code></div><div class=3D"line number115 index114 alt2"><code class=3D"j=
s spaces">&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">}</code></div><=
div class=3D"line number116 index115 alt1"><code class=3D"js spaces">&nbsp;=
&nbsp;&nbsp;</code><code class=3D"js plain">console.log(</code><code class=
=3D"js string">" "</code><code class=3D"js plain">);</code></div><div class=
=3D"line number117 index116 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nb=
sp;</code><code class=3D"js plain">console.log(</code><code class=3D"js str=
ing">"total CoffeeFlavor objects made: "</code> <code class=3D"js plain">+ =
flavorFactory.getTotalCoffeeFlavorsMade());</code></div><div class=3D"line =
number118 index117 alt1"><code class=3D"js plain">}</code></div></div></td>=
</tr></tbody></table></div></div>

<h2>Converting code to use the Flyweight pattern</h2>

<p>
Next, let's continue our look at Flyweights by implementing a system to man=
age all of the books in a library. The important meta-data for each book co=
uld probably be broken down as follows:</p>
<ul>
<li>ID</li>
<li>Title</li>
<li>Author</li>
<li>Genre</li>
<li>Page count</li>
<li>Publisher ID</li>
<li>ISBN</li>
</ul>
<p>
We'll also require the following properties to keep track of which member h=
as checked out a particular book, the date they've checked it out on as wel=
l as the expected date of return.
</p>
<ul>
<li>checkoutDate</li>
<li>checkoutMember</li>
<li>dueReturnDate</li>
<li>availability</li>
</ul>
<p>
Each book would thus be represented as follows, prior to any optimization u=
sing the Flyweight pattern:
</p>
<div><div id=3D"highlighter_234419" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</=
div><div class=3D"line number19 index18 alt2">19</div><div class=3D"line nu=
mber20 index19 alt1">20</div><div class=3D"line number21 index20 alt2">21</=
div><div class=3D"line number22 index21 alt1">22</div><div class=3D"line nu=
mber23 index22 alt2">23</div><div class=3D"line number24 index23 alt1">24</=
div><div class=3D"line number25 index24 alt2">25</div><div class=3D"line nu=
mber26 index25 alt1">26</div><div class=3D"line number27 index26 alt2">27</=
div><div class=3D"line number28 index27 alt1">28</div><div class=3D"line nu=
mber29 index28 alt2">29</div><div class=3D"line number30 index29 alt1">30</=
div><div class=3D"line number31 index30 alt2">31</div><div class=3D"line nu=
mber32 index31 alt1">32</div><div class=3D"line number33 index32 alt2">33</=
div><div class=3D"line number34 index33 alt1">34</div><div class=3D"line nu=
mber35 index34 alt2">35</div><div class=3D"line number36 index35 alt1">36</=
div><div class=3D"line number37 index36 alt2">37</div><div class=3D"line nu=
mber38 index37 alt1">38</div><div class=3D"line number39 index38 alt2">39</=
div><div class=3D"line number40 index39 alt1">40</div><div class=3D"line nu=
mber41 index40 alt2">41</div><div class=3D"line number42 index41 alt1">42</=
div><div class=3D"line number43 index42 alt2">43</div><div class=3D"line nu=
mber44 index43 alt1">44</div><div class=3D"line number45 index44 alt2">45</=
div><div class=3D"line number46 index45 alt1">46</div><div class=3D"line nu=
mber47 index46 alt2">47</div><div class=3D"line number48 index47 alt1">48</=
div><div class=3D"line number49 index48 alt2">49</div><div class=3D"line nu=
mber50 index49 alt1">50</div><div class=3D"line number51 index50 alt2">51</=
div><div class=3D"line number52 index51 alt1">52</div><div class=3D"line nu=
mber53 index52 alt2">53</div><div class=3D"line number54 index53 alt1">54</=
div><div class=3D"line number55 index54 alt2">55</div></td><td class=3D"cod=
e"><div class=3D"container"><div class=3D"line number1 index0 alt2"><code c=
lass=3D"js keyword">var</code> <code class=3D"js plain">Book =3D </code><co=
de class=3D"js keyword">function</code><code class=3D"js plain">( id, title=
, author, genre, pageCount,publisherID, ISBN, checkoutDate, checkoutMember,=
 dueReturnDate,availability ){</code></div><div class=3D"line number2 index=
1 alt1">&nbsp;</div><div class=3D"line number3 index2 alt2"><code class=3D"=
js spaces">&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">this</code><=
code class=3D"js plain">.id =3D id;</code></div><div class=3D"line number4 =
index3 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js keyword">this</code><code class=3D"js plain">.title =3D title;</code=
></div><div class=3D"line number5 index4 alt2"><code class=3D"js spaces">&n=
bsp;&nbsp;&nbsp;</code><code class=3D"js keyword">this</code><code class=3D=
"js plain">.author =3D author;</code></div><div class=3D"line number6 index=
5 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;</code><code class=3D"j=
s keyword">this</code><code class=3D"js plain">.genre =3D genre;</code></di=
v><div class=3D"line number7 index6 alt2"><code class=3D"js spaces">&nbsp;&=
nbsp;&nbsp;</code><code class=3D"js keyword">this</code><code class=3D"js p=
lain">.pageCount =3D pageCount;</code></div><div class=3D"line number8 inde=
x7 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;</code><code class=3D"=
js keyword">this</code><code class=3D"js plain">.publisherID =3D publisherI=
D;</code></div><div class=3D"line number9 index8 alt2"><code class=3D"js sp=
aces">&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">this</code><code =
class=3D"js plain">.ISBN =3D ISBN;</code></div><div class=3D"line number10 =
index9 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js keyword">this</code><code class=3D"js plain">.checkoutDate =3D check=
outDate;</code></div><div class=3D"line number11 index10 alt2"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">this</co=
de><code class=3D"js plain">.checkoutMember =3D checkoutMember;</code></div=
><div class=3D"line number12 index11 alt1"><code class=3D"js spaces">&nbsp;=
&nbsp;&nbsp;</code><code class=3D"js keyword">this</code><code class=3D"js =
plain">.dueReturnDate =3D dueReturnDate;</code></div><div class=3D"line num=
ber13 index12 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;</code><cod=
e class=3D"js keyword">this</code><code class=3D"js plain">.availability =
=3D availability;</code></div><div class=3D"line number14 index13 alt1">&nb=
sp;</div><div class=3D"line number15 index14 alt2"><code class=3D"js plain"=
>};</code></div><div class=3D"line number16 index15 alt1">&nbsp;</div><div =
class=3D"line number17 index16 alt2"><code class=3D"js plain">Book.prototyp=
e =3D {</code></div><div class=3D"line number18 index17 alt1">&nbsp;</div><=
div class=3D"line number19 index18 alt2"><code class=3D"js spaces">&nbsp;&n=
bsp;</code><code class=3D"js plain">getTitle: </code><code class=3D"js keyw=
ord">function</code> <code class=3D"js plain">() {</code></div><div class=
=3D"line number20 index19 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;</code><code class=3D"js keyword">return</code> <code class=3D=
"js keyword">this</code><code class=3D"js plain">.title;</code></div><div c=
lass=3D"line number21 index20 alt2"><code class=3D"js spaces">&nbsp;&nbsp;<=
/code><code class=3D"js plain">},</code></div><div class=3D"line number22 i=
ndex21 alt1">&nbsp;</div><div class=3D"line number23 index22 alt2"><code cl=
ass=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js plain">getAuthor: </=
code><code class=3D"js keyword">function</code> <code class=3D"js plain">()=
 {</code></div><div class=3D"line number24 index23 alt1"><code class=3D"js =
spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">ret=
urn</code> <code class=3D"js keyword">this</code><code class=3D"js plain">.=
author;</code></div><div class=3D"line number25 index24 alt2"><code class=
=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js plain">},</code></div><=
div class=3D"line number26 index25 alt1">&nbsp;</div><div class=3D"line num=
ber27 index26 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code clas=
s=3D"js plain">getISBN: </code><code class=3D"js keyword">function</code> <=
code class=3D"js plain">(){</code></div><div class=3D"line number28 index27=
 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code=
 class=3D"js keyword">return</code> <code class=3D"js keyword">this</code><=
code class=3D"js plain">.ISBN;</code></div><div class=3D"line number29 inde=
x28 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js pl=
ain">},</code></div><div class=3D"line number30 index29 alt1">&nbsp;</div><=
div class=3D"line number31 index30 alt2"><code class=3D"js spaces">&nbsp;&n=
bsp;</code><code class=3D"js comments">// For brevity, other getters are no=
t shown</code></div><div class=3D"line number32 index31 alt1"><code class=
=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js plain">updateCheckoutSt=
atus: </code><code class=3D"js keyword">function</code><code class=3D"js pl=
ain">( bookID, newStatus, checkoutDate, checkoutMember, newReturnDate ){</c=
ode></div><div class=3D"line number33 index32 alt2">&nbsp;</div><div class=
=3D"line number34 index33 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;</code><code class=3D"js keyword">this</code><code class=3D"js=
 plain">.id =3D bookID;</code></div><div class=3D"line number35 index34 alt=
2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code cla=
ss=3D"js keyword">this</code><code class=3D"js plain">.availability =3D new=
Status;</code></div><div class=3D"line number36 index35 alt1"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keywo=
rd">this</code><code class=3D"js plain">.checkoutDate =3D checkoutDate;</co=
de></div><div class=3D"line number37 index36 alt2"><code class=3D"js spaces=
">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">this</cod=
e><code class=3D"js plain">.checkoutMember =3D checkoutMember;</code></div>=
<div class=3D"line number38 index37 alt1"><code class=3D"js spaces">&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">this</code><code c=
lass=3D"js plain">.dueReturnDate =3D newReturnDate;</code></div><div class=
=3D"line number39 index38 alt2">&nbsp;</div><div class=3D"line number40 ind=
ex39 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js p=
lain">},</code></div><div class=3D"line number41 index40 alt2">&nbsp;</div>=
<div class=3D"line number42 index41 alt1"><code class=3D"js spaces">&nbsp;&=
nbsp;</code><code class=3D"js plain">extendCheckoutPeriod: </code><code cla=
ss=3D"js keyword">function</code><code class=3D"js plain">( bookID, newRetu=
rnDate ){</code></div><div class=3D"line number43 index42 alt2">&nbsp;</div=
><div class=3D"line number44 index43 alt1"><code class=3D"js spaces">&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">this</code>=
<code class=3D"js plain">.id =3D bookID;</code></div><div class=3D"line num=
ber45 index44 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;</code><code class=3D"js keyword">this</code><code class=3D"js plain=
">.dueReturnDate =3D newReturnDate;</code></div><div class=3D"line number46=
 index45 alt1">&nbsp;</div><div class=3D"line number47 index46 alt2"><code =
class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js plain">},</code></=
div><div class=3D"line number48 index47 alt1">&nbsp;</div><div class=3D"lin=
e number49 index48 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code=
 class=3D"js plain">isPastDue: </code><code class=3D"js keyword">function</=
code><code class=3D"js plain">(bookID){</code></div><div class=3D"line numb=
er50 index49 alt1">&nbsp;</div><div class=3D"line number51 index50 alt2"><c=
ode class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D=
"js keyword">var</code> <code class=3D"js plain">currentDate =3D </code><co=
de class=3D"js keyword">new</code> <code class=3D"js plain">Date();</code><=
/div><div class=3D"line number52 index51 alt1"><code class=3D"js spaces">&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">return</code>=
 <code class=3D"js plain">currentDate.getTime() &gt; Date.parse( </code><co=
de class=3D"js keyword">this</code><code class=3D"js plain">.dueReturnDate =
);</code></div><div class=3D"line number53 index52 alt2">&nbsp;</div><div c=
lass=3D"line number54 index53 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&=
nbsp;</code><code class=3D"js plain">}</code></div><div class=3D"line numbe=
r55 index54 alt2"><code class=3D"js plain">};</code></div></div></td></tr><=
/tbody></table></div></div>

<p>
This probably works fine initially for small collections of books, however =
as the library expands to include a larger inventory with multiple versions=
 and copies of each book available, we may find the management system runni=
ng slower and slower over time. Using thousands of book objects may overwhe=
lm the available memory, but we can optimize our system using the Flyweight=
 pattern to improve this.</p>
<p>
We can now separate our data into intrinsic and extrinsic states as follows=
: data relevant to the book object (<code>title</code>, <code>author</code>=
 etc) is intrinsic whilst the checkout data (<code>checkoutMember</code>, <=
code>dueReturnDate</code> etc) is considered extrinsic. Effectively this me=
ans that only one Book object is required for each combination of book prop=
erties. it's still a considerable quantity of objects, but significantly fe=
wer than we had previously.
</p>

<p>
The following single instance of our book meta-data combinations will be sh=
ared among all of the copies of a book with a particular title.
</p>

<div><div id=3D"highlighter_707265" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div></td><td class=3D"code"><div class=3D"containe=
r"><div class=3D"line number1 index0 alt2"><code class=3D"js comments">// F=
lyweight optimized version</code></div><div class=3D"line number2 index1 al=
t1"><code class=3D"js keyword">var</code> <code class=3D"js plain">Book =3D=
 </code><code class=3D"js keyword">function</code> <code class=3D"js plain"=
>( title, author, genre, pageCount, publisherID, ISBN ) {</code></div><div =
class=3D"line number3 index2 alt2">&nbsp;</div><div class=3D"line number4 i=
ndex3 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code =
class=3D"js keyword">this</code><code class=3D"js plain">.title =3D title;<=
/code></div><div class=3D"line number5 index4 alt2"><code class=3D"js space=
s">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">this</code><co=
de class=3D"js plain">.author =3D author;</code></div><div class=3D"line nu=
mber6 index5 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code=
><code class=3D"js keyword">this</code><code class=3D"js plain">.genre =3D =
genre;</code></div><div class=3D"line number7 index6 alt2"><code class=3D"j=
s spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">this</c=
ode><code class=3D"js plain">.pageCount =3D pageCount;</code></div><div cla=
ss=3D"line number8 index7 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp=
;&nbsp;</code><code class=3D"js keyword">this</code><code class=3D"js plain=
">.publisherID =3D publisherID;</code></div><div class=3D"line number9 inde=
x8 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code cla=
ss=3D"js keyword">this</code><code class=3D"js plain">.ISBN =3D ISBN;</code=
></div><div class=3D"line number10 index9 alt1">&nbsp;</div><div class=3D"l=
ine number11 index10 alt2"><code class=3D"js plain">};</code></div></div></=
td></tr></tbody></table></div></div>

<p>
As we can see, the extrinsic states have been removed. Everything to do wit=
h library check-outs will be moved to a manager and as the object data is n=
ow segmented, a factory can be used for instantiation.
</p>

<h2>A Basic Factory</h2>

<p>
Let's now define a very basic factory. What we're going to have it do is pe=
rform a check to see if a book with a particular title has been previously =
created inside the system; if it has, we'll return it - if not, a new book =
will be created and stored so that it can be accessed later. This makes sur=
e that we only create a single copy of each unique intrinsic piece of data:
</p>

<div><div id=3D"highlighter_93125" class=3D"syntaxhighlighter  js acodecode=
"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources/=
essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help">=
?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0"><=
tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</d=
iv><div class=3D"line number2 index1 alt1">2</div><div class=3D"line number=
3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div c=
lass=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5 =
alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"l=
ine number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9</=
div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line num=
ber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</d=
iv><div class=3D"line number13 index12 alt2">13</div><div class=3D"line num=
ber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</d=
iv><div class=3D"line number16 index15 alt1">16</div><div class=3D"line num=
ber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</d=
iv><div class=3D"line number19 index18 alt2">19</div><div class=3D"line num=
ber20 index19 alt1">20</div><div class=3D"line number21 index20 alt2">21</d=
iv><div class=3D"line number22 index21 alt1">22</div><div class=3D"line num=
ber23 index22 alt2">23</div><div class=3D"line number24 index23 alt1">24</d=
iv></td><td class=3D"code"><div class=3D"container"><div class=3D"line numb=
er1 index0 alt2"><code class=3D"js comments">// Book Factory singleton</cod=
e></div><div class=3D"line number2 index1 alt1"><code class=3D"js keyword">=
var</code> <code class=3D"js plain">BookFactory =3D (</code><code class=3D"=
js keyword">function</code> <code class=3D"js plain">() {</code></div><div =
class=3D"line number3 index2 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</=
code><code class=3D"js keyword">var</code> <code class=3D"js plain">existin=
gBooks =3D {}, existingBook;</code></div><div class=3D"line number4 index3 =
alt1">&nbsp;</div><div class=3D"line number5 index4 alt2"><code class=3D"js=
 spaces">&nbsp;&nbsp;</code><code class=3D"js keyword">return</code> <code =
class=3D"js plain">{</code></div><div class=3D"line number6 index5 alt1"><c=
ode class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js pl=
ain">createBook: </code><code class=3D"js keyword">function</code> <code cl=
ass=3D"js plain">( title, author, genre, pageCount, publisherID, ISBN ) {</=
code></div><div class=3D"line number7 index6 alt2">&nbsp;</div><div class=
=3D"line number8 index7 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// Find out if a partic=
ular book meta-data combination has been created before</code></div><div cl=
ass=3D"line number9 index8 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// !! or (bang bang)=
 forces a boolean to be returned</code></div><div class=3D"line number10 in=
dex9 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</=
code><code class=3D"js plain">existingBook =3D existingBooks[ISBN];</code><=
/div><div class=3D"line number11 index10 alt2"><code class=3D"js spaces">&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">if</cod=
e> <code class=3D"js plain">( !!existingBook ) {</code></div><div class=3D"=
line number12 index11 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">return</code> =
<code class=3D"js plain">existingBook;</code></div><div class=3D"line numbe=
r13 index12 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;</code><code class=3D"js plain">} </code><code class=3D"js keyword">el=
se</code> <code class=3D"js plain">{</code></div><div class=3D"line number1=
4 index13 alt1">&nbsp;</div><div class=3D"line number15 index14 alt2"><code=
 class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code=
><code class=3D"js comments">// if not, let's create a new instance of the =
book and store it</code></div><div class=3D"line number16 index15 alt1"><co=
de class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</co=
de><code class=3D"js keyword">var</code> <code class=3D"js plain">book =3D =
</code><code class=3D"js keyword">new</code> <code class=3D"js plain">Book(=
 title, author, genre, pageCount, publisherID, ISBN );</code></div><div cla=
ss=3D"line number17 index16 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">existingBo=
oks[ISBN] =3D book;</code></div><div class=3D"line number18 index17 alt1"><=
code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</=
code><code class=3D"js keyword">return</code> <code class=3D"js plain">book=
;</code></div><div class=3D"line number19 index18 alt2">&nbsp;</div><div cl=
ass=3D"line number20 index19 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">}</code></div><div cl=
ass=3D"line number21 index20 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&n=
bsp;&nbsp;</code><code class=3D"js plain">}</code></div><div class=3D"line =
number22 index21 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><code c=
lass=3D"js plain">};</code></div><div class=3D"line number23 index22 alt2">=
&nbsp;</div><div class=3D"line number24 index23 alt1"><code class=3D"js pla=
in">})();</code></div></div></td></tr></tbody></table></div></div>


<h2>Managing the extrinsic states</h2>

<p>
Next, we need to store the states that were removed from the Book objects s=
omewhere - luckily a manager (which we'll be defining as a Singleton) can b=
e used to encapsulate them. Combinations of a Book object and the library m=
ember that's checked them out will be called Book records. Our manager will=
 be storing both and will also include checkout related logic we stripped o=
ut during our flyweight optimization of the Book class.
</p>

<div><div id=3D"highlighter_537006" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</=
div><div class=3D"line number19 index18 alt2">19</div><div class=3D"line nu=
mber20 index19 alt1">20</div><div class=3D"line number21 index20 alt2">21</=
div><div class=3D"line number22 index21 alt1">22</div><div class=3D"line nu=
mber23 index22 alt2">23</div><div class=3D"line number24 index23 alt1">24</=
div><div class=3D"line number25 index24 alt2">25</div><div class=3D"line nu=
mber26 index25 alt1">26</div><div class=3D"line number27 index26 alt2">27</=
div><div class=3D"line number28 index27 alt1">28</div><div class=3D"line nu=
mber29 index28 alt2">29</div><div class=3D"line number30 index29 alt1">30</=
div><div class=3D"line number31 index30 alt2">31</div><div class=3D"line nu=
mber32 index31 alt1">32</div><div class=3D"line number33 index32 alt2">33</=
div><div class=3D"line number34 index33 alt1">34</div><div class=3D"line nu=
mber35 index34 alt2">35</div><div class=3D"line number36 index35 alt1">36</=
div><div class=3D"line number37 index36 alt2">37</div><div class=3D"line nu=
mber38 index37 alt1">38</div><div class=3D"line number39 index38 alt2">39</=
div></td><td class=3D"code"><div class=3D"container"><div class=3D"line num=
ber1 index0 alt2"><code class=3D"js comments">// BookRecordManager singleto=
n</code></div><div class=3D"line number2 index1 alt1"><code class=3D"js key=
word">var</code> <code class=3D"js plain">BookRecordManager =3D (</code><co=
de class=3D"js keyword">function</code> <code class=3D"js plain">() {</code=
></div><div class=3D"line number3 index2 alt2">&nbsp;</div><div class=3D"li=
ne number4 index3 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><code =
class=3D"js keyword">var</code> <code class=3D"js plain">bookRecordDatabase=
 =3D {};</code></div><div class=3D"line number5 index4 alt2">&nbsp;</div><d=
iv class=3D"line number6 index5 alt1"><code class=3D"js spaces">&nbsp;&nbsp=
;</code><code class=3D"js keyword">return</code> <code class=3D"js plain">{=
</code></div><div class=3D"line number7 index6 alt2"><code class=3D"js spac=
es">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// add a new=
 book into the library system</code></div><div class=3D"line number8 index7=
 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js plain">addBookRecord: </code><code class=3D"js keyword">function</co=
de> <code class=3D"js plain">( id, title, author, genre, pageCount, publish=
erID, ISBN, checkoutDate, checkoutMember, dueReturnDate, availability ) {</=
code></div><div class=3D"line number9 index8 alt2">&nbsp;</div><div class=
=3D"line number10 index9 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">var</code> <code class=
=3D"js plain">book =3D BookFactory.createBook( title, author, genre, pageCo=
unt, publisherID, ISBN );</code></div><div class=3D"line number11 index10 a=
lt2">&nbsp;</div><div class=3D"line number12 index11 alt1"><code class=3D"j=
s spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plai=
n">bookRecordDatabase[id] =3D {</code></div><div class=3D"line number13 ind=
ex12 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;</code><code class=3D"js plain">checkoutMember: checkoutMember,</=
code></div><div class=3D"line number14 index13 alt1"><code class=3D"js spac=
es">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"j=
s plain">checkoutDate: checkoutDate,</code></div><div class=3D"line number1=
5 index14 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;</code><code class=3D"js plain">dueReturnDate: dueReturnDate=
,</code></div><div class=3D"line number16 index15 alt1"><code class=3D"js s=
paces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js plain">availability: availability,</code></div><div class=3D"line nu=
mber17 index16 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">book: book</code></div>=
<div class=3D"line number18 index17 alt1"><code class=3D"js spaces">&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">};</code></div=
><div class=3D"line number19 index18 alt2"><code class=3D"js spaces">&nbsp;=
&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">},</code></div><div class=
=3D"line number20 index19 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp=
;&nbsp;</code><code class=3D"js plain">updateCheckoutStatus: </code><code c=
lass=3D"js keyword">function</code> <code class=3D"js plain">( bookID, newS=
tatus, checkoutDate, checkoutMember, newReturnDate ) {</code></div><div cla=
ss=3D"line number21 index20 alt2">&nbsp;</div><div class=3D"line number22 i=
ndex21 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
</code><code class=3D"js keyword">var</code> <code class=3D"js plain">recor=
d =3D bookRecordDatabase[bookID];</code></div><div class=3D"line number23 i=
ndex22 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
</code><code class=3D"js plain">record.availability =3D newStatus;</code></=
div><div class=3D"line number24 index23 alt1"><code class=3D"js spaces">&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">record.che=
ckoutDate =3D checkoutDate;</code></div><div class=3D"line number25 index24=
 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code=
><code class=3D"js plain">record.checkoutMember =3D checkoutMember;</code><=
/div><div class=3D"line number26 index25 alt1"><code class=3D"js spaces">&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">record.du=
eReturnDate =3D newReturnDate;</code></div><div class=3D"line number27 inde=
x26 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code cl=
ass=3D"js plain">},</code></div><div class=3D"line number28 index27 alt1">&=
nbsp;</div><div class=3D"line number29 index28 alt2"><code class=3D"js spac=
es">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">extendCheckoutP=
eriod: </code><code class=3D"js keyword">function</code> <code class=3D"js =
plain">( bookID, newReturnDate ) {</code></div><div class=3D"line number30 =
index29 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;</code><code class=3D"js plain">bookRecordDatabase[bookID].dueReturnDate =
=3D newReturnDate;</code></div><div class=3D"line number31 index30 alt2"><c=
ode class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js pl=
ain">},</code></div><div class=3D"line number32 index31 alt1">&nbsp;</div><=
div class=3D"line number33 index32 alt2"><code class=3D"js spaces">&nbsp;&n=
bsp;&nbsp;&nbsp;</code><code class=3D"js plain">isPastDue: </code><code cla=
ss=3D"js keyword">function</code> <code class=3D"js plain">( bookID ) {</co=
de></div><div class=3D"line number34 index33 alt1"><code class=3D"js spaces=
">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">var=
</code> <code class=3D"js plain">currentDate =3D </code><code class=3D"js k=
eyword">new</code> <code class=3D"js plain">Date();</code></div><div class=
=3D"line number35 index34 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">return</code> <code cl=
ass=3D"js plain">currentDate.getTime() &gt; Date.parse( bookRecordDatabase[=
bookID].dueReturnDate );</code></div><div class=3D"line number36 index35 al=
t1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D=
"js plain">}</code></div><div class=3D"line number37 index36 alt2"><code cl=
ass=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js plain">};</code></di=
v><div class=3D"line number38 index37 alt1">&nbsp;</div><div class=3D"line =
number39 index38 alt2"><code class=3D"js plain">})();</code></div></div></t=
d></tr></tbody></table></div></div>


<p>
The result of these changes is that all of the data that's been extracted f=
rom the Book <em>class</em> is now being stored in an attribute of the Book=
Manager singleton (BookDatabase) - something considerably more efficient th=
an the large number of objects we were previously using. Methods related to=
 book checkouts are also now based here as they deal with data that's extri=
nsic rather than intrinsic.</p>

<p>
This process does add a little complexity to our final solution, however it=
's a small concern when compared to the performance issues that have been t=
ackled. Data wise, if we have 30 copies of the same book, we are now only s=
toring it once. Also, every function takes up memory. With the flyweight pa=
ttern these functions exist in one place (on the manager) and not on every =
object, thus saving on memory use. For the above-mentioned flyweight unopti=
mized version we store just link to the function object as we used Book con=
structor's prototype but if it was implemented in other way, functions woul=
d be created for every book instance.</p>

<p></p>




<h2>The Flyweight pattern and the DOM</h2>

<p>The DOM (Document Object Model) supports two approaches that allow objec=
ts to detect events - either top down (event capture) or bottom up (event b=
ubbling).</p>

<p>In event capture, the event is first captured by the outer-most element =
and propagated to the inner-most element. In event bubbling, the event is c=
aptured and given to the inner-most element and then propagated to the oute=
r-elements.</p>


<p>One of the best metaphors for describing Flyweights in this context was =
written by Gary Chisholm and it goes a little like this:</p>

<p></p><blockquote>Try to think of the flyweight in terms of a pond. A fish=
 opens its mouth (the event), bubbles rise to the surface (the bubbling) a =
fly sitting on the top flies away when the bubble reaches the surface (the =
action). In this example we can easily transpose the fish opening its mouth=
 to a button being clicked, the bubbles as the bubbling effect and the fly =
flying away to some function being run</blockquote><p></p>

<p>Bubbling was introduced to handle situations where a single event (e.g a=
 click) may be handled by multiple event handlers defined at different leve=
ls of the DOM hierarchy. Where this happens, event bubbling executes event =
handlers defined for specific elements at the lowest level possible. From t=
here on, the event bubbles up to containing elements before going to those =
even higher up.</p>

<p>Flyweights can be used to tweak the event bubbling process further, as w=
e will see shortly. </p>

<h3>Example 1: Centralized event handling</h3>
<p>
For our first practical example, imagine we have a number of similar elemen=
ts in a document with similar behavior executed when a user-action (e.g cli=
ck, mouse-over) is performed against them.
</p>
<p>
Normally what we do when constructing our own accordion component, menu or =
other list-based widget is bind a click event to each link element in the p=
arent container (e.g <code>$('ul li a').on(..)</code>. Instead of binding t=
he click to multiple elements, we can easily attach a Flyweight to the top =
of our container which can listen for events coming from below. These can t=
hen be handled using logic that is as simple or complex as required.
</p>
<p>
As the types of components mentioned often have the same repeating markup f=
or each section (e.g. each section of an accordion), there's a good chance =
the behavior of each element that may be clicked is going to be quite simil=
ar and relative to similar classes nearby. We'll use this information to co=
nstruct a very basic accordion using the Flyweight below.
</p>
<p>
A stateManager namespace is used here to encapsulate our flyweight logic wh=
ilst jQuery is used to bind the initial click to a container div. In order =
to ensure that no other logic on the page is attaching similar handles to t=
he container, an unbind event is first applied.
</p>
<p>
Now to establish exactly what child element in the container is clicked, we=
 make use of a <code>target</code> check which provides a reference to the =
element that was clicked, regardless of its parent. We then use this inform=
ation to handle the click event without actually needing to bind the event =
to specific children when our page loads.
</p>

<strong>HTML</strong>
<div><div id=3D"highlighter_398835" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div></td><td class=3D"code"><div class=3D"containe=
r"><div class=3D"line number1 index0 alt2"><code class=3D"js plain">&lt;div=
 id=3D</code><code class=3D"js string">"container"</code><code class=3D"js =
plain">&gt;</code></div><div class=3D"line number2 index1 alt1"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">&lt;div </=
code><code class=3D"js keyword">class</code><code class=3D"js plain">=3D</c=
ode><code class=3D"js string">"toggle"</code> <code class=3D"js plain">href=
=3D</code><code class=3D"js string">"#"</code><code class=3D"js plain">&gt;=
More Info (Address)</code></div><div class=3D"line number3 index2 alt2"><co=
de class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><co=
de class=3D"js plain">&lt;span </code><code class=3D"js keyword">class</cod=
e><code class=3D"js plain">=3D</code><code class=3D"js string">"info"</code=
><code class=3D"js plain">&gt;</code></div><div class=3D"line number4 index=
3 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">This is more infor=
mation</code></div><div class=3D"line number5 index4 alt2"><code class=3D"j=
s spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"j=
s plain">&lt;/span&gt;&lt;/div&gt;</code></div><div class=3D"line number6 i=
ndex5 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js plain">&lt;div </code><code class=3D"js keyword">class</code><code c=
lass=3D"js plain">=3D</code><code class=3D"js string">"toggle"</code> <code=
 class=3D"js plain">href=3D</code><code class=3D"js string">"#"</code><code=
 class=3D"js plain">&gt;Even More Info (Map)</code></div><div class=3D"line=
 number7 index6 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;</code><code class=3D"js plain">&lt;span </code><code class=
=3D"js keyword">class</code><code class=3D"js plain">=3D</code><code class=
=3D"js string">"info"</code><code class=3D"js plain">&gt;</code></div><div =
class=3D"line number8 index7 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plai=
n">&lt;iframe src=3D</code><code class=3D"js string">"<a href=3D"http://www=
.map-generator.net/extmap.php?name=3DLondon&amp;amp;address=3Dlondon%2C%20e=
ngland&amp;amp;width=3D500...gt;">http://www.map-generator.net/extmap.php?n=
ame=3DLondon&amp;amp;address=3Dlondon%2C%20england&amp;amp;width=3D500...gt=
;</a>"</code><code class=3D"js plain">&lt;/iframe&gt;</code></div><div clas=
s=3D"line number9 index8 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">&lt;/span&gt;</code=
></div><div class=3D"line number10 index9 alt1"><code class=3D"js spaces">&=
nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">&lt;/div&gt;</code></div><=
div class=3D"line number11 index10 alt2"><code class=3D"js plain">&lt;/div&=
gt;</code></div></div></td></tr></tbody></table></div></div>

<strong>JavaScript</strong>

<div><div id=3D"highlighter_77737" class=3D"syntaxhighlighter  js acodecode=
"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources/=
essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help">=
?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0"><=
tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</d=
iv><div class=3D"line number2 index1 alt1">2</div><div class=3D"line number=
3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div c=
lass=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5 =
alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"l=
ine number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9</=
div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line num=
ber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</d=
iv><div class=3D"line number13 index12 alt2">13</div><div class=3D"line num=
ber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</d=
iv><div class=3D"line number16 index15 alt1">16</div><div class=3D"line num=
ber17 index16 alt2">17</div></td><td class=3D"code"><div class=3D"container=
"><div class=3D"line number1 index0 alt2"><code class=3D"js keyword">var</c=
ode> <code class=3D"js plain">stateManager =3D {</code></div><div class=3D"=
line number2 index1 alt1">&nbsp;</div><div class=3D"line number3 index2 alt=
2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js plain">fl=
y: </code><code class=3D"js keyword">function</code> <code class=3D"js plai=
n">() {</code></div><div class=3D"line number4 index3 alt1">&nbsp;</div><di=
v class=3D"line number5 index4 alt2"><code class=3D"js spaces">&nbsp;&nbsp;=
&nbsp;&nbsp;</code><code class=3D"js keyword">var</code> <code class=3D"js =
plain">self =3D </code><code class=3D"js keyword">this</code><code class=3D=
"js plain">;</code></div><div class=3D"line number6 index5 alt1">&nbsp;</di=
v><div class=3D"line number7 index6 alt2"><code class=3D"js spaces">&nbsp;&=
nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">$( </code><code class=3D"j=
s string">"#container"</code> <code class=3D"js plain">)</code></div><div c=
lass=3D"line number8 index7 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain=
">.unbind()</code></div><div class=3D"line number9 index8 alt2"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
</code><code class=3D"js plain">.on( </code><code class=3D"js string">"clic=
k"</code><code class=3D"js plain">, </code><code class=3D"js string">"div.t=
oggle"</code><code class=3D"js plain">, </code><code class=3D"js keyword">f=
unction</code> <code class=3D"js plain">( e ) {</code></div><div class=3D"l=
ine number10 index9 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js p=
lain">self.handleClick( e.target );</code></div><div class=3D"line number11=
 index10 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">});</code></div><=
div class=3D"line number12 index11 alt1"><code class=3D"js spaces">&nbsp;&n=
bsp;</code><code class=3D"js plain">},</code></div><div class=3D"line numbe=
r13 index12 alt2">&nbsp;</div><div class=3D"line number14 index13 alt1"><co=
de class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js plain">handleCl=
ick: </code><code class=3D"js keyword">function</code> <code class=3D"js pl=
ain">( elem ) {</code></div><div class=3D"line number15 index14 alt2"><code=
 class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain=
">$( elem ).find( </code><code class=3D"js string">"span"</code> <code clas=
s=3D"js plain">).toggle( </code><code class=3D"js string">"slow"</code> <co=
de class=3D"js plain">);</code></div><div class=3D"line number16 index15 al=
t1"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js plain">}=
</code></div><div class=3D"line number17 index16 alt2"><code class=3D"js pl=
ain">};</code></div></div></td></tr></tbody></table></div></div>

<p>
The benefit here is that we're converting many independent actions into a s=
hared ones (potentially saving on memory).
</p>

<h3>Example 2: Using the Flyweight for performance optimization</h3>

<p>In our second example, we'll reference some further performance gains th=
at can be achieved using Flyweights with jQuery.</p>

<p>
James Padolsey previously wrote an article called <em>76 bytes for faster j=
Query</em> where he reminded us that each time jQuery fires off a callback,=
 regardless of type (filter, each, event handler), we're able to access the=
 function's context (the DOM element related to it) via the <code>this</cod=
e> keyword.</p>

<p>
Unfortunately, many of us have become used to the idea of wrapping <code>th=
is</code> in <code>$()</code> or <code>jQuery()</code>, which means that a =
new instance of jQuery is unnecessarily constructed every time, rather than=
 simply doing this:</p>

<div><div id=3D"highlighter_618338" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div></td><td class=3D"code"><div class=3D"containe=
r"><div class=3D"line number1 index0 alt2"><code class=3D"js plain">$(</cod=
e><code class=3D"js string">"div"</code><code class=3D"js plain">).on( </co=
de><code class=3D"js string">"click"</code><code class=3D"js plain">, </cod=
e><code class=3D"js keyword">function</code> <code class=3D"js plain">() {<=
/code></div><div class=3D"line number2 index1 alt1"><code class=3D"js space=
s">&nbsp;&nbsp;</code><code class=3D"js plain">console.log( </code><code cl=
ass=3D"js string">"You clicked: "</code> <code class=3D"js plain">+ $( </co=
de><code class=3D"js keyword">this</code> <code class=3D"js plain">).attr( =
</code><code class=3D"js string">"id"</code> <code class=3D"js plain">));</=
code></div><div class=3D"line number3 index2 alt2"><code class=3D"js plain"=
>});</code></div><div class=3D"line number4 index3 alt1">&nbsp;</div><div c=
lass=3D"line number5 index4 alt2"><code class=3D"js comments">// we should =
avoid using the DOM element to create a</code></div><div class=3D"line numb=
er6 index5 alt1"><code class=3D"js comments">// jQuery object (with the ove=
rhead that comes with it)</code></div><div class=3D"line number7 index6 alt=
2"><code class=3D"js comments">// and just use the DOM element itself like =
this:</code></div><div class=3D"line number8 index7 alt1">&nbsp;</div><div =
class=3D"line number9 index8 alt2"><code class=3D"js plain">$( </code><code=
 class=3D"js string">"div"</code> <code class=3D"js plain">).on( </code><co=
de class=3D"js string">"click"</code><code class=3D"js plain">, </code><cod=
e class=3D"js keyword">function</code> <code class=3D"js plain">() {</code>=
</div><div class=3D"line number10 index9 alt1"><code class=3D"js spaces">&n=
bsp;&nbsp;</code><code class=3D"js plain">console.log( </code><code class=
=3D"js string">"You clicked:"</code>&nbsp; <code class=3D"js plain">+ </cod=
e><code class=3D"js keyword">this</code><code class=3D"js plain">.id );</co=
de></div><div class=3D"line number11 index10 alt2"><code class=3D"js plain"=
>});</code></div></div></td></tr></tbody></table></div></div>

<p>James had wanted to use jQuery's <code>jQuery.text</code> in the followi=
ng context, however he disagreed with the notion that a new jQuery object h=
ad to be created on each iteration:</p>

<div><div id=3D"highlighter_388049" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div></td><td class=3D"code"><div class=3D"container"><di=
v class=3D"line number1 index0 alt2"><code class=3D"js plain">$( </code><co=
de class=3D"js string">"a"</code> <code class=3D"js plain">).map( </code><c=
ode class=3D"js keyword">function</code> <code class=3D"js plain">() {</cod=
e></div><div class=3D"line number2 index1 alt1"><code class=3D"js spaces">&=
nbsp;&nbsp;</code><code class=3D"js keyword">return</code> <code class=3D"j=
s plain">$( </code><code class=3D"js keyword">this</code> <code class=3D"js=
 plain">).text();</code></div><div class=3D"line number3 index2 alt2"><code=
 class=3D"js plain">});</code></div></div></td></tr></tbody></table></div><=
/div>

<p>Now with respect to redundant wrapping, where possible with jQuery's uti=
lity methods, it's better to use <code>jQuery.methodName</code> (e.g <code>=
jQuery.text</code>) as opposed to <code>jQuery.fn.methodName</code> (e.g <c=
ode>jQuery.fn.text</code>) where methodName represents a utility such as <c=
ode>each()</code> or <code>text</code>. This avoids the need to call a furt=
her level of abstraction or construct a new jQuery object each time our fun=
ction is called as as <code>jQuery.methodName</code> is what the library it=
self uses at a lower-level to power <code>jQuery.fn.methodName</code>.

  </p><p>Because however not all of jQuery's methods have corresponding sin=
gle-node functions, Padolsey devised the idea of a jQuery.single utility.</=
p>

<p>
The idea here is that a single jQuery object is created and used for each c=
all to jQuery.single (effectively meaning only one jQuery object is ever cr=
eated). The implementation for this can be found below and as we're consoli=
dating data for multiple possible objects into a more central singular stru=
cture, it is technically also a Flyweight.</p>

<div><div id=3D"highlighter_695291" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div></td><td class=3D"cod=
e"><div class=3D"container"><div class=3D"line number1 index0 alt2"><code c=
lass=3D"js plain">jQuery.single =3D (</code><code class=3D"js keyword">func=
tion</code><code class=3D"js plain">( o ){</code></div><div class=3D"line n=
umber2 index1 alt1">&nbsp;</div><div class=3D"line number3 index2 alt2"><co=
de class=3D"js spaces">&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">=
var</code> <code class=3D"js plain">collection =3D jQuery([1]);</code></div=
><div class=3D"line number4 index3 alt1"><code class=3D"js spaces">&nbsp;&n=
bsp;&nbsp;</code><code class=3D"js keyword">return</code> <code class=3D"js=
 keyword">function</code><code class=3D"js plain">( element ) {</code></div=
><div class=3D"line number5 index4 alt2">&nbsp;</div><div class=3D"line num=
ber6 index5 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;</code><code class=3D"js comments">// Give collection the elemen=
t:</code></div><div class=3D"line number7 index6 alt2"><code class=3D"js sp=
aces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js pl=
ain">collection[0] =3D element;</code></div><div class=3D"line number8 inde=
x7 alt1">&nbsp;</div><div class=3D"line number9 index8 alt2"><code class=3D=
"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code cl=
ass=3D"js comments">// Return the collection:</code></div><div class=3D"lin=
e number10 index9 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">return</code> <code clas=
s=3D"js plain">collection;</code></div><div class=3D"line number11 index10 =
alt2">&nbsp;</div><div class=3D"line number12 index11 alt1"><code class=3D"=
js spaces">&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">};</code></div=
><div class=3D"line number13 index12 alt2"><code class=3D"js plain">})();</=
code></div></div></td></tr></tbody></table></div></div>

<p>
An example of this in action with chaining is:
</p>
<div><div id=3D"highlighter_529721" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div></td><td class=3D"code"><div class=3D"container"><div class=
=3D"line number1 index0 alt2"><code class=3D"js plain">$( </code><code clas=
s=3D"js string">"div"</code> <code class=3D"js plain">).on( </code><code cl=
ass=3D"js string">"click"</code><code class=3D"js plain">, </code><code cla=
ss=3D"js keyword">function</code> <code class=3D"js plain">() {</code></div=
><div class=3D"line number2 index1 alt1">&nbsp;</div><div class=3D"line num=
ber3 index2 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;</code><code =
class=3D"js keyword">var</code> <code class=3D"js plain">html =3D jQuery.si=
ngle( </code><code class=3D"js keyword">this</code> <code class=3D"js plain=
">).next().html();</code></div><div class=3D"line number4 index3 alt1"><cod=
e class=3D"js spaces">&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">con=
sole.log( html );</code></div><div class=3D"line number5 index4 alt2">&nbsp=
;</div><div class=3D"line number6 index5 alt1"><code class=3D"js plain">});=
</code></div></div></td></tr></tbody></table></div></div>

<p>
Note: Although we may believe that simply caching our jQuery code may offer=
 just as equivalent performance gains, Padolsey claims that $.single() is s=
till worth using and can perform better. That's not to say don't apply any =
caching at all, just be mindful that this approach can assist. For further =
details about $.single, I recommend reading Padolsey's full post.</p>



<p>&nbsp;</p>

<h1 id=3D"detailmvcmvp">
  <a href=3D"https://addyosmani.com/resources/essentialjsdesignpatterns/boo=
k/#detailmvcmvp" class=3D"subhead-link">#</a>
  JavaScript MV* Patterns
</h1>

<p>In this section, we're going to review three very important architectura=
l patterns - MVC (Model-View-Controller), MVP (Model-View-Presenter) and MV=
VM (Model-View-ViewModel). In the past, these patterns have been heavily us=
ed for structuring desktop and server-side applications but it's only been =
in recent years that come to being applied to JavaScript.</p>

<p>As the majority of JavaScript developers currently using these patterns =
opt to utilize libraries such as Backbone.js for implementing an MVC/MV*-li=
ke structure, we will compare how modern solutions such as it differ in the=
ir interpretation of MVC compared to classical takes on these patterns.</p>

<p>Let us first now cover the basics.</p>

<h2 id=3D"detailmvc">MVC</h2>
<p>MVC is an architectural design pattern that encourages improved applicat=
ion organization through a separation of concerns. It enforces the isolatio=
n of business data (Models) from user interfaces (Views), with a third comp=
onent (Controllers) traditionally managing logic and user-input. The patter=
n was originally designed by <a href=3D"http://en.wikipedia.org/wiki/Trygve=
_Reenskaug">Trygve Reenskaug</a> during his time working on Smalltalk-80 (1=
979) where it was initially called Model-View-Controller-Editor. MVC went o=
n to be described in depth in 1995's <a href=3D"http://www.amazon.co.uk/Des=
ign-patterns-elements-reusable-object-oriented/dp/0201633612">=E2=80=9CDesi=
gn Patterns: Elements of Reusable Object-Oriented Software=E2=80=9D</a> (Th=
e "GoF" book), which played a role in popularizing its use.</p>

<h3>Smalltalk-80 MVC</h3>
<p>It's important to understand what the original MVC pattern was aiming to=
 solve as it's mutated quite heavily since the days of its origin. Back in =
the 70's, graphical user-interfaces were few and far between and a concept =
known as <a href=3D"http://martinfowler.com/eaaDev/uiArchs.html">Separated =
Presentation</a> began to be used as a means to make a clear division betwe=
en domain objects which modeled concepts in the real world (e.g a photo, a =
person) and the presentation objects which were rendered to the user's scre=
en.</p>

<p>The Smalltalk-80 implementation of MVC took this concept further and had=
 an objective of separating out the application logic from the user interfa=
ce. The idea was that decoupling these parts of the application would also =
allow the reuse of models for other interfaces in the application. There ar=
e some interesting points worth noting about Smalltalk-80's MVC architectur=
e:</p>

<ul>
  <li>A Model represented domain-specific data and was ignorant of the user=
-interface (Views and Controllers). When a model changed, it would inform i=
ts observers.</li>
  <li>A View represented the current state of a Model. The Observer pattern=
 was used for letting the View know whenever the Model was updated or modif=
ied.</li>
  <li>Presentation was taken care of by the View, but there wasn't just a s=
ingle View and Controller - a View-Controller pair was required for each se=
ction or element being displayed on the screen.</li>
  <li>The Controllers role in this pair was handling user interaction (such=
 as key-presses and actions e.g. clicks), making decisions for the View.</l=
i>

</ul>

<p>Developers are sometimes surprised when they learn that the Observer pat=
tern (nowadays commonly implemented as the Publish/Subscribe variation) was=
 included as a part of MVC's architecture many decades ago. In Smalltalk-80=
's MVC, the View observes the Model. As mentioned in the bullet point above=
, anytime the Model changes, the Views react. A simple example of this is a=
n application backed by stock market data - in order for the application to=
 be useful, any change to the data in our Models should result in the View =
being refreshed instantly.</p>

<p>Martin Fowler has done an excellent job of writing about the <a href=3D"=
http://martinfowler.com/eaaDev/uiArchs.html">origins</a> of MVC over the ye=
ars and if interested in some further historical information about Smalltal=
k-80's MVC, I recommend reading his work.</p>

<h2>MVC For JavaScript Developers</h2>

<p>We've reviewed the 70's, but let us now return to the here and now. In m=
odern times, the MVC pattern has been applied to a diverse range of program=
ming languages including of most relevance to us: JavaScript. JavaScript no=
w has a number of frameworks boasting support for MVC (or variations on it,=
 which we refer to as the MV* family), allowing developers to easily add st=
ructure to their applications without great effort.</p>

<p>These frameworks include the likes of Backbone, Ember.js and AngularJS. =
Given the importance of avoiding "spaghetti" code, a term which describes c=
ode that is very difficult to read or maintain due to its lack of structure=
, it's imperative that the modern JavaScript developer understand what this=
 pattern provides. This allows us to effectively appreciate what these fram=
eworks enable us to do differently.</p>
<p>We know that MVC is composed of three core components:</p>

<h3>Models</h3>

<p>Models manage the data for an application. They are concerned with neith=
er the user-interface nor presentation layers but instead represent unique =
forms of data that an application may require. When a model changes (e.g wh=
en it is updated), it will typically notify its observers (e.g views, a con=
cept we will cover shortly) that a change has occurred so that they may rea=
ct accordingly.</p>
<p>To understand models further, let us imagine we have a JavaScript photo =
gallery application. In a photo gallery, the concept of a photo would merit=
 its own model as it represents a unique kind of domain-specific data. Such=
 a model may contain related attributes such as a caption, image source and=
 additional meta-data. A specific photo would be stored in an instance of a=
 model and a model may also be reusable. Below we can see an example of a v=
ery simplistic model implemented using Backbone.</p>

<div><div id=3D"highlighter_400903" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div></td><td class=3D"code"><div class=3D"container"><div class=3D"line num=
ber1 index0 alt2"><code class=3D"js keyword">var</code> <code class=3D"js p=
lain">Photo =3D Backbone.Model.extend({</code></div><div class=3D"line numb=
er2 index1 alt1">&nbsp;</div><div class=3D"line number3 index2 alt2"><code =
class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js commen=
ts">// Default attributes for the photo</code></div><div class=3D"line numb=
er4 index3 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><=
code class=3D"js plain">defaults: {</code></div><div class=3D"line number5 =
index4 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
</code><code class=3D"js plain">src: </code><code class=3D"js string">"plac=
eholder.jpg"</code><code class=3D"js plain">,</code></div><div class=3D"lin=
e number6 index5 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;</code><code class=3D"js plain">caption: </code><code class=3D"js=
 string">"A default image"</code><code class=3D"js plain">,</code></div><di=
v class=3D"line number7 index6 alt2"><code class=3D"js spaces">&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">viewed: </code><cod=
e class=3D"js keyword">false</code></div><div class=3D"line number8 index7 =
alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js plain">},</code></div><div class=3D"line number9 index8 alt2">&nbsp;=
</div><div class=3D"line number10 index9 alt1"><code class=3D"js spaces">&n=
bsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// Ensure that eac=
h photo created has an `src`.</code></div><div class=3D"line number11 index=
10 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code cla=
ss=3D"js plain">initialize: </code><code class=3D"js keyword">function</cod=
e><code class=3D"js plain">() {</code></div><div class=3D"line number12 ind=
ex11 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;</code><code class=3D"js keyword">this</code><code class=3D"js plain">.=
set( { </code><code class=3D"js string">"src"</code><code class=3D"js plain=
">: </code><code class=3D"js keyword">this</code><code class=3D"js plain">.=
defaults.src} );</code></div><div class=3D"line number13 index12 alt2"><cod=
e class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plai=
n">}</code></div><div class=3D"line number14 index13 alt1">&nbsp;</div><div=
 class=3D"line number15 index14 alt2"><code class=3D"js plain">});</code></=
div></div></td></tr></tbody></table></div></div>
<p>The built-in capabilities of models vary across frameworks, however it i=
s quite common for them to support validation of attributes, where attribut=
es represent the properties of the model, such as a model identifier. When =
using models in real-world applications we generally also desire model pers=
istence. Persistence allows us to edit and update models with the knowledge=
 that its most recent state will be saved in either: memory, in a user's lo=
calStorage data-store or synchronized with a database.</p>
<p>In addition, a model may also have multiple views observing it. If say, =
our photo model contained meta-data such as its location (longitude and lat=
itude), friends that were present in the photo (a list of identifiers) and =
a list of tags, a developer may decide to provide a single view to display =
each of these three facets.</p>
<p>It is not uncommon for modern MVC/MV* frameworks to provide a means to g=
roup models together (e.g. in Backbone, these groups are referred to as "co=
llections"). Managing models in groups allows us to write application logic=
 based on notifications from the group should any model it contains be chan=
ged. This avoids the need to manually observe individual model instances.</=
p>
<p>A sample grouping of models into a simplified Backbone collection can be=
 seen below.</p>
<div><div id=3D"highlighter_931299" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</=
div><div class=3D"line number19 index18 alt2">19</div></td><td class=3D"cod=
e"><div class=3D"container"><div class=3D"line number1 index0 alt2"><code c=
lass=3D"js keyword">var</code> <code class=3D"js plain">PhotoGallery =3D Ba=
ckbone.Collection.extend({</code></div><div class=3D"line number2 index1 al=
t1">&nbsp;</div><div class=3D"line number3 index2 alt2"><code class=3D"js s=
paces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// Refere=
nce to this collection's model.</code></div><div class=3D"line number4 inde=
x3 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code cla=
ss=3D"js plain">model: Photo,</code></div><div class=3D"line number5 index4=
 alt2">&nbsp;</div><div class=3D"line number6 index5 alt1"><code class=3D"j=
s spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// Fil=
ter down the list of all photos</code></div><div class=3D"line number7 inde=
x6 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code cla=
ss=3D"js comments">// that have been viewed</code></div><div class=3D"line =
number8 index7 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</co=
de><code class=3D"js plain">viewed: </code><code class=3D"js keyword">funct=
ion</code><code class=3D"js plain">() {</code></div><div class=3D"line numb=
er9 index8 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</code><code class=3D"js keyword">return</code> <code class=
=3D"js keyword">this</code><code class=3D"js plain">.filter(</code><code cl=
ass=3D"js keyword">function</code><code class=3D"js plain">( photo ){</code=
></div><div class=3D"line number10 index9 alt1"><code class=3D"js spaces">&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><co=
de class=3D"js keyword">return</code> <code class=3D"js plain">photo.get( <=
/code><code class=3D"js string">"viewed"</code> <code class=3D"js plain">);=
</code></div><div class=3D"line number11 index10 alt2"><code class=3D"js sp=
aces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D=
"js plain">});</code></div><div class=3D"line number12 index11 alt1"><code =
class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain"=
>},</code></div><div class=3D"line number13 index12 alt2">&nbsp;</div><div =
class=3D"line number14 index13 alt1"><code class=3D"js spaces">&nbsp;&nbsp;=
&nbsp;&nbsp;</code><code class=3D"js comments">// Filter down the list to o=
nly photos that</code></div><div class=3D"line number15 index14 alt2"><code=
 class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comme=
nts">// have not yet been viewed</code></div><div class=3D"line number16 in=
dex15 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code =
class=3D"js plain">unviewed: </code><code class=3D"js keyword">function</co=
de><code class=3D"js plain">() {</code></div><div class=3D"line number17 in=
dex16 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<=
/code><code class=3D"js keyword">return</code> <code class=3D"js keyword">t=
his</code><code class=3D"js plain">.without.apply( </code><code class=3D"js=
 keyword">this</code><code class=3D"js plain">, </code><code class=3D"js ke=
yword">this</code><code class=3D"js plain">.viewed() );</code></div><div cl=
ass=3D"line number18 index17 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&n=
bsp;&nbsp;</code><code class=3D"js plain">}</code></div><div class=3D"line =
number19 index18 alt2"><code class=3D"js plain">});</code></div></div></td>=
</tr></tbody></table></div></div>
<p>Older texts on MVC may also contain reference to a notion of models mana=
ging application <em>state</em>.In JavaScript applications <em>state</em> h=
as a different connotation, typically referring to the current "state" i.e =
view or sub-view (with specific data) on a users screen at a fixed point. S=
tate is a topic which is regularly discussed when looking at Single-page ap=
plications, where the concept of state needs to be simulated.</p>

<p>So to summarize, models are primarily concerned with business data.</p>

<h3>Views</h3>
<p>Views are a visual representation of models that present a filtered view=
 of their current state. Whilst Smalltalk views are about painting and main=
taining a bitmap, JavaScript views are about building and maintaining a DOM=
 element.</p>

<p>A view typically observes a model and is notified when the model changes=
, allowing the view to update itself accordingly. Design pattern literature=
 commonly refers to views as "dumb" given that their knowledge of models an=
d controllers in an application is limited.</p>

<p>Users are able to interact with views and this includes the ability to r=
ead and edit (i.e get or set the attribute values in) models. As the view i=
s the presentation layer, we generally present the ability to edit and upda=
te in a user-friendly fashion. For example, in the former photo gallery app=
lication we discussed earlier, model editing could be facilitated through a=
n "edit' view where a user who has selected a specific photo could edit its=
 meta-data.</p>

<p>The actual task of updating the model falls to controllers (which we wil=
l be covering shortly).</p>

<p>Let's explore views a little further using a vanilla JavaScript sample i=
mplementation. Below we can see a function that creates a single Photo view=
, consuming both a model instance and a controller instance.</p>
<p>We define a <code>render()</code> utility within our view which is respo=
nsible for rendering the contents of the <code>photoModel</code> using a Ja=
vaScript templating engine (Underscore templating) and updating the content=
s of our view, referenced by <code>photoEl</code>.</p>
<p>The <code>photoModel</code> then adds our <code>render()</code> callback=
 as one of its subscribers so that through the Observer pattern we can trig=
ger the view to update when the model changes.</p>

<p>One may wonder where user-interaction comes into play here. When users c=
lick on any elements within the view, it's not the view's responsibility to=
 know what to do next. It relies on a controller to make this decision for =
it. In our sample implementation, this is achieved by adding an event liste=
ner to <code>photoEl</code> which will delegate handling the click behavior=
 back to the controller, passing the model information along with it in cas=
e it's needed.</p>
<p>The benefit of this architecture is that each component plays its own se=
parate role in making the application function as needed.</p>
<div><div id=3D"highlighter_805537" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</=
div><div class=3D"line number19 index18 alt2">19</div><div class=3D"line nu=
mber20 index19 alt1">20</div><div class=3D"line number21 index20 alt2">21</=
div><div class=3D"line number22 index21 alt1">22</div><div class=3D"line nu=
mber23 index22 alt2">23</div><div class=3D"line number24 index23 alt1">24</=
div><div class=3D"line number25 index24 alt2">25</div><div class=3D"line nu=
mber26 index25 alt1">26</div><div class=3D"line number27 index26 alt2">27</=
div><div class=3D"line number28 index27 alt1">28</div><div class=3D"line nu=
mber29 index28 alt2">29</div><div class=3D"line number30 index29 alt1">30</=
div><div class=3D"line number31 index30 alt2">31</div><div class=3D"line nu=
mber32 index31 alt1">32</div><div class=3D"line number33 index32 alt2">33</=
div><div class=3D"line number34 index33 alt1">34</div><div class=3D"line nu=
mber35 index34 alt2">35</div><div class=3D"line number36 index35 alt1">36</=
div></td><td class=3D"code"><div class=3D"container"><div class=3D"line num=
ber1 index0 alt2"><code class=3D"js keyword">var</code> <code class=3D"js p=
lain">buildPhotoView =3D </code><code class=3D"js keyword">function</code> =
<code class=3D"js plain">( photoModel, photoController ) {</code></div><div=
 class=3D"line number2 index1 alt1">&nbsp;</div><div class=3D"line number3 =
index2 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js=
 keyword">var</code> <code class=3D"js plain">base =3D document.createEleme=
nt( </code><code class=3D"js string">"div"</code> <code class=3D"js plain">=
),</code></div><div class=3D"line number4 index3 alt1"><code class=3D"js sp=
aces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">p=
hotoEl =3D document.createElement( </code><code class=3D"js string">"div"</=
code> <code class=3D"js plain">);</code></div><div class=3D"line number5 in=
dex4 alt2">&nbsp;</div><div class=3D"line number6 index5 alt1"><code class=
=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js plain">base.appendChild=
(photoEl);</code></div><div class=3D"line number7 index6 alt2">&nbsp;</div>=
<div class=3D"line number8 index7 alt1"><code class=3D"js spaces">&nbsp;&nb=
sp;</code><code class=3D"js keyword">var</code> <code class=3D"js plain">re=
nder =3D </code><code class=3D"js keyword">function</code> <code class=3D"j=
s plain">() {</code></div><div class=3D"line number9 index8 alt2"><code cla=
ss=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</code><code class=3D"js comments">// We use a templating library such as=
 Underscore</code></div><div class=3D"line number10 index9 alt1"><code clas=
s=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;</code><code class=3D"js comments">// templating which generates the HTML =
for our</code></div><div class=3D"line number11 index10 alt2"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
</code><code class=3D"js comments">// photo entry</code></div><div class=3D=
"line number12 index11 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">pho=
toEl.innerHTML =3D _.template( </code><code class=3D"js string">"#photoTemp=
late"</code><code class=3D"js plain">, {</code></div><div class=3D"line num=
ber13 index12 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js plain">src: photoModel.getSrc()</code></div><div class=3D"line numbe=
r14 index13 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">});</code></di=
v><div class=3D"line number15 index14 alt2"><code class=3D"js spaces">&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">};</code></d=
iv><div class=3D"line number16 index15 alt1">&nbsp;</div><div class=3D"line=
 number17 index16 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code =
class=3D"js plain">photoModel.addSubscriber( render );</code></div><div cla=
ss=3D"line number18 index17 alt1">&nbsp;</div><div class=3D"line number19 i=
ndex18 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js=
 plain">photoEl.addEventListener( </code><code class=3D"js string">"click"<=
/code><code class=3D"js plain">, </code><code class=3D"js keyword">function=
</code> <code class=3D"js plain">() {</code></div><div class=3D"line number=
20 index19 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><=
code class=3D"js plain">photoController.handleEvent( </code><code class=3D"=
js string">"click"</code><code class=3D"js plain">, photoModel );</code></d=
iv><div class=3D"line number21 index20 alt2"><code class=3D"js spaces">&nbs=
p;&nbsp;</code><code class=3D"js plain">});</code></div><div class=3D"line =
number22 index21 alt1">&nbsp;</div><div class=3D"line number23 index22 alt2=
"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js keyword">v=
ar</code> <code class=3D"js plain">show =3D </code><code class=3D"js keywor=
d">function</code> <code class=3D"js plain">() {</code></div><div class=3D"=
line number24 index23 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nb=
sp;</code><code class=3D"js plain">photoEl.style.display =3D </code><code c=
lass=3D"js string">""</code><code class=3D"js plain">;</code></div><div cla=
ss=3D"line number25 index24 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</c=
ode><code class=3D"js plain">};</code></div><div class=3D"line number26 ind=
ex25 alt1">&nbsp;</div><div class=3D"line number27 index26 alt2"><code clas=
s=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js keyword">var</code> <c=
ode class=3D"js plain">hide =3D </code><code class=3D"js keyword">function<=
/code> <code class=3D"js plain">() {</code></div><div class=3D"line number2=
8 index27 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><c=
ode class=3D"js plain">photoEl.style.display =3D </code><code class=3D"js s=
tring">"none"</code><code class=3D"js plain">;</code></div><div class=3D"li=
ne number29 index28 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><cod=
e class=3D"js plain">};</code></div><div class=3D"line number30 index29 alt=
1">&nbsp;</div><div class=3D"line number31 index30 alt2"><code class=3D"js =
spaces">&nbsp;&nbsp;</code><code class=3D"js keyword">return</code> <code c=
lass=3D"js plain">{</code></div><div class=3D"line number32 index31 alt1"><=
code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js p=
lain">showView: show,</code></div><div class=3D"line number33 index32 alt2"=
><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js=
 plain">hideView: hide</code></div><div class=3D"line number34 index33 alt1=
"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js plain">};<=
/code></div><div class=3D"line number35 index34 alt2">&nbsp;</div><div clas=
s=3D"line number36 index35 alt1"><code class=3D"js plain">};</code></div></=
div></td></tr></tbody></table></div></div>
<p><strong>Templating</strong></p>
<p>In the context of JavaScript frameworks that support MVC/MV*, it is wort=
h briefly discussing JavaScript templating and its relationship to views as=
 we briefly touched upon it in the last section.</p>

<p>It has long been considered (and proven) a performance bad practice to m=
anually create large blocks of HTML markup in-memory through string concate=
nation. Developers doing so have fallen prey to inperformantly iterating th=
rough their data, wrapping it in nested divs and using outdated techniques =
such as <code>document.write</code> to inject the "template" into the DOM. =
As this typically means keeping scripted markup inline with our standard ma=
rkup, it can quickly become both difficult to read and more importantly, ma=
intain such disasters, especially when building non-trivially sized applica=
tions.</p>

<p>JavaScript templating solutions (such as Handlebars.js and Mustache) are=
 often used to define templates for views as markup (either stored external=
ly or within script tags with a custom type - e.g text/template) containing=
 template variables. Variables may be delimitated using a variable syntax (=
e.g {{name}}) and frameworks are typically smart enough to accept data in a=
 JSON form (which model instances can be converted to) such that we only ne=
ed be concerned with maintaining clean models and clean templates. Most of =
the grunt work to do with population is taken care of by the framework itse=
lf. This has a large number of benefits, particularly when opting to store =
templates externally as this can give way to templates being dynamically lo=
aded on an as-needed basis when it comes to building larger applications.</=
p>

<p>Below we can see two examples of HTML templates. One implemented using t=
he popular Handlebars.js framework and another using Underscore's templates=
.</p>
<p><strong>Handlebars.js:</strong></p>
<div><div id=3D"highlighter_358115" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div></td><td class=
=3D"code"><div class=3D"container"><div class=3D"line number1 index0 alt2">=
<code class=3D"js plain">&lt;li </code><code class=3D"js keyword">class</co=
de><code class=3D"js plain">=3D</code><code class=3D"js string">"photo"</co=
de><code class=3D"js plain">&gt;</code></div><div class=3D"line number2 ind=
ex1 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js pl=
ain">&lt;h2&gt;{{caption}}&lt;/h2&gt;</code></div><div class=3D"line number=
3 index2 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"=
js plain">&lt;img </code><code class=3D"js keyword">class</code><code class=
=3D"js plain">=3D</code><code class=3D"js string">"source"</code> <code cla=
ss=3D"js plain">src=3D</code><code class=3D"js string">"{{src}}"</code><cod=
e class=3D"js plain">/&gt;</code></div><div class=3D"line number4 index3 al=
t1"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js plain">&=
lt;div </code><code class=3D"js keyword">class</code><code class=3D"js plai=
n">=3D</code><code class=3D"js string">"meta-data"</code><code class=3D"js =
plain">&gt;</code></div><div class=3D"line number5 index4 alt2"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">{{me=
tadata}}</code></div><div class=3D"line number6 index5 alt1"><code class=3D=
"js spaces">&nbsp;&nbsp;</code><code class=3D"js plain">&lt;/div&gt;</code>=
</div><div class=3D"line number7 index6 alt2"><code class=3D"js plain">&lt;=
/li&gt;</code></div></div></td></tr></tbody></table></div></div>
<p><strong>Underscore.js Microtemplates:</strong></p>
<div><div id=3D"highlighter_817211" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div></td><td class=
=3D"code"><div class=3D"container"><div class=3D"line number1 index0 alt2">=
<code class=3D"js plain">&lt;li </code><code class=3D"js keyword">class</co=
de><code class=3D"js plain">=3D</code><code class=3D"js string">"photo"</co=
de><code class=3D"js plain">&gt;</code></div><div class=3D"line number2 ind=
ex1 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js pl=
ain">&lt;h2&gt;&lt;%=3D caption %&gt;&lt;/h2&gt;</code></div><div class=3D"=
line number3 index2 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><cod=
e class=3D"js plain">&lt;img </code><code class=3D"js keyword">class</code>=
<code class=3D"js plain">=3D</code><code class=3D"js string">"source"</code=
> <code class=3D"js plain">src=3D</code><code class=3D"js string">"&lt;%=3D=
 src %&gt;"</code><code class=3D"js plain">/&gt;</code></div><div class=3D"=
line number4 index3 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><cod=
e class=3D"js plain">&lt;div </code><code class=3D"js keyword">class</code>=
<code class=3D"js plain">=3D</code><code class=3D"js string">"meta-data"</c=
ode><code class=3D"js plain">&gt;</code></div><div class=3D"line number5 in=
dex4 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code c=
lass=3D"js plain">&lt;%=3D metadata %&gt;</code></div><div class=3D"line nu=
mber6 index5 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=
=3D"js plain">&lt;/div&gt;</code></div><div class=3D"line number7 index6 al=
t2"><code class=3D"js plain">&lt;/li&gt;</code></div></div></td></tr></tbod=
y></table></div></div>
<p>Note that templates are not themselves views. Developers coming from a S=
truts Model 2 architecture may feel like a template *is* a view, but it isn=
't. A view is an object which observes a model and keeps the visual represe=
ntation up-to-date. A template *might* be a declarative way to specify part=
 or even all of a view object so that it can be generated from the template=
 specification.</p>

<p>It is also worth noting that in classical web development, navigating be=
tween independent views required the use of a page refresh. In Single-page =
JavaScript applications however, once data is fetched from a server via Aja=
x, it can simply be dynamically rendered in a new view within the same page=
 without any such refresh being necessary.</p>

<p>The role of navigation thus falls to a "router", which assists in managi=
ng application state (e.g allowing users to bookmark a particular view they=
 have navigated to). As routers are, however, neither a part of MVC nor pre=
sent in every MVC-like framework, I will not be going into them in greater =
detail in this section.</p>

<p>To summarize, views are a visual representation of our application data.=
</p>

<h3>Controllers</h3>
<p>Controllers are an intermediary between models and views which are class=
ically responsible for updating the model when the user manipulates the vie=
w.</p>

<p>In our photo gallery application, a controller would be responsible for =
handling changes the user made to the edit view for a particular photo, upd=
ating a specific photo model when a user has finished editing.</p>

<p>Remember that the controllers fulfill one role in MVC: the facilitation =
of the Strategy pattern for the view. In the Strategy pattern regard, the v=
iew delegates to the controller at the view's discretion. So, that's how th=
e strategy pattern works. The view could delegate handling user events to t=
he controller when the view sees fit. The view *could* delegate handling mo=
del change events to the controller if the view sees fit, but this is not t=
he traditional role of the controller.</p>

<p>In terms of where most JavaScript MVC frameworks detract from what is co=
nventionally considered "MVC" however, it is with controllers. The reasons =
for this vary, but in my honest opinion, it is that framework authors initi=
ally look at the server-side interpretation of MVC, realize that it doesn't=
 translate 1:1 on the client-side and re-interpret the C in MVC to mean som=
ething they feel makes more sense. The issue with this however is that it i=
s subjective, increases the complexity in both understanding the classical =
MVC pattern and of course the role of controllers in modern frameworks.</p>

<p>As an example, let's briefly review the architecture of the popular arch=
itectural framework Backbone.js. Backbone contains models and views (somewh=
at similar to what we reviewed earlier), however it doesn't actually have t=
rue controllers. Its views and routers act a little similar to a controller=
, but neither are actually controllers on their own.</p>
<p>In this respect, contrary to what might be mentioned in the official doc=
umentation or in blog posts, Backbone is neither a truly MVC/MVP nor MVVM f=
ramework. It's in fact better to consider it a member of the MV* family whi=
ch approaches architecture in its own way. There is of course nothing wrong=
 with this, but it is important to distinguish between classical MVC and MV=
* should we begin relying on advice from classical literature on the former=
 to help with the latter.</p>

<h3>Controllers in another library (Spine.js) vs Backbone.js</h3>

<p><strong>Spine.js</strong></p>
<p>We now know that controllers are traditionally responsible for updating =
the model when the user updates the view. It's interesting to note that the=
 most popular JavaScript MVC/MV* framework at the time of writing (Backbone=
) does not have it's <strong>own</strong> explicit concept of controllers.<=
/p>

<p>It can thus be useful for us to review the controller from another MVC f=
ramework to appreciate the difference in implementations and further demons=
trate how nontraditionally frameworks approach the role of the controller. =
For this, let's take a look at a sample controller from Spine.js:</p>

<p>In this example, we're going to have a controller called <code>PhotosCon=
troller</code> which will be in charge of individual photos in the applicat=
ion. It will ensure that when the view updates (e.g a user edited the photo=
 meta-data) the corresponding model does too.</p>

<p>Note: We won't be delving heavily into Spine.js at all, but will just ta=
ke a ten-foot view of what its controllers can do:</p>
<div><div id=3D"highlighter_162851" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</=
div><div class=3D"line number19 index18 alt2">19</div><div class=3D"line nu=
mber20 index19 alt1">20</div></td><td class=3D"code"><div class=3D"containe=
r"><div class=3D"line number1 index0 alt2"><code class=3D"js comments">// C=
ontrollers in Spine are created by inheriting from Spine.Controller</code><=
/div><div class=3D"line number2 index1 alt1">&nbsp;</div><div class=3D"line=
 number3 index2 alt2"><code class=3D"js keyword">var</code> <code class=3D"=
js plain">PhotosController =3D Spine.Controller.sub({</code></div><div clas=
s=3D"line number4 index3 alt1">&nbsp;</div><div class=3D"line number5 index=
4 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js plai=
n">init: </code><code class=3D"js keyword">function</code> <code class=3D"j=
s plain">() {</code></div><div class=3D"line number6 index5 alt1"><code cla=
ss=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">=
this</code><code class=3D"js plain">.item.bind( </code><code class=3D"js st=
ring">"update"</code><code class=3D"js plain">, </code><code class=3D"js ke=
yword">this</code><code class=3D"js plain">.proxy( </code><code class=3D"js=
 keyword">this</code><code class=3D"js plain">.render ));</code></div><div =
class=3D"line number7 index6 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&n=
bsp;&nbsp;</code><code class=3D"js keyword">this</code><code class=3D"js pl=
ain">.item.bind( </code><code class=3D"js string">"destroy"</code><code cla=
ss=3D"js plain">, </code><code class=3D"js keyword">this</code><code class=
=3D"js plain">.proxy( </code><code class=3D"js keyword">this</code><code cl=
ass=3D"js plain">.remove ));</code></div><div class=3D"line number8 index7 =
alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js plain"=
>},</code></div><div class=3D"line number9 index8 alt2">&nbsp;</div><div cl=
ass=3D"line number10 index9 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</c=
ode><code class=3D"js plain">render: </code><code class=3D"js keyword">func=
tion</code> <code class=3D"js plain">() {</code></div><div class=3D"line nu=
mber11 index10 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</co=
de><code class=3D"js comments">// Handle templating</code></div><div class=
=3D"line number12 index11 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp=
;&nbsp;</code><code class=3D"js keyword">this</code><code class=3D"js plain=
">.replace( $( </code><code class=3D"js string">"#photoTemplate"</code> <co=
de class=3D"js plain">).tmpl( </code><code class=3D"js keyword">this</code>=
<code class=3D"js plain">.item ) );</code></div><div class=3D"line number13=
 index12 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><co=
de class=3D"js keyword">return</code> <code class=3D"js keyword">this</code=
><code class=3D"js plain">;</code></div><div class=3D"line number14 index13=
 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js plain=
">},</code></div><div class=3D"line number15 index14 alt2">&nbsp;</div><div=
 class=3D"line number16 index15 alt1"><code class=3D"js spaces">&nbsp;&nbsp=
;</code><code class=3D"js plain">remove: </code><code class=3D"js keyword">=
function</code> <code class=3D"js plain">() {</code></div><div class=3D"lin=
e number17 index16 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;=
</code><code class=3D"js keyword">this</code><code class=3D"js plain">.el.r=
emove();</code></div><div class=3D"line number18 index17 alt1"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">th=
is</code><code class=3D"js plain">.release();</code></div><div class=3D"lin=
e number19 index18 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code=
 class=3D"js plain">}</code></div><div class=3D"line number20 index19 alt1"=
><code class=3D"js plain">});</code></div></div></td></tr></tbody></table><=
/div></div>
<p>In Spine, controllers are considered the glue for an application, adding=
 and responding to DOM events, rendering templates and ensuring that views =
and models are kept in sync (which makes sense in the context of what we kn=
ow to be a controller).</p>

<p>What we're doing in the above example is setting up listeners in the <co=
de>update</code> and <code>destroy</code> events using <code>render()</code=
> and <code>remove()</code>. When a photo entry gets updated, we re-render =
the view to reflect the changes to the meta-data. Similarly, if the photo g=
ets deleted from the gallery, we remove it from the view. In the <code>rend=
er()</code> function, we're using Underscore micro-templating (via <code>_.=
template()</code>) to render a JavaScript template with the ID #photoTempla=
te. This simply returns a compiled HTML string used to populate the content=
s of <code>photoEl</code>.

</p><p>What this provides us with is a very lightweight, simple way to mana=
ge changes between the model and the view.</p>

<p><strong>Backbone.js</strong></p>
<p>Later on in this section we're going to revisit the differences between =
Backbone and traditional MVC, but for now let's focus on controllers.</p>
<p>In Backbone, one shares the responsibility of a controller with both the=
 <code>Backbone.View</code> and <code>Backbone.Router</code>. Some time ago=
 Backbone did once come with its own <code>Backbone.Controller</code>, but =
as the naming for this component didn't make sense for the context in which=
 it was being used, it was later renamed to Router.</p>
<p>Routers handle a little more of the controller responsibility as it's po=
ssible to bind the events there for models and have our view respond to DOM=
 events and rendering. As Tim Branyen (another Bocoup-based Backbone contri=
butor) has also previously pointed out, it's possible to get away with not =
needing <code>Backbone.Router</code> at all for this, so a way to think abo=
ut it using the Router paradigm is probably:</p>
<div><div id=3D"highlighter_743540" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div></td><td class=3D"cod=
e"><div class=3D"container"><div class=3D"line number1 index0 alt2"><code c=
lass=3D"js keyword">var</code> <code class=3D"js plain">PhotoRouter =3D Bac=
kbone.Router.extend({</code></div><div class=3D"line number2 index1 alt1"><=
code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js plain">routes=
: { </code><code class=3D"js string">"photos/:id"</code><code class=3D"js p=
lain">: </code><code class=3D"js string">"route"</code> <code class=3D"js p=
lain">},</code></div><div class=3D"line number3 index2 alt2">&nbsp;</div><d=
iv class=3D"line number4 index3 alt1"><code class=3D"js spaces">&nbsp;&nbsp=
;</code><code class=3D"js plain">route: </code><code class=3D"js keyword">f=
unction</code><code class=3D"js plain">( id ) {</code></div><div class=3D"l=
ine number5 index4 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;=
</code><code class=3D"js keyword">var</code> <code class=3D"js plain">item =
=3D photoCollection.get( id );</code></div><div class=3D"line number6 index=
5 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code clas=
s=3D"js keyword">var</code> <code class=3D"js plain">view =3D </code><code =
class=3D"js keyword">new</code> <code class=3D"js plain">PhotoView( { model=
: item } );</code></div><div class=3D"line number7 index6 alt2">&nbsp;</div=
><div class=3D"line number8 index7 alt1"><code class=3D"js spaces">&nbsp;&n=
bsp;&nbsp;&nbsp;</code><code class=3D"js plain">$(</code><code class=3D"js =
string">'.content'</code><code class=3D"js plain">).html( view.render().el =
);</code></div><div class=3D"line number9 index8 alt2"><code class=3D"js sp=
aces">&nbsp;&nbsp;</code><code class=3D"js plain">}</code></div><div class=
=3D"line number10 index9 alt1"><code class=3D"js plain">});</code></div></d=
iv></td></tr></tbody></table></div></div>
<p>To summarize, the takeaway from this section is that controllers manage =
the logic and coordination between models and views in an application.</p>
<h2>What does MVC give us?</h2>
<p>This separation of concerns in MVC facilitates simpler modularization of=
 an application's functionality and enables:</p>
<ul>
  <li>Easier overall maintenance. When updates need to be made to the appli=
cation it is very clear whether the changes are data-centric, meaning chang=
es to models and possibly controllers, or merely visual, meaning changes to=
 views.</li>
  <li>Decoupling models and views means that it is significantly more strai=
ght-forward to write unit tests for business logic</li>
  <li>Duplication of low-level model and controller code (i.e what we may h=
ave been using instead) is eliminated across the application</li>
  <li>Depending on the size of the application and separation of roles, thi=
s modularity allows developers responsible for core logic and developers wo=
rking on the user-interfaces to work simultaneously</li>
</ul>

<h2>Smalltalk-80 MVC In JavaScript</h2>

<p>Although the majority of modern-day JavaScript frameworks attempt to evo=
lve the MVC paradigm to better fit the differing needs of web application d=
evelopment, there is one framework which attempts to adhere to the pure for=
m of the pattern found in Smalltalk-80. Maria.js (<a href=3D"https://github=
.com/petermichaux/maria">https://github.com/petermichaux/maria</a>) by Pete=
r Michaux offers an implementation which is faithful to MVCs origins - Mode=
ls are models, Views are views and Controllers are nothing but controllers.=
 Whilst some developers might feel an MV* framework should address more con=
cerns, this is a useful reference to be aware of in case you would like a J=
avaScript implementation of the original MVC.</p>

<h3>Delving deeper</h3>
<p>At this point in the book, we should have a basic understanding of what =
the MVC pattern provides, but there's still some fascinating information ab=
out it worth noting.</p>

<p>The GoF do not refer to MVC as a design pattern, but rather consider it =
a <em>set of classes to build a user interface</em>. In their view, it's ac=
tually a variation of three classical design patterns: the Observer, Strate=
gy and Composite patterns. Depending on how MVC has been implemented in a f=
ramework, it may also use the Factory and Template patterns. The GoF book m=
entions these patterns as useful extras when working with MVC.</p>
<p>As we have discussed, models represent application data whilst views are=
 what the user is presented on screen. As such, MVC relies on the Observer =
pattern for some of its core communication (something that surprisingly isn=
't covered in many articles about the MVC pattern). When a model is changed=
 it notifies its observers (Views) that something has been updated - this i=
s perhaps the most important relationship in MVC. The observer nature of th=
is relationship is also what facilitates multiple views being attached to t=
he same model.</p>
<p>For developers interested in knowing more about the decoupled nature of =
MVC (once again, depending on the implementation), one of the goals of the =
pattern is to help define one-to-many relationships between a topic (data o=
bject) and its observers. When a topic changes, its observers are updated. =
Views and controllers have a slightly different relationship. Controllers f=
acilitate views to respond to different user input and are an example of th=
e Strategy pattern.</p>
<h3>Summary</h3>
<p>Having reviewed the classical MVC pattern, we should now understand how =
it allows us to cleanly separate concerns in an application. We should also=
 now appreciate how JavaScript MVC frameworks may differ in their interpret=
ation of the MVC pattern, which although quite open to variation, still sha=
res some of the fundamental concepts the original pattern has to offer.</p>
<p>When reviewing a new JavaScript MVC/MV* framework, remember - it can be =
useful to step back and review how it's opted to approach architecture (spe=
cifically, how it supports implementing models, views, controllers or other=
 alternatives) as this can better help us grok how the framework expects to=
 be used.</p>

<h2 id=3D"detailmvp">MVP</h2>
<p>Model-view-presenter (MVP) is a derivative of the MVC design pattern whi=
ch focuses on improving presentation logic. It originated at a company name=
d <a href=3D"http://en.wikipedia.org/wiki/Taligent">Taligent</a> in the ear=
ly 1990s while they were working on a model for a C++ CommonPoint environme=
nt. Whilst both MVC and MVP target the separation of concerns across multip=
le components, there are some fundamental differences between them.</p>
<p>For the purposes of this summary we will focus on the version of MVP mos=
t suitable for web-based architectures.</p>

<h3>Models, Views &amp; Presenters</h3>
<p>The P in MVP stands for presenter. It's a component which contains the u=
ser-interface business logic for the view. Unlike MVC, invocations from the=
 view are delegated to the presenter, which are decoupled from the view and=
 instead talk to it through an interface. This allows for all kinds of usef=
ul things such as being able to mock views in unit tests.</p>

<p>The most common implementation of MVP is one which uses a Passive View (=
a view which is for all intents and purposes "dumb"), containing little to =
no logic. If MVC and MVP are different it is because the C and P do differe=
nt things. In MVP, the P observes models and updates views when models chan=
ge. The P effectively binds models to views, a responsibility which was pre=
viously held by controllers in MVC.</p>

<p>Solicited by a view, presenters perform any work to do with user request=
s and pass data back to them. In this respect, they retrieve data, manipula=
te it and determine how the data should be displayed in the view. In some i=
mplementations, the presenter also interacts with a service layer to persis=
t data (models). Models may trigger events but it's the presenters role to =
subscribe to them so that it can update the view. In this passive architect=
ure, we have no concept of direct data binding. Views expose setters which =
presenters can use to set data.</p>

<p>The benefit of this change from MVC is that it increases the testability=
 of our application and provides a more clean separation between the view a=
nd the model. This isn't however without its costs as the lack of data bind=
ing support in the pattern can often mean having to take care of this task =
separately.</p>

<p>Although a common implementation of a <a href=3D"http://martinfowler.com=
/eaaDev/PassiveScreen.html">Passive View</a> is for the view to implement a=
n interface, there are variations on it, including the use of events which =
can decouple the View from the Presenter a little more. As we don't have th=
e interface construct in JavaScript, we're using more a protocol than an ex=
plicit interface here. It's technically still an API and it's probably fair=
 for us to refer to it as an interface from that perspective.</p>
<p>There is also a <a href=3D"http://martinfowler.com/eaaDev/SupervisingPre=
senter.html">Supervising Controller</a> variation of MVP, which is closer t=
o the MVC and <a href=3D"http://en.wikipedia.org/wiki/Model_View_ViewModel"=
>MVVM</a> patterns as it provides data-binding from the Model directly from=
 the View. Key-value observing (KVO) plugins (such as Derick Bailey's Backb=
one.ModelBinding plugin) tend to bring Backbone out of the Passive View and=
 more into the Supervising Controller or MVVM variations.</p>

<h3>MVP or MVC?</h3>
<p>MVP is generally used most often in enterprise-level applications where =
it's necessary to reuse as much presentation logic as possible. Application=
s with very complex views and a great deal of user interaction may find tha=
t MVC doesn't quite fit the bill here as solving this problem may mean heav=
ily relying on multiple controllers. In MVP, all of this complex logic can =
be encapsulated in a presenter, which can simplify maintenance greatly.</p>

<p>As MVP views are defined through an interface and the interface is techn=
ically the only point of contact between the system and the view (other tha=
n a presenter), this pattern also allows developers to write presentation l=
ogic without needing to wait for designers to produce layouts and graphics =
for the application.</p>

<p>Depending on the implementation, MVP may be easier to automatically unit=
 test than MVC. The reason often cited for this is that the presenter can b=
e used as a complete mock of the user-interface and so it can be unit teste=
d independent of other components. In my experience this really depends on =
the languages we are implementing MVP in (there's quite a difference betwee=
n opting for MVP for a JavaScript project over one for say, ASP.net).</p>
<p>At the end of the day, the underlying concerns we may have with MVC will=
 likely hold true for MVP given that the differences between them are mainl=
y semantic. As long as we are cleanly separating concerns into models, view=
s and controllers (or presenters) we should be achieving most of the same b=
enefits regardless of the variation we opt for.</p>

<h3>MVC, MVP and Backbone.js</h3>
<p>There are very few, if any architectural JavaScript frameworks that clai=
m to implement the MVC or MVP patterns in their classical form as many Java=
Script developers don't view MVC and MVP as being mutually exclusive (we ar=
e actually more likely to see MVP strictly implemented when looking at web =
frameworks such as ASP.net or GWT). This is because it's possible to have a=
dditional presenter/view logic in our application and yet still consider it=
 a flavor of MVC.</p>
<p>Backbone contributor <a href=3D"http://ireneros.com/">Irene Ros</a> (of =
Boston-based Bocoup) subscribes to this way of thinking as when she separat=
es views out into their own distinct components, she needs something to act=
ually assemble them for her. This could either be a controller route (such =
as a <code>Backbone.Router</code>, covered later in the book) or a callback=
 in response to data being fetched.</p>
<p>That said, some developers do however feel that Backbone.js better fits =
the description of MVP than it does MVC. Their view is that:</p>
<ul>
  <li>The presenter in MVP better describes the <code>Backbone.View</code> =
(the layer between View templates and the data bound to it) than a controll=
er does</li>
  <li>The model fits <code>Backbone.Model</code> (it isn't greatly differen=
t to the models in MVC at all)</li>
  <li>The views best represent templates (e.g Handlebars/Mustache markup te=
mplates)</li>
</ul>
<p>A response to this could be that the view can also just be a View (as pe=
r MVC) because Backbone is flexible enough to let it be used for multiple p=
urposes. The V in MVC and the P in MVP can both be accomplished by <code>Ba=
ckbone.View</code> because they're able to achieve two purposes: both rende=
ring atomic components and assembling those components rendered by other vi=
ews.</p>
<p>We've also seen that in Backbone the responsibility of a controller is s=
hared with both the Backbone.View and Backbone.Router and in the following =
example we can actually see that aspects of that are certainly true.</p>
<p>Our Backbone <code>PhotoView</code> uses the Observer pattern to "subscr=
ibe" to changes to a View's model in the line <code>this.model.bind("change=
",...)</code>. It also handles templating in the <code>render()</code> meth=
od, but unlike some other implementations, user interaction is also handled=
 in the View (see <code>events</code>).</p>

<div><div id=3D"highlighter_761239" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</=
div><div class=3D"line number19 index18 alt2">19</div><div class=3D"line nu=
mber20 index19 alt1">20</div><div class=3D"line number21 index20 alt2">21</=
div><div class=3D"line number22 index21 alt1">22</div><div class=3D"line nu=
mber23 index22 alt2">23</div><div class=3D"line number24 index23 alt1">24</=
div><div class=3D"line number25 index24 alt2">25</div><div class=3D"line nu=
mber26 index25 alt1">26</div><div class=3D"line number27 index26 alt2">27</=
div><div class=3D"line number28 index27 alt1">28</div><div class=3D"line nu=
mber29 index28 alt2">29</div><div class=3D"line number30 index29 alt1">30</=
div><div class=3D"line number31 index30 alt2">31</div><div class=3D"line nu=
mber32 index31 alt1">32</div><div class=3D"line number33 index32 alt2">33</=
div><div class=3D"line number34 index33 alt1">34</div><div class=3D"line nu=
mber35 index34 alt2">35</div><div class=3D"line number36 index35 alt1">36</=
div><div class=3D"line number37 index36 alt2">37</div></td><td class=3D"cod=
e"><div class=3D"container"><div class=3D"line number1 index0 alt2"><code c=
lass=3D"js keyword">var</code> <code class=3D"js plain">PhotoView =3D Backb=
one.View.extend({</code></div><div class=3D"line number2 index1 alt1">&nbsp=
;</div><div class=3D"line number3 index2 alt2"><code class=3D"js spaces">&n=
bsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">//... is a list ta=
g.</code></div><div class=3D"line number4 index3 alt1"><code class=3D"js sp=
aces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">tagName: </co=
de><code class=3D"js string">"li"</code><code class=3D"js plain">,</code></=
div><div class=3D"line number5 index4 alt2">&nbsp;</div><div class=3D"line =
number6 index5 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</co=
de><code class=3D"js comments">// Pass the contents of the photo template t=
hrough a templating</code></div><div class=3D"line number7 index6 alt2"><co=
de class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js com=
ments">// function, cache it for a single photo</code></div><div class=3D"l=
ine number8 index7 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;=
</code><code class=3D"js plain">template: _.template( $(</code><code class=
=3D"js string">"#photo-template"</code><code class=3D"js plain">).html() ),=
</code></div><div class=3D"line number9 index8 alt2">&nbsp;</div><div class=
=3D"line number10 index9 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;=
&nbsp;</code><code class=3D"js comments">// The DOM events specific to an i=
tem.</code></div><div class=3D"line number11 index10 alt2"><code class=3D"j=
s spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">events: {=
</code></div><div class=3D"line number12 index11 alt1"><code class=3D"js sp=
aces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js string">=
"click img"</code><code class=3D"js plain">: </code><code class=3D"js strin=
g">"toggleViewed"</code></div><div class=3D"line number13 index12 alt2"><co=
de class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js pla=
in">},</code></div><div class=3D"line number14 index13 alt1">&nbsp;</div><d=
iv class=3D"line number15 index14 alt2"><code class=3D"js spaces">&nbsp;&nb=
sp;&nbsp;&nbsp;</code><code class=3D"js comments">// The PhotoView listens =
for changes to</code></div><div class=3D"line number16 index15 alt1"><code =
class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js commen=
ts">// its model, re-rendering. Since there's</code></div><div class=3D"lin=
e number17 index16 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;=
</code><code class=3D"js comments">// a one-to-one correspondence between a=
</code></div><div class=3D"line number18 index17 alt1"><code class=3D"js sp=
aces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// **Photo=
** and a **PhotoView** in this</code></div><div class=3D"line number19 inde=
x18 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code cl=
ass=3D"js comments">// app, we set a direct reference on the model for conv=
enience.</code></div><div class=3D"line number20 index19 alt1">&nbsp;</div>=
<div class=3D"line number21 index20 alt2"><code class=3D"js spaces">&nbsp;&=
nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">initialize: </code><code c=
lass=3D"js keyword">function</code><code class=3D"js plain">() {</code></di=
v><div class=3D"line number22 index21 alt1"><code class=3D"js spaces">&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">this</code=
><code class=3D"js plain">.model.on( </code><code class=3D"js string">"chan=
ge"</code><code class=3D"js plain">, </code><code class=3D"js keyword">this=
</code><code class=3D"js plain">.render, </code><code class=3D"js keyword">=
this</code> <code class=3D"js plain">);</code></div><div class=3D"line numb=
er23 index22 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;</code><code class=3D"js keyword">this</code><code class=3D"js plain"=
>.model.on( </code><code class=3D"js string">"destroy"</code><code class=3D=
"js plain">, </code><code class=3D"js keyword">this</code><code class=3D"js=
 plain">.remove, </code><code class=3D"js keyword">this</code> <code class=
=3D"js plain">);</code></div><div class=3D"line number24 index23 alt1"><cod=
e class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plai=
n">},</code></div><div class=3D"line number25 index24 alt2">&nbsp;</div><di=
v class=3D"line number26 index25 alt1"><code class=3D"js spaces">&nbsp;&nbs=
p;&nbsp;&nbsp;</code><code class=3D"js comments">// Re-render the photo ent=
ry</code></div><div class=3D"line number27 index26 alt2"><code class=3D"js =
spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">render: </c=
ode><code class=3D"js keyword">function</code><code class=3D"js plain">() {=
</code></div><div class=3D"line number28 index27 alt1"><code class=3D"js sp=
aces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">$=
( </code><code class=3D"js keyword">this</code><code class=3D"js plain">.el=
 ).html( </code><code class=3D"js keyword">this</code><code class=3D"js pla=
in">.template(</code><code class=3D"js keyword">this</code><code class=3D"j=
s plain">.model.toJSON() ));</code></div><div class=3D"line number29 index2=
8 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</cod=
e><code class=3D"js keyword">return</code> <code class=3D"js keyword">this<=
/code><code class=3D"js plain">;</code></div><div class=3D"line number30 in=
dex29 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code =
class=3D"js plain">},</code></div><div class=3D"line number31 index30 alt2"=
>&nbsp;</div><div class=3D"line number32 index31 alt1"><code class=3D"js sp=
aces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// Toggle =
the `"viewed"` state of the model.</code></div><div class=3D"line number33 =
index32 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><cod=
e class=3D"js plain">toggleViewed: </code><code class=3D"js keyword">functi=
on</code><code class=3D"js plain">() {</code></div><div class=3D"line numbe=
r34 index33 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;</code><code class=3D"js keyword">this</code><code class=3D"js plain">=
.model.viewed();</code></div><div class=3D"line number35 index34 alt2"><cod=
e class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plai=
n">}</code></div><div class=3D"line number36 index35 alt1">&nbsp;</div><div=
 class=3D"line number37 index36 alt2"><code class=3D"js plain">});</code></=
div></div></td></tr></tbody></table></div></div>

<p>Another (quite different) opinion is that Backbone more closely resemble=
s <a href=3D"http://martinfowler.com/eaaDev/uiArchs.html#ModelViewControlle=
r">Smalltalk-80 MVC</a>, which we went through earlier.</p>

<p>As regular Backbone blogger Derick Bailey has <a href=3D"http://lostechi=
es.com/derickbailey/2011/12/23/backbone-js-is-not-an-mvc-framework/">previo=
usly</a> put it, it's ultimately best not to force Backbone to fit any spec=
ific design patterns. Design patterns should be considered flexible guides =
to how applications may be structured and in this respect, Backbone fits ne=
ither MVC nor MVP. Instead, it borrows some of the best concepts from multi=
ple architectural patterns and creates a flexible framework that just works=
 well.</p>
<p>It <em>is</em> however worth understanding where and why these concepts =
originated, so I hope that my explanations of MVC and MVP have been of help=
. Call it <strong>the Backbone way</strong>, MV* or whatever helps referenc=
e its flavor of application architecture. Most structural JavaScript framew=
orks will adopt their own take on classical patterns, either intentionally =
or by accident, but the important thing is that they help us develop applic=
ations which are organized, clean and can be easily maintained.</p>
<p>&nbsp;</p>


<h2 id=3D"detailmvvm">
  <a href=3D"https://addyosmani.com/resources/essentialjsdesignpatterns/boo=
k/#detailmvvm" class=3D"subhead-link">#</a>
  MVVM
</h2>

<p>MVVM (Model View ViewModel) is an architectural pattern based on MVC and=
 MVP, which attempts to more clearly separate the development of user-inter=
faces (UI) from that of the business logic and behavior in an application. =
To this end, many implementations of this pattern make use of declarative d=
ata bindings to allow a separation of work on Views from other layers.</p>
<p>This facilitates UI and development work occurring almost simultaneously=
 within the same codebase. UI developers write bindings to the ViewModel wi=
thin their document markup (HTML), where the Model and ViewModel are mainta=
ined by developers working on the logic for the application.</p>
<h3>History</h3>
<p>MVVM (by name) was originally defined by Microsoft for use with Windows =
Presentation Foundation (<a href=3D"http://en.wikipedia.org/wiki/Windows_Pr=
esentation_Foundation">WPF</a>) and <a href=3D"http://www.microsoft.com/sil=
verlight/">Silverlight</a>, having been officially announced in 2005 by <a =
href=3D"http://blogs.msdn.com/b/johngossman/">John Grossman</a> in a blog p=
ost about Avalon (the codename for WPF). It also found some popularity in t=
he Adobe Flex community as an alternative to simply using MVC.</p>

<p>Prior to Microsoft adopting the MVVM name, there was however a movement =
in the community to go from MVP to MVPM: Model View <a href=3D"http://blogs=
.adobe.com/paulw/archives/2007/10/presentation_pa_3.html">PresentationModel=
</a>. Martin Fowler wrote an <a href=3D"http://martinfowler.com/eaaDev/Pres=
entationModel.html">article</a> on PresentationModels back in 2004 for thos=
e interested in reading more about it. The idea of a <a href=3D"http://blog=
s.infragistics.com/blogs/craig_shoemaker/archive/2009/11/03/learning-model-=
view-viewmodel-and-presentation-model.aspx">PresentationModel</a> had been =
around much longer than this article, however it was considered the big bre=
ak in the idea and greatly helped popularize it.</p>

<p>There was quite a lot of uproar in the "alt.net" circles after Microsoft=
 announced MVVM as an alternative to MVPM. Many claimed the company's domin=
ance in the GUI world was giving them the opportunity to take over the comm=
unity as a whole, renaming existing concepts as they pleased for marketing =
purposes. A progressive crowd recognized that whilst MVVM and MVPM were eff=
ectively the same idea, they came in slightly different packages.</p>
<p>In recent years, MVVM has been implemented in JavaScript in the form of =
structural frameworks such as <a href=3D"http://knockoutjs.com/">KnockoutJS=
</a>, <a href=3D"http://www.kendoui.com/web/roadmap.aspx">Kendo MVVM</a> an=
d <a href=3D"https://github.com/kmalakoff/knockback">Knockback.js</a>, with=
 an overall positive response from the community.</p>
<p>Let=E2=80=99s now review the three components that compose MVVM.</p>
<h3>Model</h3>
<p>As with other members of the MV* family, the Model in MVVM represents do=
main-specific data or information that our application will be working with=
. A typical example of domain-specific data might be a user account (e.g na=
me, avatar, e-mail) or a music track (e.g title, year, album).</p>
<p>Models hold information, but typically don=E2=80=99t handle behavior. Th=
ey don=E2=80=99t format information or influence how data appears in the br=
owser as this isn=E2=80=99t their responsibility. Instead, formatting of da=
ta is handled by the View, whilst behavior is considered business logic tha=
t should be encapsulated in another layer that interacts with the Model - t=
he ViewModel.</p>
<p>The only exception to this rule tends to be validation and it=E2=80=99s =
considered acceptable for Models to validate data being used to define or u=
pdate existing models (e.g does an e-mail address being input meet the requ=
irements of a particular regular expression?).</p>
<p>In KnockoutJS, Models fall under the above definition, but often make Aj=
ax calls to a server-side service to both read and write Model data.</p>
<p>If we were constructing a simple Todo application, a KnockoutJS Model re=
presenting a single Todo item could look as follows:</p>
<div><div id=3D"highlighter_618977" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div></td><td class=3D"code"><div clas=
s=3D"container"><div class=3D"line number1 index0 alt2"><code class=3D"js k=
eyword">var</code> <code class=3D"js plain">Todo =3D </code><code class=3D"=
js keyword">function</code> <code class=3D"js plain">( content, done ) {</c=
ode></div><div class=3D"line number2 index1 alt1"><code class=3D"js spaces"=
>&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">this</code><code=
 class=3D"js plain">.content =3D ko.observable(content);</code></div><div c=
lass=3D"line number3 index2 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nb=
sp;&nbsp;</code><code class=3D"js keyword">this</code><code class=3D"js pla=
in">.done =3D ko.observable(done);</code></div><div class=3D"line number4 i=
ndex3 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code =
class=3D"js keyword">this</code><code class=3D"js plain">.editing =3D ko.ob=
servable(</code><code class=3D"js keyword">false</code><code class=3D"js pl=
ain">);</code></div><div class=3D"line number5 index4 alt2"><code class=3D"=
js plain">};</code></div></div></td></tr></tbody></table></div></div>
<p>Note: One may notice in the above snippet that we are calling the method=
 <code>observable()</code> on the KnockoutJS namespace <code>ko</code>. In =
KnockoutJS, observables are special JavaScript objects that can notify subs=
cribers about changes and automatically detect dependencies. This allows us=
 to synchronize Models and ViewModels when the value of a Model attribute i=
s modified.</p>
<h3>View</h3>
<p>As with MVC, the View is the only part of the application that users act=
ually interact with. They are an interactive UI that represent the state of=
 a ViewModel. In this sense, the view is considered active rather than pass=
ive, but this is also true for views in MVC and MVP. In MVC, MVP and MVVM a=
 view can also be passive, but what does this mean?</p>
<p>A passive View only outputs a display and does not accept any user input=
.</p>
<p>Such a view may also have no real knowledge of the models in our applica=
tion and could be manipulated by a presenter. MVVM=E2=80=99s active View co=
ntains the data-bindings, events and behaviors which requires an understand=
ing of the ViewModel. Although these behaviors can be mapped to properties,=
 the View is still responsible for handling events from the ViewModel.</p>
<p>It=E2=80=99s important to remember the View isn=E2=80=99t responsible he=
re for handling state - it keeps this in sync with the ViewModel.</p>
<p>A KnockoutJS View is simply a HTML document with declarative bindings to=
 link it to the ViewModel. KnockoutJS Views display information from the Vi=
ewModel, pass commands to it (e.g a user clicking on an element) and update=
 as the state of the ViewModel changes. Templates generating markup using d=
ata from the ViewModel can however also be used for this purpose.</p>
<p>To give a brief initial example, we can look to the JavaScript MVVM fram=
ework KnockoutJS for how it allows the definition of a ViewModel and its re=
lated bindings in markup:</p>
<p>ViewModel:</p>
<div><div id=3D"highlighter_437522" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div></td>=
<td class=3D"code"><div class=3D"container"><div class=3D"line number1 inde=
x0 alt2"><code class=3D"js keyword">var</code> <code class=3D"js plain">aVi=
ewModel =3D {</code></div><div class=3D"line number2 index1 alt1"><code cla=
ss=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">co=
ntactName: ko.observable(</code><code class=3D"js string">"John"</code><cod=
e class=3D"js plain">)</code></div><div class=3D"line number3 index2 alt2">=
<code class=3D"js plain">};</code></div><div class=3D"line number4 index3 a=
lt1"><code class=3D"js plain">ko.applyBindings(aViewModel);</code></div></d=
iv></td></tr></tbody></table></div></div>
<p>View:</p>
<div><div id=3D"highlighter_978459" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div></td><td class=3D"code"><div clas=
s=3D"container"><div class=3D"line number1 index0 alt2"><code class=3D"js p=
lain">&lt;p&gt;&lt;input id=3D</code><code class=3D"js string">"source"</co=
de> <code class=3D"js plain">data-bind=3D</code><code class=3D"js string">"=
value: contactName, valueUpdate: 'keyup'"</code> <code class=3D"js plain">/=
&gt;&lt;/p&gt;</code></div><div class=3D"line number2 index1 alt1"><code cl=
ass=3D"js plain">&lt;div data-bind=3D</code><code class=3D"js string">"visi=
ble: contactName().length &gt; 10"</code><code class=3D"js plain">&gt;</cod=
e></div><div class=3D"line number3 index2 alt2"><code class=3D"js spaces">&=
nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">You have a really lo=
ng name!</code></div><div class=3D"line number4 index3 alt1"><code class=3D=
"js plain">&lt;/div&gt;</code></div><div class=3D"line number5 index4 alt2"=
><code class=3D"js plain">&lt;p&gt;Contact name: &lt;strong data-bind=3D</c=
ode><code class=3D"js string">"text: contactName"</code><code class=3D"js p=
lain">&gt;&lt;/strong&gt;&lt;/p&gt;</code></div></div></td></tr></tbody></t=
able></div></div>
<p>Our input text-box (source) obtains it's initial value from <code>contac=
tName</code>, automatically updating this value whenever contactName change=
s. As the data binding is two-way, typing into the text-box will update <co=
de>contactName</code> accordingly so the values are always in sync.</p>
<p>Although implementation specific to KnockoutJS, the <code>&lt;div&gt;</c=
ode> containing the "You have a really long name!" text also contains simpl=
e validation (once again in the form of data bindings). If the input exceed=
s 10 characters, it will display, otherwise it will remain hidden.</p>
<p>Moving on to a more advanced example, we can return to our Todo applicat=
ion. A trimmed down KnockoutJS View for this, including all the necessary d=
ata-bindings may look as follows.</p>
<div><div id=3D"highlighter_733348" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</=
div><div class=3D"line number19 index18 alt2">19</div><div class=3D"line nu=
mber20 index19 alt1">20</div><div class=3D"line number21 index20 alt2">21</=
div><div class=3D"line number22 index21 alt1">22</div><div class=3D"line nu=
mber23 index22 alt2">23</div><div class=3D"line number24 index23 alt1">24</=
div><div class=3D"line number25 index24 alt2">25</div><div class=3D"line nu=
mber26 index25 alt1">26</div><div class=3D"line number27 index26 alt2">27</=
div><div class=3D"line number28 index27 alt1">28</div></td><td class=3D"cod=
e"><div class=3D"container"><div class=3D"line number1 index0 alt2"><code c=
lass=3D"js plain">&lt;div id=3D</code><code class=3D"js string">"todoapp"</=
code><code class=3D"js plain">&gt;</code></div><div class=3D"line number2 i=
ndex1 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code =
class=3D"js plain">&lt;header&gt;</code></div><div class=3D"line number3 in=
dex2 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;</code><code class=3D"js plain">&lt;h1&gt;Todos&lt;/h1&gt;</code>=
</div><div class=3D"line number4 index3 alt1"><code class=3D"js spaces">&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain=
">&lt;input id=3D</code><code class=3D"js string">"new-todo"</code> <code c=
lass=3D"js plain">type=3D</code><code class=3D"js string">"text"</code> <co=
de class=3D"js plain">data-bind=3D</code><code class=3D"js string">"value: =
current, valueUpdate: 'afterkeydown', enterKey: add"</code></div><div class=
=3D"line number5 index4 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</co=
de><code class=3D"js plain">placeholder=3D</code><code class=3D"js string">=
"What needs to be done?"</code><code class=3D"js plain">/&gt;</code></div><=
div class=3D"line number6 index5 alt1"><code class=3D"js spaces">&nbsp;&nbs=
p;&nbsp;&nbsp;</code><code class=3D"js plain">&lt;/header&gt;</code></div><=
div class=3D"line number7 index6 alt2"><code class=3D"js spaces">&nbsp;&nbs=
p;&nbsp;&nbsp;</code><code class=3D"js plain">&lt;section id=3D</code><code=
 class=3D"js string">"main"</code> <code class=3D"js plain">data-bind=3D</c=
ode><code class=3D"js string">"block: todos().length"</code><code class=3D"=
js plain">&gt;</code></div><div class=3D"line number8 index7 alt1">&nbsp;</=
div><div class=3D"line number9 index8 alt2"><code class=3D"js spaces">&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">=
&lt;input id=3D</code><code class=3D"js string">"toggle-all"</code> <code c=
lass=3D"js plain">type=3D</code><code class=3D"js string">"checkbox"</code>=
 <code class=3D"js plain">data-bind=3D</code><code class=3D"js string">"che=
cked: allCompleted"</code><code class=3D"js plain">&gt;</code></div><div cl=
ass=3D"line number10 index9 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">&lt;label =
</code><code class=3D"js keyword">for</code><code class=3D"js plain">=3D</c=
ode><code class=3D"js string">"toggle-all"</code><code class=3D"js plain">&=
gt;Mark all as complete&lt;/label&gt;</code></div><div class=3D"line number=
11 index10 alt2">&nbsp;</div><div class=3D"line number12 index11 alt1"><cod=
e class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</cod=
e><code class=3D"js plain">&lt;ul id=3D</code><code class=3D"js string">"to=
do-list"</code> <code class=3D"js plain">data-bind=3D</code><code class=3D"=
js string">"foreach: todos"</code><code class=3D"js plain">&gt;</code></div=
><div class=3D"line number13 index12 alt2">&nbsp;</div><div class=3D"line n=
umber14 index13 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">&lt;=
!-- item --&gt;</code></div><div class=3D"line number15 index14 alt2"><code=
 class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">&lt;li data-bind=3D</code=
><code class=3D"js string">"css: { done: done, editing: editing }"</code><c=
ode class=3D"js plain">&gt;</code></div><div class=3D"line number16 index15=
 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D=
"js plain">&lt;div </code><code class=3D"js keyword">class</code><code clas=
s=3D"js plain">=3D</code><code class=3D"js string">"view"</code> <code clas=
s=3D"js plain">data-bind=3D</code><code class=3D"js string">"event: { dblcl=
ick: $root.editItem }"</code><code class=3D"js plain">&gt;</code></div><div=
 class=3D"line number17 index16 alt2"><code class=3D"js spaces">&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">&lt;input=
 </code><code class=3D"js keyword">class</code><code class=3D"js plain">=3D=
</code><code class=3D"js string">"toggle"</code> <code class=3D"js plain">t=
ype=3D</code><code class=3D"js string">"checkbox"</code> <code class=3D"js =
plain">data-bind=3D</code><code class=3D"js string">"checked: done"</code><=
code class=3D"js plain">&gt;</code></div><div class=3D"line number18 index1=
7 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;</code><code class=3D"js plain">&lt;label data-bind=3D</code><code clas=
s=3D"js string">"text: content"</code><code class=3D"js plain">&gt;&lt;/lab=
el&gt;</code></div><div class=3D"line number19 index18 alt2"><code class=3D=
"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js plain">&lt;a </code><code class=3D"js keyword">class</code><code cla=
ss=3D"js plain">=3D</code><code class=3D"js string">"destroy"</code> <code =
class=3D"js plain">href=3D</code><code class=3D"js string">"#"</code> <code=
 class=3D"js plain">data-bind=3D</code><code class=3D"js string">"click: $r=
oot.remove"</code><code class=3D"js plain">&gt;&lt;/a&gt;</code></div><div =
class=3D"line number20 index19 alt1"><code class=3D"js spaces">&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;</code><code class=3D"js plain">&lt;/div&gt;</code></div><div clas=
s=3D"line number21 index20 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;</code><code class=3D"js plain">&lt;input </code><code class=3D"js key=
word">class</code><code class=3D"js plain">=3D</code><code class=3D"js stri=
ng">"edit"</code> <code class=3D"js plain">type=3D</code><code class=3D"js =
string">"text"</code></div><div class=3D"line number22 index21 alt1"><code =
class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;</code><code class=3D"js plain">data-bind=3D</code><code class=3D"j=
s string">"value: content, valueUpdate: 'afterkeydown', enterKey: $root.sto=
pEditing, selectAndFocus: editing, event: { blur: $root.stopEditing }"</cod=
e><code class=3D"js plain">/&gt;</code></div><div class=3D"line number23 in=
dex22 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">&lt;/li&=
gt;</code></div><div class=3D"line number24 index23 alt1">&nbsp;</div><div =
class=3D"line number25 index24 alt2"><code class=3D"js spaces">&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">&lt;/ul=
&gt;</code></div><div class=3D"line number26 index25 alt1">&nbsp;</div><div=
 class=3D"line number27 index26 alt2"><code class=3D"js spaces">&nbsp;&nbsp=
;&nbsp;&nbsp;</code><code class=3D"js plain">&lt;/section&gt;</code></div><=
div class=3D"line number28 index27 alt1"><code class=3D"js plain">&lt;/div&=
gt;</code></div></div></td></tr></tbody></table></div></div>
<p>Note that the basic layout of the mark-up is relatively straight-forward=
, containing an input textbox (<code>new-todo</code>) for adding new items,=
 togglers for marking items as complete and a list (<code>todo-list</code>)=
 with a template for a Todo item in the form of an <code>li</code>.</p>
<p>The data bindings in the above markup can be broken down as follows:</p>
<ul>
  <li>The input textbox <code>new-todo</code> has a data-binding for the <c=
ode>current</code> property, which is where the value of the current item b=
eing added is stored. Our ViewModel (shown shortly) observes the <code>curr=
ent</code> property and also has a binding against the <code>add</code> eve=
nt. When the enter key is pressed, the <code>add</code> event is triggered =
and our ViewModel can then trim the value of <code>current</code> and add i=
t to the Todo list as needed</li>
  <li>The input checkbox <code>toggle-all</code> can mark all of the curren=
t items as completed if clicked. If checked, it triggers the <code>allCompl=
eted</code> event, which can be seen in our ViewModel</li>
  <li>The item <code>li</code> has the class <code>done</code>. When a task=
 is marked as done, the CSS class <code>editing</code> is marked accordingl=
y. If double-clicking on the item, the <code>$root.editItem</code> callback=
 will be executed</li>
  <li>The checkbox with the class <code>toggle</code> shows the state of th=
e <code>done</code> property</li>
  <li>A label contains the text value of the Todo item (<code>content</code=
>)</li>
  <li>There is also a remove button that will call the <code>$root.remove</=
code> callback when clicked.</li>
  <li>An input textbox used for editing mode also holds the value of the To=
do item <code>content</code>. The <code>enterKey</code> event will set the =
<code>editing</code> property to true or false</li>
</ul>
<p>&nbsp;</p>
<h3>ViewModel</h3>
<p>The ViewModel can be considered a specialized Controller that acts as a =
data converter. It changes Model information into View information, passing=
 commands from the View to the Model.</p>
<p>For example, let us imagine that we have a model containing a date attri=
bute in unix format (e.g 1333832407). Rather than our models being aware of=
 a user's view of the date (e.g 04/07/2012 @ 5:00pm), where it would be nec=
essary to convert the attribute to its display format, our model simply hol=
ds the raw format of the data. Our View contains the formatted date and our=
 ViewModel acts as a middle-man between the two.</p>
<p>In this sense, the ViewModel might be looked upon as more of a Model tha=
n a View but it does handle most of the View's display logic. The ViewModel=
 may also expose methods for helping to maintain the View's state, update t=
he model based on the action's on a View and trigger events on the View.</p=
>
<p>In summary, the ViewModel sits behind our UI layer. It exposes data need=
ed by a View (from a Model) and can be viewed as the source our Views go to=
 for both data and actions.</p>
<p>KnockoutJS interprets the ViewModel as the representation of data and op=
erations that can be performed on a UI. This isn't the UI itself nor the da=
ta model that persists, but rather a layer that can also hold the yet to be=
 saved data a user is working with. Knockout's ViewModels are implemented J=
avaScript objects with no knowledge of HTML markup. This abstract approach =
to their implementation allows them to stay simple, meaning more complex be=
havior can be more easily managed on-top as needed.</p>
<p>A partial KnockoutJS ViewModel for our Todo application could thus look =
as follows:</p>
<div><div id=3D"highlighter_572349" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</=
div><div class=3D"line number19 index18 alt2">19</div><div class=3D"line nu=
mber20 index19 alt1">20</div><div class=3D"line number21 index20 alt2">21</=
div><div class=3D"line number22 index21 alt1">22</div><div class=3D"line nu=
mber23 index22 alt2">23</div><div class=3D"line number24 index23 alt1">24</=
div><div class=3D"line number25 index24 alt2">25</div><div class=3D"line nu=
mber26 index25 alt1">26</div><div class=3D"line number27 index26 alt2">27</=
div><div class=3D"line number28 index27 alt1">28</div><div class=3D"line nu=
mber29 index28 alt2">29</div><div class=3D"line number30 index29 alt1">30</=
div><div class=3D"line number31 index30 alt2">31</div><div class=3D"line nu=
mber32 index31 alt1">32</div><div class=3D"line number33 index32 alt2">33</=
div><div class=3D"line number34 index33 alt1">34</div><div class=3D"line nu=
mber35 index34 alt2">35</div><div class=3D"line number36 index35 alt1">36</=
div><div class=3D"line number37 index36 alt2">37</div><div class=3D"line nu=
mber38 index37 alt1">38</div><div class=3D"line number39 index38 alt2">39</=
div><div class=3D"line number40 index39 alt1">40</div><div class=3D"line nu=
mber41 index40 alt2">41</div><div class=3D"line number42 index41 alt1">42</=
div><div class=3D"line number43 index42 alt2">43</div><div class=3D"line nu=
mber44 index43 alt1">44</div><div class=3D"line number45 index44 alt2">45</=
div><div class=3D"line number46 index45 alt1">46</div><div class=3D"line nu=
mber47 index46 alt2">47</div><div class=3D"line number48 index47 alt1">48</=
div><div class=3D"line number49 index48 alt2">49</div><div class=3D"line nu=
mber50 index49 alt1">50</div><div class=3D"line number51 index50 alt2">51</=
div><div class=3D"line number52 index51 alt1">52</div><div class=3D"line nu=
mber53 index52 alt2">53</div><div class=3D"line number54 index53 alt1">54</=
div><div class=3D"line number55 index54 alt2">55</div><div class=3D"line nu=
mber56 index55 alt1">56</div><div class=3D"line number57 index56 alt2">57</=
div></td><td class=3D"code"><div class=3D"container"><div class=3D"line num=
ber1 index0 alt2"><code class=3D"js comments">// our main ViewModel</code><=
/div><div class=3D"line number2 index1 alt1"><code class=3D"js spaces">&nbs=
p;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">var</code> <code clas=
s=3D"js plain">ViewModel =3D </code><code class=3D"js keyword">function</co=
de> <code class=3D"js plain">( todos ) {</code></div><div class=3D"line num=
ber3 index2 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">var</code> <code class=
=3D"js plain">self =3D </code><code class=3D"js keyword">this</code><code c=
lass=3D"js plain">;</code></div><div class=3D"line number4 index3 alt1">&nb=
sp;</div><div class=3D"line number5 index4 alt2"><code class=3D"js spaces">=
&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// map array of =
passed in todos to an observableArray of Todo objects</code></div><div clas=
s=3D"line number6 index5 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;=
&nbsp;</code><code class=3D"js plain">self.todos =3D ko.observableArray(</c=
ode></div><div class=3D"line number7 index6 alt2"><code class=3D"js spaces"=
>&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">ko.utils.arrayMap(=
 todos, </code><code class=3D"js keyword">function</code> <code class=3D"js=
 plain">( todo ) {</code></div><div class=3D"line number8 index7 alt1"><cod=
e class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</cod=
e><code class=3D"js keyword">return</code> <code class=3D"js keyword">new</=
code> <code class=3D"js plain">Todo( todo.content, todo.done );</code></div=
><div class=3D"line number9 index8 alt2"><code class=3D"js spaces">&nbsp;&n=
bsp;&nbsp;&nbsp;</code><code class=3D"js plain">}));</code></div><div class=
=3D"line number10 index9 alt1">&nbsp;</div><div class=3D"line number11 inde=
x10 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code cl=
ass=3D"js comments">// store the new todo value being entered</code></div><=
div class=3D"line number12 index11 alt1"><code class=3D"js spaces">&nbsp;&n=
bsp;&nbsp;&nbsp;</code><code class=3D"js plain">self.current =3D ko.observa=
ble();</code></div><div class=3D"line number13 index12 alt2">&nbsp;</div><d=
iv class=3D"line number14 index13 alt1"><code class=3D"js spaces">&nbsp;&nb=
sp;&nbsp;&nbsp;</code><code class=3D"js comments">// add a new todo, when e=
nter key is pressed</code></div><div class=3D"line number15 index14 alt2"><=
code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js p=
lain">self.add =3D </code><code class=3D"js keyword">function</code> <code =
class=3D"js plain">( data, event ) {</code></div><div class=3D"line number1=
6 index15 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;</code><code class=3D"js keyword">var</code> <code class=3D"=
js plain">newTodo, current =3D self.current().trim();</code></div><div clas=
s=3D"line number17 index16 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">if</code>=
 <code class=3D"js plain">( current ) {</code></div><div class=3D"line numb=
er18 index17 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">n=
ewTodo =3D </code><code class=3D"js keyword">new</code> <code class=3D"js p=
lain">Todo( current );</code></div><div class=3D"line number19 index18 alt2=
"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">self.todos.push( n=
ewTodo );</code></div><div class=3D"line number20 index19 alt1"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;</code><code class=3D"js plain">self.current(</code><code class=
=3D"js string">""</code><code class=3D"js plain">);</code></div><div class=
=3D"line number21 index20 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">}</code></di=
v><div class=3D"line number22 index21 alt1"><code class=3D"js spaces">&nbsp=
;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">};</code></div><div clas=
s=3D"line number23 index22 alt2">&nbsp;</div><div class=3D"line number24 in=
dex23 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code =
class=3D"js comments">// remove a single todo</code></div><div class=3D"lin=
e number25 index24 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;=
</code><code class=3D"js plain">self.remove =3D </code><code class=3D"js ke=
yword">function</code> <code class=3D"js plain">( todo ) {</code></div><div=
 class=3D"line number26 index25 alt1"><code class=3D"js spaces">&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">self.t=
odos.remove( todo );</code></div><div class=3D"line number27 index26 alt2">=
<code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js =
plain">};</code></div><div class=3D"line number28 index27 alt1">&nbsp;</div=
><div class=3D"line number29 index28 alt2"><code class=3D"js spaces">&nbsp;=
&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// remove all complete=
d todos</code></div><div class=3D"line number30 index29 alt1"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">self=
.removeCompleted =3D </code><code class=3D"js keyword">function</code> <cod=
e class=3D"js plain">() {</code></div><div class=3D"line number31 index30 a=
lt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;</code><code class=3D"js plain">self.todos.remove(</code><code class=3D=
"js keyword">function</code> <code class=3D"js plain">(todo) {</code></div>=
<div class=3D"line number32 index31 alt1"><code class=3D"js spaces">&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><co=
de class=3D"js keyword">return</code> <code class=3D"js plain">todo.done();=
</code></div><div class=3D"line number33 index32 alt2"><code class=3D"js sp=
aces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D=
"js plain">});</code></div><div class=3D"line number34 index33 alt1"><code =
class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain"=
>};</code></div><div class=3D"line number35 index34 alt2">&nbsp;</div><div =
class=3D"line number36 index35 alt1"><code class=3D"js spaces">&nbsp;&nbsp;=
&nbsp;&nbsp;</code><code class=3D"js comments">// writeable computed observ=
able to handle marking all complete/incomplete</code></div><div class=3D"li=
ne number37 index36 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp=
;</code><code class=3D"js plain">self.allCompleted =3D ko.computed({</code>=
</div><div class=3D"line number38 index37 alt1">&nbsp;</div><div class=3D"l=
ine number39 index38 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// always retu=
rn true/false based on the done flag of all todos</code></div><div class=3D=
"line number40 index39 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">read:</code><co=
de class=3D"js keyword">function</code> <code class=3D"js plain">() {</code=
></div><div class=3D"line number41 index40 alt2"><code class=3D"js spaces">=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</c=
ode><code class=3D"js keyword">return</code> <code class=3D"js plain">!self=
.remainingCount();</code></div><div class=3D"line number42 index41 alt1"><c=
ode class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</c=
ode><code class=3D"js plain">},</code></div><div class=3D"line number43 ind=
ex42 alt2">&nbsp;</div><div class=3D"line number44 index43 alt1"><code clas=
s=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><cod=
e class=3D"js comments">// set all todos to the written value (true/false)<=
/code></div><div class=3D"line number45 index44 alt2"><code class=3D"js spa=
ces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"=
js plain">write:</code><code class=3D"js keyword">function</code> <code cla=
ss=3D"js plain">( newValue ) {</code></div><div class=3D"line number46 inde=
x45 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">ko.utils.a=
rrayForEach( self.todos(), </code><code class=3D"js keyword">function</code=
> <code class=3D"js plain">( todo ) {</code></div><div class=3D"line number=
47 index46 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><cod=
e class=3D"js comments">//set even if value is the same, as subscribers are=
 not notified in that case</code></div><div class=3D"line number48 index47 =
alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"=
js plain">todo.done( newValue );</code></div><div class=3D"line number49 in=
dex48 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">});</cod=
e></div><div class=3D"line number50 index49 alt1"><code class=3D"js spaces"=
>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js p=
lain">}</code></div><div class=3D"line number51 index50 alt2"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">});<=
/code></div><div class=3D"line number52 index51 alt1">&nbsp;</div><div clas=
s=3D"line number53 index52 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbs=
p;&nbsp;</code><code class=3D"js comments">// edit an item</code></div><div=
 class=3D"line number54 index53 alt1"><code class=3D"js spaces">&nbsp;&nbsp=
;&nbsp;&nbsp;</code><code class=3D"js plain">self.editItem =3D </code><code=
 class=3D"js keyword">function</code><code class=3D"js plain">( item ) {</c=
ode></div><div class=3D"line number55 index54 alt2"><code class=3D"js space=
s">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js=
 plain">item.editing( </code><code class=3D"js keyword">true</code> <code c=
lass=3D"js plain">);</code></div><div class=3D"line number56 index55 alt1">=
<code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js =
plain">};</code></div><div class=3D"line number57 index56 alt2"><code class=
=3D"js spaces">&nbsp;</code><code class=3D"js plain">..</code></div></div><=
/td></tr></tbody></table></div></div>
<p>Above we are basically providing the methods needed to add, edit or remo=
ve items as well as the logic to mark all remaining items as having been co=
mpleted Note: The only real difference worth noting from previous examples =
in our ViewModel are observable arrays. In KnockoutJS, if we wish to detect=
 and respond to changes on a single object, we would use <code>observables<=
/code>. If however we wish to detect and respond to changes of a collection=
 of things, we can use an <code>observableArray</code> instead. A simpler e=
xample of how to use observables arrays may look as follows:</p>
<div><div id=3D"highlighter_743343" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div></td><td class=3D"code"><div clas=
s=3D"container"><div class=3D"line number1 index0 alt2"><code class=3D"js c=
omments">// Define an initially an empty array</code></div><div class=3D"li=
ne number2 index1 alt1"><code class=3D"js keyword">var</code> <code class=
=3D"js plain">myObservableArray =3D ko.observableArray();</code></div><div =
class=3D"line number3 index2 alt2">&nbsp;</div><div class=3D"line number4 i=
ndex3 alt1"><code class=3D"js comments">// Add a value to the array and not=
ify our observers</code></div><div class=3D"line number5 index4 alt2"><code=
 class=3D"js plain">myObservableArray.push( </code><code class=3D"js string=
">'A new todo item'</code> <code class=3D"js plain">);</code></div></div></=
td></tr></tbody></table></div></div>
<p>Note: The complete Knockout.js Todo application we reviewed above can be=
 grabbed from <a href=3D"http://todomvc.com/">TodoMVC</a> if interested.</p=
>
<h3>Recap: The View and the ViewModel</h3>
<p>Views and ViewModels communicate using data-bindings and events. As we s=
aw in our initial ViewModel example, the ViewModel doesn=E2=80=99t just exp=
ose Model attributes but also access to other methods and features such as =
validation.</p>
<p>Our Views handle their own user-interface events, mapping them to the Vi=
ewModel as necessary. Models and attributes on the ViewModel are synchroniz=
ed and updated via two-way data-binding.</p>
<p>Triggers (data-triggers) also allow us to further react to changes in th=
e state of our Model attributes.</p>
<h3>Recap: The ViewModel and the Model</h3>
<p>Whilst it may appear the ViewModel is completely responsible for the Mod=
el in MVVM, there are some subtleties with this relationship worth noting. =
The ViewModel can expose a Model or Model attributes for the purposes of da=
ta-binding and can also contain interfaces for fetching and manipulating pr=
operties exposed in the view.</p>
<h2>Pros and Cons</h2>
<p>We now hopefully have a better appreciation for what MVVM is and how it =
works. Let=E2=80=99s now review the advantages and disadvantages of employi=
ng the pattern:</p>
<h3>Advantages</h3>
<ul>
  <li>MVVM Facilitates easier parallel development of a UI and the building=
 blocks that power it</li>
  <li>Abstracts the View and thus reduces the quantity of business logic (o=
r glue) required in the code behind it</li>
  <li>The ViewModel can be easier to unit test than event-driven code</li>
  <li>The ViewModel (being more Model than View) can be tested without conc=
erns of UI automation and interaction</li>
</ul>
<h3>Disadvantages</h3>
<ul>
  <li>For simpler UIs, MVVM can be overkill</li>
  <li>Whilst data-bindings can be declarative and nice to work with, they c=
an be harder to debug than imperative code where we simply set breakpoints<=
/li>
  <li>Data-bindings in non-trivial applications can create a lot of book-ke=
eping. We also don=E2=80=99t want to end up in a situation where bindings a=
re heavier than the objects being bound to</li>
  <li>In larger applications, it can be more difficult to design the ViewMo=
del up front to get the necessary amount of generalization</li>
</ul>
<h2>MVVM With Looser Data-Bindings</h2>
<p>It=E2=80=99s not uncommon for JavaScript developers from an MVC or MVP b=
ackground to review MVVM and complain about its true separation of concerns=
. Namely, the quantity of inline data-bindings maintained in the HTML marku=
p of a View.</p>
<p>I must admit that when I first reviewed implementations of MVVM (e.g Kno=
ckoutJS, Knockback), I was surprised that any developer would want to retur=
n to the days of old where we mixed logic (JavaScript) with our markup and =
found it quickly unmaintainable. The reality however is that MVVM does this=
 for a number of good reasons (which we=E2=80=99ve covered), including faci=
litating designers to more easily bind to logic from their markup.</p>
<p>For the purists among us, you=E2=80=99ll be happy to know that we can no=
w also greatly reduce how reliant we are on data-bindings thanks to a featu=
re known as custom binding providers, introduced in KnockoutJS 1.3 and avai=
lable in all versions since.</p>
<p>KnockoutJS by default has a data-binding provider which searches for any=
 elements with <code>data-bind</code> attributes on them such as in the bel=
ow example.</p>
<div><div id=3D"highlighter_572965" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div></td><td class=3D"code"><div class=3D"container"><div class=3D"line num=
ber1 index0 alt2"><code class=3D"js plain">&lt;input id=3D</code><code clas=
s=3D"js string">"new-todo"</code> <code class=3D"js plain">type=3D</code><c=
ode class=3D"js string">"text"</code> <code class=3D"js plain">data-bind=3D=
</code><code class=3D"js string">"value: current, valueUpdate: 'afterkeydow=
n', enterKey: add"</code> <code class=3D"js plain">placeholder=3D</code><co=
de class=3D"js string">"What needs to be done?"</code><code class=3D"js pla=
in">/&gt;</code></div></div></td></tr></tbody></table></div></div>
<p>When the provider locates an element with this attribute, it parses it a=
nd turns it into a binding object using the current data context. This is t=
he way KnockoutJS has always worked, allowing us to declaratively add bindi=
ngs to elements which KnockoutJS binds to the data at that layer.</p>
<p>Once we start building Views that are no longer trivial, we may end up w=
ith a large number of elements and attributes whose bindings in markup can =
become difficult to manage. With custom binding providers however, this is =
no longer a problem.</p>
<p>A binding provider is primarily interested in two things:</p>
<ul>
  <li>When given a DOM node, does it contain any data-bindings?</li>
  <li>If the node passed this first question, what does the binding object =
look like in the current data context?</li>
</ul>
<p>Binding providers implement two functions:</p>
<ul>
  <li><code>nodeHasBindings</code>: this takes in a DOM node which doesn=E2=
=80=99t necessarily have to be an element</li>
  <li><code>getBindings</code>: returns an object representing the bindings=
 as applied to the current data context</li>
</ul>
<p>A skeleton binding provider might thus look as follows:</p>
<div><div id=3D"highlighter_949952" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div></td><td class=3D"code"><div class=3D"container"><div class=3D"line nu=
mber1 index0 alt2"><code class=3D"js keyword">var</code> <code class=3D"js =
plain">ourBindingProvider =3D {</code></div><div class=3D"line number2 inde=
x1 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js pla=
in">nodeHasBindings: </code><code class=3D"js keyword">function</code><code=
 class=3D"js plain">( node ) {</code></div><div class=3D"line number3 index=
2 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</cod=
e><code class=3D"js comments">// returns true/false</code></div><div class=
=3D"line number4 index3 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code>=
<code class=3D"js plain">},</code></div><div class=3D"line number5 index4 a=
lt2">&nbsp;</div><div class=3D"line number6 index5 alt1"><code class=3D"js =
spaces">&nbsp;&nbsp;</code><code class=3D"js plain">getBindings: </code><co=
de class=3D"js keyword">function</code><code class=3D"js plain">( node, bin=
dingContext ) {</code></div><div class=3D"line number7 index6 alt2"><code c=
lass=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js comments">// returns a binding object</code></div><div class=3D"line=
 number8 index7 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><code cl=
ass=3D"js plain">}</code></div><div class=3D"line number9 index8 alt2"><cod=
e class=3D"js plain">};</code></div></div></td></tr></tbody></table></div><=
/div>
<p>Before we get to fleshing out this provider, let=E2=80=99s briefly discu=
ss logic in data-bind attributes.</p>
<p>If when using Knockout=E2=80=99s MVVM we find yourself dissatisfied with=
 the idea of application logic being overly tied into your View, we can cha=
nge this. We could implement something a little like CSS classes to assign =
bindings by name to elements. Ryan Niemeyer (of knockmeout.net) has previou=
sly suggested using <code>data-class</code> for this to avoid confusing pre=
sentation classes with data classes, so let=E2=80=99s get our <code>nodeHas=
Bindings</code> function supporting this:</p>
<div><div id=3D"highlighter_948625" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div></td>=
<td class=3D"code"><div class=3D"container"><div class=3D"line number1 inde=
x0 alt2"><code class=3D"js comments">// does an element have any bindings?<=
/code></div><div class=3D"line number2 index1 alt1"><code class=3D"js keywo=
rd">function</code> <code class=3D"js plain">nodeHasBindings( node ) {</cod=
e></div><div class=3D"line number3 index2 alt2"><code class=3D"js spaces">&=
nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">return</code> <cod=
e class=3D"js plain">node.getAttribute ? node.getAttribute(</code><code cla=
ss=3D"js string">"data-class"</code><code class=3D"js plain">) : </code><co=
de class=3D"js keyword">false</code><code class=3D"js plain">;</code></div>=
<div class=3D"line number4 index3 alt1"><code class=3D"js plain">};</code><=
/div></div></td></tr></tbody></table></div></div>
<p>Next, we need a sensible <code>getBindings()</code> function. As we=E2=
=80=99re sticking with the idea of CSS classes, why not also consider suppo=
rting space-separated classes to allow us to share binding specs between di=
fferent elements?</p>
<p>Let=E2=80=99s first review what our bindings will look like. We create a=
n object to hold them where our property names need to match the keys we wi=
sh to use in our data-classes.</p>
<p>Note: There isn=E2=80=99t a great deal of work required to convert a Kno=
ckoutJS application from using traditional data-bindings over to unobtrusiv=
e bindings with custom binding providers. We simply pull our all of our dat=
a-bind attributes, replace them with data-class attributes and place our bi=
ndings in a binding object as per below:</p>
<div><div id=3D"highlighter_832387" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</=
div><div class=3D"line number19 index18 alt2">19</div><div class=3D"line nu=
mber20 index19 alt1">20</div><div class=3D"line number21 index20 alt2">21</=
div><div class=3D"line number22 index21 alt1">22</div><div class=3D"line nu=
mber23 index22 alt2">23</div><div class=3D"line number24 index23 alt1">24</=
div><div class=3D"line number25 index24 alt2">25</div><div class=3D"line nu=
mber26 index25 alt1">26</div><div class=3D"line number27 index26 alt2">27</=
div><div class=3D"line number28 index27 alt1">28</div><div class=3D"line nu=
mber29 index28 alt2">29</div><div class=3D"line number30 index29 alt1">30</=
div><div class=3D"line number31 index30 alt2">31</div><div class=3D"line nu=
mber32 index31 alt1">32</div><div class=3D"line number33 index32 alt2">33</=
div><div class=3D"line number34 index33 alt1">34</div><div class=3D"line nu=
mber35 index34 alt2">35</div><div class=3D"line number36 index35 alt1">36</=
div><div class=3D"line number37 index36 alt2">37</div><div class=3D"line nu=
mber38 index37 alt1">38</div><div class=3D"line number39 index38 alt2">39</=
div><div class=3D"line number40 index39 alt1">40</div><div class=3D"line nu=
mber41 index40 alt2">41</div><div class=3D"line number42 index41 alt1">42</=
div><div class=3D"line number43 index42 alt2">43</div><div class=3D"line nu=
mber44 index43 alt1">44</div><div class=3D"line number45 index44 alt2">45</=
div><div class=3D"line number46 index45 alt1">46</div><div class=3D"line nu=
mber47 index46 alt2">47</div><div class=3D"line number48 index47 alt1">48</=
div><div class=3D"line number49 index48 alt2">49</div><div class=3D"line nu=
mber50 index49 alt1">50</div><div class=3D"line number51 index50 alt2">51</=
div><div class=3D"line number52 index51 alt1">52</div><div class=3D"line nu=
mber53 index52 alt2">53</div><div class=3D"line number54 index53 alt1">54</=
div><div class=3D"line number55 index54 alt2">55</div><div class=3D"line nu=
mber56 index55 alt1">56</div><div class=3D"line number57 index56 alt2">57</=
div><div class=3D"line number58 index57 alt1">58</div><div class=3D"line nu=
mber59 index58 alt2">59</div><div class=3D"line number60 index59 alt1">60</=
div><div class=3D"line number61 index60 alt2">61</div><div class=3D"line nu=
mber62 index61 alt1">62</div><div class=3D"line number63 index62 alt2">63</=
div><div class=3D"line number64 index63 alt1">64</div><div class=3D"line nu=
mber65 index64 alt2">65</div><div class=3D"line number66 index65 alt1">66</=
div><div class=3D"line number67 index66 alt2">67</div><div class=3D"line nu=
mber68 index67 alt1">68</div><div class=3D"line number69 index68 alt2">69</=
div><div class=3D"line number70 index69 alt1">70</div><div class=3D"line nu=
mber71 index70 alt2">71</div><div class=3D"line number72 index71 alt1">72</=
div><div class=3D"line number73 index72 alt2">73</div><div class=3D"line nu=
mber74 index73 alt1">74</div><div class=3D"line number75 index74 alt2">75</=
div><div class=3D"line number76 index75 alt1">76</div><div class=3D"line nu=
mber77 index76 alt2">77</div><div class=3D"line number78 index77 alt1">78</=
div><div class=3D"line number79 index78 alt2">79</div><div class=3D"line nu=
mber80 index79 alt1">80</div><div class=3D"line number81 index80 alt2">81</=
div><div class=3D"line number82 index81 alt1">82</div><div class=3D"line nu=
mber83 index82 alt2">83</div><div class=3D"line number84 index83 alt1">84</=
div><div class=3D"line number85 index84 alt2">85</div><div class=3D"line nu=
mber86 index85 alt1">86</div><div class=3D"line number87 index86 alt2">87</=
div><div class=3D"line number88 index87 alt1">88</div><div class=3D"line nu=
mber89 index88 alt2">89</div><div class=3D"line number90 index89 alt1">90</=
div><div class=3D"line number91 index90 alt2">91</div><div class=3D"line nu=
mber92 index91 alt1">92</div><div class=3D"line number93 index92 alt2">93</=
div><div class=3D"line number94 index93 alt1">94</div><div class=3D"line nu=
mber95 index94 alt2">95</div><div class=3D"line number96 index95 alt1">96</=
div><div class=3D"line number97 index96 alt2">97</div></td><td class=3D"cod=
e"><div class=3D"container"><div class=3D"line number1 index0 alt2"><code c=
lass=3D"js keyword">var</code> <code class=3D"js plain">viewModel =3D </cod=
e><code class=3D"js keyword">new</code> <code class=3D"js plain">ViewModel(=
 todos || [] ),</code></div><div class=3D"line number2 index1 alt1"><code c=
lass=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">=
bindings =3D {</code></div><div class=3D"line number3 index2 alt2">&nbsp;</=
div><div class=3D"line number4 index3 alt1"><code class=3D"js spaces">&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">=
newTodo: {</code></div><div class=3D"line number5 index4 alt2"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;</code><code class=3D"js plain">value: viewModel.current,</code=
></div><div class=3D"line number6 index5 alt1"><code class=3D"js spaces">&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</cod=
e><code class=3D"js plain">valueUpdate: </code><code class=3D"js string">"a=
fterkeydown"</code><code class=3D"js plain">,</code></div><div class=3D"lin=
e number7 index6 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plai=
n">enterKey: viewModel.add</code></div><div class=3D"line number8 index7 al=
t1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;</code><code class=3D"js plain">},</code></div><div class=3D"line number=
9 index8 alt2">&nbsp;</div><div class=3D"line number10 index9 alt1"><code c=
lass=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><=
code class=3D"js plain">taskTooltip: {</code></div><div class=3D"line numbe=
r11 index10 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">vi=
sible: viewModel.showTooltip</code></div><div class=3D"line number12 index1=
1 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;</code><code class=3D"js plain">},</code></div><div class=3D"line nu=
mber13 index12 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">checkAllContainer: {</c=
ode></div><div class=3D"line number14 index13 alt1"><code class=3D"js space=
s">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
</code><code class=3D"js plain">visible: viewModel.todos().length</code></d=
iv><div class=3D"line number15 index14 alt2"><code class=3D"js spaces">&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain"=
>},</code></div><div class=3D"line number16 index15 alt1"><code class=3D"js=
 spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js plain">checkAll: {</code></div><div class=3D"line number17 index16 a=
lt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">checked: viewMo=
del.allCompleted</code></div><div class=3D"line number18 index17 alt1"><cod=
e class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</cod=
e><code class=3D"js plain">},</code></div><div class=3D"line number19 index=
18 alt2">&nbsp;</div><div class=3D"line number20 index19 alt1"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code=
 class=3D"js plain">todos: {</code></div><div class=3D"line number21 index2=
0 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">foreach: vie=
wModel.todos</code></div><div class=3D"line number22 index21 alt1"><code cl=
ass=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><c=
ode class=3D"js plain">},</code></div><div class=3D"line number23 index22 a=
lt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;</code><code class=3D"js plain">todoListItem: </code><code class=3D"js =
keyword">function</code><code class=3D"js plain">() {</code></div><div clas=
s=3D"line number24 index23 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js keyword">return</code> <code class=3D"js plain">{</code></div><div c=
lass=3D"line number25 index24 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;</code><code class=3D"js plain">css: {</code></div><div class=3D"li=
ne number26 index25 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">editing: </code><code=
 class=3D"js keyword">this</code><code class=3D"js plain">.editing</code></=
div><div class=3D"line number27 index26 alt2"><code class=3D"js spaces">&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">}</code></div><div class=
=3D"line number28 index27 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js plain">};</code></div><div class=3D"line number29 index28 alt2"><cod=
e class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</cod=
e><code class=3D"js plain">},</code></div><div class=3D"line number30 index=
29 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;</code><code class=3D"js plain">todoListItemWrapper: </code><code c=
lass=3D"js keyword">function</code><code class=3D"js plain">() {</code></di=
v><div class=3D"line number31 index30 alt2"><code class=3D"js spaces">&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><=
code class=3D"js keyword">return</code> <code class=3D"js plain">{</code></=
div><div class=3D"line number32 index31 alt1"><code class=3D"js spaces">&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">css: {</code></div><div c=
lass=3D"line number33 index32 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">done: </cod=
e><code class=3D"js keyword">this</code><code class=3D"js plain">.done</cod=
e></div><div class=3D"line number34 index33 alt1"><code class=3D"js spaces"=
>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">}</code></div><div cl=
ass=3D"line number35 index34 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code clas=
s=3D"js plain">};</code></div><div class=3D"line number36 index35 alt1"><co=
de class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</co=
de><code class=3D"js plain">},</code></div><div class=3D"line number37 inde=
x36 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;</code><code class=3D"js plain">todoCheckBox: </code><code class=
=3D"js keyword">function</code><code class=3D"js plain">() {</code></div><d=
iv class=3D"line number38 index37 alt1"><code class=3D"js spaces">&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code=
 class=3D"js keyword">return</code> <code class=3D"js plain">{</code></div>=
<div class=3D"line number39 index38 alt2"><code class=3D"js spaces">&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;</code><code class=3D"js plain">checked: </code><code class=
=3D"js keyword">this</code><code class=3D"js plain">.done</code></div><div =
class=3D"line number40 index39 alt1"><code class=3D"js spaces">&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code cl=
ass=3D"js plain">};</code></div><div class=3D"line number41 index40 alt2"><=
code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</=
code><code class=3D"js plain">},</code></div><div class=3D"line number42 in=
dex41 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;</code><code class=3D"js plain">todoContent: </code><code class=
=3D"js keyword">function</code><code class=3D"js plain">() {</code></div><d=
iv class=3D"line number43 index42 alt2"><code class=3D"js spaces">&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code=
 class=3D"js keyword">return</code> <code class=3D"js plain">{</code></div>=
<div class=3D"line number44 index43 alt1"><code class=3D"js spaces">&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;</code><code class=3D"js plain">text: </code><code class=3D"j=
s keyword">this</code><code class=3D"js plain">.content,</code></div><div c=
lass=3D"line number45 index44 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;</code><code class=3D"js plain">event: {</code></div><div class=3D"=
line number46 index45 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">dblclick: </code><c=
ode class=3D"js keyword">this</code><code class=3D"js plain">.edit</code></=
div><div class=3D"line number47 index46 alt2"><code class=3D"js spaces">&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">}</code></div><div class=
=3D"line number48 index47 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js plain">};</code></div><div class=3D"line number49 index48 alt2"><cod=
e class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</cod=
e><code class=3D"js plain">},</code></div><div class=3D"line number50 index=
49 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;</code><code class=3D"js plain">todoDestroy: </code><code class=3D"=
js keyword">function</code><code class=3D"js plain">() {</code></div><div c=
lass=3D"line number51 index50 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code cla=
ss=3D"js keyword">return</code> <code class=3D"js plain">{</code></div><div=
 class=3D"line number52 index51 alt1"><code class=3D"js spaces">&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;</code><code class=3D"js plain">click: viewModel.remove</code></d=
iv><div class=3D"line number53 index52 alt2"><code class=3D"js spaces">&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>=
<code class=3D"js plain">};</code></div><div class=3D"line number54 index53=
 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;</code><code class=3D"js plain">},</code></div><div class=3D"line num=
ber55 index54 alt2">&nbsp;</div><div class=3D"line number56 index55 alt1"><=
code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</=
code><code class=3D"js plain">todoEdit: </code><code class=3D"js keyword">f=
unction</code><code class=3D"js plain">() {</code></div><div class=3D"line =
number57 index56 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyw=
ord">return</code> <code class=3D"js plain">{</code></div><div class=3D"lin=
e number58 index57 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</c=
ode><code class=3D"js plain">value: </code><code class=3D"js keyword">this<=
/code><code class=3D"js plain">.content,</code></div><div class=3D"line num=
ber59 index58 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><=
code class=3D"js plain">valueUpdate: </code><code class=3D"js string">"afte=
rkeydown"</code><code class=3D"js plain">,</code></div><div class=3D"line n=
umber60 index59 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code=
><code class=3D"js plain">enterKey: </code><code class=3D"js keyword">this<=
/code><code class=3D"js plain">.stopEditing,</code></div><div class=3D"line=
 number61 index60 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</co=
de><code class=3D"js plain">event: {</code></div><div class=3D"line number6=
2 index61 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;</code><code class=3D"js plain">blur: </code><code class=3D"js =
keyword">this</code><code class=3D"js plain">.stopEditing</code></div><div =
class=3D"line number63 index62 alt2"><code class=3D"js spaces">&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;</code><code class=3D"js plain">}</code></div><div class=3D"line n=
umber64 index63 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain=
">};</code></div><div class=3D"line number65 index64 alt2"><code class=3D"j=
s spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code clas=
s=3D"js plain">},</code></div><div class=3D"line number66 index65 alt1">&nb=
sp;</div><div class=3D"line number67 index66 alt2"><code class=3D"js spaces=
">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js =
plain">todoCount: {</code></div><div class=3D"line number68 index67 alt1"><=
code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">visible: viewModel.re=
mainingCount</code></div><div class=3D"line number69 index68 alt2"><code cl=
ass=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><c=
ode class=3D"js plain">},</code></div><div class=3D"line number70 index69 a=
lt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;</code><code class=3D"js plain">remainingCount: {</code></div><div clas=
s=3D"line number71 index70 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js plain">text: viewModel.remainingCount</code></div><div class=3D"line=
 number72 index71 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">},</code></div><div =
class=3D"line number73 index72 alt2"><code class=3D"js spaces">&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">remaini=
ngCountWord: </code><code class=3D"js keyword">function</code><code class=
=3D"js plain">() {</code></div><div class=3D"line number74 index73 alt1"><c=
ode class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">return</code> <code =
class=3D"js plain">{</code></div><div class=3D"line number75 index74 alt2">=
<code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js pla=
in">text: viewModel.getLabel(viewModel.remainingCount)</code></div><div cla=
ss=3D"line number76 index75 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js plain">};</code></div><div class=3D"line number77 index76 alt2"><cod=
e class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</cod=
e><code class=3D"js plain">},</code></div><div class=3D"line number78 index=
77 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;</code><code class=3D"js plain">todoClear: {</code></div><div class=
=3D"line number79 index78 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js plain">visible: viewModel.completedCount</code></div><div class=3D"l=
ine number80 index79 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">},</code></div><d=
iv class=3D"line number81 index80 alt2"><code class=3D"js spaces">&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">todo=
ClearAll: {</code></div><div class=3D"line number82 index81 alt1"><code cla=
ss=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;</code><code class=3D"js plain">click: viewModel.removeComple=
ted</code></div><div class=3D"line number83 index82 alt2"><code class=3D"js=
 spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js plain">},</code></div><div class=3D"line number84 index83 alt1"><cod=
e class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</cod=
e><code class=3D"js plain">completedCount: {</code></div><div class=3D"line=
 number85 index84 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js pla=
in">text: viewModel.completedCount</code></div><div class=3D"line number86 =
index85 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;</code><code class=3D"js plain">},</code></div><div class=3D"l=
ine number87 index86 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">completedCountWor=
d: </code><code class=3D"js keyword">function</code><code class=3D"js plain=
">() {</code></div><div class=3D"line number88 index87 alt1"><code class=3D=
"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;</code><code class=3D"js keyword">return</code> <code class=3D"js =
plain">{</code></div><div class=3D"line number89 index88 alt2"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">text: v=
iewModel.getLabel(viewModel.completedCount)</code></div><div class=3D"line =
number90 index89 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plai=
n">};</code></div><div class=3D"line number91 index90 alt2"><code class=3D"=
js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code cla=
ss=3D"js plain">},</code></div><div class=3D"line number92 index91 alt1"><c=
ode class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</c=
ode><code class=3D"js plain">todoInstructions: {</code></div><div class=3D"=
line number93 index92 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js=
 plain">visible: viewModel.todos().length</code></div><div class=3D"line nu=
mber94 index93 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">}</code></div><div clas=
s=3D"line number95 index94 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbs=
p;&nbsp;</code><code class=3D"js plain">};</code></div><div class=3D"line n=
umber96 index95 alt1">&nbsp;</div><div class=3D"line number97 index96 alt2"=
><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js=
 plain">....</code></div></div></td></tr></tbody></table></div></div>
<p>There are however two lines missing from the above snippet - we still ne=
ed our <code>getBindings</code> function, which will loop through each of t=
he keys in our data-class attributes and build up the resulting object from=
 each of them. If we detect that the binding object is a function, we call =
it with our current data using the context <code>this</code>. Our complete =
custom binding provider would look as follows:</p>
<div><div id=3D"highlighter_306642" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</=
div><div class=3D"line number19 index18 alt2">19</div><div class=3D"line nu=
mber20 index19 alt1">20</div><div class=3D"line number21 index20 alt2">21</=
div><div class=3D"line number22 index21 alt1">22</div><div class=3D"line nu=
mber23 index22 alt2">23</div><div class=3D"line number24 index23 alt1">24</=
div><div class=3D"line number25 index24 alt2">25</div><div class=3D"line nu=
mber26 index25 alt1">26</div><div class=3D"line number27 index26 alt2">27</=
div><div class=3D"line number28 index27 alt1">28</div><div class=3D"line nu=
mber29 index28 alt2">29</div><div class=3D"line number30 index29 alt1">30</=
div><div class=3D"line number31 index30 alt2">31</div><div class=3D"line nu=
mber32 index31 alt1">32</div><div class=3D"line number33 index32 alt2">33</=
div><div class=3D"line number34 index33 alt1">34</div><div class=3D"line nu=
mber35 index34 alt2">35</div></td><td class=3D"code"><div class=3D"containe=
r"><div class=3D"line number1 index0 alt2"><code class=3D"js spaces">&nbsp;=
&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// We can now create a=
 bindingProvider that uses</code></div><div class=3D"line number2 index1 al=
t1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D=
"js comments">// something different than data-bind attributes</code></div>=
<div class=3D"line number3 index2 alt2"><code class=3D"js spaces">&nbsp;&nb=
sp;&nbsp;&nbsp;</code><code class=3D"js plain">ko.customBindingProvider =3D=
 </code><code class=3D"js keyword">function</code><code class=3D"js plain">=
( bindingObject ) {</code></div><div class=3D"line number4 index3 alt1"><co=
de class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</co=
de><code class=3D"js keyword">this</code><code class=3D"js plain">.bindingO=
bject =3D bindingObject;</code></div><div class=3D"line number5 index4 alt2=
">&nbsp;</div><div class=3D"line number6 index5 alt1"><code class=3D"js spa=
ces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"=
js comments">// determine if an element has any bindings</code></div><div c=
lass=3D"line number7 index6 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">this</co=
de><code class=3D"js plain">.nodeHasBindings =3D </code><code class=3D"js k=
eyword">function</code><code class=3D"js plain">( node ) {</code></div><div=
 class=3D"line number8 index7 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code cla=
ss=3D"js keyword">return</code> <code class=3D"js plain">node.getAttribute =
? node.getAttribute( </code><code class=3D"js string">"data-class"</code> <=
code class=3D"js plain">) : </code><code class=3D"js keyword">false</code><=
code class=3D"js plain">;</code></div><div class=3D"line number9 index8 alt=
2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</code><code class=3D"js plain">};</code></div><div class=3D"line number1=
0 index9 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</code><code class=3D"js plain">};</code></div><div class=3D"line number1=
1 index10 alt2">&nbsp;</div><div class=3D"line number12 index11 alt1"><code=
 class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comme=
nts">// return the bindings given a node and the bindingContext</code></div=
><div class=3D"line number13 index12 alt2"><code class=3D"js spaces">&nbsp;=
&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">this</code><code class=
=3D"js plain">.getBindings =3D </code><code class=3D"js keyword">function</=
code><code class=3D"js plain">( node, bindingContext ) {</code></div><div c=
lass=3D"line number14 index13 alt1">&nbsp;</div><div class=3D"line number15=
 index14 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;</code><code class=3D"js keyword">var</code> <code class=3D"j=
s plain">result =3D {},</code></div><div class=3D"line number16 index15 alt=
1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">classes =3D node.=
getAttribute( </code><code class=3D"js string">"data-class"</code> <code cl=
ass=3D"js plain">);</code></div><div class=3D"line number17 index16 alt2">&=
nbsp;</div><div class=3D"line number18 index17 alt1"><code class=3D"js spac=
es">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"j=
s keyword">if</code> <code class=3D"js plain">( classes ) {</code></div><di=
v class=3D"line number19 index18 alt2"><code class=3D"js spaces">&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code =
class=3D"js plain">classes =3D classes.split( </code><code class=3D"js stri=
ng">""</code> <code class=3D"js plain">);</code></div><div class=3D"line nu=
mber20 index19 alt1">&nbsp;</div><div class=3D"line number21 index20 alt2">=
<code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">//evaluate each c=
lass, build a single object to return</code></div><div class=3D"line number=
22 index21 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">f=
or</code> <code class=3D"js plain">( </code><code class=3D"js keyword">var<=
/code> <code class=3D"js plain">i =3D 0, j =3D classes.length; i &lt; j; i+=
+ ) {</code></div><div class=3D"line number23 index22 alt2">&nbsp;</div><di=
v class=3D"line number24 index23 alt1"><code class=3D"js spaces">&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;</code><code class=3D"js keyword">var</code> <code class=3D"js plain">=
bindingAccessor =3D </code><code class=3D"js keyword">this</code><code clas=
s=3D"js plain">.bindingObject[classes[i]];</code></div><div class=3D"line n=
umber25 index24 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code=
 class=3D"js keyword">if</code> <code class=3D"js plain">( bindingAccessor =
) {</code></div><div class=3D"line number26 index25 alt1"><code class=3D"js=
 spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js ke=
yword">var</code> <code class=3D"js plain">binding =3D </code><code class=
=3D"js keyword">typeof</code> <code class=3D"js plain">bindingAccessor =3D=
=3D=3D </code><code class=3D"js string">"function"</code> <code class=3D"js=
 plain">? bindingAccessor.call(bindingContext.$data) : bindingAccessor;</co=
de></div><div class=3D"line number27 index26 alt2"><code class=3D"js spaces=
">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">ko=
.utils.extend(result, binding);</code></div><div class=3D"line number28 ind=
ex27 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"j=
s plain">}</code></div><div class=3D"line number29 index28 alt2">&nbsp;</di=
v><div class=3D"line number30 index29 alt1"><code class=3D"js spaces">&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><=
code class=3D"js plain">}</code></div><div class=3D"line number31 index30 a=
lt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;</code><code class=3D"js plain">}</code></div><div class=3D"line number=
32 index31 alt1">&nbsp;</div><div class=3D"line number33 index32 alt2"><cod=
e class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</cod=
e><code class=3D"js keyword">return</code> <code class=3D"js plain">result;=
</code></div><div class=3D"line number34 index33 alt1"><code class=3D"js sp=
aces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">};</code></di=
v><div class=3D"line number35 index34 alt2"><code class=3D"js plain">};</co=
de></div></div></td></tr></tbody></table></div></div>
<p>Thus, the final few lines of our <code>bindings</code> object can be def=
ined as follows:</p>
<div><div id=3D"highlighter_974431" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div></td><td class=
=3D"code"><div class=3D"container"><div class=3D"line number1 index0 alt2">=
<code class=3D"js comments">// set ko's current bindingProvider equal to ou=
r new binding provider</code></div><div class=3D"line number2 index1 alt1">=
<code class=3D"js plain">ko.bindingProvider.instance =3D </code><code class=
=3D"js keyword">new</code> <code class=3D"js plain">ko.customBindingProvide=
r( bindings );</code></div><div class=3D"line number3 index2 alt2">&nbsp;</=
div><div class=3D"line number4 index3 alt1"><code class=3D"js comments">// =
bind a new instance of our ViewModel to the page</code></div><div class=3D"=
line number5 index4 alt2"><code class=3D"js plain">ko.applyBindings( viewMo=
del );</code></div><div class=3D"line number6 index5 alt1">&nbsp;</div><div=
 class=3D"line number7 index6 alt2"><code class=3D"js plain">})();</code></=
div></div></td></tr></tbody></table></div></div>
<p>What we=E2=80=99re doing here is effectively defining constructor for ou=
r binding handler which accepts an object (bindings) which we use to lookup=
 our bindings. We could then re-write the markup for our application View u=
sing data-classes as follows:</p>
<div><div id=3D"highlighter_289918" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</=
div><div class=3D"line number19 index18 alt2">19</div><div class=3D"line nu=
mber20 index19 alt1">20</div><div class=3D"line number21 index20 alt2">21</=
div><div class=3D"line number22 index21 alt1">22</div><div class=3D"line nu=
mber23 index22 alt2">23</div><div class=3D"line number24 index23 alt1">24</=
div></td><td class=3D"code"><div class=3D"container"><div class=3D"line num=
ber1 index0 alt2"><code class=3D"js plain">&lt;div id=3D</code><code class=
=3D"js string">"create-todo"</code><code class=3D"js plain">&gt;</code></di=
v><div class=3D"line number2 index1 alt1"><code class=3D"js spaces">&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;</code><code class=3D"js plain">&lt;input id=3D</code><code c=
lass=3D"js string">"new-todo"</code> <code class=3D"js plain">data-</code><=
code class=3D"js keyword">class</code><code class=3D"js plain">=3D</code><c=
ode class=3D"js string">"newTodo"</code> <code class=3D"js plain">placehold=
er=3D</code><code class=3D"js string">"What needs to be done?"</code> <code=
 class=3D"js plain">/&gt;</code></div><div class=3D"line number3 index2 alt=
2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js =
plain">&lt;span </code><code class=3D"js keyword">class</code><code class=
=3D"js plain">=3D</code><code class=3D"js string">"ui-tooltip-top"</code> <=
code class=3D"js plain">data-</code><code class=3D"js keyword">class</code>=
<code class=3D"js plain">=3D</code><code class=3D"js string">"taskTooltip"<=
/code> <code class=3D"js plain">style=3D</code><code class=3D"js string">"d=
isplay: none;"</code><code class=3D"js plain">&gt;Press Enter to save </cod=
e><code class=3D"js keyword">this</code> <code class=3D"js plain">task&lt;/=
span&gt;</code></div><div class=3D"line number4 index3 alt1"><code class=3D=
"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;</code><code class=3D"js plain">&lt;/div&gt;</code></div><div clas=
s=3D"line number5 index4 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D=
"js plain">&lt;div id=3D</code><code class=3D"js string">"todos"</code><cod=
e class=3D"js plain">&gt;</code></div><div class=3D"line number6 index5 alt=
1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js =
plain">&lt;div data-</code><code class=3D"js keyword">class</code><code cla=
ss=3D"js plain">=3D</code><code class=3D"js string">"checkAllContainer"</co=
de> <code class=3D"js plain">&gt;</code></div><div class=3D"line number7 in=
dex6 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;</code><code class=3D"js plain">&lt;input id=3D</code><code class=3D=
"js string">"check-all"</code> <code class=3D"js keyword">class</code><code=
 class=3D"js plain">=3D</code><code class=3D"js string">"check"</code> <cod=
e class=3D"js plain">type=3D</code><code class=3D"js string">"checkbox"</co=
de> <code class=3D"js plain">data-</code><code class=3D"js keyword">class</=
code><code class=3D"js plain">=3D</code><code class=3D"js string">"checkAll=
"</code> <code class=3D"js plain">/&gt;</code></div><div class=3D"line numb=
er8 index7 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;</code><code class=3D"js plain">&lt;label </code><code class=
=3D"js keyword">for</code><code class=3D"js plain">=3D</code><code class=3D=
"js string">"check-all"</code><code class=3D"js plain">&gt;Mark all as comp=
lete&lt;/label&gt;</code></div><div class=3D"line number9 index8 alt2"><cod=
e class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">=
&lt;/div&gt;</code></div><div class=3D"line number10 index9 alt1"><code cla=
ss=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">&lt;u=
l id=3D</code><code class=3D"js string">"todo-list"</code> <code class=3D"j=
s plain">data-</code><code class=3D"js keyword">class</code><code class=3D"=
js plain">=3D</code><code class=3D"js string">"todos"</code> <code class=3D=
"js plain">&gt;</code></div><div class=3D"line number11 index10 alt2"><code=
 class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><c=
ode class=3D"js plain">&lt;li data-</code><code class=3D"js keyword">class<=
/code><code class=3D"js plain">=3D</code><code class=3D"js string">"todoLis=
tItem"</code> <code class=3D"js plain">&gt;</code></div><div class=3D"line =
number12 index11 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">=
&lt;div </code><code class=3D"js keyword">class</code><code class=3D"js pla=
in">=3D</code><code class=3D"js string">"todo"</code> <code class=3D"js pla=
in">data-</code><code class=3D"js keyword">class</code><code class=3D"js pl=
ain">=3D</code><code class=3D"js string">"todoListItemWrapper"</code> <code=
 class=3D"js plain">&gt;</code></div><div class=3D"line number13 index12 al=
t2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js pl=
ain">&lt;div </code><code class=3D"js keyword">class</code><code class=3D"j=
s plain">=3D</code><code class=3D"js string">"display"</code><code class=3D=
"js plain">&gt;</code></div><div class=3D"line number14 index13 alt1"><code=
 class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code=
 class=3D"js plain">&lt;input </code><code class=3D"js keyword">class</code=
><code class=3D"js plain">=3D</code><code class=3D"js string">"check"</code=
> <code class=3D"js plain">type=3D</code><code class=3D"js string">"checkbo=
x"</code> <code class=3D"js plain">data-</code><code class=3D"js keyword">c=
lass</code><code class=3D"js plain">=3D</code><code class=3D"js string">"to=
doCheckBox"</code> <code class=3D"js plain">/&gt;</code></div><div class=3D=
"line number15 index14 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">&lt;div </code><code =
class=3D"js keyword">class</code><code class=3D"js plain">=3D</code><code c=
lass=3D"js string">"todo-content"</code> <code class=3D"js plain">data-</co=
de><code class=3D"js keyword">class</code><code class=3D"js plain">=3D</cod=
e><code class=3D"js string">"todoContent"</code> <code class=3D"js plain">s=
tyle=3D</code><code class=3D"js string">"cursor: pointer;"</code><code clas=
s=3D"js plain">&gt;&lt;/div&gt;</code></div><div class=3D"line number16 ind=
ex15 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;</code><code class=3D"js plain">&lt;span </code><code class=3D"js keywo=
rd">class</code><code class=3D"js plain">=3D</code><code class=3D"js string=
">"todo-destroy"</code> <code class=3D"js plain">data-</code><code class=3D=
"js keyword">class</code><code class=3D"js plain">=3D</code><code class=3D"=
js string">"todoDestroy"</code><code class=3D"js plain">&gt;&lt;/span&gt;</=
code></div><div class=3D"line number17 index16 alt2"><code class=3D"js spac=
es">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">&lt;/div&gt;</code></=
div><div class=3D"line number18 index17 alt1"><code class=3D"js spaces">&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;</code><code class=3D"js plain">&lt;div </code><code class=
=3D"js keyword">class</code><code class=3D"js plain">=3D</code><code class=
=3D"js string">"edit'&gt;</code></div><div class=3D"line number19 index18 a=
lt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</=
code><code class=3D"js string">&lt;input class=3D"</code><code class=3D"js =
plain">todo-input</code><code class=3D"js string">" data-class=3D"</code><c=
ode class=3D"js plain">todoEdit'/&gt;</code></div><div class=3D"line number=
20 index19 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code c=
lass=3D"js plain">&lt;/div&gt;</code></div><div class=3D"line number21 inde=
x20 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">&lt;/div&gt;<=
/code></div><div class=3D"line number22 index21 alt1"><code class=3D"js spa=
ces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js =
plain">&lt;/li&gt;</code></div><div class=3D"line number23 index22 alt2"><c=
ode class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain=
">&lt;/ul&gt;</code></div><div class=3D"line number24 index23 alt1"><code c=
lass=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</code><code class=3D"js plain">&lt;/div&gt;</code></div></=
div></td></tr></tbody></table></div></div>
<p>Neil Kerkin has put together a complete TodoMVC demo app using the above=
, which can be accessed and played around with <a href=3D"http://jsfiddle.n=
et/nkerkin/hmq7D/light/">here</a>.</p>
<p>Whilst it may look like quite a lot of work in the explanation above, no=
w that we have a generic <code>getBindings</code> method written, it=E2=80=
=99s a lot more trivial to simply re-use it and use data-classes rather tha=
n strict data-bindings for writing our KnockoutJS applications instead. The=
 net result is hopefully cleaner markup with our data bindings being shifte=
d from the View to a bindings object instead.</p>
<h2>MVC Vs. MVP Vs. MVVM</h2>
<p>Both MVP and MVVM are derivatives of MVC. The key difference between it =
and its derivatives is the dependency each layer has on other layers as wel=
l as how tightly bound they are to each other.</p>
<p>In MVC, the View sits on top of our architecture with the controller bes=
ide it. Models sit below the controller and so our Views know about our con=
trollers and controllers know about Models. Here, our Views have direct acc=
ess to Models. Exposing the complete Model to the View however may have sec=
urity and performance costs, depending on the complexity of our application=
. MVVM attempts to avoid these issues.</p>
<p>In MVP, the role of the controller is replaced with a Presenter. Present=
ers sit at the same level as views, listening to events from both the View =
and model and mediating the actions between them. Unlike MVVM, there isn=E2=
=80=99t a mechanism for binding Views to ViewModels, so we instead rely on =
each View implementing an interface allowing the Presenter to interact with=
 the View.</p>
<p>MVVM consequently allows us to create View-specific subsets of a Model w=
hich can contain state and logic information, avoiding the need to expose t=
he entire Model to a View. Unlike MVP=E2=80=99s Presenter, a ViewModel is n=
ot required to reference a View. The View can bind to properties on the Vie=
wModel which in turn expose data contained in Models to the View. As we=E2=
=80=99ve mentioned, the abstraction of the View means there is less logic r=
equired in the code behind it.</p>
<p>One of the downsides to this however is that a level of interpretation i=
s needed between the ViewModel and the View and this can have performance c=
osts. The complexity of this interpretation can also vary - it can be as si=
mple as copying data or as complex as manipulating them to a form we would =
like the View to see. MVC doesn=E2=80=99t have this problem as the whole Mo=
del is readily available and such manipulation can be avoided.</p>
<h2>Backbone.js Vs. KnockoutJS</h2>
<p>Understanding the subtle differences between MVC, MVP and MVVM are impor=
tant but developers ultimately will ask whether they should consider using =
KnockoutJS over Backbone based in what we=E2=80=99ve learned. The following=
 notes may be of help here:</p>
<ul>
  <li>
    <p>Both libraries are designed with different goals in mind and its oft=
en not as simple as just choosing MVC or MVVM</p>
  </li>
  <li>
    <p>If data-binding and two-way communication are your main concerns, Kn=
ockoutJS is definitely the way to go.Practically any attribute or value sto=
red in DOM nodes can be mapped to JavaScript objects with this approach.</p=
>
  </li>
  <li>
    <p>Backbone excels with its ease of integration with RESTful services, =
whilst KnockoutJS Models are simply JavaScript objects and code needed for =
updating the Model must be written by the developer.</p>
  </li>
  <li>
    <p>KnockoutJS has a focus on automating UI bindings, which requires sig=
nificantly more verbose custom code if attempting to do this with Backbone.=
 This isn't a problem with Backbone itself per se as it purposefully attemp=
ts to stay out of the UI. Knockback does however attempt to assist with thi=
s problem.</p>
  </li>
  <li>
    <p>With KnockoutJS, we can bind our own functions to ViewModel observab=
les, which are executed anytime the observable changes. This allows us the =
same level of flexibility as can be found in Backbone</p>
  </li>
  <li>
    <p>Backbone has a solid routing solution built-in, whilst KnockoutJS of=
fers no routing options out of the box. One can however easily fill this be=
havior in if needed using Ben Alman=E2=80=99s <a href=3D"http://benalman.co=
m/projects/jquery-bbq-plugin/">BBQ plugin</a> or a standalone routing syste=
m like Miller Medeiros=E2=80=99s excellent&nbsp;<a href=3D"http://millermed=
eiros.github.com/crossroads.js/">Crossroads</a>.</p>
  </li>
</ul>
<p>To conclude, I personally find KnockoutJS more suitable for smaller appl=
ications whilst Backbone=E2=80=99s feature set really shines when building =
anything non-trivial. That said, many developers have used both frameworks =
to write applications of varying complexity and I recommend trying out both=
 at a smaller scale before making a decision on which might work best for y=
our project.</p>

<strong>For further reading about MVVM or Knockout, I recommend the followi=
ng articles:</strong>
<ul>
  <li><a href=3D"http://www.silverlightshow.net/news/The-Advantages-of-MVVM=
.aspx">The Advantages Of MVVM</a></li>
  <li><a href=3D"http://stackoverflow.com/questions/883895/what-are-the-pro=
blems-of-the-mvvm-pattern">SO: What are the problems with MVVM?</a></li>
  <li><a href=3D"http://www.codeproject.com/Articles/100175/Model-View-View=
Model-MVVM-Explained">MVVM Explained</a></li>
  <li><a href=3D"http://www.quora.com/Pros-and-cons-of-MVVM-framework-and-h=
ow-I-can-campare-it-with-MVC">How does MVVM compare to MVC?</a></li>
  <li><a href=3D"http://www.knockmeout.net/2011/09/ko-13-preview-part-2-cus=
tom-binding.html">Custom bindings in KnockoutJS</a></li>
  <li><a href=3D"http://gratdevel.blogspot.co.uk/2012/02/exploring-todomvc-=
and-knockoutjs-with.html">Exploring Knockout with TodoMVC</a></li>
</ul>






<h1 id=3D"modularjavascript">
  <a href=3D"https://addyosmani.com/resources/essentialjsdesignpatterns/boo=
k/#modularjavascript" class=3D"subhead-link">#</a>
  Modern Modular JavaScript Design Patterns
</h1>

<div>
<h2>The Importance Of Decoupling Applications </h2>
</div>

<p>In the world of scalable JavaScript, when we say an application is <stro=
ng>modular</strong>, we often mean it's composed of a set of highly decoupl=
ed, distinct pieces of functionality stored in modules. <a href=3D"http://a=
rguments.callee.info/2009/05/18/javascript-design-patterns--mediator/">Loos=
e coupling</a> facilitates easier maintainability of apps by removing <i>de=
pendencies</i> where possible. When this is implemented efficiently, it's q=
uite easy to see how changes to one part of a system may affect another.</p=
>

<p>Unlike some more traditional programming languages however, the current =
iteration of JavaScript (<a href=3D"http://www.ecma-international.org/publi=
cations/standards/Ecma-262.htm">ECMA-262</a>) doesn't provide developers wi=
th the means to import such modules of code in a clean, organized manner. I=
t's one of the concerns with specifications that haven't required great tho=
ught until more recent years where the need for more organized JavaScript a=
pplications became apparent.</p>

<p>Instead, developers at present are left to fall back on variations of th=
e <a href=3D"http://www.adequatelygood.com/2010/3/JavaScript-Module-Pattern=
-In-Depth">module</a> or <a href=3D"http://rmurphey.com/blog/2009/10/15/usi=
ng-objects-to-organize-your-code/">object literal</a> patterns, which we co=
vered earlier in the book. With many of these, module scripts are strung to=
gether in the DOM with namespaces being described by a single global object=
 where it's still possible to incur naming collisions in our architecture. =
There's also no clean way to handle dependency management without some manu=
al effort or third party tools.</p>


<p>Whilst native solutions to these problems will be arriving in <a href=3D=
"http://wiki.ecmascript.org/doku.php?id=3Dharmony:modules">ES Harmony</a> (=
likely to be the next version of JavaScript), the good news is that writing=
 modular JavaScript has never been easier and we can start doing it today.<=
/p>
<p>In this section, we're going to look at three formats for writing modula=
r JavaScript: <strong>AMD</strong>, <strong>CommonJS</strong> and proposals=
 for the next version of JavaScript, <strong>Harmony</strong>.</p>

<div class=3D"hr"></div>

<div>
    <h2><small>A Note On Script Loaders </small></h2>
  </div>

<p>It's difficult to discuss AMD and CommonJS modules without talking about=
 the elephant in the room - <a href=3D"http://msdn.microsoft.com/en-us/scri=
ptjunkie/hh227261">script loaders</a>. At the time of writing this book, sc=
ript loading is a means to a goal, that goal being modular JavaScript that =
can be used in applications today - for this, use of a compatible script lo=
ader is unfortunately necessary. In order to get the most out of this secti=
on, I recommend gaining a <strong>basic understanding</strong> of how popul=
ar script loading tools work so the explanations of module formats make sen=
se in context.</p>

<p>
There are a number of great loaders for handling module loading in the AMD =
and CommonJS formats, but my personal preferences are <a href=3D"http://req=
uirejs.org/">RequireJS</a> and <a href=3D"https://github.com/unscriptable/c=
url">curl.js</a>. Complete tutorials on these tools are outside the scope o=
f this book, but I can recommend reading John Hann's article about <a href=
=3D"http://unscriptable.com/index.php/2011/03/30/curl-js-yet-another-amd-lo=
ader/">curl.js</a> and James Burke's <a href=3D"http://requirejs.org/docs/a=
pi.html">RequireJS</a> API documentation for more.</p>

<p>From a production perspective, the use of optimization tools (like the R=
equireJS optimizer) to concatenate scripts is recommended for deployment wh=
en working with such modules. Interestingly, with the <a href=3D"https://gi=
thub.com/jrburke/almond">Almond</a> AMD shim, RequireJS doesn't need to be =
rolled in the deployed site and what one might consider a script loader can=
 be easily shifted outside of development.</p>
<p>That said, James Burke would probably say that being able to dynamically=
 load scripts after page load still has its use cases and RequireJS can ass=
ist with this too. With these notes in mind, let's get started.</p>

<div class=3D"hr"></div>


<div>
    <h2 id=3D"detailamd">AMD</h2>
  </div>

<h3>A Format For Writing Modular JavaScript In The Browser</h3>
<p>The overall goal for the AMD (Asynchronous Module Definition) format is =
to provide a solution for modular JavaScript that developers can use today.=
 It was born out of Dojo's real world experience using XHR+eval and propone=
nts of this format wanted to avoid any future solutions suffering from the =
weaknesses of those in the past.</p>

<p>The AMD module format itself is a proposal for defining modules where bo=
th the module and dependencies can be <a href=3D"http://dictionary.referenc=
e.com/browse/asynchronous">asynchronously</a> loaded. It has a number of di=
stinct advantages including being both asynchronous and highly flexible by =
nature which removes the tight coupling one might commonly find between cod=
e and module identity. Many developers enjoy using it and one could conside=
r it a reliable stepping stone towards the <a href=3D"http://wiki.ecmascrip=
t.org/doku.php?id=3Dharmony:modules">module system</a> proposed for ES Harm=
ony.</p>

<p>AMD began as a draft specification for a module format on the CommonJS l=
ist but as it wasn't able to reach full consensus, further development of t=
he format moved to the <a href=3D"https://github.com/amdjs">amdjs</a> group=
.</p>
<p>Today it's embraced by projects including Dojo, MooTools, Firebug and ev=
en jQuery. Although the term <i>CommonJS AMD format</i> has been seen in th=
e wild on occasion, it's best to refer to it as just AMD or Async Module su=
pport as not all participants on the CommonJS list wished to pursue it.</p>


<p></p><div class=3D"alert-message"><strong>Note:</strong> There was a time=
 when the proposal was referred to as Modules Transport/C, however as the s=
pec wasn't geared towards transporting existing CommonJS modules, but rathe=
r - for defining modules - it made more sense to opt for the AMD naming con=
vention.</div><p></p>


<div class=3D"hr"></div>
<h3>Getting Started With Modules</h3>

<p>The first two concepts worth noting about AMD are the idea of a <code>de=
fine</code> method for facilitating module definition and a <code>require</=
code> method for handling dependency loading. <em>define</em> is used to de=
fine named or unnamed modules based using the following signature:</p>

<div><div id=3D"highlighter_939358" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div></td><td class=3D"code"><div clas=
s=3D"container"><div class=3D"line number1 index0 alt2"><code class=3D"js p=
lain">define(</code></div><div class=3D"line number2 index1 alt1"><code cla=
ss=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">mo=
dule_id </code><code class=3D"js comments">/*optional*/</code><code class=
=3D"js plain">,</code></div><div class=3D"line number3 index2 alt2"><code c=
lass=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">=
[dependencies] </code><code class=3D"js comments">/*optional*/</code><code =
class=3D"js plain">,</code></div><div class=3D"line number4 index3 alt1"><c=
ode class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js pl=
ain">definition </code><code class=3D"js keyword">function</code> <code cla=
ss=3D"js comments">/*function for instantiating the module or object*/</cod=
e></div><div class=3D"line number5 index4 alt2"><code class=3D"js plain">);=
</code></div></div></td></tr></tbody></table></div></div>

<p>As we can tell by the inline comments, the <code>module_id</code> is an =
optional argument which is typically only required when non-AMD concatenati=
on tools are being used (there may be some other edge cases where it's usef=
ul too). When this argument is left out, we refer to the module as <em>anon=
ymous</em>.</p>

<p>When working with anonymous modules, the idea of a module's identity is =
DRY, making it trivial to avoid duplication of filenames and code. Because =
the code is more portable, it can be easily moved to other locations (or ar=
ound the file-system) without needing to alter the code itself or change it=
s module ID. Consider the <code>module_id</code> similar to the concept of =
folder paths.</p>

<p>Note: Developers can run this same code on multiple environments just by=
 using an AMD optimizer that works with a CommonJS environment such as <a h=
ref=3D"https://github.com/jrburke/r.js/">r.js</a>. </p>

<p>Back to the <code>define</code> signature, the dependencies argument rep=
resents an array of dependencies which are required by the module we are de=
fining and the third argument ("definition function" or "factory function")=
 is a function that's executed to instantiate our module. A bare bone modul=
e could be defined as follows: </p>

<h4>Understanding AMD: define()</h4>
<div><div id=3D"highlighter_589009" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</=
div><div class=3D"line number19 index18 alt2">19</div><div class=3D"line nu=
mber20 index19 alt1">20</div><div class=3D"line number21 index20 alt2">21</=
div><div class=3D"line number22 index21 alt1">22</div><div class=3D"line nu=
mber23 index22 alt2">23</div><div class=3D"line number24 index23 alt1">24</=
div><div class=3D"line number25 index24 alt2">25</div><div class=3D"line nu=
mber26 index25 alt1">26</div><div class=3D"line number27 index26 alt2">27</=
div><div class=3D"line number28 index27 alt1">28</div><div class=3D"line nu=
mber29 index28 alt2">29</div><div class=3D"line number30 index29 alt1">30</=
div><div class=3D"line number31 index30 alt2">31</div><div class=3D"line nu=
mber32 index31 alt1">32</div><div class=3D"line number33 index32 alt2">33</=
div><div class=3D"line number34 index33 alt1">34</div><div class=3D"line nu=
mber35 index34 alt2">35</div><div class=3D"line number36 index35 alt1">36</=
div><div class=3D"line number37 index36 alt2">37</div><div class=3D"line nu=
mber38 index37 alt1">38</div></td><td class=3D"code"><div class=3D"containe=
r"><div class=3D"line number1 index0 alt2"><code class=3D"js comments">// A=
 module_id (myModule) is used here for demonstration purposes only</code></=
div><div class=3D"line number2 index1 alt1"><code class=3D"js plain">define=
( </code><code class=3D"js string">"myModule"</code><code class=3D"js plain=
">,</code></div><div class=3D"line number3 index2 alt2">&nbsp;</div><div cl=
ass=3D"line number4 index3 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbs=
p;&nbsp;</code><code class=3D"js plain">[</code><code class=3D"js string">"=
foo"</code><code class=3D"js plain">, </code><code class=3D"js string">"bar=
"</code><code class=3D"js plain">],</code></div><div class=3D"line number5 =
index4 alt2">&nbsp;</div><div class=3D"line number6 index5 alt1"><code clas=
s=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">=
// module definition function</code></div><div class=3D"line number7 index6=
 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js comments">// dependencies (foo and bar) are mapped to function param=
eters</code></div><div class=3D"line number8 index7 alt1"><code class=3D"js=
 spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">function=
</code> <code class=3D"js plain">( foo, bar ) {</code></div><div class=3D"l=
ine number9 index8 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// return a valu=
e that defines the module export</code></div><div class=3D"line number10 in=
dex9 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;</code><code class=3D"js comments">// (i.e the functionality we w=
ant to expose for consumption)</code></div><div class=3D"line number11 inde=
x10 alt2">&nbsp;</div><div class=3D"line number12 index11 alt1"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code=
 class=3D"js comments">// create your module here</code></div><div class=3D=
"line number13 index12 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">var</code> <c=
ode class=3D"js plain">myModule =3D {</code></div><div class=3D"line number=
14 index13 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">doS=
tuff: </code><code class=3D"js keyword">function</code> <code class=3D"js p=
lain">() {</code></div><div class=3D"line number15 index14 alt2"><code clas=
s=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">consol=
e.log( </code><code class=3D"js string">"Yay! Stuff"</code> <code class=3D"=
js plain">);</code></div><div class=3D"line number16 index15 alt1"><code cl=
ass=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;</code><code class=3D"js plain">}</code></div><div class=3D"=
line number17 index16 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">};</code></div><=
div class=3D"line number18 index17 alt1">&nbsp;</div><div class=3D"line num=
ber19 index18 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</cod=
e><code class=3D"js keyword">return</code> <code class=3D"js plain">myModul=
e;</code></div><div class=3D"line number20 index19 alt1"><code class=3D"js =
plain">});</code></div><div class=3D"line number21 index20 alt2">&nbsp;</di=
v><div class=3D"line number22 index21 alt1"><code class=3D"js comments">// =
An alternative version could be..</code></div><div class=3D"line number23 i=
ndex22 alt2"><code class=3D"js plain">define( </code><code class=3D"js stri=
ng">"myModule"</code><code class=3D"js plain">,</code></div><div class=3D"l=
ine number24 index23 alt1">&nbsp;</div><div class=3D"line number25 index24 =
alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js plain">[</code><code class=3D"js string">"math"</code><code class=3D=
"js plain">, </code><code class=3D"js string">"graph"</code><code class=3D"=
js plain">],</code></div><div class=3D"line number26 index25 alt1">&nbsp;</=
div><div class=3D"line number27 index26 alt2"><code class=3D"js spaces">&nb=
sp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">function</code> <cod=
e class=3D"js plain">( math, graph ) {</code></div><div class=3D"line numbe=
r28 index27 alt1">&nbsp;</div><div class=3D"line number29 index28 alt2"><co=
de class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</co=
de><code class=3D"js comments">// Note that this is a slightly different pa=
ttern</code></div><div class=3D"line number30 index29 alt1"><code class=3D"=
js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code cla=
ss=3D"js comments">// With AMD, it's possible to define modules in a few</c=
ode></div><div class=3D"line number31 index30 alt2"><code class=3D"js space=
s">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js=
 comments">// different ways due to it's flexibility with</code></div><div =
class=3D"line number32 index31 alt1"><code class=3D"js spaces">&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// c=
ertain aspects of the syntax</code></div><div class=3D"line number33 index3=
2 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;</code><code class=3D"js keyword">return</code> <code class=3D"js pl=
ain">{</code></div><div class=3D"line number34 index33 alt1"><code class=3D=
"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;</code><code class=3D"js plain">plot: </code><code class=3D"js key=
word">function</code><code class=3D"js plain">( x, y ){</code></div><div cl=
ass=3D"line number35 index34 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;</code><code class=3D"js keyword">return</code> <code class=3D"js pl=
ain">graph.drawPie( math.randomGrid( x, y ) );</code></div><div class=3D"li=
ne number36 index35 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js p=
lain">}</code></div><div class=3D"line number37 index36 alt2"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code=
 class=3D"js plain">};</code></div><div class=3D"line number38 index37 alt1=
"><code class=3D"js plain">});</code></div></div></td></tr></tbody></table>=
</div></div>


<p><em>require</em> on the other hand is typically used to load code in a t=
op-level JavaScript file or within a module should we wish to dynamically f=
etch dependencies. An example of its usage is:</p>

<h4>Understanding AMD: require()</h4>
<div><div id=3D"highlighter_490023" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div></td><td class=3D"code"><div class=3D"container"><div class=3D"line nu=
mber1 index0 alt2"><code class=3D"js comments">// Consider "foo" and "bar" =
are two external modules</code></div><div class=3D"line number2 index1 alt1=
"><code class=3D"js comments">// In this example, the "exports" from the tw=
o modules</code></div><div class=3D"line number3 index2 alt2"><code class=
=3D"js comments">// loaded are passed as function arguments to the</code></=
div><div class=3D"line number4 index3 alt1"><code class=3D"js comments">// =
callback (foo and bar) so that they can similarly be accessed</code></div><=
div class=3D"line number5 index4 alt2">&nbsp;</div><div class=3D"line numbe=
r6 index5 alt1"><code class=3D"js plain">require([</code><code class=3D"js =
string">"foo"</code><code class=3D"js plain">, </code><code class=3D"js str=
ing">"bar"</code><code class=3D"js plain">], </code><code class=3D"js keywo=
rd">function</code> <code class=3D"js plain">( foo, bar ) {</code></div><di=
v class=3D"line number7 index6 alt2"><code class=3D"js spaces">&nbsp;&nbsp;=
&nbsp;&nbsp;</code><code class=3D"js comments">// rest of your code here</c=
ode></div><div class=3D"line number8 index7 alt1"><code class=3D"js spaces"=
>&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">foo.doSomething();=
</code></div><div class=3D"line number9 index8 alt2"><code class=3D"js plai=
n">});</code></div></div></td></tr></tbody></table></div></div>

<h4>Dynamically-loaded Dependencies</h4>
<div><div id=3D"highlighter_474583" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div></td><td class=3D"code"><div class=3D"container"><div class=3D"line num=
ber1 index0 alt2"><code class=3D"js plain">define(</code><code class=3D"js =
keyword">function</code> <code class=3D"js plain">( require ) {</code></div=
><div class=3D"line number2 index1 alt1"><code class=3D"js spaces">&nbsp;&n=
bsp;&nbsp;&nbsp;</code><code class=3D"js keyword">var</code> <code class=3D=
"js plain">isReady =3D </code><code class=3D"js keyword">false</code><code =
class=3D"js plain">, foobar;</code></div><div class=3D"line number3 index2 =
alt2">&nbsp;</div><div class=3D"line number4 index3 alt1"><code class=3D"js=
 spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// note=
 the inline require within our module definition</code></div><div class=3D"=
line number5 index4 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp=
;</code><code class=3D"js plain">require([</code><code class=3D"js string">=
"foo"</code><code class=3D"js plain">, </code><code class=3D"js string">"ba=
r"</code><code class=3D"js plain">], </code><code class=3D"js keyword">func=
tion</code> <code class=3D"js plain">( foo, bar ) {</code></div><div class=
=3D"line number6 index5 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">isReady =3D </=
code><code class=3D"js keyword">true</code><code class=3D"js plain">;</code=
></div><div class=3D"line number7 index6 alt2"><code class=3D"js spaces">&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plai=
n">foobar =3D foo() + bar();</code></div><div class=3D"line number8 index7 =
alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js plain">});</code></div><div class=3D"line number9 index8 alt2">&nbsp=
;</div><div class=3D"line number10 index9 alt1"><code class=3D"js spaces">&=
nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// we can still r=
eturn a module</code></div><div class=3D"line number11 index10 alt2"><code =
class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keywor=
d">return</code> <code class=3D"js plain">{</code></div><div class=3D"line =
number12 index11 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">isReady: isReady,</co=
de></div><div class=3D"line number13 index12 alt2"><code class=3D"js spaces=
">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js =
plain">foobar: foobar</code></div><div class=3D"line number14 index13 alt1"=
><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js=
 plain">};</code></div><div class=3D"line number15 index14 alt2"><code clas=
s=3D"js plain">});</code></div></div></td></tr></tbody></table></div></div>

<h4>Understanding AMD: plugins</h4>
<p>The following is an example of defining an AMD-compatible plugin:</p>
<div><div id=3D"highlighter_874632" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div></td><td class=3D"cod=
e"><div class=3D"container"><div class=3D"line number1 index0 alt2"><code c=
lass=3D"js comments">// With AMD, it's possible to load in assets of almost=
 any kind</code></div><div class=3D"line number2 index1 alt1"><code class=
=3D"js comments">// including text-files and HTML. This enables us to have =
template</code></div><div class=3D"line number3 index2 alt2"><code class=3D=
"js comments">// dependencies which can be used to skin components either o=
n</code></div><div class=3D"line number4 index3 alt1"><code class=3D"js com=
ments">// page-load or dynamically.</code></div><div class=3D"line number5 =
index4 alt2">&nbsp;</div><div class=3D"line number6 index5 alt1"><code clas=
s=3D"js plain">define( [</code><code class=3D"js string">"./templates"</cod=
e><code class=3D"js plain">, </code><code class=3D"js string">"text!./templ=
ate.md"</code><code class=3D"js plain">,</code><code class=3D"js string">"c=
ss!./template.css"</code> <code class=3D"js plain">],</code></div><div clas=
s=3D"line number7 index6 alt2">&nbsp;</div><div class=3D"line number8 index=
7 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code clas=
s=3D"js keyword">function</code><code class=3D"js plain">( templates, templ=
ate ){</code></div><div class=3D"line number9 index8 alt2"><code class=3D"j=
s spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code clas=
s=3D"js plain">console.log( templates );</code></div><div class=3D"line num=
ber10 index9 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// do something with o=
ur templates here</code></div><div class=3D"line number11 index10 alt2"><co=
de class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js pla=
in">}</code></div><div class=3D"line number12 index11 alt1">&nbsp;</div><di=
v class=3D"line number13 index12 alt2"><code class=3D"js plain">});</code><=
/div></div></td></tr></tbody></table></div></div>
<p></p><div class=3D"alert-message"><strong>Note:</strong> Although css! is=
 included for loading CSS dependencies in the above example, it's important=
 to remember that this approach has some caveats such as it not being fully=
 possible to establish when the CSS is fully loaded. Depending on how we ap=
proach our build process, it may also result in CSS being included as a dep=
endency in the optimized file, so use CSS as a loaded dependency in such ca=
ses with caution. If interested in doing the above, we can also explore @VI=
ISON's RequireJS CSS plugin further <a href=3D"https://github.com/VIISON/Re=
quireCSS">here</a>.</div><p></p>


<h4>Loading AMD Modules Using RequireJS</h4>
<div><div id=3D"highlighter_779505" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div></td><td class=3D"code"><div class=3D"cont=
ainer"><div class=3D"line number1 index0 alt2"><code class=3D"js plain">req=
uire([</code><code class=3D"js string">"app/myModule"</code><code class=3D"=
js plain">],</code></div><div class=3D"line number2 index1 alt1">&nbsp;</di=
v><div class=3D"line number3 index2 alt2"><code class=3D"js spaces">&nbsp;&=
nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">function</code><code cla=
ss=3D"js plain">( myModule ){</code></div><div class=3D"line number4 index3=
 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;</code><code class=3D"js comments">// start the main module which in-=
turn</code></div><div class=3D"line number5 index4 alt2"><code class=3D"js =
spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js comments">// loads other modules</code></div><div class=3D"line numb=
er6 index5 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</code><code class=3D"js keyword">var</code> <code class=3D=
"js plain">module =3D </code><code class=3D"js keyword">new</code> <code cl=
ass=3D"js plain">myModule();</code></div><div class=3D"line number7 index6 =
alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;</code><code class=3D"js plain">module.doStuff();</code></div><div cla=
ss=3D"line number8 index7 alt1"><code class=3D"js plain">});</code></div></=
div></td></tr></tbody></table></div></div>

<p>This example could simply be looked at as <code>requirejs(["app/myModule=
"], function(){})</code> which indicates the loader's top level globals are=
 being used. This is how to kick off top-level loading of modules with diff=
erent AMD loaders however with a <code>define()</code> function, if it's pa=
ssed a local require all <code>require([])</code> examples apply to both ty=
pes of loader (curl.js and RequireJS).</p>

<h4>Loading AMD Modules Using curl.js</h4>
<div><div id=3D"highlighter_525915" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div></td><td class=3D"code"><div class=3D"container"><div class=3D"line nu=
mber1 index0 alt2"><code class=3D"js plain">curl([</code><code class=3D"js =
string">"app/myModule.js"</code><code class=3D"js plain">],</code></div><di=
v class=3D"line number2 index1 alt1">&nbsp;</div><div class=3D"line number3=
 index2 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><cod=
e class=3D"js keyword">function</code><code class=3D"js plain">( myModule )=
{</code></div><div class=3D"line number4 index3 alt1"><code class=3D"js spa=
ces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"=
js comments">// start the main module which in-turn</code></div><div class=
=3D"line number5 index4 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// loads ot=
her modules</code></div><div class=3D"line number6 index5 alt1"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code=
 class=3D"js keyword">var</code> <code class=3D"js plain">module =3D </code=
><code class=3D"js keyword">new</code> <code class=3D"js plain">myModule();=
</code></div><div class=3D"line number7 index6 alt2"><code class=3D"js spac=
es">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"j=
s plain">module.doStuff();</code></div><div class=3D"line number8 index7 al=
t1">&nbsp;</div><div class=3D"line number9 index8 alt2"><code class=3D"js p=
lain">});</code></div></div></td></tr></tbody></table></div></div>

<h4>Modules With Deferred Dependencies</h4>
<div><div id=3D"highlighter_166628" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div></td><td class=3D"code"><div class=3D"containe=
r"><div class=3D"line number1 index0 alt2"><code class=3D"js comments">// T=
his could be compatible with jQuery's Deferred implementation,</code></div>=
<div class=3D"line number2 index1 alt1"><code class=3D"js comments">// futu=
res.js (slightly different syntax) or any one of a number</code></div><div =
class=3D"line number3 index2 alt2"><code class=3D"js comments">// of other =
implementations</code></div><div class=3D"line number4 index3 alt1">&nbsp;<=
/div><div class=3D"line number5 index4 alt2"><code class=3D"js plain">defin=
e([</code><code class=3D"js string">"lib/Deferred"</code><code class=3D"js =
plain">], </code><code class=3D"js keyword">function</code><code class=3D"j=
s plain">( Deferred ){</code></div><div class=3D"line number6 index5 alt1">=
<code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js =
keyword">var</code> <code class=3D"js plain">defer =3D </code><code class=
=3D"js keyword">new</code> <code class=3D"js plain">Deferred();</code></div=
><div class=3D"line number7 index6 alt2">&nbsp;</div><div class=3D"line num=
ber8 index7 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>=
<code class=3D"js plain">require([</code><code class=3D"js string">"lib/tem=
plates/?index.html"</code><code class=3D"js plain">,</code><code class=3D"j=
s string">"lib/data/?stats"</code><code class=3D"js plain">],</code></div><=
div class=3D"line number9 index8 alt2"><code class=3D"js spaces">&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">fun=
ction</code><code class=3D"js plain">( template, data ){</code></div><div c=
lass=3D"line number10 index9 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code clas=
s=3D"js plain">defer.resolve( { template: template, data:data } );</code></=
div><div class=3D"line number11 index10 alt2"><code class=3D"js spaces">&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain=
">}</code></div><div class=3D"line number12 index11 alt1"><code class=3D"js=
 spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">);</code><=
/div><div class=3D"line number13 index12 alt2"><code class=3D"js spaces">&n=
bsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">return</code> <code=
 class=3D"js plain">defer.promise();</code></div><div class=3D"line number1=
4 index13 alt1"><code class=3D"js plain">});</code></div></div></td></tr></=
tbody></table></div></div>



<p>&nbsp;</p>
<div class=3D"hr"></div>

<h3>AMD Modules With Dojo</h3>

<p>Defining AMD-compatible modules using Dojo is fairly straight-forward. A=
s per above, define any module dependencies in an array as the first argume=
nt and provide a callback (factory) which will execute the module once the =
dependencies have been loaded. e.g:</p>

<div><div id=3D"highlighter_630722" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div></td><td class=3D"code"><div class=3D"container"><div class=
=3D"line number1 index0 alt2"><code class=3D"js plain">define([</code><code=
 class=3D"js string">"dijit/Tooltip"</code><code class=3D"js plain">], </co=
de><code class=3D"js keyword">function</code><code class=3D"js plain">( Too=
ltip ){</code></div><div class=3D"line number2 index1 alt1">&nbsp;</div><di=
v class=3D"line number3 index2 alt2"><code class=3D"js spaces">&nbsp;&nbsp;=
&nbsp;&nbsp;</code><code class=3D"js comments">//Our dijit tooltip is now a=
vailable for local use</code></div><div class=3D"line number4 index3 alt1">=
<code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js =
keyword">new</code> <code class=3D"js plain">Tooltip(...);</code></div><div=
 class=3D"line number5 index4 alt2">&nbsp;</div><div class=3D"line number6 =
index5 alt1"><code class=3D"js plain">});</code></div></div></td></tr></tbo=
dy></table></div></div>

<p>Note the anonymous nature of the module, which can now be both consumed =
by a Dojo asynchronous loader, RequireJS or the standard <a href=3D"http://=
livedocs.dojotoolkit.org/dojo/require">dojo.require()</a> module loader.</p=
>

<p>There are some interesting gotchas with module referencing that are usef=
ul to know here. Although the AMD-advocated way of referencing modules decl=
ares them in the dependency list with a set of matching arguments, this isn=
't supported by the older Dojo 1.6 build system - it really only works for =
AMD-compliant loaders. e.g:</p>

<div><div id=3D"highlighter_172785" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div></td><td class=3D"code"><div class=3D"container"><div class=
=3D"line number1 index0 alt2"><code class=3D"js plain">define([</code><code=
 class=3D"js string">"dojo/cookie"</code><code class=3D"js plain">, </code>=
<code class=3D"js string">"dijit/Tooltip"</code><code class=3D"js plain">],=
 </code><code class=3D"js keyword">function</code><code class=3D"js plain">=
( cookie, Tooltip ){</code></div><div class=3D"line number2 index1 alt1">&n=
bsp;</div><div class=3D"line number3 index2 alt2"><code class=3D"js spaces"=
>&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">var</code> <code=
 class=3D"js plain">cookieValue =3D cookie( </code><code class=3D"js string=
">"cookieName"</code> <code class=3D"js plain">);</code></div><div class=3D=
"line number4 index3 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbs=
p;</code><code class=3D"js keyword">new</code> <code class=3D"js plain">Too=
ltip(...);</code></div><div class=3D"line number5 index4 alt2">&nbsp;</div>=
<div class=3D"line number6 index5 alt1"><code class=3D"js plain">});</code>=
</div></div></td></tr></tbody></table></div></div>

<p>This has many advantages over nested namespacing as modules no longer ne=
ed to directly reference complete namespaces every time - all we require is=
 the "dojo/cookie" path in dependencies, which once aliased to an argument,=
 can be referenced by that variable. This removes the need to repeatedly ty=
pe out "dojo." in our applications.</p>

<p>The final gotcha to be aware of is that if we wish to continue using the=
 older Dojo build system or wish to migrate older modules to this newer AMD=
-style, the following more verbose version enables easier migration. Notice=
 that dojo and dijit and referenced as dependencies too:</p>

<div><div id=3D"highlighter_779565" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div></td>=
<td class=3D"code"><div class=3D"container"><div class=3D"line number1 inde=
x0 alt2"><code class=3D"js plain">define([</code><code class=3D"js string">=
"dojo"</code><code class=3D"js plain">, </code><code class=3D"js string">"d=
ijit', "</code><code class=3D"js plain">dojo/cookie</code><code class=3D"js=
 string">", "</code><code class=3D"js plain">dijit/Tooltip</code><code clas=
s=3D"js string">"], function( dojo, dijit ){</code></div><div class=3D"line=
 number2 index1 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</c=
ode><code class=3D"js string">var cookieValue =3D dojo.cookie( "</code><cod=
e class=3D"js plain">cookieName" );</code></div><div class=3D"line number3 =
index2 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code=
 class=3D"js keyword">new</code> <code class=3D"js plain">dijit.Tooltip(...=
);</code></div><div class=3D"line number4 index3 alt1"><code class=3D"js pl=
ain">});</code></div></div></td></tr></tbody></table></div></div>



<p>&nbsp;</p>
<div class=3D"hr"></div>

<h3>AMD Module Design Patterns (Dojo)</h3>
<p>As we've seen in previous sections, design patterns can be highly effect=
ive in improving how we approach structuring solutions to common developmen=
t problems. <a href=3D"http://twitter.com/unscriptable">John Hann</a> has g=
iven some excellent presentations about AMD module design patterns covering=
 the Singleton, Decorator, Mediator and others and I highly recommend check=
ing out his <a href=3D"http://unscriptable.com/code/AMD-module-patterns/">s=
lides</a> if we get a chance.</p>

<p>A selection of AMD design patterns can be found below.</p>

<p><strong>Decorator pattern:</strong></p>

<div><div id=3D"highlighter_602173" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</=
div><div class=3D"line number19 index18 alt2">19</div><div class=3D"line nu=
mber20 index19 alt1">20</div><div class=3D"line number21 index20 alt2">21</=
div><div class=3D"line number22 index21 alt1">22</div><div class=3D"line nu=
mber23 index22 alt2">23</div><div class=3D"line number24 index23 alt1">24</=
div><div class=3D"line number25 index24 alt2">25</div><div class=3D"line nu=
mber26 index25 alt1">26</div><div class=3D"line number27 index26 alt2">27</=
div><div class=3D"line number28 index27 alt1">28</div><div class=3D"line nu=
mber29 index28 alt2">29</div><div class=3D"line number30 index29 alt1">30</=
div><div class=3D"line number31 index30 alt2">31</div><div class=3D"line nu=
mber32 index31 alt1">32</div><div class=3D"line number33 index32 alt2">33</=
div></td><td class=3D"code"><div class=3D"container"><div class=3D"line num=
ber1 index0 alt2"><code class=3D"js comments">// mylib/UpdatableObservable:=
 a Decorator for dojo/store/Observable</code></div><div class=3D"line numbe=
r2 index1 alt1"><code class=3D"js plain">define([</code><code class=3D"js s=
tring">"dojo"</code><code class=3D"js plain">, </code><code class=3D"js str=
ing">"dojo/store/Observable"</code><code class=3D"js plain">], </code><code=
 class=3D"js keyword">function</code> <code class=3D"js plain">( dojo, Obse=
rvable ) {</code></div><div class=3D"line number3 index2 alt2"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">re=
turn</code> <code class=3D"js keyword">function</code> <code class=3D"js pl=
ain">UpdatableObservable ( store ) {</code></div><div class=3D"line number4=
 index3 alt1">&nbsp;</div><div class=3D"line number5 index4 alt2"><code cla=
ss=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><co=
de class=3D"js keyword">var</code> <code class=3D"js plain">observable =3D =
dojo.isFunction( store.notify ) ? store :</code></div><div class=3D"line nu=
mber6 index5 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><c=
ode class=3D"js keyword">new</code> <code class=3D"js plain">Observable(sto=
re);</code></div><div class=3D"line number7 index6 alt2">&nbsp;</div><div c=
lass=3D"line number8 index7 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">observable=
.updated =3D </code><code class=3D"js keyword">function</code><code class=
=3D"js plain">( object ) {</code></div><div class=3D"line number9 index8 al=
t2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">dojo.when( objec=
t, </code><code class=3D"js keyword">function</code> <code class=3D"js plai=
n">( itemOrArray) {</code></div><div class=3D"line number10 index9 alt1"><c=
ode class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain=
">dojo.forEach( [].concat(itemOrArray), </code><code class=3D"js keyword">t=
his</code><code class=3D"js plain">.notify, </code><code class=3D"js keywor=
d">this</code> <code class=3D"js plain">);</code></div><div class=3D"line n=
umber11 index10 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain=
">});</code></div><div class=3D"line number12 index11 alt1"><code class=3D"=
js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code cla=
ss=3D"js plain">};</code></div><div class=3D"line number13 index12 alt2">&n=
bsp;</div><div class=3D"line number14 index13 alt1"><code class=3D"js space=
s">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js=
 keyword">return</code> <code class=3D"js plain">observable;</code></div><d=
iv class=3D"line number15 index14 alt2"><code class=3D"js spaces">&nbsp;&nb=
sp;&nbsp;&nbsp;</code><code class=3D"js plain">};</code></div><div class=3D=
"line number16 index15 alt1"><code class=3D"js plain">});</code></div><div =
class=3D"line number17 index16 alt2">&nbsp;</div><div class=3D"line number1=
8 index17 alt1">&nbsp;</div><div class=3D"line number19 index18 alt2"><code=
 class=3D"js comments">// Decorator consumer</code></div><div class=3D"line=
 number20 index19 alt1"><code class=3D"js comments">// a consumer for mylib=
/UpdatableObservable</code></div><div class=3D"line number21 index20 alt2">=
&nbsp;</div><div class=3D"line number22 index21 alt1"><code class=3D"js pla=
in">define([</code><code class=3D"js string">"mylib/UpdatableObservable"</c=
ode><code class=3D"js plain">], </code><code class=3D"js keyword">function<=
/code> <code class=3D"js plain">( makeUpdatable ) {</code></div><div class=
=3D"line number23 index22 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp=
;&nbsp;</code><code class=3D"js keyword">var</code> <code class=3D"js plain=
">observable,</code></div><div class=3D"line number24 index23 alt1"><code c=
lass=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><=
code class=3D"js plain">updatable,</code></div><div class=3D"line number25 =
index24 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;</code><code class=3D"js plain">someItem;</code></div><div cla=
ss=3D"line number26 index25 alt1">&nbsp;</div><div class=3D"line number27 i=
ndex26 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code=
 class=3D"js comments">// make the observable store updatable</code></div><=
div class=3D"line number28 index27 alt1"><code class=3D"js spaces">&nbsp;&n=
bsp;&nbsp;&nbsp;</code><code class=3D"js plain">updatable =3D makeUpdatable=
( observable ); </code><code class=3D"js comments">// `new` is optional!</c=
ode></div><div class=3D"line number29 index28 alt2">&nbsp;</div><div class=
=3D"line number30 index29 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp=
;&nbsp;</code><code class=3D"js comments">// we can then call .updated() la=
ter on if we wish to pass</code></div><div class=3D"line number31 index30 a=
lt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js comments">// on data that has changed</code></div><div class=3D"line=
 number32 index31 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;<=
/code><code class=3D"js comments">//updatable.updated( updatedItem );</code=
></div><div class=3D"line number33 index32 alt2"><code class=3D"js plain">}=
);</code></div></div></td></tr></tbody></table></div></div>

<p><strong>Adapter pattern</strong></p>

<div><div id=3D"highlighter_757493" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</=
div></td><td class=3D"code"><div class=3D"container"><div class=3D"line num=
ber1 index0 alt2"><code class=3D"js comments">// "mylib/Array" adapts `each=
` function to mimic jQuerys:</code></div><div class=3D"line number2 index1 =
alt1"><code class=3D"js plain">define([</code><code class=3D"js string">"do=
jo/_base/lang"</code><code class=3D"js plain">, </code><code class=3D"js st=
ring">"dojo/_base/array"</code><code class=3D"js plain">], </code><code cla=
ss=3D"js keyword">function</code> <code class=3D"js plain">( lang, array ) =
{</code></div><div class=3D"line number3 index2 alt2"><code class=3D"js spa=
ces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">return</code=
> <code class=3D"js plain">lang.delegate( array, {</code></div><div class=
=3D"line number4 index3 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">each: </code><=
code class=3D"js keyword">function</code> <code class=3D"js plain">( arr, l=
ambda ) {</code></div><div class=3D"line number5 index4 alt2"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;</code><code class=3D"js plain">array.forEach( arr, </code><cod=
e class=3D"js keyword">function</code> <code class=3D"js plain">( item, i )=
 {</code></div><div class=3D"line number6 index5 alt1"><code class=3D"js sp=
aces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">lambda.call( ite=
m, i, item ); </code><code class=3D"js comments">// like jQuery's each</cod=
e></div><div class=3D"line number7 index6 alt2"><code class=3D"js spaces">&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</co=
de><code class=3D"js plain">});</code></div><div class=3D"line number8 inde=
x7 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;</code><code class=3D"js plain">}</code></div><div class=3D"line nu=
mber9 index8 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code=
><code class=3D"js plain">});</code></div><div class=3D"line number10 index=
9 alt1"><code class=3D"js plain">});</code></div><div class=3D"line number1=
1 index10 alt2">&nbsp;</div><div class=3D"line number12 index11 alt1"><code=
 class=3D"js comments">// Adapter consumer</code></div><div class=3D"line n=
umber13 index12 alt2"><code class=3D"js comments">// "myapp/my-module":</co=
de></div><div class=3D"line number14 index13 alt1"><code class=3D"js plain"=
>define([</code><code class=3D"js string">"mylib/Array"</code><code class=
=3D"js plain">], </code><code class=3D"js keyword">function</code> <code cl=
ass=3D"js plain">( array ) {</code></div><div class=3D"line number15 index1=
4 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code clas=
s=3D"js plain">array.each( [</code><code class=3D"js string">"uno"</code><c=
ode class=3D"js plain">, </code><code class=3D"js string">"dos"</code><code=
 class=3D"js plain">, </code><code class=3D"js string">"tres"</code><code c=
lass=3D"js plain">], </code><code class=3D"js keyword">function</code> <cod=
e class=3D"js plain">( i, esp ) {</code></div><div class=3D"line number16 i=
ndex15 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;</code><code class=3D"js comments">// here, `this` =3D=3D item<=
/code></div><div class=3D"line number17 index16 alt2"><code class=3D"js spa=
ces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">});</code></di=
v><div class=3D"line number18 index17 alt1"><code class=3D"js plain">});</c=
ode></div></div></td></tr></tbody></table></div></div>


<div class=3D"hr"></div>
<h3>AMD Modules With jQuery</h3>

<p>Unlike Dojo, jQuery really only comes with one file, however given the p=
lugin-based nature of the library, we can demonstrate how straight-forward =
it is to define an AMD module that uses it below.</p>
<div><div id=3D"highlighter_594098" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</=
div></td><td class=3D"code"><div class=3D"container"><div class=3D"line num=
ber1 index0 alt2"><code class=3D"js plain">define([</code><code class=3D"js=
 string">"js/jquery.js"</code><code class=3D"js plain">,</code><code class=
=3D"js string">"js/jquery.color.js"</code><code class=3D"js plain">,</code>=
<code class=3D"js string">"js/underscore.js"</code><code class=3D"js plain"=
>],</code></div><div class=3D"line number2 index1 alt1">&nbsp;</div><div cl=
ass=3D"line number3 index2 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbs=
p;&nbsp;</code><code class=3D"js keyword">function</code><code class=3D"js =
plain">( $, colorPlugin, _ ){</code></div><div class=3D"line number4 index3=
 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;</code><code class=3D"js comments">// Here we've passed in jQuery, th=
e color plugin and Underscore</code></div><div class=3D"line number5 index4=
 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;</code><code class=3D"js comments">// None of these will be accessibl=
e in the global scope, but we</code></div><div class=3D"line number6 index5=
 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;</code><code class=3D"js comments">// can easily reference them below=
.</code></div><div class=3D"line number7 index6 alt2">&nbsp;</div><div clas=
s=3D"line number8 index7 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// Pseudo-=
randomize an array of colors, selecting the first</code></div><div class=3D=
"line number9 index8 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// item in the=
 shuffled array</code></div><div class=3D"line number10 index9 alt1"><code =
class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>=
<code class=3D"js keyword">var</code> <code class=3D"js plain">shuffleColor=
 =3D _.first( _.shuffle( [</code><code class=3D"js string">"#666"</code><co=
de class=3D"js plain">,</code><code class=3D"js string">"#333"</code><code =
class=3D"js plain">,</code><code class=3D"js string">"#111"</code><code cla=
ss=3D"js plain">] ) );</code></div><div class=3D"line number11 index10 alt2=
">&nbsp;</div><div class=3D"line number12 index11 alt1"><code class=3D"js s=
paces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js comments">// Animate the background-color of any elements with the c=
lass</code></div><div class=3D"line number13 index12 alt2"><code class=3D"j=
s spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code clas=
s=3D"js comments">// "item" on the page using the shuffled color</code></di=
v><div class=3D"line number14 index13 alt1"><code class=3D"js spaces">&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">=
$( </code><code class=3D"js string">".item"</code> <code class=3D"js plain"=
>).animate( {</code><code class=3D"js string">"backgroundColor"</code><code=
 class=3D"js plain">: shuffleColor } );</code></div><div class=3D"line numb=
er15 index14 alt2">&nbsp;</div><div class=3D"line number16 index15 alt1"><c=
ode class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</c=
ode><code class=3D"js comments">// What we return can be used by other modu=
les</code></div><div class=3D"line number17 index16 alt2"><code class=3D"js=
 spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js keyword">return</code> <code class=3D"js plain">{};</code></div><div=
 class=3D"line number18 index17 alt1"><code class=3D"js spaces">&nbsp;&nbsp=
;&nbsp;&nbsp;</code><code class=3D"js plain">});</code></div></div></td></t=
r></tbody></table></div></div>

<p>There is however something missing from this example and it's the concep=
t of registration.</p>

<h4>Registering jQuery As An Async-compatible Module</h4>
<p>One of the key features that landed in jQuery 1.7 was support for regist=
ering jQuery as an asynchronous module. There are a number of compatible sc=
ript loaders (including RequireJS and curl) which are capable of loading mo=
dules using an asynchronous module format and this means fewer hacks are re=
quired to get things working.</p>

<p>If a developer wants to use AMD and does not want their jQuery
version leaking into the global space, they should call <code>noConflict</c=
ode> in their top level module that uses jQuery. In addition, since multipl=
e
versions of jQuery can be on a page there are special considerations
that an AMD loader must account for, and so jQuery only registers with
AMD loaders that have recognized these concerns, which are indicated
by the loader specifying <code>define.amd.jQuery</code>. RequireJS and curl=
 are two loaders that do so</p>

<p>The named AMD provides a safety blanket of being both robust and safe fo=
r most use-cases.</p>

<div><div id=3D"highlighter_955222" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div></td><td class=3D"cod=
e"><div class=3D"container"><div class=3D"line number1 index0 alt2"><code c=
lass=3D"js comments">// Account for the existence of more than one global</=
code></div><div class=3D"line number2 index1 alt1"><code class=3D"js commen=
ts">// instances of jQuery in the document, cater for testing</code></div><=
div class=3D"line number3 index2 alt2"><code class=3D"js comments">// .noCo=
nflict()</code></div><div class=3D"line number4 index3 alt1">&nbsp;</div><d=
iv class=3D"line number5 index4 alt2"><code class=3D"js keyword">var</code>=
 <code class=3D"js plain">jQuery =3D </code><code class=3D"js keyword">this=
</code><code class=3D"js plain">.jQuery || </code><code class=3D"js string"=
>"jQuery"</code><code class=3D"js plain">,</code></div><div class=3D"line n=
umber6 index5 alt1"><code class=3D"js plain">$ =3D </code><code class=3D"js=
 keyword">this</code><code class=3D"js plain">.$ || </code><code class=3D"j=
s string">"$"</code><code class=3D"js plain">,</code></div><div class=3D"li=
ne number7 index6 alt2"><code class=3D"js plain">originaljQuery =3D jQuery,=
</code></div><div class=3D"line number8 index7 alt1"><code class=3D"js plai=
n">original$ =3D $;</code></div><div class=3D"line number9 index8 alt2">&nb=
sp;</div><div class=3D"line number10 index9 alt1"><code class=3D"js plain">=
define([</code><code class=3D"js string">"jquery"</code><code class=3D"js p=
lain">], </code><code class=3D"js keyword">function</code> <code class=3D"j=
s plain">( $ ) {</code></div><div class=3D"line number11 index10 alt2"><cod=
e class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plai=
n">$( </code><code class=3D"js string">".items"</code> <code class=3D"js pl=
ain">).css( </code><code class=3D"js string">"background"</code><code class=
=3D"js plain">,</code><code class=3D"js string">"green"</code> <code class=
=3D"js plain">);</code></div><div class=3D"line number12 index11 alt1"><cod=
e class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyw=
ord">return</code> <code class=3D"js keyword">function</code> <code class=
=3D"js plain">() {};</code></div><div class=3D"line number13 index12 alt2">=
<code class=3D"js plain">});</code></div></div></td></tr></tbody></table></=
div></div>


<h4>Why Is AMD A Better Choice For Writing Modular JavaScript?</h4>

<ul>
    <li>Provides a clear proposal for how to approach defining flexible mod=
ules. </li>

    <li>Significantly cleaner than the present global namespace and <code>&=
lt;script&gt;</code> tag solutions many of us rely on. There's a clean way =
to declare stand-alone modules and dependencies they may have.</li>

    <li>Module definitions are encapsulated, helping us to avoid pollution =
of the global namespace.</li>

    <li>Arguably works better than some alternative solutions (e.g. CommonJ=
S, which we'll be looking at shortly). It doesn't have issues with cross-do=
main, local or debugging and doesn't have a reliance on server-side tools t=
o be used. Most AMD loaders support loading modules in the browser without =
a build process.</li>

    <li>Provides a "transport" approach for including multiple modules in a=
 single file. Other approaches like CommonJS have yet to agree on a transpo=
rt format.</li>

    <li>It's possible to lazy load scripts if this is needed.</li>
</ul>

<p><strong>Note:</strong> Many of the above could be said about YUI's modul=
e loading strategy as well.</p>

<p>&nbsp;</p>
  <div class=3D"alert-message block-message info">
<p><b>Related Reading</b></p>
<p><a href=3D"http://requirejs.org/docs/whyamd.html">The RequireJS Guide To=
 AMD</a></p>
<p><a href=3D"http://unscriptable.com/index.php/2011/09/21/what-is-the-fast=
est-way-to-load-amd-modules/">What's the fastest way to load AMD modules?</=
a></p>
<p><a href=3D"http://unscriptable.com/index.php/2011/09/30/amd-versus-cjs-w=
hats-the-best-format/">AMD vs. CommonJS, what's the better format?</a></p>
<p><a href=3D"http://blog.millermedeiros.com/2011/09/amd-is-better-for-the-=
web-than-commonjs-modules/">AMD Is Better For The Web Than CommonJS Modules=
</a></p>
<p><a href=3D"http://unscriptable.com/code/Modules-Frameworks/">The Future =
Is Modules Not Frameworks</a></p>
<p><a href=3D"http://groups.google.com/group/commonjs/browse_thread/thread/=
96a0963bcb4ca78f/cf73db49ce267ce1?lnk=3Dgst#">AMD No Longer A CommonJS Spec=
ification</a></p>
<p><a href=3D"http://tagneto.blogspot.com/2011/04/on-inventing-js-module-fo=
rmats-and.html">On Inventing JavaScript Module Formats And Script Loaders</=
a></p>
<p><a href=3D"http://groups.google.com/group/amd-implement">The AMD Mailing=
 List</a></p>
   </div>

<h4>What Script Loaders &amp; Frameworks Support AMD?</h4>

<h5>In-browser:</h5>
<ul>
<li>RequireJS <a href=3D"http://requirejs.org/">http://requirejs.org</a></l=
i>
<li>curl.js <a href=3D"http://github.com/unscriptable/curl">http://github.c=
om/unscriptable/curl</a></li>
<li>bdLoad <a href=3D"http://bdframework.com/bdLoad">http://bdframework.com=
/bdLoad</a></li>
<li>Yabble <a href=3D"http://github.com/jbrantly/yabble">http://github.com/=
jbrantly/yabble</a></li>
<li>PINF <a href=3D"http://github.com/pinf/loader-js">http://github.com/pin=
f/loader-js</a></li>
<li>(and more)</li>
</ul>

<h5>Server-side:</h5>
<ul>
<li>RequireJS <a href=3D"http://requirejs.org/">http://requirejs.org</a></l=
i>
<li>PINF <a href=3D"http://github.com/pinf/loader-js">http://github.com/pin=
f/loader-js</a></li>
</ul>

<p>&nbsp;</p>
<h3>AMD Conclusions</h3>

<p>Having used AMD for a number of projects, my conclusions are that it tic=
ks a lot of the checkboxes developers creating serious applications might d=
esire from a better module format. It avoids the need to worry about global=
s, supports named modules, doesn't require server transformation to functio=
n and is a pleasure to use for dependency management.</p>

<p>It's also an excellent addition for modular development using Backbone.j=
s, ember.js or any number of other structural frameworks for keeping applic=
ations organized. </p>

<p>As AMD has been heavily discussed for almost two years within the Dojo a=
nd CommonJS worlds, we know it's had time to mature and evolve. We also kno=
w it's been battle-tested in the wild by a number of large companies to bui=
ld non-trivial applications (IBM, BBC iPlayer) and so, if it didn't work, c=
hances are they would have abandoned it by now, but haven't.</p>

<p>That said, there are still areas where AMD could be improved. Developers=
 who have used the format for some time may feel the AMD boilerplate/wrappe=
r-code is an annoying overhead. Whilst I share this concern, there are tool=
s such as <a href=3D"https://github.com/volojs/volo">Volo</a> that can help=
 work around these issues and I would argue that on the whole, the pros wit=
h using AMD far outweigh the cons.</p>


<p>&nbsp;</p>
<p>&nbsp;</p>

<div class=3D"hr"></div>
<div>
    <h2 id=3D"detailcommonjs">CommonJS</h2>
</div>


<h3>A Module Format Optimized For The Server</h3>

<p>The CommonJS module proposal specifies a simple API for declaring module=
s server-side and unlike AMD attempts to cover a broader set of concerns su=
ch as io, file-system, promises and more.</p>

<p>The format was proposed by <a href=3D"http://www.commonjs.org/">CommonJS=
</a> - a volunteer working group which aim to design, prototype and standar=
dize JavaScript APIs. To date they've attempted to ratify standards for bot=
h <a href=3D"http://www.commonjs.org/specs/modules/1.0/">modules</a> and <a=
 href=3D"http://wiki.commonjs.org/wiki/Packages/1.0">packages</a>.</p>

<h3>Getting Started</h3>

<p>From a structure perspective, a CommonJS module is a reusable piece of J=
avaScript which exports specific objects made available to any dependent co=
de. Unlike AMD, there are typically no function wrappers around such module=
s (so we won't see <code>define</code> here for example).</p>

<p>CommonJS modules basically contain two primary parts: a free variable na=
med <code>exports</code> which contains the objects a module wishes to make=
 available to other modules and a <code>require</code> function that module=
s can use to import the exports of other modules.
</p>

<h4>Understanding CommonJS: require() and exports</h4>
<div><div id=3D"highlighter_121783" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div></td><td class=3D"cod=
e"><div class=3D"container"><div class=3D"line number1 index0 alt2"><code c=
lass=3D"js comments">// package/lib is a dependency we require</code></div>=
<div class=3D"line number2 index1 alt1"><code class=3D"js keyword">var</cod=
e> <code class=3D"js plain">lib =3D require( </code><code class=3D"js strin=
g">"package/lib"</code> <code class=3D"js plain">);</code></div><div class=
=3D"line number3 index2 alt2">&nbsp;</div><div class=3D"line number4 index3=
 alt1"><code class=3D"js comments">// behaviour for our module</code></div>=
<div class=3D"line number5 index4 alt2"><code class=3D"js keyword">function=
</code> <code class=3D"js plain">foo(){</code></div><div class=3D"line numb=
er6 index5 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><=
code class=3D"js plain">lib.log( </code><code class=3D"js string">"hello wo=
rld!"</code> <code class=3D"js plain">);</code></div><div class=3D"line num=
ber7 index6 alt2"><code class=3D"js plain">}</code></div><div class=3D"line=
 number8 index7 alt1">&nbsp;</div><div class=3D"line number9 index8 alt2"><=
code class=3D"js comments">// export (expose) foo to other modules</code></=
div><div class=3D"line number10 index9 alt1"><code class=3D"js plain">expor=
ts.foo =3D foo;</code></div></div></td></tr></tbody></table></div></div>

<h4>Basic consumption of exports</h4>
<div><div id=3D"highlighter_787623" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</=
div><div class=3D"line number19 index18 alt2">19</div><div class=3D"line nu=
mber20 index19 alt1">20</div><div class=3D"line number21 index20 alt2">21</=
div><div class=3D"line number22 index21 alt1">22</div><div class=3D"line nu=
mber23 index22 alt2">23</div><div class=3D"line number24 index23 alt1">24</=
div><div class=3D"line number25 index24 alt2">25</div></td><td class=3D"cod=
e"><div class=3D"container"><div class=3D"line number1 index0 alt2"><code c=
lass=3D"js comments">// define more behaviour we would like to expose</code=
></div><div class=3D"line number2 index1 alt1"><code class=3D"js keyword">f=
unction</code> <code class=3D"js plain">foobar(){</code></div><div class=3D=
"line number3 index2 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><co=
de class=3D"js keyword">this</code><code class=3D"js plain">.foo =3D </code=
><code class=3D"js keyword">function</code><code class=3D"js plain">(){</co=
de></div><div class=3D"line number4 index3 alt1"><code class=3D"js spaces">=
&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">console.log( </code=
><code class=3D"js string">"Hello foo"</code> <code class=3D"js plain">);</=
code></div><div class=3D"line number5 index4 alt2"><code class=3D"js spaces=
">&nbsp;&nbsp;</code><code class=3D"js plain">}</code></div><div class=3D"l=
ine number6 index5 alt1">&nbsp;</div><div class=3D"line number7 index6 alt2=
"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js keyword">t=
his</code><code class=3D"js plain">.bar =3D </code><code class=3D"js keywor=
d">function</code><code class=3D"js plain">(){</code></div><div class=3D"li=
ne number8 index7 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;<=
/code><code class=3D"js plain">console.log( </code><code class=3D"js string=
">"Hello bar"</code> <code class=3D"js plain">);</code></div><div class=3D"=
line number9 index8 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><cod=
e class=3D"js plain">}</code></div><div class=3D"line number10 index9 alt1"=
><code class=3D"js plain">}</code></div><div class=3D"line number11 index10=
 alt2">&nbsp;</div><div class=3D"line number12 index11 alt1"><code class=3D=
"js comments">// expose foobar to other modules</code></div><div class=3D"l=
ine number13 index12 alt2"><code class=3D"js plain">exports.foobar =3D foob=
ar;</code></div><div class=3D"line number14 index13 alt1">&nbsp;</div><div =
class=3D"line number15 index14 alt2"><code class=3D"js comments">// an appl=
ication consuming "foobar"</code></div><div class=3D"line number16 index15 =
alt1">&nbsp;</div><div class=3D"line number17 index16 alt2"><code class=3D"=
js comments">// access the module relative to the path</code></div><div cla=
ss=3D"line number18 index17 alt1"><code class=3D"js comments">// where both=
 usage and module files exist</code></div><div class=3D"line number19 index=
18 alt2"><code class=3D"js comments">// in the same directory</code></div><=
div class=3D"line number20 index19 alt1">&nbsp;</div><div class=3D"line num=
ber21 index20 alt2"><code class=3D"js keyword">var</code> <code class=3D"js=
 plain">foobar =3D require(</code><code class=3D"js string">"./foobar"</cod=
e><code class=3D"js plain">).foobar,</code></div><div class=3D"line number2=
2 index21 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><c=
ode class=3D"js plain">test&nbsp;&nbsp; =3D </code><code class=3D"js keywor=
d">new</code> <code class=3D"js plain">foobar();</code></div><div class=3D"=
line number23 index22 alt2">&nbsp;</div><div class=3D"line number24 index23=
 alt1"><code class=3D"js comments">// Outputs: "Hello bar"</code></div><div=
 class=3D"line number25 index24 alt2"><code class=3D"js plain">test.bar();<=
/code></div></div></td></tr></tbody></table></div></div>

<h4>AMD-equivalent Of The First CommonJS Example</h4>

<div><div id=3D"highlighter_401686" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div></td><td class=3D"cod=
e"><div class=3D"container"><div class=3D"line number1 index0 alt2"><code c=
lass=3D"js plain">define(</code><code class=3D"js keyword">function</code><=
code class=3D"js plain">(require){</code></div><div class=3D"line number2 i=
ndex1 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js keyword">var</code> <code class=3D"js plain">lib =3D require( </code=
><code class=3D"js string">"package/lib"</code> <code class=3D"js plain">);=
</code></div><div class=3D"line number3 index2 alt2">&nbsp;</div><div class=
=3D"line number4 index3 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&=
nbsp;</code><code class=3D"js comments">// some behaviour for our module</c=
ode></div><div class=3D"line number5 index4 alt2"><code class=3D"js spaces"=
>&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">function</code> =
<code class=3D"js plain">foo(){</code></div><div class=3D"line number6 inde=
x5 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;</code><code class=3D"js plain">lib.log( </code><code class=3D"js s=
tring">"hello world!"</code> <code class=3D"js plain">);</code></div><div c=
lass=3D"line number7 index6 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nb=
sp;&nbsp;</code><code class=3D"js plain">}</code></div><div class=3D"line n=
umber8 index7 alt1">&nbsp;</div><div class=3D"line number9 index8 alt2"><co=
de class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js com=
ments">// export (expose) foo for other modules</code></div><div class=3D"l=
ine number10 index9 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp=
;</code><code class=3D"js keyword">return</code> <code class=3D"js plain">{=
</code></div><div class=3D"line number11 index10 alt2"><code class=3D"js sp=
aces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D=
"js plain">foobar: foo</code></div><div class=3D"line number12 index11 alt1=
"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"j=
s plain">};</code></div><div class=3D"line number13 index12 alt2"><code cla=
ss=3D"js plain">});</code></div></div></td></tr></tbody></table></div></div=
>

<p>This can be done as AMD supports a <a href=3D"http://requirejs.org/docs/=
whyamd.html#sugar">simplified CommonJS wrapping</a> feature.</p>

<h4>Consuming Multiple Dependencies</h4>

<h5>app.js</h5>
<div><div id=3D"highlighter_194655" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div></td><td class=3D"cod=
e"><div class=3D"container"><div class=3D"line number1 index0 alt2"><code c=
lass=3D"js keyword">var</code> <code class=3D"js plain">modA =3D require( <=
/code><code class=3D"js string">"./foo"</code> <code class=3D"js plain">);<=
/code></div><div class=3D"line number2 index1 alt1"><code class=3D"js keywo=
rd">var</code> <code class=3D"js plain">modB =3D require( </code><code clas=
s=3D"js string">"./bar"</code> <code class=3D"js plain">);</code></div><div=
 class=3D"line number3 index2 alt2">&nbsp;</div><div class=3D"line number4 =
index3 alt1"><code class=3D"js plain">exports.app =3D </code><code class=3D=
"js keyword">function</code><code class=3D"js plain">(){</code></div><div c=
lass=3D"line number5 index4 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nb=
sp;&nbsp;</code><code class=3D"js plain">console.log( </code><code class=3D=
"js string">"Im an application!"</code> <code class=3D"js plain">);</code><=
/div><div class=3D"line number6 index5 alt1"><code class=3D"js plain">}</co=
de></div><div class=3D"line number7 index6 alt2">&nbsp;</div><div class=3D"=
line number8 index7 alt1"><code class=3D"js plain">exports.foo =3D </code><=
code class=3D"js keyword">function</code><code class=3D"js plain">(){</code=
></div><div class=3D"line number9 index8 alt2"><code class=3D"js spaces">&n=
bsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">return</code> <code=
 class=3D"js plain">modA.helloWorld();</code></div><div class=3D"line numbe=
r10 index9 alt1"><code class=3D"js plain">}</code></div></div></td></tr></t=
body></table></div></div>

<h5>bar.js</h5>
<div><div id=3D"highlighter_825068" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div></td><td class=3D"code"><div class=3D"container"><div class=3D"line num=
ber1 index0 alt2"><code class=3D"js plain">exports.name =3D </code><code cl=
ass=3D"js string">"bar"</code><code class=3D"js plain">;</code></div></div>=
</td></tr></tbody></table></div></div>


<h5>foo.js</h5>
<div><div id=3D"highlighter_782059" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div></td>=
<td class=3D"code"><div class=3D"container"><div class=3D"line number1 inde=
x0 alt2"><code class=3D"js plain">require( </code><code class=3D"js string"=
>"./bar"</code> <code class=3D"js plain">);</code></div><div class=3D"line =
number2 index1 alt1"><code class=3D"js plain">exports.helloWorld =3D </code=
><code class=3D"js keyword">function</code><code class=3D"js plain">(){</co=
de></div><div class=3D"line number3 index2 alt2"><code class=3D"js spaces">=
&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">return</code> <co=
de class=3D"js string">"Hello World!!"</code></div><div class=3D"line numbe=
r4 index3 alt1"><code class=3D"js plain">}</code></div></div></td></tr></tb=
ody></table></div></div>

<h4>What Loaders &amp; Frameworks Support CommonJS?</h4>

<h5>In-browser:</h5>
<ul>
<li>curl.js <a href=3D"http://github.com/unscriptable/curl">http://github.c=
om/unscriptable/curl</a></li>
<li>SproutCore 1.1 <a href=3D"http://sproutcore.com/">http://sproutcore.com=
</a></li>
<li>PINF <a href=3D"http://github.com/pinf/loader-js">http://github.com/pin=
f/loader-js</a></li>
</ul>

<h5>Server-side:</h5>
<ul>
<li>Node<a href=3D"http://nodejs.org/">http://nodejs.org</a></li>
<li>Narwhal <a href=3D"https://github.com/tlrobinson/narwhal">https://githu=
b.com/tlrobinson/narwhal</a></li>
<li>Persevere <a href=3D"http://www.persvr.org/">http://www.persvr.org/</a>=
</li>
<li>Wakanda <a href=3D"http://www.wakandasoft.com/">http://www.wakandasoft.=
com/</a></li>
</ul>



<p>&nbsp;</p>
<h4>Is CommonJS Suitable For The Browser?</h4>

<p>There are developers that feel CommonJS is better suited to server-side =
development which is one reason there's currently a level of <strong>disagr=
eement</strong> over which format should and will be used as the de facto s=
tandard in the pre-Harmony age moving forward. Some of the arguments agains=
t CommonJS include a note that many CommonJS APIs address server-oriented f=
eatures which one would simply not be able to implement at a browser-level =
in JavaScript - for example, <em>io</em>, <em>system</em> and <em>js</em> c=
ould be considered unimplementable by the nature of their functionality.</p=
>

<p>That said, it's useful to know how to structure CommonJS modules regardl=
ess so that we can better appreciate how they fit in when defining modules =
which may be used everywhere. Modules which have applications on both the c=
lient and server include validation, conversion and templating engines. The=
 way some developers are approaching choosing which format to use is opting=
 for CommonJS when a module can be used in a server-side environment and us=
ing AMD if this is not the case. </p>

<p>As AMD modules are capable of using plugins and can define more granular=
 things like constructors and functions this makes sense. CommonJS modules =
are only able to define objects which can be tedious to work with if we're =
trying to obtain constructors out of them.</p>

<p>Although it's beyond the scope of this section, one may have also notice=
d that there were different types of "require" methods mentioned when discu=
ssing AMD and CommonJS. The concern with a similar naming convention is of =
course confusion and the community are currently split on the merits of a g=
lobal require function. John Hann's suggestion here is that rather than cal=
ling it "require", which would probably fail to achieve the goal of informi=
ng users about the different between a global and inner require, it may mak=
e more sense to rename the global loader method something else (e.g. the na=
me of the library). It's for this reason that a loader like curl.js uses <c=
ode>curl()</code> as opposed to <code>require</code>. </p>

<p></p>

  <div class=3D"alert-message block-message info">
<p><b>Related Reading</b></p>
 <p><a href=3D"http://dailyjs.com/2010/10/18/modules/">Demystifying CommonJ=
S Modules</a></p>
<p><a href=3D"http://www.slideshare.net/davidpadbury/javascript-growing-up"=
>JavaScript Growing Up</a></p>
<p><a href=3D"http://requirejs.org/docs/commonjs.html">The RequireJS Notes =
On CommonJS</a></p>
<p><a href=3D"http://elegantcode.com/2011/02/04/taking-baby-steps-with-node=
-js-commonjs-and-creating-custom-modules/">Taking Baby Steps With Node.js A=
nd CommonJS - Creating Custom Modules</a></p>
<p><a href=3D"http://www.sitepen.com/blog/2010/07/16/asynchronous-commonjs-=
modules-for-the-browser-and-introducing-transporter/">Asynchronous CommonJS=
 Modules for the Browser</a></p>
<p><a href=3D"http://groups.google.com/group/commonjs">The CommonJS Mailing=
 List</a></p>
   </div>

<div class=3D"hr"></div>
<p>&nbsp;</p>





<p>&nbsp;</p>


<div>
    <h2>AMD &amp;&amp; CommonJS <small>Competing, But Equally Valid Standar=
ds</small></h2>
  </div>

<p>Both AMD and CommonJS are valid module formats with different end-goals.=
</p>

<p>AMD adopts a browser-first approach to development, opting for asynchron=
ous behavior and simplified backwards compatibility but it doesn't have any=
 concept of File I/O. It supports objects, functions, constructors, strings=
, JSON and many other types of modules, running natively in the browser. It=
's incredibly flexible.</p>

<p>CommonJS on the other hand takes a server-first approach, assuming synch=
ronous behavior, no global <i>baggage</i> and attempts to cater for the fut=
ure (on the server). What we mean by this is that because CommonJS supports=
 unwrapped modules, it can feel a little more close to the ES.next/Harmony =
specifications, freeing us of the <code>define()</code> wrapper that AMD en=
forces. CommonJS modules however only support objects as modules.</p>

<h3>UMD: AMD And CommonJS-Compatible Modules For Plugins</h3>

<p>For developers wishing to create modules that can work in both browser a=
nd server-side environments, existing solutions could be considered little =
lacking. To help alleviate this, James Burke, I and a number of other devel=
opers created UMD (Universal Module Definition) <a href=3D"https://github.c=
om/umdjs/umd">https://github.com/umdjs/umd</a>.</p>

<p>UMD is an experimental module format that allows the definition of modul=
es that work in both client and server environments with all or most of the=
 popular script-loading techniques available at the time of writing. Althou=
gh the idea of (yet) another module format may be daunting, we will cover U=
MD briefly for the sake of thoroughness.</p>We originally began defining UM=
D by taking a look at the simplified CommonJS wrapper supported in the AMD =
specification. For developers wishing to write modules as if they were Comm=
onJS modules, the following CommonJS-compatible format could be used:<p></p=
>

<h4>Basic AMD Hybrid Format</h4>

<div><div id=3D"highlighter_703618" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div></td><td class=3D"code"><div class=3D"cont=
ainer"><div class=3D"line number1 index0 alt2"><code class=3D"js plain">def=
ine( </code><code class=3D"js keyword">function</code> <code class=3D"js pl=
ain">( require, exports, module ){</code></div><div class=3D"line number2 i=
ndex1 alt1">&nbsp;</div><div class=3D"line number3 index2 alt2"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">va=
r</code> <code class=3D"js plain">shuffler =3D require( </code><code class=
=3D"js string">"lib/shuffle"</code> <code class=3D"js plain">);</code></div=
><div class=3D"line number4 index3 alt1">&nbsp;</div><div class=3D"line num=
ber5 index4 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>=
<code class=3D"js plain">exports.randomize =3D </code><code class=3D"js key=
word">function</code><code class=3D"js plain">( input ){</code></div><div c=
lass=3D"line number6 index5 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">return</=
code> <code class=3D"js plain">shuffler.shuffle( input );</code></div><div =
class=3D"line number7 index6 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&n=
bsp;&nbsp;</code><code class=3D"js plain">}</code></div><div class=3D"line =
number8 index7 alt1"><code class=3D"js plain">});</code></div></div></td></=
tr></tbody></table></div></div>

<p>It's important however to note that a module is really only treated as a=
 CommonJS module if it doesn't contain a dependency array and the definitio=
n function contains one parameter at minimum. This also won't work correctl=
y on some devices (e.g the PS3). For further information about the above wr=
apper, see <a href=3D"http://requirejs.org/docs/api.html#cjsmodule">http://=
requirejs.org/docs/api.html#cjsmodule</a>.</p>

<p>Taking this further, we wanted to provide a number of different patterns=
 that not just worked with AMD and CommonJS, but also solved common compati=
bility problems developers wishing to develop such modules had with other e=
nvironments.</p>

<p>One such variation we can see below allows us to use CommonJS, AMD or br=
owser globals to create a module.</p>

<h4>Using CommonJS, AMD or browser globals to create a module</h4>

<p>Define a module <code>commonJsStrict</code>, which depends on another mo=
dule called <code>b</code>. The name of the module is implied by the file n=
ame and its best practice for the file name and the exported global to have=
 the same name.</p>

<p>If the module <code>b</code> also uses the same type of boilerplate in t=
he browser, it will create a global <code>.b</code> that is used. If we don=
't wish to support the browser global patch, we can remove the <code>root</=
code> and the passing <code>this</code> as the first argument to the top fu=
nction.</p>

<div><div id=3D"highlighter_227596" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</=
div></td><td class=3D"code"><div class=3D"container"><div class=3D"line num=
ber1 index0 alt2"><code class=3D"js plain">(</code><code class=3D"js keywor=
d">function</code> <code class=3D"js plain">( root, factory ) {</code></div=
><div class=3D"line number2 index1 alt1"><code class=3D"js spaces">&nbsp;&n=
bsp;&nbsp;&nbsp;</code><code class=3D"js keyword">if</code> <code class=3D"=
js plain">( </code><code class=3D"js keyword">typeof</code> <code class=3D"=
js plain">exports =3D=3D=3D </code><code class=3D"js string">'object'</code=
> <code class=3D"js plain">) {</code></div><div class=3D"line number3 index=
2 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;</code><code class=3D"js comments">// CommonJS</code></div><div clas=
s=3D"line number4 index3 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">factory( expo=
rts, require(</code><code class=3D"js string">'b'</code><code class=3D"js p=
lain">) );</code></div><div class=3D"line number5 index4 alt2"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">} </=
code><code class=3D"js keyword">else</code> <code class=3D"js keyword">if</=
code> <code class=3D"js plain">( </code><code class=3D"js keyword">typeof</=
code> <code class=3D"js plain">define =3D=3D=3D </code><code class=3D"js st=
ring">'function'</code> <code class=3D"js plain">&amp;&amp; define.amd ) {<=
/code></div><div class=3D"line number6 index5 alt1"><code class=3D"js space=
s">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js=
 comments">// AMD. Register as an anonymous module.</code></div><div class=
=3D"line number7 index6 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">define( [</cod=
e><code class=3D"js string">'exports'</code><code class=3D"js plain">, </co=
de><code class=3D"js string">'b'</code><code class=3D"js plain">], factory)=
;</code></div><div class=3D"line number8 index7 alt1"><code class=3D"js spa=
ces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">} </code><code=
 class=3D"js keyword">else</code> <code class=3D"js plain">{</code></div><d=
iv class=3D"line number9 index8 alt2"><code class=3D"js spaces">&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// =
Browser globals</code></div><div class=3D"line number10 index9 alt1"><code =
class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>=
<code class=3D"js plain">factory( (root.commonJsStrict =3D {}), root.b );</=
code></div><div class=3D"line number11 index10 alt2"><code class=3D"js spac=
es">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">}</code></div><=
div class=3D"line number12 index11 alt1"><code class=3D"js plain">}(</code>=
<code class=3D"js keyword">this</code><code class=3D"js plain">, </code><co=
de class=3D"js keyword">function</code> <code class=3D"js plain">( exports,=
 b ) {</code></div><div class=3D"line number13 index12 alt2"><code class=3D=
"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">//us=
e b in some fashion.</code></div><div class=3D"line number14 index13 alt1">=
&nbsp;</div><div class=3D"line number15 index14 alt2"><code class=3D"js spa=
ces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// attach p=
roperties to the exports object to define</code></div><div class=3D"line nu=
mber16 index15 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</co=
de><code class=3D"js comments">// the exported module properties.</code></d=
iv><div class=3D"line number17 index16 alt2"><code class=3D"js spaces">&nbs=
p;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">exports.action =3D </co=
de><code class=3D"js keyword">function</code> <code class=3D"js plain">() {=
};</code></div><div class=3D"line number18 index17 alt1"><code class=3D"js =
plain">}));</code></div></div></td></tr></tbody></table></div></div>

<p>The UMD repository contains variations covering modules that work optima=
lly in the browser, those best for providing exports, those optimal for Com=
monJS runtimes and even those that work best for defining jQuery plugins, w=
hich we will look at next.</p>


<h4>jQuery plugins that function in all environments</h4>

<p>UMD provides two patterns for working with jQuery plugins - one which de=
fines plugins that work well with AMD and browser globals and another which=
 can also work in CommonJS environments. jQuery is not likely to be used in=
 most CommonJS environments so keep this in mind unless we're working with =
an environment which does play well with it.</p>

<p>We will now define a plugin composed of a core and an extension to that =
core. The core plugin is loaded into a <code>$.core</code> namespace, which=
 can then be easily extended using plugin extensions via the namespacing pa=
ttern. Plugins loaded via script tags automatically populate a <code>plugin=
</code> namespace under <code>core</code> (i.e. <code>$.core.plugin.methodN=
ame()</code>).</p>

<p>The pattern can be quite nice to work with because plugin extensions can=
 access properties and methods defined in the base or, with a little tweaki=
ng, override default behavior so that it can be extended to do more. A load=
er is also not required to make any of this fully functional.</p>

<p>For more details of what is being done, please see the inline comments i=
n the code samples below.</p>

<p><strong>usage.html</strong></p>

<div><div id=3D"highlighter_385073" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</=
div><div class=3D"line number19 index18 alt2">19</div><div class=3D"line nu=
mber20 index19 alt1">20</div><div class=3D"line number21 index20 alt2">21</=
div><div class=3D"line number22 index21 alt1">22</div><div class=3D"line nu=
mber23 index22 alt2">23</div><div class=3D"line number24 index23 alt1">24</=
div><div class=3D"line number25 index24 alt2">25</div><div class=3D"line nu=
mber26 index25 alt1">26</div><div class=3D"line number27 index26 alt2">27</=
div><div class=3D"line number28 index27 alt1">28</div><div class=3D"line nu=
mber29 index28 alt2">29</div><div class=3D"line number30 index29 alt1">30</=
div><div class=3D"line number31 index30 alt2">31</div><div class=3D"line nu=
mber32 index31 alt1">32</div></td><td class=3D"code"><div class=3D"containe=
r"><div class=3D"line number1 index0 alt2"><code class=3D"js plain">&lt;scr=
ipt type=3D</code><code class=3D"js string">"text/javascript"</code> <code =
class=3D"js plain">src=3D</code><code class=3D"js string">"jquery-1.7.2.min=
.js"</code><code class=3D"js plain">&gt;&lt;/script&gt;</code></div><div cl=
ass=3D"line number2 index1 alt1"><code class=3D"js plain">&lt;script type=
=3D</code><code class=3D"js string">"text/javascript"</code> <code class=3D=
"js plain">src=3D</code><code class=3D"js string">"pluginCore.js"</code><co=
de class=3D"js plain">&gt;&lt;/script&gt;</code></div><div class=3D"line nu=
mber3 index2 alt2"><code class=3D"js plain">&lt;script type=3D</code><code =
class=3D"js string">"text/javascript"</code> <code class=3D"js plain">src=
=3D</code><code class=3D"js string">"pluginExtension.js"</code><code class=
=3D"js plain">&gt;&lt;/script&gt;</code></div><div class=3D"line number4 in=
dex3 alt1">&nbsp;</div><div class=3D"line number5 index4 alt2"><code class=
=3D"js plain">&lt;script type=3D</code><code class=3D"js string">"text/java=
script"</code><code class=3D"js plain">&gt;</code></div><div class=3D"line =
number6 index5 alt1">&nbsp;</div><div class=3D"line number7 index6 alt2"><c=
ode class=3D"js plain">$(</code><code class=3D"js keyword">function</code><=
code class=3D"js plain">(){</code></div><div class=3D"line number8 index7 a=
lt1">&nbsp;</div><div class=3D"line number9 index8 alt2"><code class=3D"js =
spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// Our p=
lugin "core" is exposed under a core namespace in</code></div><div class=3D=
"line number10 index9 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nb=
sp;</code><code class=3D"js comments">// this example, which we first cache=
</code></div><div class=3D"line number11 index10 alt2"><code class=3D"js sp=
aces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">var</code> =
<code class=3D"js plain">core =3D $.core;</code></div><div class=3D"line nu=
mber12 index11 alt1">&nbsp;</div><div class=3D"line number13 index12 alt2">=
<code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js =
comments">// Then use use some of the built-in core functionality to</code>=
</div><div class=3D"line number14 index13 alt1"><code class=3D"js spaces">&=
nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// highlight all =
divs in the page yellow</code></div><div class=3D"line number15 index14 alt=
2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"=
js plain">core.highlightAll();</code></div><div class=3D"line number16 inde=
x15 alt1">&nbsp;</div><div class=3D"line number17 index16 alt2"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">/=
/ Access the plugins (extensions) loaded into the "plugin"</code></div><div=
 class=3D"line number18 index17 alt1"><code class=3D"js spaces">&nbsp;&nbsp=
;&nbsp;&nbsp;</code><code class=3D"js comments">// namespace of our core mo=
dule:</code></div><div class=3D"line number19 index18 alt2">&nbsp;</div><di=
v class=3D"line number20 index19 alt1"><code class=3D"js spaces">&nbsp;&nbs=
p;&nbsp;&nbsp;</code><code class=3D"js comments">// Set the first div in th=
e page to have a green background.</code></div><div class=3D"line number21 =
index20 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><cod=
e class=3D"js plain">core.plugin.setGreen( </code><code class=3D"js string"=
>"div:first"</code><code class=3D"js plain">);</code></div><div class=3D"li=
ne number22 index21 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp=
;</code><code class=3D"js comments">// Here we're making use of the core's =
"highlight" method</code></div><div class=3D"line number23 index22 alt2"><c=
ode class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js co=
mments">// under the hood from a plugin loaded in after it</code></div><div=
 class=3D"line number24 index23 alt1">&nbsp;</div><div class=3D"line number=
25 index24 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><=
code class=3D"js comments">// Set the last div to the "errorColor" property=
 defined in</code></div><div class=3D"line number26 index25 alt1"><code cla=
ss=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments"=
>// our core module/plugin. If we review the code further down,</code></div=
><div class=3D"line number27 index26 alt2"><code class=3D"js spaces">&nbsp;=
&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// we can see how easy=
 it is to consume properties and methods</code></div><div class=3D"line num=
ber28 index27 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</cod=
e><code class=3D"js comments">// between the core and other plugins</code><=
/div><div class=3D"line number29 index28 alt2"><code class=3D"js spaces">&n=
bsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">core.plugin.setRed(</=
code><code class=3D"js string">"div:last"</code><code class=3D"js plain">);=
</code></div><div class=3D"line number30 index29 alt1"><code class=3D"js pl=
ain">});</code></div><div class=3D"line number31 index30 alt2">&nbsp;</div>=
<div class=3D"line number32 index31 alt1"><code class=3D"js plain">&lt;/scr=
ipt&gt;</code></div></div></td></tr></tbody></table></div></div>

<p><strong>pluginCore.js</strong></p>

<div><div id=3D"highlighter_718546" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</=
div><div class=3D"line number19 index18 alt2">19</div><div class=3D"line nu=
mber20 index19 alt1">20</div><div class=3D"line number21 index20 alt2">21</=
div><div class=3D"line number22 index21 alt1">22</div><div class=3D"line nu=
mber23 index22 alt2">23</div><div class=3D"line number24 index23 alt1">24</=
div><div class=3D"line number25 index24 alt2">25</div><div class=3D"line nu=
mber26 index25 alt1">26</div><div class=3D"line number27 index26 alt2">27</=
div><div class=3D"line number28 index27 alt1">28</div><div class=3D"line nu=
mber29 index28 alt2">29</div><div class=3D"line number30 index29 alt1">30</=
div><div class=3D"line number31 index30 alt2">31</div><div class=3D"line nu=
mber32 index31 alt1">32</div><div class=3D"line number33 index32 alt2">33</=
div><div class=3D"line number34 index33 alt1">34</div><div class=3D"line nu=
mber35 index34 alt2">35</div><div class=3D"line number36 index35 alt1">36</=
div><div class=3D"line number37 index36 alt2">37</div><div class=3D"line nu=
mber38 index37 alt1">38</div><div class=3D"line number39 index38 alt2">39</=
div><div class=3D"line number40 index39 alt1">40</div><div class=3D"line nu=
mber41 index40 alt2">41</div><div class=3D"line number42 index41 alt1">42</=
div><div class=3D"line number43 index42 alt2">43</div><div class=3D"line nu=
mber44 index43 alt1">44</div><div class=3D"line number45 index44 alt2">45</=
div><div class=3D"line number46 index45 alt1">46</div><div class=3D"line nu=
mber47 index46 alt2">47</div></td><td class=3D"code"><div class=3D"containe=
r"><div class=3D"line number1 index0 alt2"><code class=3D"js comments">// M=
odule/Plugin core</code></div><div class=3D"line number2 index1 alt1"><code=
 class=3D"js comments">// Note: the wrapper code we see around the module i=
s what enables</code></div><div class=3D"line number3 index2 alt2"><code cl=
ass=3D"js comments">// us to support multiple module formats and specificat=
ions by</code></div><div class=3D"line number4 index3 alt1"><code class=3D"=
js comments">// mapping the arguments defined to what a specific format exp=
ects</code></div><div class=3D"line number5 index4 alt2"><code class=3D"js =
comments">// to be present. Our actual module functionality is defined lowe=
r</code></div><div class=3D"line number6 index5 alt1"><code class=3D"js com=
ments">// down, where a named module and exports are demonstrated.</code></=
div><div class=3D"line number7 index6 alt2"><code class=3D"js comments">//<=
/code></div><div class=3D"line number8 index7 alt1"><code class=3D"js comme=
nts">// Note that dependencies can just as easily be declared if required</=
code></div><div class=3D"line number9 index8 alt2"><code class=3D"js commen=
ts">// and should work as demonstrated earlier with the AMD module examples=
.</code></div><div class=3D"line number10 index9 alt1">&nbsp;</div><div cla=
ss=3D"line number11 index10 alt2"><code class=3D"js plain">(</code><code cl=
ass=3D"js keyword">function</code> <code class=3D"js plain">( name, definit=
ion ){</code></div><div class=3D"line number12 index11 alt1"><code class=3D=
"js spaces">&nbsp;&nbsp;</code><code class=3D"js keyword">var</code> <code =
class=3D"js plain">theModule =3D definition(),</code></div><div class=3D"li=
ne number13 index12 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;</code><code class=3D"js comments">// this is considered "safe=
":</code></div><div class=3D"line number14 index13 alt1"><code class=3D"js =
spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain"=
>hasDefine =3D </code><code class=3D"js keyword">typeof</code> <code class=
=3D"js plain">define =3D=3D=3D </code><code class=3D"js string">"function"<=
/code> <code class=3D"js plain">&amp;&amp; define.amd,</code></div><div cla=
ss=3D"line number15 index14 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// hasDefine =3D ty=
peof define =3D=3D=3D "function",</code></div><div class=3D"line number16 i=
ndex15 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
</code><code class=3D"js plain">hasExports =3D </code><code class=3D"js key=
word">typeof</code> <code class=3D"js plain">module !=3D=3D </code><code cl=
ass=3D"js string">"undefined"</code> <code class=3D"js plain">&amp;&amp; mo=
dule.exports;</code></div><div class=3D"line number17 index16 alt2">&nbsp;<=
/div><div class=3D"line number18 index17 alt1"><code class=3D"js spaces">&n=
bsp;&nbsp;</code><code class=3D"js keyword">if</code> <code class=3D"js pla=
in">( hasDefine ){ </code><code class=3D"js comments">// AMD Module</code><=
/div><div class=3D"line number19 index18 alt2"><code class=3D"js spaces">&n=
bsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">define(theModule);</c=
ode></div><div class=3D"line number20 index19 alt1"><code class=3D"js space=
s">&nbsp;&nbsp;</code><code class=3D"js plain">} </code><code class=3D"js k=
eyword">else</code> <code class=3D"js keyword">if</code> <code class=3D"js =
plain">( hasExports ) { </code><code class=3D"js comments">// Node.js Modul=
e</code></div><div class=3D"line number21 index20 alt2"><code class=3D"js s=
paces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">module.expor=
ts =3D theModule;</code></div><div class=3D"line number22 index21 alt1"><co=
de class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js plain">} </code=
><code class=3D"js keyword">else</code> <code class=3D"js plain">{ </code><=
code class=3D"js comments">// Assign to common namespaces or simply the glo=
bal object (window)</code></div><div class=3D"line number23 index22 alt2"><=
code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js p=
lain">( </code><code class=3D"js keyword">this</code><code class=3D"js plai=
n">.jQuery || </code><code class=3D"js keyword">this</code><code class=3D"j=
s plain">.ender || </code><code class=3D"js keyword">this</code><code class=
=3D"js plain">.$ || </code><code class=3D"js keyword">this</code><code clas=
s=3D"js plain">)[name] =3D theModule;</code></div><div class=3D"line number=
24 index23 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=
=3D"js plain">}</code></div><div class=3D"line number25 index24 alt2"><code=
 class=3D"js plain">})( </code><code class=3D"js string">"core"</code><code=
 class=3D"js plain">, </code><code class=3D"js keyword">function</code> <co=
de class=3D"js plain">() {</code></div><div class=3D"line number26 index25 =
alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js keyword">var</code> <code class=3D"js plain">module =3D </code><code=
 class=3D"js keyword">this</code><code class=3D"js plain">;</code></div><di=
v class=3D"line number27 index26 alt2"><code class=3D"js spaces">&nbsp;&nbs=
p;&nbsp;&nbsp;</code><code class=3D"js plain">module.plugins =3D [];</code>=
</div><div class=3D"line number28 index27 alt1"><code class=3D"js spaces">&=
nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">module.highlightColo=
r =3D </code><code class=3D"js string">"yellow"</code><code class=3D"js pla=
in">;</code></div><div class=3D"line number29 index28 alt2"><code class=3D"=
js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">module.e=
rrorColor =3D </code><code class=3D"js string">"red"</code><code class=3D"j=
s plain">;</code></div><div class=3D"line number30 index29 alt1">&nbsp;</di=
v><div class=3D"line number31 index30 alt2"><code class=3D"js spaces">&nbsp=
;&nbsp;</code><code class=3D"js comments">// define the core module here an=
d return the public API</code></div><div class=3D"line number32 index31 alt=
1">&nbsp;</div><div class=3D"line number33 index32 alt2"><code class=3D"js =
spaces">&nbsp;&nbsp;</code><code class=3D"js comments">// This is the highl=
ight method used by the core highlightAll()</code></div><div class=3D"line =
number34 index33 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><code c=
lass=3D"js comments">// method and all of the plugins highlighting elements=
 different</code></div><div class=3D"line number35 index34 alt2"><code clas=
s=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js comments">// colors</c=
ode></div><div class=3D"line number36 index35 alt1"><code class=3D"js space=
s">&nbsp;&nbsp;</code><code class=3D"js plain">module.highlight =3D </code>=
<code class=3D"js keyword">function</code><code class=3D"js plain">( el,str=
Color ){</code></div><div class=3D"line number37 index36 alt2"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">if=
</code><code class=3D"js plain">( </code><code class=3D"js keyword">this</c=
ode><code class=3D"js plain">.jQuery ){</code></div><div class=3D"line numb=
er38 index37 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;</code><code class=3D"js plain">jQuery(el).css( </code><code class=3D=
"js string">"background"</code><code class=3D"js plain">, strColor );</code=
></div><div class=3D"line number39 index38 alt2"><code class=3D"js spaces">=
&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">}</code></div><div =
class=3D"line number40 index39 alt1"><code class=3D"js spaces">&nbsp;&nbsp;=
</code><code class=3D"js plain">}</code></div><div class=3D"line number41 i=
ndex40 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js=
 keyword">return</code> <code class=3D"js plain">{</code></div><div class=
=3D"line number42 index41 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">highlightAll:</code><cod=
e class=3D"js keyword">function</code><code class=3D"js plain">(){</code></=
div><div class=3D"line number43 index42 alt2"><code class=3D"js spaces">&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain=
">module.highlight(</code><code class=3D"js string">"div"</code><code class=
=3D"js plain">, module.highlightColor);</code></div><div class=3D"line numb=
er44 index43 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;</code><code class=3D"js plain">}</code></div><div class=3D"line numb=
er45 index44 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=
=3D"js plain">};</code></div><div class=3D"line number46 index45 alt1">&nbs=
p;</div><div class=3D"line number47 index46 alt2"><code class=3D"js plain">=
});</code></div></div></td></tr></tbody></table></div></div>

<p><strong>pluginExtension.js</strong></p>

<div><div id=3D"highlighter_375761" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</=
div><div class=3D"line number19 index18 alt2">19</div><div class=3D"line nu=
mber20 index19 alt1">20</div><div class=3D"line number21 index20 alt2">21</=
div><div class=3D"line number22 index21 alt1">22</div><div class=3D"line nu=
mber23 index22 alt2">23</div><div class=3D"line number24 index23 alt1">24</=
div><div class=3D"line number25 index24 alt2">25</div><div class=3D"line nu=
mber26 index25 alt1">26</div><div class=3D"line number27 index26 alt2">27</=
div><div class=3D"line number28 index27 alt1">28</div><div class=3D"line nu=
mber29 index28 alt2">29</div><div class=3D"line number30 index29 alt1">30</=
div><div class=3D"line number31 index30 alt2">31</div><div class=3D"line nu=
mber32 index31 alt1">32</div><div class=3D"line number33 index32 alt2">33</=
div><div class=3D"line number34 index33 alt1">34</div><div class=3D"line nu=
mber35 index34 alt2">35</div><div class=3D"line number36 index35 alt1">36</=
div><div class=3D"line number37 index36 alt2">37</div><div class=3D"line nu=
mber38 index37 alt1">38</div><div class=3D"line number39 index38 alt2">39</=
div><div class=3D"line number40 index39 alt1">40</div><div class=3D"line nu=
mber41 index40 alt2">41</div><div class=3D"line number42 index41 alt1">42</=
div><div class=3D"line number43 index42 alt2">43</div><div class=3D"line nu=
mber44 index43 alt1">44</div><div class=3D"line number45 index44 alt2">45</=
div><div class=3D"line number46 index45 alt1">46</div><div class=3D"line nu=
mber47 index46 alt2">47</div><div class=3D"line number48 index47 alt1">48</=
div><div class=3D"line number49 index48 alt2">49</div><div class=3D"line nu=
mber50 index49 alt1">50</div></td><td class=3D"code"><div class=3D"containe=
r"><div class=3D"line number1 index0 alt2"><code class=3D"js comments">// E=
xtension to module core</code></div><div class=3D"line number2 index1 alt1"=
>&nbsp;</div><div class=3D"line number3 index2 alt2"><code class=3D"js plai=
n">(</code><code class=3D"js keyword">function</code> <code class=3D"js pla=
in">( name, definition ) {</code></div><div class=3D"line number4 index3 al=
t1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D=
"js keyword">var</code> <code class=3D"js plain">theModule =3D definition()=
,</code></div><div class=3D"line number5 index4 alt2"><code class=3D"js spa=
ces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"=
js plain">hasDefine =3D </code><code class=3D"js keyword">typeof</code> <co=
de class=3D"js plain">define =3D=3D=3D </code><code class=3D"js string">"fu=
nction"</code><code class=3D"js plain">,</code></div><div class=3D"line num=
ber6 index5 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">hasExports =3D </code><cod=
e class=3D"js keyword">typeof</code> <code class=3D"js plain">module !=3D=
=3D </code><code class=3D"js string">"undefined"</code> <code class=3D"js p=
lain">&amp;&amp; module.exports;</code></div><div class=3D"line number7 ind=
ex6 alt2">&nbsp;</div><div class=3D"line number8 index7 alt1"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">if=
</code> <code class=3D"js plain">( hasDefine ) { </code><code class=3D"js c=
omments">// AMD Module</code></div><div class=3D"line number9 index8 alt2">=
<code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<=
/code><code class=3D"js plain">define(theModule);</code></div><div class=3D=
"line number10 index9 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nb=
sp;</code><code class=3D"js plain">} </code><code class=3D"js keyword">else=
</code> <code class=3D"js keyword">if</code> <code class=3D"js plain">( has=
Exports ) { </code><code class=3D"js comments">// Node.js Module</code></di=
v><div class=3D"line number11 index10 alt2"><code class=3D"js spaces">&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">=
module.exports =3D theModule;</code></div><div class=3D"line number12 index=
11 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code cla=
ss=3D"js plain">} </code><code class=3D"js keyword">else</code> <code class=
=3D"js plain">{</code></div><div class=3D"line number13 index12 alt2">&nbsp=
;</div><div class=3D"line number14 index13 alt1"><code class=3D"js spaces">=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js co=
mments">// Assign to common namespaces or simply the global object (window)=
</code></div><div class=3D"line number15 index14 alt2"><code class=3D"js sp=
aces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D=
"js comments">// account for for flat-file/global module extensions</code><=
/div><div class=3D"line number16 index15 alt1"><code class=3D"js spaces">&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyw=
ord">var</code> <code class=3D"js plain">obj =3D </code><code class=3D"js k=
eyword">null</code><code class=3D"js plain">,</code></div><div class=3D"lin=
e number17 index16 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js pl=
ain">namespaces,</code></div><div class=3D"line number18 index17 alt1"><cod=
e class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">scope;</code></div><div =
class=3D"line number19 index18 alt2">&nbsp;</div><div class=3D"line number2=
0 index19 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;</code><code class=3D"js plain">obj =3D </code><code class=
=3D"js keyword">null</code><code class=3D"js plain">;</code></div><div clas=
s=3D"line number21 index20 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">namespaces =
=3D name.split(</code><code class=3D"js string">"."</code><code class=3D"js=
 plain">);</code></div><div class=3D"line number22 index21 alt1"><code clas=
s=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><cod=
e class=3D"js plain">scope =3D ( </code><code class=3D"js keyword">this</co=
de><code class=3D"js plain">.jQuery || </code><code class=3D"js keyword">th=
is</code><code class=3D"js plain">.ender || </code><code class=3D"js keywor=
d">this</code><code class=3D"js plain">.$ || </code><code class=3D"js keywo=
rd">this</code> <code class=3D"js plain">);</code></div><div class=3D"line =
number23 index22 alt2">&nbsp;</div><div class=3D"line number24 index23 alt1=
"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;</code><code class=3D"js keyword">for</code> <code class=3D"js plain">( </=
code><code class=3D"js keyword">var</code> <code class=3D"js plain">i =3D 0=
; i &lt; namespaces.length; i++ ) {</code></div><div class=3D"line number25=
 index24 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">var=
</code> <code class=3D"js plain">packageName =3D namespaces[i];</code></div=
><div class=3D"line number26 index25 alt1"><code class=3D"js spaces">&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><c=
ode class=3D"js keyword">if</code> <code class=3D"js plain">( obj &amp;&amp=
; i =3D=3D namespaces.length - 1 ) {</code></div><div class=3D"line number2=
7 index26 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code=
 class=3D"js plain">obj[packageName] =3D theModule;</code></div><div class=
=3D"line number28 index27 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js plain">} </code><code class=3D"js keyword">else</code> <code class=
=3D"js keyword">if</code> <code class=3D"js plain">( </code><code class=3D"=
js keyword">typeof</code> <code class=3D"js plain">scope[packageName] =3D=
=3D=3D </code><code class=3D"js string">"undefined"</code> <code class=3D"j=
s plain">) {</code></div><div class=3D"line number29 index28 alt2"><code cl=
ass=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">scop=
e[packageName] =3D {};</code></div><div class=3D"line number30 index29 alt1=
"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">}</code></div><div=
 class=3D"line number31 index30 alt2"><code class=3D"js spaces">&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code c=
lass=3D"js plain">obj =3D scope[packageName];</code></div><div class=3D"lin=
e number32 index31 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">}</code></div><div =
class=3D"line number33 index32 alt2">&nbsp;</div><div class=3D"line number3=
4 index33 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><c=
ode class=3D"js plain">}</code></div><div class=3D"line number35 index34 al=
t2"><code class=3D"js plain">})( </code><code class=3D"js string">"core.plu=
gin"</code><code class=3D"js plain">, </code><code class=3D"js keyword">fun=
ction</code> <code class=3D"js plain">() {</code></div><div class=3D"line n=
umber36 index35 alt1">&nbsp;</div><div class=3D"line number37 index36 alt2"=
><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js=
 comments">// Define our module here and return the public API.</code></div=
><div class=3D"line number38 index37 alt1"><code class=3D"js spaces">&nbsp;=
&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// This code could be =
easily adapted with the core to</code></div><div class=3D"line number39 ind=
ex38 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code c=
lass=3D"js comments">// allow for methods that overwrite and extend core fu=
nctionality</code></div><div class=3D"line number40 index39 alt1"><code cla=
ss=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments"=
>// in order to expand the highlight method to do more if we wish.</code></=
div><div class=3D"line number41 index40 alt2"><code class=3D"js spaces">&nb=
sp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">return</code> <code =
class=3D"js plain">{</code></div><div class=3D"line number42 index41 alt1">=
<code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<=
/code><code class=3D"js plain">setGreen: </code><code class=3D"js keyword">=
function</code> <code class=3D"js plain">( el ) {</code></div><div class=3D=
"line number43 index42 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"j=
s plain">highlight(el, </code><code class=3D"js string">"green"</code><code=
 class=3D"js plain">);</code></div><div class=3D"line number44 index43 alt1=
"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;</code><code class=3D"js plain">},</code></div><div class=3D"line number45=
 index44 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;</code><code class=3D"js plain">setRed: </code><code class=3D=
"js keyword">function</code> <code class=3D"js plain">( el ) {</code></div>=
<div class=3D"line number46 index45 alt1"><code class=3D"js spaces">&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><co=
de class=3D"js plain">highlight(el, errorColor);</code></div><div class=3D"=
line number47 index46 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">}</code></div><d=
iv class=3D"line number48 index47 alt1"><code class=3D"js spaces">&nbsp;&nb=
sp;&nbsp;&nbsp;</code><code class=3D"js plain">};</code></div><div class=3D=
"line number49 index48 alt2">&nbsp;</div><div class=3D"line number50 index4=
9 alt1"><code class=3D"js plain">});</code></div></div></td></tr></tbody></=
table></div></div>

<p>UMD doesn't aim to replace AMD nor CommonJS but merely offers some suppl=
emental assistance for developers wishing to get their code working in more=
 environments today. For further information or to contribute suggestions t=
owards this experimental format, see <a href=3D"https://github.com/umdjs/um=
d">https://github.com/umdjs/umd</a>.</p>


<h4>Further Reading</h4>

<ul>
<li>=E2=80=9C<a href=3D"http://unscriptable.com/code/Using-AMD-loaders/#0">=
Using AMD Loaders to Write and Manage Modular JavaScript</a>,=E2=80=9D John=
 Hann</li>

<li>=E2=80=9C<a href=3D"http://dailyjs.com/2010/10/18/modules/">Demystifyin=
g CommonJS Modules</a>,=E2=80=9D Alex Young</li>

<li>=E2=80=9C<a href=3D"http://unscriptable.com/index.php/2011/09/22/amd-mo=
dule-patterns-singleton/">AMD Module Patterns: Singleton</a>,=E2=80=9D John=
 Hann</li>

<li>=E2=80=9C<a href=3D"http://www.sitepen.com/blog/2010/09/30/run-anywhere=
-javascript-modules-boilerplate-code/">Run-Anywhere JavaScript Modules Boil=
erplate Code</a>,=E2=80=9D Kris Zyp</li>

<li>=E2=80=9C<a href=3D"http://tagneto.blogspot.com/2010/12/standards-and-p=
roposals-for-javascript.html">Standards And Proposals for JavaScript Module=
s And jQuery</a>,=E2=80=9D James Burke</li>
</ul>



<div class=3D"hr"></div>
<p>&nbsp;</p>
<div>
    <h2 id=3D"detailharmony">
      <a href=3D"https://addyosmani.com/resources/essentialjsdesignpatterns=
/book/#detailharmony" class=3D"subhead-link">#</a>
      ES Harmony
    </h2>
  </div>

<h3>Modules Of The Future</h3>

<p><a href=3D"http://www.ecma-international.org/memento/TC39.htm">TC39</a>,=
 the standards body charged with defining the syntax and semantics of ECMAS=
cript and its future iterations is composed of a number of very intelligent=
 developers. Some of these developers (such as <a href=3D"http://twitter.co=
m/slightlylate">Alex Russell</a>) have been keeping a close eye on the evol=
ution of JavaScript usage for large-scale development over the past few yea=
rs and are acutely aware of the need for better language features for writi=
ng more modular JS.</p>

<p>For this reason, there are currently proposals for a number of exciting =
additions to the language including flexible <a href=3D"http://wiki.ecmascr=
ipt.org/doku.php?id=3Dharmony:modules">modules</a> that can work on both th=
e client and server, a <a href=3D"http://wiki.ecmascript.org/doku.php?id=3D=
harmony:module_loaders">module loader</a> and <a href=3D"http://wiki.ecmasc=
ript.org/doku.php?id=3Dharmony:proposals">more</a>. In this section, we'll =
explore code samples using the syntax proposed for modules in ES.next so we=
 can get a taste of what's to come.</p>

<p></p><div class=3D"alert-message"><strong>Note: </strong> Although Harmon=
y is still in the proposal phases, we can already try out (partial) feature=
s of ES.next that address native support for writing modular JavaScript tha=
nks to Google's <a href=3D"http://code.google.com/p/traceur-compiler/">Trac=
eur</a> compiler. To get up and running with Traceur in under a minute, rea=
d this <a href=3D"http://code.google.com/p/traceur-compiler/wiki/GettingSta=
rted">getting started</a> guide. There's also a JSConf <a href=3D"http://tr=
aceur-compiler.googlecode.com/svn/branches/v0.10/presentation/index.html">p=
resentation</a> about it that's worth looking at if interested in learning =
more about the project.</div><p></p>

<h3>Modules With Imports And Exports</h3>

<p>Having read through the sections on AMD and CommonJS modules you may be =
familiar with the concept of module dependencies (imports) and module expor=
ts (or, the public API/variables we allow other modules to consume). In ES.=
next, these concepts have been proposed in a slightly more succinct manner =
with dependencies being specified using an <code>import</code> keyword. <co=
de>export</code> isn't greatly different to what we might expect and many d=
evelopers will look at the code samples lower down and instantly grab them.=
</p>

<p></p><ul><li><strong>import</strong> declarations bind a modules exports =
as local variables and may be renamed to avoid name collisions/conflicts.</=
li>
<li><strong>export</strong> declarations declare that a local-binding of a =
module is externally visible such that other modules may read the exports b=
ut can't modify them. Interestingly, modules may export child modules but c=
an't export modules that have been defined elsewhere. We can also rename ex=
ports so their external name differs from their local names.</li></ul><p></=
p>
<div><div id=3D"highlighter_501936" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</=
div><div class=3D"line number19 index18 alt2">19</div><div class=3D"line nu=
mber20 index19 alt1">20</div><div class=3D"line number21 index20 alt2">21</=
div><div class=3D"line number22 index21 alt1">22</div><div class=3D"line nu=
mber23 index22 alt2">23</div><div class=3D"line number24 index23 alt1">24</=
div><div class=3D"line number25 index24 alt2">25</div><div class=3D"line nu=
mber26 index25 alt1">26</div><div class=3D"line number27 index26 alt2">27</=
div><div class=3D"line number28 index27 alt1">28</div><div class=3D"line nu=
mber29 index28 alt2">29</div><div class=3D"line number30 index29 alt1">30</=
div><div class=3D"line number31 index30 alt2">31</div><div class=3D"line nu=
mber32 index31 alt1">32</div></td><td class=3D"code"><div class=3D"containe=
r"><div class=3D"line number1 index0 alt2"><code class=3D"js plain">module =
staff{</code></div><div class=3D"line number2 index1 alt1"><code class=3D"j=
s spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// spe=
cify (public) exports that can be consumed by</code></div><div class=3D"lin=
e number3 index2 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</=
code><code class=3D"js comments">// other modules</code></div><div class=3D=
"line number4 index3 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbs=
p;</code><code class=3D"js keyword">export</code> <code class=3D"js keyword=
">var</code> <code class=3D"js plain">baker =3D {</code></div><div class=3D=
"line number5 index4 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">bake: </code><cod=
e class=3D"js keyword">function</code><code class=3D"js plain">( item ){</c=
ode></div><div class=3D"line number6 index5 alt1"><code class=3D"js spaces"=
>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</=
code><code class=3D"js plain">console.log( </code><code class=3D"js string"=
>"Woo! I just baked "</code> <code class=3D"js plain">+ item );</code></div=
><div class=3D"line number7 index6 alt2"><code class=3D"js spaces">&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">}</=
code></div><div class=3D"line number8 index7 alt1"><code class=3D"js spaces=
">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">}</code></div><di=
v class=3D"line number9 index8 alt2"><code class=3D"js plain">}</code></div=
><div class=3D"line number10 index9 alt1">&nbsp;</div><div class=3D"line nu=
mber11 index10 alt2"><code class=3D"js plain">module skills{</code></div><d=
iv class=3D"line number12 index11 alt1"><code class=3D"js spaces">&nbsp;&nb=
sp;&nbsp;&nbsp;</code><code class=3D"js keyword">export</code> <code class=
=3D"js keyword">var</code> <code class=3D"js plain">specialty =3D </code><c=
ode class=3D"js string">"baking"</code><code class=3D"js plain">;</code></d=
iv><div class=3D"line number13 index12 alt2"><code class=3D"js spaces">&nbs=
p;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">export</code> <code c=
lass=3D"js keyword">var</code> <code class=3D"js plain">experience =3D </co=
de><code class=3D"js string">"5 years"</code><code class=3D"js plain">;</co=
de></div><div class=3D"line number14 index13 alt1"><code class=3D"js plain"=
>}</code></div><div class=3D"line number15 index14 alt2">&nbsp;</div><div c=
lass=3D"line number16 index15 alt1"><code class=3D"js plain">module cakeFac=
tory{</code></div><div class=3D"line number17 index16 alt2">&nbsp;</div><di=
v class=3D"line number18 index17 alt1"><code class=3D"js spaces">&nbsp;&nbs=
p;&nbsp;&nbsp;</code><code class=3D"js comments">// specify dependencies</c=
ode></div><div class=3D"line number19 index18 alt2"><code class=3D"js space=
s">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">import</code> =
<code class=3D"js plain">baker from staff;</code></div><div class=3D"line n=
umber20 index19 alt1">&nbsp;</div><div class=3D"line number21 index20 alt2"=
><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js=
 comments">// import everything with wildcards</code></div><div class=3D"li=
ne number22 index21 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp=
;</code><code class=3D"js keyword">import</code> <code class=3D"js plain">*=
 from skills;</code></div><div class=3D"line number23 index22 alt2">&nbsp;<=
/div><div class=3D"line number24 index23 alt1"><code class=3D"js spaces">&n=
bsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">export</code> <code=
 class=3D"js keyword">var</code> <code class=3D"js plain">oven =3D {</code>=
</div><div class=3D"line number25 index24 alt2"><code class=3D"js spaces">&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js pla=
in">makeCupcake: </code><code class=3D"js keyword">function</code><code cla=
ss=3D"js plain">( toppings ){</code></div><div class=3D"line number26 index=
25 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">baker.bake(=
 </code><code class=3D"js string">"cupcake"</code><code class=3D"js plain">=
, toppings );</code></div><div class=3D"line number27 index26 alt2"><code c=
lass=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><=
code class=3D"js plain">},</code></div><div class=3D"line number28 index27 =
alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;</code><code class=3D"js plain">makeMuffin: </code><code class=3D"js k=
eyword">function</code><code class=3D"js plain">( mSize ){</code></div><div=
 class=3D"line number29 index28 alt2"><code class=3D"js spaces">&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code c=
lass=3D"js plain">baker.bake( </code><code class=3D"js string">"muffin"</co=
de><code class=3D"js plain">, size );</code></div><div class=3D"line number=
30 index29 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</code><code class=3D"js plain">}</code></div><div class=3D=
"line number31 index30 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&n=
bsp;</code><code class=3D"js plain">}</code></div><div class=3D"line number=
32 index31 alt1"><code class=3D"js plain">}</code></div></div></td></tr></t=
body></table></div></div>

<h3>Modules Loaded From Remote Sources</h3>
<p>The module proposals also cater for modules which are remotely based (e.=
g. a third-party libraries) making it simplistic to load modules in from ex=
ternal locations. Here's an example of pulling in the module we defined abo=
ve and utilizing it:</p>
<div><div id=3D"highlighter_395843" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div></td><td class=3D"code"><div class=3D"container"><di=
v class=3D"line number1 index0 alt2"><code class=3D"js plain">module cakeFa=
ctory from </code><code class=3D"js string">"<a href=3D"http://addyosmani.c=
om/factory/cakes.js">http://addyosmani.com/factory/cakes.js</a>"</code><cod=
e class=3D"js plain">;</code></div><div class=3D"line number2 index1 alt1">=
<code class=3D"js plain">cakeFactory.oven.makeCupcake( </code><code class=
=3D"js string">"sprinkles"</code> <code class=3D"js plain">);</code></div><=
div class=3D"line number3 index2 alt2"><code class=3D"js plain">cakeFactory=
.oven.makeMuffin( </code><code class=3D"js string">"large"</code> <code cla=
ss=3D"js plain">);</code></div></div></td></tr></tbody></table></div></div>

<h3>Module Loader API</h3>
<p>The module loader proposed describes a dynamic API for loading modules i=
n highly controlled contexts. Signatures supported on the loader include <c=
ode>load(url, moduleInstance, error) </code> for loading modules, <code>cre=
ateModule(object, globalModuleReferences)</code> and <a href=3D"http://wiki=
.ecmascript.org/doku.php?id=3Dharmony:module_loaders">others</a>.</p>

<p>Here's another example for dynamically loading in the module we initiall=
y defined. Note that unlike the last example where we pulled in a module fr=
om a remote source, the module loader API is better suited to dynamic conte=
xts.</p>

<div><div id=3D"highlighter_481875" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div></td>=
<td class=3D"code"><div class=3D"container"><div class=3D"line number1 inde=
x0 alt2"><code class=3D"js plain">Loader.load( </code><code class=3D"js str=
ing">"<a href=3D"http://addyosmani.com/factory/cakes.js">http://addyosmani.=
com/factory/cakes.js</a>"</code><code class=3D"js plain">,</code></div><div=
 class=3D"line number2 index1 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&=
nbsp;&nbsp;</code><code class=3D"js keyword">function</code><code class=3D"=
js plain">( cakeFactory ){</code></div><div class=3D"line number3 index2 al=
t2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;</code><code class=3D"js plain">cakeFactory.oven.makeCupcake( </code><co=
de class=3D"js string">"chocolate"</code> <code class=3D"js plain">);</code=
></div><div class=3D"line number4 index3 alt1"><code class=3D"js spaces">&n=
bsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">});</code></div></div=
></td></tr></tbody></table></div></div>

<h3>CommonJS-like Modules For The Server</h3>
<p>For developers who are more interested in server environments, the modul=
e system proposed for ES.next isn't just constrained to looking at modules =
in the browser. Below for example, we can see a CommonJS-like module propos=
ed for use on the server:</p>
<div><div id=3D"highlighter_269248" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div></td><td class=3D"code"><div class=3D"container"><di=
v class=3D"line number1 index0 alt2"><code class=3D"js comments">// io/File=
.js</code></div><div class=3D"line number2 index1 alt1"><code class=3D"js k=
eyword">export</code> <code class=3D"js keyword">function</code> <code clas=
s=3D"js plain">open( path ) { ... };</code></div><div class=3D"line number3=
 index2 alt2"><code class=3D"js keyword">export</code> <code class=3D"js ke=
yword">function</code> <code class=3D"js plain">close( hnd ) { ... };</code=
></div></div></td></tr></tbody></table></div></div>

<div><div id=3D"highlighter_990844" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div></td><td class=3D"cod=
e"><div class=3D"container"><div class=3D"line number1 index0 alt2"><code c=
lass=3D"js comments">// compiler/LexicalHandler.js</code></div><div class=
=3D"line number2 index1 alt1"><code class=3D"js plain">module file from </c=
ode><code class=3D"js string">"io/File"</code><code class=3D"js plain">;</c=
ode></div><div class=3D"line number3 index2 alt2">&nbsp;</div><div class=3D=
"line number4 index3 alt1"><code class=3D"js keyword">import</code> <code c=
lass=3D"js plain">{ open, close } from file;</code></div><div class=3D"line=
 number5 index4 alt2"><code class=3D"js keyword">export</code> <code class=
=3D"js keyword">function</code> <code class=3D"js plain">scan( </code><code=
 class=3D"js keyword">in</code> <code class=3D"js plain">) {</code></div><d=
iv class=3D"line number6 index5 alt1"><code class=3D"js spaces">&nbsp;&nbsp=
;&nbsp;&nbsp;</code><code class=3D"js keyword">try</code> <code class=3D"js=
 plain">{</code></div><div class=3D"line number7 index6 alt2"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code=
 class=3D"js keyword">var</code> <code class=3D"js plain">h =3D open( </cod=
e><code class=3D"js keyword">in</code> <code class=3D"js plain">) ...</code=
></div><div class=3D"line number8 index7 alt1"><code class=3D"js spaces">&n=
bsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">}</code></div><div cl=
ass=3D"line number9 index8 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbs=
p;&nbsp;</code><code class=3D"js plain">finally { close( h ) }</code></div>=
<div class=3D"line number10 index9 alt1"><code class=3D"js plain">}</code><=
/div></div></td></tr></tbody></table></div></div>

<div><div id=3D"highlighter_209065" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div></td>=
<td class=3D"code"><div class=3D"container"><div class=3D"line number1 inde=
x0 alt2"><code class=3D"js plain">module lexer from </code><code class=3D"j=
s string">"compiler/LexicalHandler"</code><code class=3D"js plain">;</code>=
</div><div class=3D"line number2 index1 alt1"><code class=3D"js plain">modu=
le stdlib from </code><code class=3D"js string">"@std"</code><code class=3D=
"js plain">;</code></div><div class=3D"line number3 index2 alt2">&nbsp;</di=
v><div class=3D"line number4 index3 alt1"><code class=3D"js comments">//...=
 scan(cmdline[0]) ...</code></div></div></td></tr></tbody></table></div></d=
iv>

<h3>Classes With Constructors, Getters &amp; Setters</h3>
<p>The notion of a class has always been a contentious issue with purists a=
nd we've so far got along with either falling back on JavaScript's <a href=
=3D"http://javascript.crockford.com/prototypal.html">prototypal</a> nature =
or through using frameworks or abstractions that offer the ability to use <=
i>class</i> definitions in a form that de-sugars to the same prototypal beh=
avior.</p>

<p>In Harmony, classes have been proposed for the language along with const=
ructors and (finally) some sense of true privacy. In the following examples=
, inline comments are provided to help explain how classes are structured.<=
/p>

<p>Reading through, one may also notice the lack of the word "function" in =
here. This isn't a typo error: TC39 have been making a conscious effort to =
decrease our abuse of the <code>function</code> keyword for everything and =
the hope is that this will help simplify how we write code.</p>
<div><div id=3D"highlighter_937335" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</=
div><div class=3D"line number19 index18 alt2">19</div><div class=3D"line nu=
mber20 index19 alt1">20</div><div class=3D"line number21 index20 alt2">21</=
div><div class=3D"line number22 index21 alt1">22</div><div class=3D"line nu=
mber23 index22 alt2">23</div><div class=3D"line number24 index23 alt1">24</=
div><div class=3D"line number25 index24 alt2">25</div><div class=3D"line nu=
mber26 index25 alt1">26</div><div class=3D"line number27 index26 alt2">27</=
div><div class=3D"line number28 index27 alt1">28</div><div class=3D"line nu=
mber29 index28 alt2">29</div><div class=3D"line number30 index29 alt1">30</=
div><div class=3D"line number31 index30 alt2">31</div><div class=3D"line nu=
mber32 index31 alt1">32</div><div class=3D"line number33 index32 alt2">33</=
div><div class=3D"line number34 index33 alt1">34</div><div class=3D"line nu=
mber35 index34 alt2">35</div><div class=3D"line number36 index35 alt1">36</=
div><div class=3D"line number37 index36 alt2">37</div><div class=3D"line nu=
mber38 index37 alt1">38</div><div class=3D"line number39 index38 alt2">39</=
div><div class=3D"line number40 index39 alt1">40</div><div class=3D"line nu=
mber41 index40 alt2">41</div><div class=3D"line number42 index41 alt1">42</=
div><div class=3D"line number43 index42 alt2">43</div><div class=3D"line nu=
mber44 index43 alt1">44</div></td><td class=3D"code"><div class=3D"containe=
r"><div class=3D"line number1 index0 alt2"><code class=3D"js keyword">class=
</code> <code class=3D"js plain">Cake{</code></div><div class=3D"line numbe=
r2 index1 alt1">&nbsp;</div><div class=3D"line number3 index2 alt2"><code c=
lass=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comment=
s">// We can define the body of a class" constructor</code></div><div class=
=3D"line number4 index3 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&=
nbsp;</code><code class=3D"js comments">// function by using the keyword "c=
onstructor" followed</code></div><div class=3D"line number5 index4 alt2"><c=
ode class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js co=
mments">// by an argument list of public and private declarations.</code></=
div><div class=3D"line number6 index5 alt1"><code class=3D"js spaces">&nbsp=
;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">constructor( name, toppi=
ngs, price, cakeSize ){</code></div><div class=3D"line number7 index6 alt2"=
><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
</code><code class=3D"js plain">public name =3D name;</code></div><div clas=
s=3D"line number8 index7 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">public cakeSi=
ze =3D cakeSize;</code></div><div class=3D"line number9 index8 alt2"><code =
class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>=
<code class=3D"js plain">public toppings =3D toppings;</code></div><div cla=
ss=3D"line number10 index9 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">private</=
code> <code class=3D"js plain">price =3D price;</code></div><div class=3D"l=
ine number11 index10 alt2">&nbsp;</div><div class=3D"line number12 index11 =
alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js plain">}</code></div><div class=3D"line number13 index12 alt2">&nbsp=
;</div><div class=3D"line number14 index13 alt1"><code class=3D"js spaces">=
&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// As a part of =
ES.next's efforts to decrease the unnecessary</code></div><div class=3D"lin=
e number15 index14 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;=
</code><code class=3D"js comments">// use of "function" for everything, you=
'll notice that it's</code></div><div class=3D"line number16 index15 alt1">=
<code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js =
comments">// dropped for cases such as the following. Here an identifier</c=
ode></div><div class=3D"line number17 index16 alt2"><code class=3D"js space=
s">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// followed b=
y an argument list and a body defines a new method</code></div><div class=
=3D"line number18 index17 alt1">&nbsp;</div><div class=3D"line number19 ind=
ex18 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code c=
lass=3D"js plain">addTopping( topping ){</code></div><div class=3D"line num=
ber20 index19 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">public( </code><code cla=
ss=3D"js keyword">this</code> <code class=3D"js plain">).toppings.push( top=
ping );</code></div><div class=3D"line number21 index20 alt2"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">}</c=
ode></div><div class=3D"line number22 index21 alt1">&nbsp;</div><div class=
=3D"line number23 index22 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp=
;&nbsp;</code><code class=3D"js comments">// Getters can be defined by decl=
aring get before</code></div><div class=3D"line number24 index23 alt1"><cod=
e class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comm=
ents">// an identifier/method name and a curly body.</code></div><div class=
=3D"line number25 index24 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp=
;&nbsp;</code><code class=3D"js plain">get allToppings(){</code></div><div =
class=3D"line number26 index25 alt1"><code class=3D"js spaces">&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">retur=
n</code> <code class=3D"js plain">public( </code><code class=3D"js keyword"=
>this</code> <code class=3D"js plain">).toppings;</code></div><div class=3D=
"line number27 index26 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&n=
bsp;</code><code class=3D"js plain">}</code></div><div class=3D"line number=
28 index27 alt1">&nbsp;</div><div class=3D"line number29 index28 alt2"><cod=
e class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plai=
n">get qualifiesForDiscount(){</code></div><div class=3D"line number30 inde=
x29 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;</code><code class=3D"js keyword">return</code> <code class=3D"js =
keyword">private</code><code class=3D"js plain">( </code><code class=3D"js =
keyword">this</code> <code class=3D"js plain">).price &gt; 5;</code></div><=
div class=3D"line number31 index30 alt2"><code class=3D"js spaces">&nbsp;&n=
bsp;&nbsp;&nbsp;</code><code class=3D"js plain">}</code></div><div class=3D=
"line number32 index31 alt1">&nbsp;</div><div class=3D"line number33 index3=
2 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code clas=
s=3D"js comments">// Similar to getters, setters can be defined by using</c=
ode></div><div class=3D"line number34 index33 alt1"><code class=3D"js space=
s">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// the "set" =
keyword before an identifier</code></div><div class=3D"line number35 index3=
4 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code clas=
s=3D"js plain">set cakeSize( cSize ){</code></div><div class=3D"line number=
36 index35 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</code><code class=3D"js keyword">if</code><code class=3D"j=
s plain">( cSize &lt; 0 ){</code></div><div class=3D"line number37 index36 =
alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">throw</code>=
 <code class=3D"js keyword">new</code> <code class=3D"js plain">Error( "Cak=
e must be a valid size -</code></div><div class=3D"line number38 index37 al=
t1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">either small, me=
dium or large" );</code></div><div class=3D"line number39 index38 alt2"><co=
de class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</co=
de><code class=3D"js plain">}</code></div><div class=3D"line number40 index=
39 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;</code><code class=3D"js plain">public( </code><code class=3D"js ke=
yword">this</code> <code class=3D"js plain">).cakeSize =3D cSize;</code></d=
iv><div class=3D"line number41 index40 alt2"><code class=3D"js spaces">&nbs=
p;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">}</code></div><div clas=
s=3D"line number42 index41 alt1">&nbsp;</div><div class=3D"line number43 in=
dex42 alt2">&nbsp;</div><div class=3D"line number44 index43 alt1"><code cla=
ss=3D"js plain">}</code></div></div></td></tr></tbody></table></div></div>

<h3>ES Harmony Conclusions</h3>

<p>As we've seen, Harmony might come with some exciting new additions that =
will ease the development of modular applications and handling concerns suc=
h as dependency management.</p>
At present, our best options for using Harmony syntax in today's browsers i=
s through a transpiler such as <a href=3D"http://code.google.com/p/traceur-=
compiler/">Google Traceur</a> or<a href=3D"http://esprima.googlecode.com/">=
Esprima</a>. There are also projects such as <a href=3D"https://github.com/=
addyosmani/require-hm">Require HM</a> which allow us to use Harmony modules=
 with AMD. Our best bets however until we have specification finalization a=
re AMD (for in-browser modules) and CommonJS (for those on the server).<p><=
/p>

  <div class=3D"alert-message block-message info">
<p><b>Related Reading</b></p>
<p><a href=3D"http://www.2ality.com/2011/03/first-look-at-upcoming-javascri=
pt.html">A First Look At The Upcoming JavaScript Modules</a></p>
<p><a href=3D"http://blog.mozilla.com/dherman/2011/02/23/my-js-meetup-talk/=
">David Herman On JavaScript/ES.Next (Video)</a></p>
<p><a href=3D"http://wiki.ecmascript.org/doku.php?id=3Dharmony:modules">ES =
Harmony Module Proposals</a></p>
<p><a href=3D"http://wiki.ecmascript.org/doku.php?id=3Dharmony:modules_rati=
onale">ES Harmony Module Semantics/Structure Rationale</a></p>
<p><a href=3D"http://wiki.ecmascript.org/doku.php?id=3Dharmony:classes">ES =
Harmony Class Proposals</a></p>
<p></p>
   </div>


<div class=3D"hr"></div>

<div>
    <h2>Conclusions</h2>
  </div>
<p>In this section we reviewed several of the options available for writing=
 modular JavaScript using modern module formats.</p>

<p>These formats have a number of advantages over using the module pattern =
alone including: avoiding the need to manage global variables, better suppo=
rt for static and dynamic dependency management, improved compatibility wit=
h script loaders, better compatibility for modules on the server and more.<=
/p>

<p>In short, I recommend trying out what's been suggested in this chapter a=
s these formats offer a great deal of power and flexibility that can signif=
icantly assist with better organizing our applications.</p>



<p>&nbsp;</p>
<h1 id=3D"designpatternsjquery">
  <a href=3D"https://addyosmani.com/resources/essentialjsdesignpatterns/boo=
k/#designpatternsjquery" class=3D"subhead-link">#</a>
  Design Patterns In jQuery
</h1>


<p>&nbsp;</p>
<p>jQuery is currently the most popular JavaScript DOM manipulation library=
 and provides an abstracted layer for interacting with the DOM in a safe, c=
ross-browser manner. Interestingly, the library also serves as an example o=
f how design patterns can be effectively used to create an API which is bot=
h readable and easy to use.</p>

<p>Whilst in many cases the core contributors that wrote jQuery didn't set =
out to use specific patterns, they exist there regardless and are useful to=
 learn from. Let's take a look at what some of these patterns are and how t=
hey are used in the API.
</p>



<p>&nbsp;</p>
<h2 id=3D"compositepatternjquery">
  <a href=3D"https://addyosmani.com/resources/essentialjsdesignpatterns/boo=
k/#compositepatternjquery" class=3D"subhead-link">#</a>
  The Composite Pattern
</h2>
<p>
  <strong>The Composite Pattern</strong> describes a group of objects that =
can be treated in the same way a single instance of an object may be.</p>

  <p>This allows us to treat both individual objects and compositions in a =
uniform manner, meaning that the same behavior will be applied regardless o=
f whether we're working with one item or a thousand.</p>

  <p>In jQuery, when we're applying methods to an element or collection of =
elements, we can treat both sets in a uniform manner as both selections ret=
urn a jQuery object.</p>

  <p>This is demonstrated by the code sample using the jQuery selector belo=
w. Here it's possible to add an <code>active</code> class to both selection=
s for a single element (e.g an element with a unique ID) or a group of elem=
ents with the same tag name or class, without additional effort:</p>

<div><div id=3D"highlighter_360467" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div></td><td class=3D"code"><div class=3D"cont=
ainer"><div class=3D"line number1 index0 alt2"><code class=3D"js comments">=
// Single elements</code></div><div class=3D"line number2 index1 alt1"><cod=
e class=3D"js plain">$( </code><code class=3D"js string">"#singleItem"</cod=
e> <code class=3D"js plain">).addClass( </code><code class=3D"js string">"a=
ctive"</code> <code class=3D"js plain">);</code></div><div class=3D"line nu=
mber3 index2 alt2"><code class=3D"js plain">$( </code><code class=3D"js str=
ing">"#container"</code> <code class=3D"js plain">).addClass( </code><code =
class=3D"js string">"active"</code> <code class=3D"js plain">);</code></div=
><div class=3D"line number4 index3 alt1">&nbsp;</div><div class=3D"line num=
ber5 index4 alt2"><code class=3D"js comments">// Collections of elements</c=
ode></div><div class=3D"line number6 index5 alt1"><code class=3D"js plain">=
$( </code><code class=3D"js string">"div"</code> <code class=3D"js plain">)=
.addClass( </code><code class=3D"js string">"active"</code> <code class=3D"=
js plain">);</code></div><div class=3D"line number7 index6 alt2"><code clas=
s=3D"js plain">$( </code><code class=3D"js string">".item"</code> <code cla=
ss=3D"js plain">).addClass( </code><code class=3D"js string">"active"</code=
> <code class=3D"js plain">);</code></div><div class=3D"line number8 index7=
 alt1"><code class=3D"js plain">$( </code><code class=3D"js string">"input"=
</code> <code class=3D"js plain">).addClass( </code><code class=3D"js strin=
g">"active"</code> <code class=3D"js plain">);</code></div></div></td></tr>=
</tbody></table></div></div>
<p>&nbsp;</p>

<p>The jQuery <code>addClass()</code> implementation could either directly =
use native <em>for</em> loops (or jQuery's <code>jQuery.each()</code>/<code=
>jQuery.fn.each()</code>) to iterate through a collection in order to apply=
 the method to both single items or groups. Looking through the source we c=
an see this is indeed the case:</p>

<div><div id=3D"highlighter_621512" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</=
div><div class=3D"line number19 index18 alt2">19</div><div class=3D"line nu=
mber20 index19 alt1">20</div><div class=3D"line number21 index20 alt2">21</=
div><div class=3D"line number22 index21 alt1">22</div><div class=3D"line nu=
mber23 index22 alt2">23</div><div class=3D"line number24 index23 alt1">24</=
div><div class=3D"line number25 index24 alt2">25</div><div class=3D"line nu=
mber26 index25 alt1">26</div><div class=3D"line number27 index26 alt2">27</=
div><div class=3D"line number28 index27 alt1">28</div><div class=3D"line nu=
mber29 index28 alt2">29</div><div class=3D"line number30 index29 alt1">30</=
div><div class=3D"line number31 index30 alt2">31</div><div class=3D"line nu=
mber32 index31 alt1">32</div><div class=3D"line number33 index32 alt2">33</=
div><div class=3D"line number34 index33 alt1">34</div><div class=3D"line nu=
mber35 index34 alt2">35</div><div class=3D"line number36 index35 alt1">36</=
div></td><td class=3D"code"><div class=3D"container"><div class=3D"line num=
ber1 index0 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=
=3D"js plain">addClass: </code><code class=3D"js keyword">function</code><c=
ode class=3D"js plain">( value ) {</code></div><div class=3D"line number2 i=
ndex1 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js =
keyword">var</code> <code class=3D"js plain">classNames, i, l, elem,</code>=
</div><div class=3D"line number3 index2 alt2"><code class=3D"js spaces">&nb=
sp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">setClass, c, cl;</code=
></div><div class=3D"line number4 index3 alt1">&nbsp;</div><div class=3D"li=
ne number5 index4 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code =
class=3D"js keyword">if</code> <code class=3D"js plain">( jQuery.isFunction=
( value ) ) {</code></div><div class=3D"line number6 index5 alt1"><code cla=
ss=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">=
return</code> <code class=3D"js keyword">this</code><code class=3D"js plain=
">.each(</code><code class=3D"js keyword">function</code><code class=3D"js =
plain">( j ) {</code></div><div class=3D"line number7 index6 alt2"><code cl=
ass=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D=
"js plain">jQuery( </code><code class=3D"js keyword">this</code> <code clas=
s=3D"js plain">).addClass( value.call(</code><code class=3D"js keyword">thi=
s</code><code class=3D"js plain">, j, </code><code class=3D"js keyword">thi=
s</code><code class=3D"js plain">.className) );</code></div><div class=3D"l=
ine number8 index7 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;=
</code><code class=3D"js plain">});</code></div><div class=3D"line number9 =
index8 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js=
 plain">}</code></div><div class=3D"line number10 index9 alt1">&nbsp;</div>=
<div class=3D"line number11 index10 alt2"><code class=3D"js spaces">&nbsp;&=
nbsp;</code><code class=3D"js keyword">if</code> <code class=3D"js plain">(=
 value &amp;&amp; </code><code class=3D"js keyword">typeof</code> <code cla=
ss=3D"js plain">value =3D=3D=3D </code><code class=3D"js string">"string"</=
code> <code class=3D"js plain">) {</code></div><div class=3D"line number12 =
index11 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><cod=
e class=3D"js plain">classNames =3D value.split( rspace );</code></div><div=
 class=3D"line number13 index12 alt2">&nbsp;</div><div class=3D"line number=
14 index13 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><=
code class=3D"js keyword">for</code> <code class=3D"js plain">( i =3D 0, l =
=3D </code><code class=3D"js keyword">this</code><code class=3D"js plain">.=
length; i &lt; l; i++ ) {</code></div><div class=3D"line number15 index14 a=
lt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><=
code class=3D"js plain">elem =3D </code><code class=3D"js keyword">this</co=
de><code class=3D"js plain">[ i ];</code></div><div class=3D"line number16 =
index15 alt1">&nbsp;</div><div class=3D"line number17 index16 alt2"><code c=
lass=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js keyword">if</code> <code class=3D"js plain">( elem.nodeType =3D=3D=
=3D 1 ) {</code></div><div class=3D"line number18 index17 alt1"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code=
 class=3D"js keyword">if</code> <code class=3D"js plain">( !elem.className =
&amp;&amp; classNames.length =3D=3D=3D 1 ) {</code></div><div class=3D"line=
 number19 index18 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">elem.cla=
ssName =3D value;</code></div><div class=3D"line number20 index19 alt1">&nb=
sp;</div><div class=3D"line number21 index20 alt2"><code class=3D"js spaces=
">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js =
plain">} </code><code class=3D"js keyword">else</code> <code class=3D"js pl=
ain">{</code></div><div class=3D"line number22 index21 alt1"><code class=3D=
"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</c=
ode><code class=3D"js plain">setClass =3D </code><code class=3D"js string">=
" "</code> <code class=3D"js plain">+ elem.className + </code><code class=
=3D"js string">" "</code><code class=3D"js plain">;</code></div><div class=
=3D"line number23 index22 alt2">&nbsp;</div><div class=3D"line number24 ind=
ex23 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">for</code> <code cl=
ass=3D"js plain">( c =3D 0, cl =3D classNames.length; c &lt; cl; c++ ) {</c=
ode></div><div class=3D"line number25 index24 alt2"><code class=3D"js space=
s">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
</code><code class=3D"js keyword">if</code> <code class=3D"js plain">( !~se=
tClass.indexOf( </code><code class=3D"js string">" "</code> <code class=3D"=
js plain">+ classNames[ c ] + </code><code class=3D"js string">" "</code> <=
code class=3D"js plain">) ) {</code></div><div class=3D"line number26 index=
25 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain"=
>setClass +=3D classNames[ c ] + </code><code class=3D"js string">" "</code=
><code class=3D"js plain">;</code></div><div class=3D"line number27 index26=
 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">}</code></div=
><div class=3D"line number28 index27 alt1"><code class=3D"js spaces">&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D=
"js plain">}</code></div><div class=3D"line number29 index28 alt2"><code cl=
ass=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;</code><code class=3D"js plain">elem.className =3D jQuery.trim( setClass=
 );</code></div><div class=3D"line number30 index29 alt1"><code class=3D"js=
 spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js plain">}</code></div><div class=3D"line number31 index30 alt2"><code=
 class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js plain">}</code></div><div class=3D"line number32 index31 alt1"><code=
 class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain=
">}</code></div><div class=3D"line number33 index32 alt2"><code class=3D"js=
 spaces">&nbsp;&nbsp;</code><code class=3D"js plain">}</code></div><div cla=
ss=3D"line number34 index33 alt1">&nbsp;</div><div class=3D"line number35 i=
ndex34 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js=
 keyword">return</code> <code class=3D"js keyword">this</code><code class=
=3D"js plain">;</code></div><div class=3D"line number36 index35 alt1"><code=
 class=3D"js plain">}</code></div></div></td></tr></tbody></table></div></d=
iv>

<h2 id=3D"wrapperpatternjquery"><strong>The Adapter Pattern</strong></h2>
<p>
  <strong>The Adapter Pattern</strong> translates an <em>interface</em> for=
 an object or class into an interface compatible with a specific system.</p=
>

  <p>Adapters basically allow objects or classes to function together which=
 normally couldn't due to their incompatible interfaces. The adapter transl=
ates calls to its interface into calls to the original interface and the co=
de required to achieve this is usually quite minimal.
</p>

<p>One example of an adapter we may have used is the jQuery <code>jQuery.fn=
.css()</code> method. It helps normalize the interfaces to how styles can b=
e applied across a number of browsers, making it trivial for us to use a si=
mple syntax which is adapted to use what the browser actually supports behi=
nd the scenes:</p>

<div><div id=3D"highlighter_137571" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div></td><td class=3D"code"><div class=3D"container"><div class=3D"line nu=
mber1 index0 alt2"><code class=3D"js comments">// Cross browser opacity:</c=
ode></div><div class=3D"line number2 index1 alt1"><code class=3D"js comment=
s">// opacity: 0.9; Chrome 4+, FF2+, Saf3.1+, Opera 9+, IE9, iOS 3.2+, Andr=
oid 2.1+</code></div><div class=3D"line number3 index2 alt2"><code class=3D=
"js comments">// filter: alpha(opacity=3D90); IE6-IE8</code></div><div clas=
s=3D"line number4 index3 alt1">&nbsp;</div><div class=3D"line number5 index=
4 alt2"><code class=3D"js comments">// Setting opacity</code></div><div cla=
ss=3D"line number6 index5 alt1"><code class=3D"js plain">$( </code><code cl=
ass=3D"js string">".container"</code> <code class=3D"js plain">).css( { opa=
city: .5 } );</code></div><div class=3D"line number7 index6 alt2">&nbsp;</d=
iv><div class=3D"line number8 index7 alt1"><code class=3D"js comments">// G=
etting opacity</code></div><div class=3D"line number9 index8 alt2"><code cl=
ass=3D"js keyword">var</code> <code class=3D"js plain">currentOpacity =3D $=
( </code><code class=3D"js string">".container"</code> <code class=3D"js pl=
ain">).css(</code><code class=3D"js string">'opacity'</code><code class=3D"=
js plain">);</code></div></div></td></tr></tbody></table></div></div>
<p>&nbsp;</p>

<p>The corresponding jQuery core cssHook which makes the above possible can=
 be seen below:</p>
<div><div id=3D"highlighter_785978" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</=
div><div class=3D"line number19 index18 alt2">19</div><div class=3D"line nu=
mber20 index19 alt1">20</div><div class=3D"line number21 index20 alt2">21</=
div><div class=3D"line number22 index21 alt1">22</div><div class=3D"line nu=
mber23 index22 alt2">23</div><div class=3D"line number24 index23 alt1">24</=
div><div class=3D"line number25 index24 alt2">25</div><div class=3D"line nu=
mber26 index25 alt1">26</div><div class=3D"line number27 index26 alt2">27</=
div><div class=3D"line number28 index27 alt1">28</div><div class=3D"line nu=
mber29 index28 alt2">29</div><div class=3D"line number30 index29 alt1">30</=
div><div class=3D"line number31 index30 alt2">31</div><div class=3D"line nu=
mber32 index31 alt1">32</div><div class=3D"line number33 index32 alt2">33</=
div><div class=3D"line number34 index33 alt1">34</div><div class=3D"line nu=
mber35 index34 alt2">35</div><div class=3D"line number36 index35 alt1">36</=
div><div class=3D"line number37 index36 alt2">37</div><div class=3D"line nu=
mber38 index37 alt1">38</div><div class=3D"line number39 index38 alt2">39</=
div><div class=3D"line number40 index39 alt1">40</div><div class=3D"line nu=
mber41 index40 alt2">41</div><div class=3D"line number42 index41 alt1">42</=
div></td><td class=3D"code"><div class=3D"container"><div class=3D"line num=
ber1 index0 alt2"><code class=3D"js plain">get: </code><code class=3D"js ke=
yword">function</code><code class=3D"js plain">( elem, computed ) {</code><=
/div><div class=3D"line number2 index1 alt1"><code class=3D"js spaces">&nbs=
p;&nbsp;</code><code class=3D"js comments">// IE uses filters for opacity</=
code></div><div class=3D"line number3 index2 alt2"><code class=3D"js spaces=
">&nbsp;&nbsp;</code><code class=3D"js keyword">return</code> <code class=
=3D"js plain">ropacity.test( (</code></div><div class=3D"line number4 index=
3 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;</code><code class=3D"js plain">computed &amp;&amp; elem.currentStyl=
e ?</code></div><div class=3D"line number5 index4 alt2"><code class=3D"js s=
paces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;</code><code class=3D"js plain">elem.currentStyle.filter : elem.style.f=
ilter) || </code><code class=3D"js string">""</code> <code class=3D"js plai=
n">) ?</code></div><div class=3D"line number6 index5 alt1"><code class=3D"j=
s spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">( parseFl=
oat( RegExp.$1 ) / 100 ) + </code><code class=3D"js string">""</code> <code=
 class=3D"js plain">:</code></div><div class=3D"line number7 index6 alt2"><=
code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js p=
lain">computed ? </code><code class=3D"js string">"1"</code> <code class=3D=
"js plain">: </code><code class=3D"js string">""</code><code class=3D"js pl=
ain">;</code></div><div class=3D"line number8 index7 alt1"><code class=3D"j=
s plain">},</code></div><div class=3D"line number9 index8 alt2">&nbsp;</div=
><div class=3D"line number10 index9 alt1"><code class=3D"js plain">set: </c=
ode><code class=3D"js keyword">function</code><code class=3D"js plain">( el=
em, value ) {</code></div><div class=3D"line number11 index10 alt2"><code c=
lass=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js keyword">var</code>=
 <code class=3D"js plain">style =3D elem.style,</code></div><div class=3D"l=
ine number12 index11 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbs=
p;</code><code class=3D"js plain">currentStyle =3D elem.currentStyle,</code=
></div><div class=3D"line number13 index12 alt2"><code class=3D"js spaces">=
&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">opacity =3D jQuery.=
isNumeric( value ) ?</code></div><div class=3D"line number14 index13 alt1">=
<code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;</code><code class=3D"js string">"alpha(opacity=3D"</code> <code=
 class=3D"js plain">+ value * 100 + </code><code class=3D"js string">")"</c=
ode> <code class=3D"js plain">: </code><code class=3D"js string">""</code><=
code class=3D"js plain">,</code></div><div class=3D"line number15 index14 a=
lt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js plain">filter =3D currentStyle &amp;&amp; currentStyle.filter || sty=
le.filter || </code><code class=3D"js string">""</code><code class=3D"js pl=
ain">;</code></div><div class=3D"line number16 index15 alt1">&nbsp;</div><d=
iv class=3D"line number17 index16 alt2"><code class=3D"js spaces">&nbsp;&nb=
sp;</code><code class=3D"js comments">// IE has trouble with opacity if it =
does not have layout</code></div><div class=3D"line number18 index17 alt1">=
<code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js comments">//=
 Force it by setting the zoom level</code></div><div class=3D"line number19=
 index18 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"=
js plain">style.zoom =3D 1;</code></div><div class=3D"line number20 index19=
 alt1">&nbsp;</div><div class=3D"line number21 index20 alt2"><code class=3D=
"js spaces">&nbsp;&nbsp;</code><code class=3D"js comments">// if setting op=
acity to 1, and no other filters</code></div><div class=3D"line number22 in=
dex21 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js =
comments">//exist - attempt to remove filter attribute #6652</code></div><d=
iv class=3D"line number23 index22 alt2"><code class=3D"js spaces">&nbsp;&nb=
sp;</code><code class=3D"js keyword">if</code> <code class=3D"js plain">( v=
alue &gt;=3D 1 &amp;&amp; jQuery.trim( filter.replace( ralpha, </code><code=
 class=3D"js string">""</code> <code class=3D"js plain">) ) =3D=3D=3D </cod=
e><code class=3D"js string">""</code> <code class=3D"js plain">) {</code></=
div><div class=3D"line number24 index23 alt1">&nbsp;</div><div class=3D"lin=
e number25 index24 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;=
</code><code class=3D"js comments">// Setting style.filter to null, "" &amp=
; " " still leave</code></div><div class=3D"line number26 index25 alt1"><co=
de class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js com=
ments">// "filter:" in the cssText if "filter:" is present at all,</code></=
div><div class=3D"line number27 index26 alt2"><code class=3D"js spaces">&nb=
sp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// clearType is dis=
abled, we want to avoid this style.removeAttribute</code></div><div class=
=3D"line number28 index27 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp=
;&nbsp;</code><code class=3D"js comments">// is IE Only, but so apparently =
is this code path...</code></div><div class=3D"line number29 index28 alt2">=
<code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js =
plain">style.removeAttribute( </code><code class=3D"js string">"filter"</co=
de> <code class=3D"js plain">);</code></div><div class=3D"line number30 ind=
ex29 alt1">&nbsp;</div><div class=3D"line number31 index30 alt2"><code clas=
s=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">=
// if there there is no filter style applied in a css rule, we are done</co=
de></div><div class=3D"line number32 index31 alt1"><code class=3D"js spaces=
">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">if</code> <code=
 class=3D"js plain">( currentStyle &amp;&amp; !currentStyle.filter ) {</cod=
e></div><div class=3D"line number33 index32 alt2"><code class=3D"js spaces"=
>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">retu=
rn</code><code class=3D"js plain">;</code></div><div class=3D"line number34=
 index33 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><co=
de class=3D"js plain">}</code></div><div class=3D"line number35 index34 alt=
2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js plain">}<=
/code></div><div class=3D"line number36 index35 alt1">&nbsp;</div><div clas=
s=3D"line number37 index36 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</co=
de><code class=3D"js comments">// otherwise, set new filter values</code></=
div><div class=3D"line number38 index37 alt1"><code class=3D"js spaces">&nb=
sp;&nbsp;</code><code class=3D"js plain">style.filter =3D ralpha.test( filt=
er ) ?</code></div><div class=3D"line number39 index38 alt2"><code class=3D=
"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">filter.=
replace( ralpha, opacity ) :</code></div><div class=3D"line number40 index3=
9 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code clas=
s=3D"js plain">filter + </code><code class=3D"js string">" "</code> <code c=
lass=3D"js plain">+ opacity;</code></div><div class=3D"line number41 index4=
0 alt2"><code class=3D"js plain">}</code></div><div class=3D"line number42 =
index41 alt1"><code class=3D"js plain">};</code></div></div></td></tr></tbo=
dy></table></div></div>


<h2 id=3D"facadepatternjquery">
  <a href=3D"https://addyosmani.com/resources/essentialjsdesignpatterns/boo=
k/#facadepatternjquery" class=3D"subhead-link">#</a>
  The Facade Pattern
</h2>

<p>As we reviewed earlier in the book, the <strong>Facade Pattern</strong> =
provides a simpler abstracted interface to a larger (potentially more compl=
ex) body of code.</p>

<p>Facades can be frequently found across the jQuery library and provide de=
velopers easy access to implementations for handling DOM manipulation, anim=
ation and of particular interest, cross-browser Ajax.</p>

<p>The following are facades for jQuery's <code>$.ajax()</code>:</p>

<div><div id=3D"highlighter_931748" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div></td>=
<td class=3D"code"><div class=3D"container"><div class=3D"line number1 inde=
x0 alt2"><code class=3D"js plain">$.get( url, data, callback, dataType );</=
code></div><div class=3D"line number2 index1 alt1"><code class=3D"js plain"=
>$.post( url, data, callback, dataType );</code></div><div class=3D"line nu=
mber3 index2 alt2"><code class=3D"js plain">$.getJSON( url, data, callback =
);</code></div><div class=3D"line number4 index3 alt1"><code class=3D"js pl=
ain">$.getScript( url, callback );</code></div></div></td></tr></tbody></ta=
ble></div></div>
<p></p>
<p>These are translated behind the scenes to:</p>
<div><div id=3D"highlighter_858949" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</=
div><div class=3D"line number19 index18 alt2">19</div><div class=3D"line nu=
mber20 index19 alt1">20</div><div class=3D"line number21 index20 alt2">21</=
div><div class=3D"line number22 index21 alt1">22</div><div class=3D"line nu=
mber23 index22 alt2">23</div><div class=3D"line number24 index23 alt1">24</=
div><div class=3D"line number25 index24 alt2">25</div><div class=3D"line nu=
mber26 index25 alt1">26</div><div class=3D"line number27 index26 alt2">27</=
div></td><td class=3D"code"><div class=3D"container"><div class=3D"line num=
ber1 index0 alt2"><code class=3D"js comments">// $.get()</code></div><div c=
lass=3D"line number2 index1 alt1"><code class=3D"js plain">$.ajax({</code><=
/div><div class=3D"line number3 index2 alt2"><code class=3D"js spaces">&nbs=
p;&nbsp;</code><code class=3D"js plain">url: url,</code></div><div class=3D=
"line number4 index3 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><co=
de class=3D"js plain">data: data,</code></div><div class=3D"line number5 in=
dex4 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js p=
lain">dataType: dataType</code></div><div class=3D"line number6 index5 alt1=
"><code class=3D"js plain">}).done( callback );</code></div><div class=3D"l=
ine number7 index6 alt2">&nbsp;</div><div class=3D"line number8 index7 alt1=
"><code class=3D"js comments">// $.post</code></div><div class=3D"line numb=
er9 index8 alt2"><code class=3D"js plain">$.ajax({</code></div><div class=
=3D"line number10 index9 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code=
><code class=3D"js plain">type: </code><code class=3D"js string">"POST"</co=
de><code class=3D"js plain">,</code></div><div class=3D"line number11 index=
10 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js pla=
in">url: url,</code></div><div class=3D"line number12 index11 alt1"><code c=
lass=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js plain">data: data,<=
/code></div><div class=3D"line number13 index12 alt2"><code class=3D"js spa=
ces">&nbsp;&nbsp;</code><code class=3D"js plain">dataType: dataType</code><=
/div><div class=3D"line number14 index13 alt1"><code class=3D"js plain">}).=
done( callback );</code></div><div class=3D"line number15 index14 alt2">&nb=
sp;</div><div class=3D"line number16 index15 alt1"><code class=3D"js commen=
ts">// $.getJSON()</code></div><div class=3D"line number17 index16 alt2"><c=
ode class=3D"js plain">$.ajax({</code></div><div class=3D"line number18 ind=
ex17 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js p=
lain">url: url,</code></div><div class=3D"line number19 index18 alt2"><code=
 class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js plain">dataType: =
</code><code class=3D"js string">"json"</code><code class=3D"js plain">,</c=
ode></div><div class=3D"line number20 index19 alt1"><code class=3D"js space=
s">&nbsp;&nbsp;</code><code class=3D"js plain">data: data,</code></div><div=
 class=3D"line number21 index20 alt2"><code class=3D"js plain">}).done( cal=
lback );</code></div><div class=3D"line number22 index21 alt1">&nbsp;</div>=
<div class=3D"line number23 index22 alt2"><code class=3D"js comments">// $.=
getScript()</code></div><div class=3D"line number24 index23 alt1"><code cla=
ss=3D"js plain">$.ajax({</code></div><div class=3D"line number25 index24 al=
t2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js plain">u=
rl: url,</code></div><div class=3D"line number26 index25 alt1"><code class=
=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js plain">dataType: </code=
><code class=3D"js string">"script"</code><code class=3D"js plain">,</code>=
</div><div class=3D"line number27 index26 alt2"><code class=3D"js plain">})=
.done( callback );</code></div></div></td></tr></tbody></table></div></div>

<p>What's even more interesting is that the above facades are actually faca=
des in their own right, hiding a great deal of complexity behind the scenes=
.</p>

<p>This is because the <code>jQuery.ajax()</code> implementation in jQuery =
core is a non-trivial piece of code to say the least. At minimum it normali=
zes the cross-browser differences between XHR (XMLHttpRequest) and makes it=
 trivial for us to perform common HTTP actions (e.g <code>get</code>, <code=
>post</code> etc), work with Deferreds and so on.</p>

<p>As it would take an entire chapter to show all of the code related to th=
e above facades, here is instead the code in jQuery core normalizing XHR:</=
p>

<div><div id=3D"highlighter_882575" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</=
div><div class=3D"line number19 index18 alt2">19</div><div class=3D"line nu=
mber20 index19 alt1">20</div><div class=3D"line number21 index20 alt2">21</=
div><div class=3D"line number22 index21 alt1">22</div><div class=3D"line nu=
mber23 index22 alt2">23</div><div class=3D"line number24 index23 alt1">24</=
div><div class=3D"line number25 index24 alt2">25</div><div class=3D"line nu=
mber26 index25 alt1">26</div><div class=3D"line number27 index26 alt2">27</=
div></td><td class=3D"code"><div class=3D"container"><div class=3D"line num=
ber1 index0 alt2"><code class=3D"js comments">// Functions to create xhrs</=
code></div><div class=3D"line number2 index1 alt1"><code class=3D"js keywor=
d">function</code> <code class=3D"js plain">createStandardXHR() {</code></d=
iv><div class=3D"line number3 index2 alt2"><code class=3D"js spaces">&nbsp;=
&nbsp;</code><code class=3D"js keyword">try</code> <code class=3D"js plain"=
>{</code></div><div class=3D"line number4 index3 alt1"><code class=3D"js sp=
aces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">return</cod=
e> <code class=3D"js keyword">new</code> <code class=3D"js plain">window.XM=
LHttpRequest();</code></div><div class=3D"line number5 index4 alt2"><code c=
lass=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js plain">} </code><co=
de class=3D"js keyword">catch</code><code class=3D"js plain">( e ) {}</code=
></div><div class=3D"line number6 index5 alt1"><code class=3D"js plain">}</=
code></div><div class=3D"line number7 index6 alt2">&nbsp;</div><div class=
=3D"line number8 index7 alt1"><code class=3D"js keyword">function</code> <c=
ode class=3D"js plain">createActiveXHR() {</code></div><div class=3D"line n=
umber9 index8 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code clas=
s=3D"js keyword">try</code> <code class=3D"js plain">{</code></div><div cla=
ss=3D"line number10 index9 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbs=
p;&nbsp;</code><code class=3D"js keyword">return</code> <code class=3D"js k=
eyword">new</code> <code class=3D"js plain">window.ActiveXObject( </code><c=
ode class=3D"js string">"Microsoft.XMLHTTP"</code> <code class=3D"js plain"=
>);</code></div><div class=3D"line number11 index10 alt2"><code class=3D"js=
 spaces">&nbsp;&nbsp;</code><code class=3D"js plain">} </code><code class=
=3D"js keyword">catch</code><code class=3D"js plain">( e ) {}</code></div><=
div class=3D"line number12 index11 alt1"><code class=3D"js plain">}</code><=
/div><div class=3D"line number13 index12 alt2">&nbsp;</div><div class=3D"li=
ne number14 index13 alt1"><code class=3D"js comments">// Create the request=
 object</code></div><div class=3D"line number15 index14 alt2"><code class=
=3D"js plain">jQuery.ajaxSettings.xhr =3D window.ActiveXObject ?</code></di=
v><div class=3D"line number16 index15 alt1"><code class=3D"js spaces">&nbsp=
;&nbsp;</code><code class=3D"js comments">/* Microsoft failed to properly</=
code></div><div class=3D"line number17 index16 alt2"><code class=3D"js spac=
es">&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">* implement the XM=
LHttpRequest in IE7 (can't request local files),</code></div><div class=3D"=
line number18 index17 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;</c=
ode><code class=3D"js comments">* so we use the ActiveXObject when it is av=
ailable</code></div><div class=3D"line number19 index18 alt2"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">* Addit=
ionally XMLHttpRequest can be disabled in IE7/IE8 so</code></div><div class=
=3D"line number20 index19 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp=
;</code><code class=3D"js comments">* we need a fallback.</code></div><div =
class=3D"line number21 index20 alt2"><code class=3D"js spaces">&nbsp;&nbsp;=
&nbsp;</code><code class=3D"js comments">*/</code></div><div class=3D"line =
number22 index21 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><code c=
lass=3D"js keyword">function</code><code class=3D"js plain">() {</code></di=
v><div class=3D"line number23 index22 alt2"><code class=3D"js spaces">&nbsp=
;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">return</code> <code cl=
ass=3D"js plain">!</code><code class=3D"js keyword">this</code><code class=
=3D"js plain">.isLocal &amp;&amp; createStandardXHR() || createActiveXHR();=
</code></div><div class=3D"line number24 index23 alt1"><code class=3D"js sp=
aces">&nbsp;&nbsp;</code><code class=3D"js plain">} :</code></div><div clas=
s=3D"line number25 index24 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</co=
de><code class=3D"js comments">// For all other browsers, use the standard =
XMLHttpRequest object</code></div><div class=3D"line number26 index25 alt1"=
><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js plain">crea=
teStandardXHR;</code></div><div class=3D"line number27 index26 alt2"><code =
class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js plain">...</code><=
/div></div></td></tr></tbody></table></div></div>

<p>Whilst the following block of code is also a level above the actual jQue=
ry XHR (<code>jqXHR</code>) implementation, it's the convenience facade tha=
t we actually most commonly interact with:</p>

<div><div id=3D"highlighter_240726" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</=
div><div class=3D"line number19 index18 alt2">19</div><div class=3D"line nu=
mber20 index19 alt1">20</div><div class=3D"line number21 index20 alt2">21</=
div><div class=3D"line number22 index21 alt1">22</div><div class=3D"line nu=
mber23 index22 alt2">23</div><div class=3D"line number24 index23 alt1">24</=
div><div class=3D"line number25 index24 alt2">25</div><div class=3D"line nu=
mber26 index25 alt1">26</div><div class=3D"line number27 index26 alt2">27</=
div><div class=3D"line number28 index27 alt1">28</div><div class=3D"line nu=
mber29 index28 alt2">29</div><div class=3D"line number30 index29 alt1">30</=
div><div class=3D"line number31 index30 alt2">31</div><div class=3D"line nu=
mber32 index31 alt1">32</div><div class=3D"line number33 index32 alt2">33</=
div><div class=3D"line number34 index33 alt1">34</div><div class=3D"line nu=
mber35 index34 alt2">35</div><div class=3D"line number36 index35 alt1">36</=
div><div class=3D"line number37 index36 alt2">37</div><div class=3D"line nu=
mber38 index37 alt1">38</div><div class=3D"line number39 index38 alt2">39</=
div><div class=3D"line number40 index39 alt1">40</div><div class=3D"line nu=
mber41 index40 alt2">41</div></td><td class=3D"code"><div class=3D"containe=
r"><div class=3D"line number1 index0 alt2"><code class=3D"js spaces">&nbsp;=
&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// Request the remote =
document</code></div><div class=3D"line number2 index1 alt1"><code class=3D=
"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">jQuery.=
ajax({</code></div><div class=3D"line number3 index2 alt2"><code class=3D"j=
s spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plai=
n">url: url,</code></div><div class=3D"line number4 index3 alt1"><code clas=
s=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"j=
s plain">type: type,</code></div><div class=3D"line number5 index4 alt2"><c=
ode class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code cl=
ass=3D"js plain">dataType: </code><code class=3D"js string">"html"</code><c=
ode class=3D"js plain">,</code></div><div class=3D"line number6 index5 alt1=
"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><cod=
e class=3D"js plain">data: params,</code></div><div class=3D"line number7 i=
ndex6 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<=
/code><code class=3D"js comments">// Complete callback (responseText is use=
d internally)</code></div><div class=3D"line number8 index7 alt1"><code cla=
ss=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"=
js plain">complete: </code><code class=3D"js keyword">function</code><code =
class=3D"js plain">( jqXHR, status, responseText ) {</code></div><div class=
=3D"line number9 index8 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// Store th=
e response as specified by the jqXHR object</code></div><div class=3D"line =
number10 index9 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">responseText =3D jqXHR=
.responseText;</code></div><div class=3D"line number11 index10 alt2"><code =
class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>=
<code class=3D"js comments">// If successful, inject the HTML into all the =
matched elements</code></div><div class=3D"line number12 index11 alt1"><cod=
e class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</cod=
e><code class=3D"js keyword">if</code> <code class=3D"js plain">( jqXHR.isR=
esolved() ) {</code></div><div class=3D"line number13 index12 alt2"><code c=
lass=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;</code><code class=3D"js comments">// Get the actual response in case</=
code></div><div class=3D"line number14 index13 alt1"><code class=3D"js spac=
es">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><cod=
e class=3D"js comments">// a dataFilter is present in ajaxSettings</code></=
div><div class=3D"line number15 index14 alt2"><code class=3D"js spaces">&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js plain">jqXHR.done(</code><code class=3D"js keyword">function</code><=
code class=3D"js plain">( r ) {</code></div><div class=3D"line number16 ind=
ex15 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">responseT=
ext =3D r;</code></div><div class=3D"line number17 index16 alt2"><code clas=
s=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;</code><code class=3D"js plain">});</code></div><div class=3D"line number1=
8 index17 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// See if a s=
elector was specified</code></div><div class=3D"line number19 index18 alt2"=
><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;</code><code class=3D"js plain">self.html( selector ?</code></d=
iv><div class=3D"line number20 index19 alt1"><code class=3D"js spaces">&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>=
<code class=3D"js comments">// Create a dummy div to hold the results</code=
></div><div class=3D"line number21 index20 alt2"><code class=3D"js spaces">=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</c=
ode><code class=3D"js plain">jQuery(</code><code class=3D"js string">"&lt;d=
iv&gt;"</code><code class=3D"js plain">)</code></div><div class=3D"line num=
ber22 index21 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js comments">// inject the contents of the document in, removing the sc=
ripts</code></div><div class=3D"line number23 index22 alt2"><code class=3D"=
js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// to avoid any 'Per=
mission Denied' errors in IE</code></div><div class=3D"line number24 index2=
3 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">=
.append(responseText.replace(rscript, </code><code class=3D"js string">""</=
code><code class=3D"js plain">))</code></div><div class=3D"line number25 in=
dex24 alt2">&nbsp;</div><div class=3D"line number26 index25 alt1"><code cla=
ss=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// Locate the =
specified elements</code></div><div class=3D"line number27 index26 alt2"><c=
ode class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">.find(sele=
ctor) :</code></div><div class=3D"line number28 index27 alt1">&nbsp;</div><=
div class=3D"line number29 index28 alt2"><code class=3D"js spaces">&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><cod=
e class=3D"js comments">// If not, just inject the full result</code></div>=
<div class=3D"line number30 index29 alt1"><code class=3D"js spaces">&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><co=
de class=3D"js plain">responseText );</code></div><div class=3D"line number=
31 index30 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</code><code class=3D"js plain">}</code></div><div class=3D=
"line number32 index31 alt1">&nbsp;</div><div class=3D"line number33 index3=
2 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;</code><code class=3D"js keyword">if</code> <code class=3D"js plain"=
>( callback ) {</code></div><div class=3D"line number34 index33 alt1"><code=
 class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;</code><code class=3D"js plain">self.each( callback, [ responseText, =
status, jqXHR ] );</code></div><div class=3D"line number35 index34 alt2"><c=
ode class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</c=
ode><code class=3D"js plain">}</code></div><div class=3D"line number36 inde=
x35 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</c=
ode><code class=3D"js plain">}</code></div><div class=3D"line number37 inde=
x36 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code cl=
ass=3D"js plain">});</code></div><div class=3D"line number38 index37 alt1">=
&nbsp;</div><div class=3D"line number39 index38 alt2"><code class=3D"js spa=
ces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">return</code=
> <code class=3D"js keyword">this</code><code class=3D"js plain">;</code></=
div><div class=3D"line number40 index39 alt1"><code class=3D"js spaces">&nb=
sp;&nbsp;</code><code class=3D"js plain">}</code></div><div class=3D"line n=
umber41 index40 alt2"><code class=3D"js plain">&lt;/div&gt;</code></div></d=
iv></td></tr></tbody></table></div></div>

<p>&nbsp;</p>
<h2 id=3D"observerpatternjquery">
  <a href=3D"https://addyosmani.com/resources/essentialjsdesignpatterns/boo=
k/#observerpatternjquery" class=3D"subhead-link">#</a>
  The Observer Pattern
</h2>
<p>
  Another pattern we reviewed earlier is the Observer (Publish/Subscribe) p=
attern. This is where the objects in a system may subscribe to other object=
s and be notified by them when an event of interest occurs.
</p>
<p>
jQuery core has come with built-in support for a publish/subscribe-like sys=
tem for a few years now, which it refers to as <em>custom events</em>.</p>

<p>In earlier versions of the library, access to these custom events was po=
ssible using <code>jQuery.bind()</code> (subscribe), <code>jQuery.trigger()=
</code> (publish) and <code>jQuery.unbind()</code> (unsubscribe), but in re=
cent versions this can be done using <code>jQuery.on()</code>, <code>jQuery=
.trigger()</code> and <code>jQuery.off()</code>.</p>
<p>
  Below we can see an example of this being used in practice:
</p>
<p>
</p><div><div id=3D"highlighter_463957" class=3D"syntaxhighlighter  js acod=
ecode"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resou=
rces/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help h=
elp">?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D=
"0"><tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2"=
>1</div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line n=
umber3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><=
div class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 in=
dex5 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=
=3D"line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2=
">9</div><div class=3D"line number10 index9 alt1">10</div></td><td class=3D=
"code"><div class=3D"container"><div class=3D"line number1 index0 alt2"><co=
de class=3D"js comments">// Equivalent to subscribe(topicName, callback)</c=
ode></div><div class=3D"line number2 index1 alt1"><code class=3D"js plain">=
$( document ).on( </code><code class=3D"js string">"topicName"</code><code =
class=3D"js plain">, </code><code class=3D"js keyword">function</code> <cod=
e class=3D"js plain">() {</code></div><div class=3D"line number3 index2 alt=
2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"=
js comments">//..perform some behaviour</code></div><div class=3D"line numb=
er4 index3 alt1"><code class=3D"js plain">});</code></div><div class=3D"lin=
e number5 index4 alt2">&nbsp;</div><div class=3D"line number6 index5 alt1">=
<code class=3D"js comments">// Equivalent to publish(topicName)</code></div=
><div class=3D"line number7 index6 alt2"><code class=3D"js plain">$( docume=
nt ).trigger( </code><code class=3D"js string">"topicName"</code> <code cla=
ss=3D"js plain">);</code></div><div class=3D"line number8 index7 alt1">&nbs=
p;</div><div class=3D"line number9 index8 alt2"><code class=3D"js comments"=
>// Equivalent to unsubscribe(topicName)</code></div><div class=3D"line num=
ber10 index9 alt1"><code class=3D"js plain">$( document ).off( </code><code=
 class=3D"js string">"topicName"</code> <code class=3D"js plain">);</code><=
/div></div></td></tr></tbody></table></div></div>
<p></p>

<p>Calls to <code>jQuery.on()</code> and <code>jQuery.off()</code> eventual=
ly go through the jQuery events system. Similar to Ajax, as the implementat=
ion for this is relatively long, we can instead look at where and how the a=
ctual event handlers for custom events are attached:</p>


<div><div id=3D"highlighter_294175" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</=
div><div class=3D"line number19 index18 alt2">19</div><div class=3D"line nu=
mber20 index19 alt1">20</div><div class=3D"line number21 index20 alt2">21</=
div><div class=3D"line number22 index21 alt1">22</div><div class=3D"line nu=
mber23 index22 alt2">23</div><div class=3D"line number24 index23 alt1">24</=
div><div class=3D"line number25 index24 alt2">25</div><div class=3D"line nu=
mber26 index25 alt1">26</div><div class=3D"line number27 index26 alt2">27</=
div><div class=3D"line number28 index27 alt1">28</div><div class=3D"line nu=
mber29 index28 alt2">29</div><div class=3D"line number30 index29 alt1">30</=
div><div class=3D"line number31 index30 alt2">31</div><div class=3D"line nu=
mber32 index31 alt1">32</div><div class=3D"line number33 index32 alt2">33</=
div><div class=3D"line number34 index33 alt1">34</div><div class=3D"line nu=
mber35 index34 alt2">35</div><div class=3D"line number36 index35 alt1">36</=
div><div class=3D"line number37 index36 alt2">37</div><div class=3D"line nu=
mber38 index37 alt1">38</div><div class=3D"line number39 index38 alt2">39</=
div><div class=3D"line number40 index39 alt1">40</div><div class=3D"line nu=
mber41 index40 alt2">41</div><div class=3D"line number42 index41 alt1">42</=
div><div class=3D"line number43 index42 alt2">43</div><div class=3D"line nu=
mber44 index43 alt1">44</div></td><td class=3D"code"><div class=3D"containe=
r"><div class=3D"line number1 index0 alt2"><code class=3D"js plain">jQuery.=
event =3D {</code></div><div class=3D"line number2 index1 alt1">&nbsp;</div=
><div class=3D"line number3 index2 alt2"><code class=3D"js spaces">&nbsp;&n=
bsp;</code><code class=3D"js plain">add: </code><code class=3D"js keyword">=
function</code><code class=3D"js plain">( elem, types, handler, data, selec=
tor ) {</code></div><div class=3D"line number4 index3 alt1">&nbsp;</div><di=
v class=3D"line number5 index4 alt2"><code class=3D"js spaces">&nbsp;&nbsp;=
&nbsp;&nbsp;</code><code class=3D"js keyword">var</code> <code class=3D"js =
plain">elemData, eventHandle, events,</code></div><div class=3D"line number=
6 index5 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</code><code class=3D"js plain">t, tns, type, namespaces, handleObj,</cod=
e></div><div class=3D"line number7 index6 alt2"><code class=3D"js spaces">&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">handleOb=
jIn, quick, handlers, special;</code></div><div class=3D"line number8 index=
7 alt1">&nbsp;</div><div class=3D"line number9 index8 alt2"><code class=3D"=
js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">...</cod=
e></div><div class=3D"line number10 index9 alt1">&nbsp;</div><div class=3D"=
line number11 index10 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nb=
sp;</code><code class=3D"js comments">// Init the element's event structure=
 and main handler,</code></div><div class=3D"line number12 index11 alt1"><c=
ode class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js co=
mments">//if this is the first</code></div><div class=3D"line number13 inde=
x12 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code cl=
ass=3D"js plain">events =3D elemData.events;</code></div><div class=3D"line=
 number14 index13 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;<=
/code><code class=3D"js keyword">if</code> <code class=3D"js plain">( !even=
ts ) {</code></div><div class=3D"line number15 index14 alt2"><code class=3D=
"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js pl=
ain">elemData.events =3D events =3D {};</code></div><div class=3D"line numb=
er16 index15 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code=
><code class=3D"js plain">}</code></div><div class=3D"line number17 index16=
 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js plain">...</code></div><div class=3D"line number18 index17 alt1">&nb=
sp;</div><div class=3D"line number19 index18 alt2"><code class=3D"js spaces=
">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// Handle mult=
iple events separated by a space</code></div><div class=3D"line number20 in=
dex19 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code =
class=3D"js comments">// jQuery(...).bind("mouseover mouseout", fn);</code>=
</div><div class=3D"line number21 index20 alt2"><code class=3D"js spaces">&=
nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">types =3D jQuery.tri=
m( hoverHack(types) ).split( </code><code class=3D"js string">" "</code> <c=
ode class=3D"js plain">);</code></div><div class=3D"line number22 index21 a=
lt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js keyword">for</code> <code class=3D"js plain">( t =3D 0; t &lt; types=
.length; t++ ) {</code></div><div class=3D"line number23 index22 alt2">&nbs=
p;</div><div class=3D"line number24 index23 alt1"><code class=3D"js spaces"=
>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">...</c=
ode></div><div class=3D"line number25 index24 alt2">&nbsp;</div><div class=
=3D"line number26 index25 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// Init the event han=
dler queue if we're the first</code></div><div class=3D"line number27 index=
26 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</co=
de><code class=3D"js plain">handlers =3D events[ type ];</code></div><div c=
lass=3D"line number28 index27 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">if</code> <code cl=
ass=3D"js plain">( !handlers ) {</code></div><div class=3D"line number29 in=
dex28 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;</code><code class=3D"js plain">handlers =3D events[ type ] =3D =
[];</code></div><div class=3D"line number30 index29 alt1"><code class=3D"js=
 spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js plain">handlers.delegateCount =3D 0;</code></div><div class=3D"line =
number31 index30 alt2">&nbsp;</div><div class=3D"line number32 index31 alt1=
"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;</code><code class=3D"js comments">// Only use addEventListener/attachEven=
t if the special</code></div><div class=3D"line number33 index32 alt2"><cod=
e class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</cod=
e><code class=3D"js comments">// events handler returns false</code></div><=
div class=3D"line number34 index33 alt1"><code class=3D"js spaces">&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">i=
f</code> <code class=3D"js plain">( !special.setup || special.setup.call( e=
lem, data,</code></div><div class=3D"line number35 index34 alt2"><code clas=
s=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><cod=
e class=3D"js comments">//namespaces, eventHandle ) =3D=3D=3D false ) {</co=
de></div><div class=3D"line number36 index35 alt1"><code class=3D"js spaces=
">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code =
class=3D"js comments">// Bind the global event handler to the element</code=
></div><div class=3D"line number37 index36 alt2"><code class=3D"js spaces">=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code cl=
ass=3D"js keyword">if</code> <code class=3D"js plain">( elem.addEventListen=
er ) {</code></div><div class=3D"line number38 index37 alt1"><code class=3D=
"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;</code><code class=3D"js plain">elem.addEventListener( type, event=
Handle, </code><code class=3D"js keyword">false</code> <code class=3D"js pl=
ain">);</code></div><div class=3D"line number39 index38 alt2">&nbsp;</div><=
div class=3D"line number40 index39 alt1"><code class=3D"js spaces">&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"j=
s plain">} </code><code class=3D"js keyword">else</code> <code class=3D"js =
keyword">if</code> <code class=3D"js plain">( elem.attachEvent ) {</code></=
div><div class=3D"line number41 index40 alt2"><code class=3D"js spaces">&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code=
><code class=3D"js plain">elem.attachEvent( </code><code class=3D"js string=
">"on"</code> <code class=3D"js plain">+ type, eventHandle );</code></div><=
div class=3D"line number42 index41 alt1"><code class=3D"js spaces">&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"j=
s plain">}</code></div><div class=3D"line number43 index42 alt2"><code clas=
s=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><cod=
e class=3D"js plain">}</code></div><div class=3D"line number44 index43 alt1=
"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><cod=
e class=3D"js plain">}</code></div></div></td></tr></tbody></table></div></=
div>

<p>For those that prefer to use the conventional naming scheme for the Obse=
rver pattern, <a href=3D"https://gist.github.com/661855">Ben Alman</a> crea=
ted a simple wrapper around the above methods which provides us access to <=
code>jQuery.publish()</code>, <code>jQuery.subscribe</code>, and <code>jQue=
ry.unsubscribe</code> methods. I've previously linked to them earlier in th=
e book, but we can see the wrapper in full below.</p>

<div><div id=3D"highlighter_992451" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div></td><td class=3D"code"><div class=3D"containe=
r"><div class=3D"line number1 index0 alt2"><code class=3D"js plain">(</code=
><code class=3D"js keyword">function</code><code class=3D"js plain">( $ ) {=
</code></div><div class=3D"line number2 index1 alt1">&nbsp;</div><div class=
=3D"line number3 index2 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code>=
<code class=3D"js keyword">var</code> <code class=3D"js plain">o =3D $({});=
</code></div><div class=3D"line number4 index3 alt1">&nbsp;</div><div class=
=3D"line number5 index4 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code>=
<code class=3D"js plain">$.subscribe =3D </code><code class=3D"js keyword">=
function</code><code class=3D"js plain">() {</code></div><div class=3D"line=
 number6 index5 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</c=
ode><code class=3D"js plain">o.on.apply(o, arguments);</code></div><div cla=
ss=3D"line number7 index6 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</cod=
e><code class=3D"js plain">};</code></div><div class=3D"line number8 index7=
 alt1">&nbsp;</div><div class=3D"line number9 index8 alt2"><code class=3D"j=
s spaces">&nbsp;&nbsp;</code><code class=3D"js plain">$.unsubscribe =3D </c=
ode><code class=3D"js keyword">function</code><code class=3D"js plain">() {=
</code></div><div class=3D"line number10 index9 alt1"><code class=3D"js spa=
ces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">o.off.apply(o,=
 arguments);</code></div><div class=3D"line number11 index10 alt2"><code cl=
ass=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js plain">};</code></di=
v><div class=3D"line number12 index11 alt1">&nbsp;</div><div class=3D"line =
number13 index12 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code c=
lass=3D"js plain">$.publish =3D </code><code class=3D"js keyword">function<=
/code><code class=3D"js plain">() {</code></div><div class=3D"line number14=
 index13 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><co=
de class=3D"js plain">o.trigger.apply(o, arguments);</code></div><div class=
=3D"line number15 index14 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</cod=
e><code class=3D"js plain">};</code></div><div class=3D"line number16 index=
15 alt1">&nbsp;</div><div class=3D"line number17 index16 alt2"><code class=
=3D"js plain">}( jQuery ));</code></div></div></td></tr></tbody></table></d=
iv></div>

<p>In recent versions of jQuery, a multi-purpose callbacks object (<code>jQ=
uery.Callbacks</code>) was made available to enable users to write new solu=
tions based on callback lists. One such solution to write using this featur=
e is another Publish/Subscribe system. An implementation of this is the fol=
lowing:</p>
<div><div id=3D"highlighter_706022" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</=
div></td><td class=3D"code"><div class=3D"container"><div class=3D"line num=
ber1 index0 alt2"><code class=3D"js keyword">var</code> <code class=3D"js p=
lain">topics =3D {};</code></div><div class=3D"line number2 index1 alt1">&n=
bsp;</div><div class=3D"line number3 index2 alt2"><code class=3D"js plain">=
jQuery.Topic =3D </code><code class=3D"js keyword">function</code><code cla=
ss=3D"js plain">( id ) {</code></div><div class=3D"line number4 index3 alt1=
"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"j=
s keyword">var</code> <code class=3D"js plain">callbacks,</code></div><div =
class=3D"line number5 index4 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">topic =3D=
 id &amp;&amp; topics[ id ];</code></div><div class=3D"line number6 index5 =
alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js keyword">if</code> <code class=3D"js plain">( !topic ) {</code></div=
><div class=3D"line number7 index6 alt2"><code class=3D"js spaces">&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">cal=
lbacks =3D jQuery.Callbacks();</code></div><div class=3D"line number8 index=
7 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;</code><code class=3D"js plain">topic =3D {</code></div><div class=
=3D"line number9 index8 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"=
js plain">publish: callbacks.fire,</code></div><div class=3D"line number10 =
index9 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">subscri=
be: callbacks.add,</code></div><div class=3D"line number11 index10 alt2"><c=
ode class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">unsubscribe: callbacks=
.remove</code></div><div class=3D"line number12 index11 alt1"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code=
 class=3D"js plain">};</code></div><div class=3D"line number13 index12 alt2=
"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;</code><code class=3D"js keyword">if</code> <code class=3D"js plain">( id =
) {</code></div><div class=3D"line number14 index13 alt1"><code class=3D"js=
 spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;</code><code class=3D"js plain">topics[ id ] =3D topic;</code></div><=
div class=3D"line number15 index14 alt2"><code class=3D"js spaces">&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">}</=
code></div><div class=3D"line number16 index15 alt1"><code class=3D"js spac=
es">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">}</code></div><=
div class=3D"line number17 index16 alt2"><code class=3D"js spaces">&nbsp;&n=
bsp;&nbsp;&nbsp;</code><code class=3D"js keyword">return</code> <code class=
=3D"js plain">topic;</code></div><div class=3D"line number18 index17 alt1">=
<code class=3D"js plain">};</code></div></div></td></tr></tbody></table></d=
iv></div>

which can then be used as follows:
<div><div id=3D"highlighter_437948" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</=
div></td><td class=3D"code"><div class=3D"container"><div class=3D"line num=
ber1 index0 alt2"><code class=3D"js comments">// Subscribers</code></div><d=
iv class=3D"line number2 index1 alt1"><code class=3D"js plain">$.Topic( </c=
ode><code class=3D"js string">"mailArrived"</code> <code class=3D"js plain"=
>).subscribe( fn1 );</code></div><div class=3D"line number3 index2 alt2"><c=
ode class=3D"js plain">$.Topic( </code><code class=3D"js string">"mailArriv=
ed"</code> <code class=3D"js plain">).subscribe( fn2 );</code></div><div cl=
ass=3D"line number4 index3 alt1"><code class=3D"js plain">$.Topic( </code><=
code class=3D"js string">"mailSent"</code> <code class=3D"js plain">).subsc=
ribe( fn1 );</code></div><div class=3D"line number5 index4 alt2">&nbsp;</di=
v><div class=3D"line number6 index5 alt1"><code class=3D"js comments">// Pu=
blisher</code></div><div class=3D"line number7 index6 alt2"><code class=3D"=
js plain">$.Topic( </code><code class=3D"js string">"mailArrived"</code> <c=
ode class=3D"js plain">).publish( </code><code class=3D"js string">"hello w=
orld!"</code> <code class=3D"js plain">);</code></div><div class=3D"line nu=
mber8 index7 alt1"><code class=3D"js plain">$.Topic( </code><code class=3D"=
js string">"mailSent"</code> <code class=3D"js plain">).publish( </code><co=
de class=3D"js string">"woo! mail!"</code> <code class=3D"js plain">);</cod=
e></div><div class=3D"line number9 index8 alt2">&nbsp;</div><div class=3D"l=
ine number10 index9 alt1"><code class=3D"js comments">// Here, "hello world=
!" gets pushed to fn1 and fn2</code></div><div class=3D"line number11 index=
10 alt2"><code class=3D"js comments">// when the "mailArrived" notification=
 is published</code></div><div class=3D"line number12 index11 alt1"><code c=
lass=3D"js comments">// with "woo! mail!" also being pushed to fn1 when</co=
de></div><div class=3D"line number13 index12 alt2"><code class=3D"js commen=
ts">// the "mailSent" notification is published.</code></div><div class=3D"=
line number14 index13 alt1">&nbsp;</div><div class=3D"line number15 index14=
 alt2"><code class=3D"js comments">// Outputs:</code></div><div class=3D"li=
ne number16 index15 alt1"><code class=3D"js comments">// hello world!</code=
></div><div class=3D"line number17 index16 alt2"><code class=3D"js comments=
">// fn2 says: hello world!</code></div><div class=3D"line number18 index17=
 alt1"><code class=3D"js comments">// woo! mail!</code></div></div></td></t=
r></tbody></table></div></div>

<p>&nbsp;</p>
<h2 id=3D"iteratorpatternjquery">
  <a href=3D"https://addyosmani.com/resources/essentialjsdesignpatterns/boo=
k/#iteratorpatternjquery" class=3D"subhead-link">#</a>
  The Iterator Pattern
</h2>
<p>
  The Iterator is a design pattern where iterators (objects that allow us t=
o traverse through all the elements of a collection) access the elements of=
 an aggregate object sequentially without needing to expose its underlying =
form.</p>

 <p>Iterators encapsulate the internal structure of how that particular ite=
ration occurs. In the case of jQuery's <code>jQuery.fn.each()</code> iterat=
or, we are actually able to use the underlying code behind <code>jQuery.eac=
h()</code> to iterate through a collection, without needing to see or under=
stand the code working behind the scenes providing this capability.</p>

<p>This is a pattern that could be considered a special case of the facade,=
 where we explicitly deal with problems related to iteration.</p>


<div><div id=3D"highlighter_969918" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div></td><td class=
=3D"code"><div class=3D"container"><div class=3D"line number1 index0 alt2">=
<code class=3D"js plain">$.each( [</code><code class=3D"js string">"john"</=
code><code class=3D"js plain">,</code><code class=3D"js string">"dave"</cod=
e><code class=3D"js plain">,</code><code class=3D"js string">"rick"</code><=
code class=3D"js plain">,</code><code class=3D"js string">"julian"</code><c=
ode class=3D"js plain">], </code><code class=3D"js keyword">function</code>=
<code class=3D"js plain">( index, value ) {</code></div><div class=3D"line =
number2 index1 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><code cla=
ss=3D"js plain">console.log( index + </code><code class=3D"js string">": "<=
/code> <code class=3D"js plain">+ value);</code></div><div class=3D"line nu=
mber3 index2 alt2"><code class=3D"js plain">});</code></div><div class=3D"l=
ine number4 index3 alt1">&nbsp;</div><div class=3D"line number5 index4 alt2=
"><code class=3D"js plain">$( </code><code class=3D"js string">"li"</code> =
<code class=3D"js plain">).each( </code><code class=3D"js keyword">function=
</code> <code class=3D"js plain">( index ) {</code></div><div class=3D"line=
 number6 index5 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><code cl=
ass=3D"js plain">console.log( index + </code><code class=3D"js string">": "=
</code> <code class=3D"js plain">+ $( </code><code class=3D"js keyword">thi=
s</code> <code class=3D"js plain">).text());</code></div><div class=3D"line=
 number7 index6 alt2"><code class=3D"js plain">});</code></div></div></td><=
/tr></tbody></table></div></div>


<p>Here we can see the code for <code>jQuery.fn.each()</code>:</p>

<div><div id=3D"highlighter_370592" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div></td>=
<td class=3D"code"><div class=3D"container"><div class=3D"line number1 inde=
x0 alt2"><code class=3D"js comments">// Execute a callback for every elemen=
t in the matched set.</code></div><div class=3D"line number2 index1 alt1"><=
code class=3D"js plain">each: </code><code class=3D"js keyword">function</c=
ode><code class=3D"js plain">( callback, args ) {</code></div><div class=3D=
"line number3 index2 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><co=
de class=3D"js keyword">return</code> <code class=3D"js plain">jQuery.each(=
 </code><code class=3D"js keyword">this</code><code class=3D"js plain">, ca=
llback, args );</code></div><div class=3D"line number4 index3 alt1"><code c=
lass=3D"js plain">}</code></div></div></td></tr></tbody></table></div></div=
>

<p>Followed by the code behind <code>jQuery.each()</code> which handles two=
 ways of iterating through objects:</p>

<div><div id=3D"highlighter_104845" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</=
div><div class=3D"line number19 index18 alt2">19</div><div class=3D"line nu=
mber20 index19 alt1">20</div><div class=3D"line number21 index20 alt2">21</=
div><div class=3D"line number22 index21 alt1">22</div><div class=3D"line nu=
mber23 index22 alt2">23</div><div class=3D"line number24 index23 alt1">24</=
div><div class=3D"line number25 index24 alt2">25</div><div class=3D"line nu=
mber26 index25 alt1">26</div><div class=3D"line number27 index26 alt2">27</=
div><div class=3D"line number28 index27 alt1">28</div><div class=3D"line nu=
mber29 index28 alt2">29</div><div class=3D"line number30 index29 alt1">30</=
div><div class=3D"line number31 index30 alt2">31</div><div class=3D"line nu=
mber32 index31 alt1">32</div><div class=3D"line number33 index32 alt2">33</=
div><div class=3D"line number34 index33 alt1">34</div><div class=3D"line nu=
mber35 index34 alt2">35</div><div class=3D"line number36 index35 alt1">36</=
div><div class=3D"line number37 index36 alt2">37</div><div class=3D"line nu=
mber38 index37 alt1">38</div><div class=3D"line number39 index38 alt2">39</=
div></td><td class=3D"code"><div class=3D"container"><div class=3D"line num=
ber1 index0 alt2"><code class=3D"js plain">each: </code><code class=3D"js k=
eyword">function</code><code class=3D"js plain">( object, callback, args ) =
{</code></div><div class=3D"line number2 index1 alt1"><code class=3D"js spa=
ces">&nbsp;&nbsp;</code><code class=3D"js keyword">var</code> <code class=
=3D"js plain">name, i =3D 0,</code></div><div class=3D"line number3 index2 =
alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js plain">length =3D object.length,</code></div><div class=3D"line numb=
er4 index3 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><=
code class=3D"js plain">isObj =3D length =3D=3D=3D undefined || jQuery.isFu=
nction( object );</code></div><div class=3D"line number5 index4 alt2">&nbsp=
;</div><div class=3D"line number6 index5 alt1"><code class=3D"js spaces">&n=
bsp;&nbsp;</code><code class=3D"js keyword">if</code> <code class=3D"js pla=
in">( args ) {</code></div><div class=3D"line number7 index6 alt2"><code cl=
ass=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword"=
>if</code> <code class=3D"js plain">( isObj ) {</code></div><div class=3D"l=
ine number8 index7 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;</code><code class=3D"js keyword">for</code> <code class=3D"js =
plain">( name </code><code class=3D"js keyword">in</code> <code class=3D"js=
 plain">object ) {</code></div><div class=3D"line number9 index8 alt2"><cod=
e class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</cod=
e><code class=3D"js keyword">if</code> <code class=3D"js plain">( callback.=
apply( object[ name ], args ) =3D=3D=3D </code><code class=3D"js keyword">f=
alse</code> <code class=3D"js plain">) {</code></div><div class=3D"line num=
ber10 index9 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">break</code=
><code class=3D"js plain">;</code></div><div class=3D"line number11 index10=
 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;</code><code class=3D"js plain">}</code></div><div class=3D"line numb=
er12 index11 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;</code><code class=3D"js plain">}</code></div><div class=3D"line numb=
er13 index12 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code=
><code class=3D"js plain">} </code><code class=3D"js keyword">else</code> <=
code class=3D"js plain">{</code></div><div class=3D"line number14 index13 a=
lt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><=
code class=3D"js keyword">for</code> <code class=3D"js plain">( ; i &lt; le=
ngth; ) {</code></div><div class=3D"line number15 index14 alt2"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code=
 class=3D"js keyword">if</code> <code class=3D"js plain">( callback.apply( =
object[ i++ ], args ) =3D=3D=3D </code><code class=3D"js keyword">false</co=
de> <code class=3D"js plain">) {</code></div><div class=3D"line number16 in=
dex15 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">break</code><code =
class=3D"js plain">;</code></div><div class=3D"line number17 index16 alt2">=
<code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<=
/code><code class=3D"js plain">}</code></div><div class=3D"line number18 in=
dex17 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<=
/code><code class=3D"js plain">}</code></div><div class=3D"line number19 in=
dex18 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code =
class=3D"js plain">}</code></div><div class=3D"line number20 index19 alt1">=
&nbsp;</div><div class=3D"line number21 index20 alt2"><code class=3D"js spa=
ces">&nbsp;&nbsp;</code><code class=3D"js comments">// A special, fast, cas=
e for the most common use of each</code></div><div class=3D"line number22 i=
ndex21 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js=
 plain">} </code><code class=3D"js keyword">else</code> <code class=3D"js p=
lain">{</code></div><div class=3D"line number23 index22 alt2"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">if=
</code> <code class=3D"js plain">( isObj ) {</code></div><div class=3D"line=
 number24 index23 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;</code><code class=3D"js keyword">for</code> <code class=3D"js p=
lain">( name </code><code class=3D"js keyword">in</code> <code class=3D"js =
plain">object ) {</code></div><div class=3D"line number25 index24 alt2"><co=
de class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</co=
de><code class=3D"js keyword">if</code> <code class=3D"js plain">( callback=
.call( object[ name ], name, object[ name ] ) =3D=3D=3D </code><code class=
=3D"js keyword">false</code> <code class=3D"js plain">) {</code></div><div =
class=3D"line number26 index25 alt1"><code class=3D"js spaces">&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js ke=
yword">break</code><code class=3D"js plain">;</code></div><div class=3D"lin=
e number27 index26 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">}</code></div><div =
class=3D"line number28 index27 alt1"><code class=3D"js spaces">&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">}</code></div><div =
class=3D"line number29 index28 alt2"><code class=3D"js spaces">&nbsp;&nbsp;=
&nbsp;&nbsp;</code><code class=3D"js plain">} </code><code class=3D"js keyw=
ord">else</code> <code class=3D"js plain">{</code></div><div class=3D"line =
number30 index29 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;</code><code class=3D"js keyword">for</code> <code class=3D"js pl=
ain">( ; i &lt; length; ) {</code></div><div class=3D"line number31 index30=
 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;</code><code class=3D"js keyword">if</code> <code class=3D"js plain">=
( callback.call( object[ i ], i, object[ i++ ] ) =3D=3D=3D </code><code cla=
ss=3D"js keyword">false</code> <code class=3D"js plain">) {</code></div><di=
v class=3D"line number32 index31 alt1"><code class=3D"js spaces">&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js =
keyword">break</code><code class=3D"js plain">;</code></div><div class=3D"l=
ine number33 index32 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">}</code></div><di=
v class=3D"line number34 index33 alt1"><code class=3D"js spaces">&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">}</code></div><di=
v class=3D"line number35 index34 alt2"><code class=3D"js spaces">&nbsp;&nbs=
p;&nbsp;&nbsp;</code><code class=3D"js plain">}</code></div><div class=3D"l=
ine number36 index35 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><co=
de class=3D"js plain">}</code></div><div class=3D"line number37 index36 alt=
2">&nbsp;</div><div class=3D"line number38 index37 alt1"><code class=3D"js =
spaces">&nbsp;&nbsp;</code><code class=3D"js keyword">return</code> <code c=
lass=3D"js plain">object;</code></div><div class=3D"line number39 index38 a=
lt2"><code class=3D"js plain">};</code></div></div></td></tr></tbody></tabl=
e></div></div>

<p>&nbsp;</p>
<h2 id=3D"lazyinitialisationjquery">The Lazy Initialization Pattern</h2>
<p>
  <strong>Lazy Initialization </strong>is a design pattern which allows us =
to delay expensive processes until the first instance they are needed. An e=
xample of this is the <code>.ready()</code> function in jQuery that only ex=
ecutes a callback once the DOM is ready.</p>

<div><div id=3D"highlighter_12343" class=3D"syntaxhighlighter  js acodecode=
"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources/=
essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help">=
?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0"><=
tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</d=
iv><div class=3D"line number2 index1 alt1">2</div><div class=3D"line number=
3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div c=
lass=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5 =
alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"l=
ine number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9</=
div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line num=
ber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</d=
iv><div class=3D"line number13 index12 alt2">13</div><div class=3D"line num=
ber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</d=
iv></td><td class=3D"code"><div class=3D"container"><div class=3D"line numb=
er1 index0 alt2"><code class=3D"js plain">$( document ).ready( </code><code=
 class=3D"js keyword">function</code> <code class=3D"js plain">() {</code><=
/div><div class=3D"line number2 index1 alt1">&nbsp;</div><div class=3D"line=
 number3 index2 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</c=
ode><code class=3D"js comments">// The ajax request won't attempt to execut=
e until</code></div><div class=3D"line number4 index3 alt1"><code class=3D"=
js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// th=
e DOM is ready</code></div><div class=3D"line number5 index4 alt2">&nbsp;</=
div><div class=3D"line number6 index5 alt1"><code class=3D"js spaces">&nbsp=
;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">var</code> <code class=
=3D"js plain">jqxhr =3D $.ajax({</code></div><div class=3D"line number7 ind=
ex6 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</c=
ode><code class=3D"js plain">url: </code><code class=3D"js string">"<a href=
=3D"http://domain.com/api/">http://domain.com/api/</a>"</code><code class=
=3D"js plain">,</code></div><div class=3D"line number8 index7 alt1"><code c=
lass=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js plain">data: </code><code class=3D"js string">"display=3Dlatest&amp;=
order=3Dascending"</code></div><div class=3D"line number9 index8 alt2"><cod=
e class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plai=
n">})</code></div><div class=3D"line number10 index9 alt1"><code class=3D"j=
s spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">.done( </=
code><code class=3D"js keyword">function</code><code class=3D"js plain">( d=
ata ) ){</code></div><div class=3D"line number11 index10 alt2"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code=
 class=3D"js plain">$(</code><code class=3D"js string">".status"</code><cod=
e class=3D"js plain">).html( </code><code class=3D"js string">"content load=
ed"</code> <code class=3D"js plain">);</code></div><div class=3D"line numbe=
r12 index11 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">console.log( </code><code =
class=3D"js string">"Data output:"</code> <code class=3D"js plain">+ data )=
;</code></div><div class=3D"line number13 index12 alt2"><code class=3D"js s=
paces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">});</code></=
div><div class=3D"line number14 index13 alt1">&nbsp;</div><div class=3D"lin=
e number15 index14 alt2"><code class=3D"js plain">});</code></div></div></t=
d></tr></tbody></table></div></div>
<p></p>

<p><code>jQuery.fn.ready()</code> is powered by <code>jQuery.bindReady()</c=
ode>, seen below:</p>

<div><div id=3D"highlighter_225287" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</=
div><div class=3D"line number19 index18 alt2">19</div><div class=3D"line nu=
mber20 index19 alt1">20</div><div class=3D"line number21 index20 alt2">21</=
div><div class=3D"line number22 index21 alt1">22</div><div class=3D"line nu=
mber23 index22 alt2">23</div><div class=3D"line number24 index23 alt1">24</=
div><div class=3D"line number25 index24 alt2">25</div><div class=3D"line nu=
mber26 index25 alt1">26</div><div class=3D"line number27 index26 alt2">27</=
div><div class=3D"line number28 index27 alt1">28</div><div class=3D"line nu=
mber29 index28 alt2">29</div><div class=3D"line number30 index29 alt1">30</=
div><div class=3D"line number31 index30 alt2">31</div><div class=3D"line nu=
mber32 index31 alt1">32</div><div class=3D"line number33 index32 alt2">33</=
div><div class=3D"line number34 index33 alt1">34</div><div class=3D"line nu=
mber35 index34 alt2">35</div><div class=3D"line number36 index35 alt1">36</=
div><div class=3D"line number37 index36 alt2">37</div><div class=3D"line nu=
mber38 index37 alt1">38</div><div class=3D"line number39 index38 alt2">39</=
div><div class=3D"line number40 index39 alt1">40</div><div class=3D"line nu=
mber41 index40 alt2">41</div><div class=3D"line number42 index41 alt1">42</=
div><div class=3D"line number43 index42 alt2">43</div><div class=3D"line nu=
mber44 index43 alt1">44</div></td><td class=3D"code"><div class=3D"containe=
r"><div class=3D"line number1 index0 alt2"><code class=3D"js plain">bindRea=
dy: </code><code class=3D"js keyword">function</code><code class=3D"js plai=
n">() {</code></div><div class=3D"line number2 index1 alt1"><code class=3D"=
js spaces">&nbsp;&nbsp;</code><code class=3D"js keyword">if</code> <code cl=
ass=3D"js plain">( readyList ) {</code></div><div class=3D"line number3 ind=
ex2 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code cl=
ass=3D"js keyword">return</code><code class=3D"js plain">;</code></div><div=
 class=3D"line number4 index3 alt1"><code class=3D"js spaces">&nbsp;&nbsp;<=
/code><code class=3D"js plain">}</code></div><div class=3D"line number5 ind=
ex4 alt2">&nbsp;</div><div class=3D"line number6 index5 alt1"><code class=
=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js plain">readyList =3D jQ=
uery.Callbacks( </code><code class=3D"js string">"once memory"</code> <code=
 class=3D"js plain">);</code></div><div class=3D"line number7 index6 alt2">=
&nbsp;</div><div class=3D"line number8 index7 alt1"><code class=3D"js space=
s">&nbsp;&nbsp;</code><code class=3D"js comments">// Catch cases where $(do=
cument).ready() is called after the</code></div><div class=3D"line number9 =
index8 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js=
 comments">// browser event has already occurred.</code></div><div class=3D=
"line number10 index9 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><c=
ode class=3D"js keyword">if</code> <code class=3D"js plain">( document.read=
yState =3D=3D=3D </code><code class=3D"js string">"complete"</code> <code c=
lass=3D"js plain">) {</code></div><div class=3D"line number11 index10 alt2"=
><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js=
 comments">// Handle it asynchronously to allow scripts the opportunity to =
delay ready</code></div><div class=3D"line number12 index11 alt1"><code cla=
ss=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">=
return</code> <code class=3D"js plain">setTimeout( jQuery.ready, 1 );</code=
></div><div class=3D"line number13 index12 alt2"><code class=3D"js spaces">=
&nbsp;&nbsp;</code><code class=3D"js plain">}</code></div><div class=3D"lin=
e number14 index13 alt1">&nbsp;</div><div class=3D"line number15 index14 al=
t2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js comments=
">// Mozilla, Opera and webkit support this event</code></div><div class=3D=
"line number16 index15 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><=
code class=3D"js keyword">if</code> <code class=3D"js plain">( document.add=
EventListener ) {</code></div><div class=3D"line number17 index16 alt2"><co=
de class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js com=
ments">// Use the handy event callback</code></div><div class=3D"line numbe=
r18 index17 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>=
<code class=3D"js plain">document.addEventListener( </code><code class=3D"j=
s string">"DOMContentLoaded"</code><code class=3D"js plain">, DOMContentLoa=
ded, </code><code class=3D"js keyword">false</code> <code class=3D"js plain=
">);</code></div><div class=3D"line number19 index18 alt2">&nbsp;</div><div=
 class=3D"line number20 index19 alt1"><code class=3D"js spaces">&nbsp;&nbsp=
;&nbsp;&nbsp;</code><code class=3D"js comments">// A fallback to window.onl=
oad, that will always work</code></div><div class=3D"line number21 index20 =
alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js plain">window.addEventListener( </code><code class=3D"js string">"lo=
ad"</code><code class=3D"js plain">, jQuery.ready, </code><code class=3D"js=
 keyword">false</code> <code class=3D"js plain">);</code></div><div class=
=3D"line number22 index21 alt1">&nbsp;</div><div class=3D"line number23 ind=
ex22 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js c=
omments">// If IE event model is used</code></div><div class=3D"line number=
24 index23 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=
=3D"js plain">} </code><code class=3D"js keyword">else</code> <code class=
=3D"js keyword">if</code> <code class=3D"js plain">( document.attachEvent )=
 {</code></div><div class=3D"line number25 index24 alt2"><code class=3D"js =
spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// ensur=
e firing before onload,</code></div><div class=3D"line number26 index25 alt=
1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"=
js comments">// maybe late but safe also for iframes</code></div><div class=
=3D"line number27 index26 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp=
;&nbsp;</code><code class=3D"js plain">document.attachEvent( </code><code c=
lass=3D"js string">"onreadystatechange"</code><code class=3D"js plain">, DO=
MContentLoaded );</code></div><div class=3D"line number28 index27 alt1">&nb=
sp;</div><div class=3D"line number29 index28 alt2"><code class=3D"js spaces=
">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// A fallback =
to window.onload, that will always work</code></div><div class=3D"line numb=
er30 index29 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code=
><code class=3D"js plain">window.attachEvent( </code><code class=3D"js stri=
ng">"onload"</code><code class=3D"js plain">, jQuery.ready );</code></div><=
div class=3D"line number31 index30 alt2">&nbsp;</div><div class=3D"line num=
ber32 index31 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</cod=
e><code class=3D"js comments">// If IE and not a frame</code></div><div cla=
ss=3D"line number33 index32 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nb=
sp;&nbsp;</code><code class=3D"js comments">// continually check to see if =
the document is ready</code></div><div class=3D"line number34 index33 alt1"=
><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js=
 keyword">var</code> <code class=3D"js plain">toplevel =3D </code><code cla=
ss=3D"js keyword">false</code><code class=3D"js plain">;</code></div><div c=
lass=3D"line number35 index34 alt2">&nbsp;</div><div class=3D"line number36=
 index35 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><co=
de class=3D"js keyword">try</code> <code class=3D"js plain">{</code></div><=
div class=3D"line number37 index36 alt2"><code class=3D"js spaces">&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">toplevel =3D wi=
ndow.frameElement =3D=3D </code><code class=3D"js keyword">null</code><code=
 class=3D"js plain">;</code></div><div class=3D"line number38 index37 alt1"=
><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js=
 plain">} </code><code class=3D"js keyword">catch</code><code class=3D"js p=
lain">(e) {}</code></div><div class=3D"line number39 index38 alt2">&nbsp;</=
div><div class=3D"line number40 index39 alt1"><code class=3D"js spaces">&nb=
sp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">if</code> <code clas=
s=3D"js plain">( document.documentElement.doScroll &amp;&amp; toplevel ) {<=
/code></div><div class=3D"line number41 index40 alt2"><code class=3D"js spa=
ces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">do=
ScrollCheck();</code></div><div class=3D"line number42 index41 alt1"><code =
class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain"=
>}</code></div><div class=3D"line number43 index42 alt2"><code class=3D"js =
spaces">&nbsp;&nbsp;</code><code class=3D"js plain">}</code></div><div clas=
s=3D"line number44 index43 alt1"><code class=3D"js plain">},</code></div></=
div></td></tr></tbody></table></div></div>

<p>Whilst not directly used in jQuery core, some developers may also be fam=
iliar with the concept of LazyLoading via plugins such as <a href=3D"http:/=
/www.appelsiini.net/projects/lazyload">this</a>.</p>

<p>LazyLoading is effectively the same as Lazy initialization and is a tech=
nique whereby additional data on a page is loaded when needed (e.g. when a =
user has scrolled to the end of the page). In recent years this pattern has=
 become quite prominent and can be currently be found in both the Twitter a=
nd Facebook UIs.</p>

<p>&nbsp;</p>



<h2 id=3D"proxypatternjquery">
  <a href=3D"https://addyosmani.com/resources/essentialjsdesignpatterns/boo=
k/#proxypatternjquery" class=3D"subhead-link">#</a>
  The Proxy Pattern
</h2>

<p>There are times when it is necessary for us to control the access and co=
ntext behind an object and this is where the Proxy pattern can be useful.</=
p>

<p>It can help us control when an expensive object should be instantiated, =
provide advanced ways to reference the object or modify the object to funct=
ion a particular way in specific contexts. </p>

<p>In jQuery core, a <code>jQuery.proxy()</code> method exists which accept=
s as input a function and returns a new one which will always have a specif=
ic context. This ensures that the value of <code>this</code> within a funct=
ion is the value we expect.</p>

<p>An example of where this is useful is when we're making use of timers wi=
thin a <code>click</code> event handler. Imagine we have the following hand=
ler prior to adding any timers:</p>

<div><div id=3D"highlighter_583132" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div></td>=
<td class=3D"code"><div class=3D"container"><div class=3D"line number1 inde=
x0 alt2"><code class=3D"js plain">$( </code><code class=3D"js string">"butt=
on"</code> <code class=3D"js plain">).on( </code><code class=3D"js string">=
"click"</code><code class=3D"js plain">, </code><code class=3D"js keyword">=
function</code> <code class=3D"js plain">() {</code></div><div class=3D"lin=
e number2 index1 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><code c=
lass=3D"js comments">// Within this function, "this" refers to the element =
that was clicked</code></div><div class=3D"line number3 index2 alt2"><code =
class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js plain">$( </code><=
code class=3D"js keyword">this</code> <code class=3D"js plain">).addClass( =
</code><code class=3D"js string">"active"</code> <code class=3D"js plain">)=
;</code></div><div class=3D"line number4 index3 alt1"><code class=3D"js pla=
in">});</code></div></div></td></tr></tbody></table></div></div>

<p>If we wished to add a hard delay before the <code>active</code> class wa=
s added, we <em>could</em> use <code>setTimeout()</code> to achieve this. U=
nfortunately there is a small problem with this solution: whatever function=
 is passed to <code>setTimeout()</code> will have a different value for <co=
de>this</code> within that function. It will instead refer to the <code>win=
dow</code> object, which is not what we desire.</p>

<div><div id=3D"highlighter_724498" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div></td><td class=
=3D"code"><div class=3D"container"><div class=3D"line number1 index0 alt2">=
<code class=3D"js plain">$( </code><code class=3D"js string">"button"</code=
> <code class=3D"js plain">).on( </code><code class=3D"js string">"click"</=
code><code class=3D"js plain">, </code><code class=3D"js keyword">function<=
/code> <code class=3D"js plain">() {</code></div><div class=3D"line number2=
 index1 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"j=
s plain">setTimeout(</code><code class=3D"js keyword">function</code> <code=
 class=3D"js plain">() {</code></div><div class=3D"line number3 index2 alt2=
"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"j=
s comments">// "this" doesn't refer to our element!</code></div><div class=
=3D"line number4 index3 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&=
nbsp;</code><code class=3D"js comments">// It refers to window</code></div>=
<div class=3D"line number5 index4 alt2"><code class=3D"js spaces">&nbsp;&nb=
sp;&nbsp;&nbsp;</code><code class=3D"js plain">$( </code><code class=3D"js =
keyword">this</code> <code class=3D"js plain">).addClass( </code><code clas=
s=3D"js string">"active"</code> <code class=3D"js plain">);</code></div><di=
v class=3D"line number6 index5 alt1"><code class=3D"js spaces">&nbsp;&nbsp;=
</code><code class=3D"js plain">});</code></div><div class=3D"line number7 =
index6 alt2"><code class=3D"js plain">});</code></div></div></td></tr></tbo=
dy></table></div></div>

<p>To work around this problem, we can use <code>jQuery.proxy()</code> to i=
mplement a type of proxy pattern. By calling it with the function and value=
 we would like assigned to <code>this</code> it will actually return a func=
tion that retains the value we desire within the correct context. Here's ho=
w this would look:</p>

<div><div id=3D"highlighter_307827" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div></td><td class=3D"cod=
e"><div class=3D"container"><div class=3D"line number1 index0 alt2"><code c=
lass=3D"js plain">$( </code><code class=3D"js string">"button"</code> <code=
 class=3D"js plain">).on( </code><code class=3D"js string">"click"</code><c=
ode class=3D"js plain">, </code><code class=3D"js keyword">function</code> =
<code class=3D"js plain">() {</code></div><div class=3D"line number2 index1=
 alt1">&nbsp;</div><div class=3D"line number3 index2 alt2"><code class=3D"j=
s spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">setTimeou=
t( $.proxy( </code><code class=3D"js keyword">function</code> <code class=
=3D"js plain">() {</code></div><div class=3D"line number4 index3 alt1"><cod=
e class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</cod=
e><code class=3D"js comments">// "this" now refers to our element as we wan=
ted</code></div><div class=3D"line number5 index4 alt2"><code class=3D"js s=
paces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js plain">$( </code><code class=3D"js keyword">this</code> <code class=
=3D"js plain">).addClass( </code><code class=3D"js string">"active"</code> =
<code class=3D"js plain">);</code></div><div class=3D"line number6 index5 a=
lt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js plain">}, </code><code class=3D"js keyword">this</code><code class=
=3D"js plain">), 500);</code></div><div class=3D"line number7 index6 alt2">=
&nbsp;</div><div class=3D"line number8 index7 alt1"><code class=3D"js space=
s">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// the last "=
this" we're passing tells $.proxy() that our DOM element</code></div><div c=
lass=3D"line number9 index8 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nb=
sp;&nbsp;</code><code class=3D"js comments">// is the value we want "this" =
to refer to.</code></div><div class=3D"line number10 index9 alt1"><code cla=
ss=3D"js plain">});</code></div></div></td></tr></tbody></table></div></div=
>

<p>jQuery's implementation of <code>jQuery.proxy()</code> can be found belo=
w:</p>

<div><div id=3D"highlighter_843181" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</=
div><div class=3D"line number19 index18 alt2">19</div><div class=3D"line nu=
mber20 index19 alt1">20</div><div class=3D"line number21 index20 alt2">21</=
div><div class=3D"line number22 index21 alt1">22</div><div class=3D"line nu=
mber23 index22 alt2">23</div><div class=3D"line number24 index23 alt1">24</=
div><div class=3D"line number25 index24 alt2">25</div><div class=3D"line nu=
mber26 index25 alt1">26</div></td><td class=3D"code"><div class=3D"containe=
r"><div class=3D"line number1 index0 alt2"><code class=3D"js comments">// B=
ind a function to a context, optionally partially applying any</code></div>=
<div class=3D"line number2 index1 alt1"><code class=3D"js comments">// argu=
ments.</code></div><div class=3D"line number3 index2 alt2"><code class=3D"j=
s plain">proxy: </code><code class=3D"js keyword">function</code><code clas=
s=3D"js plain">( fn, context ) {</code></div><div class=3D"line number4 ind=
ex3 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js ke=
yword">if</code> <code class=3D"js plain">( </code><code class=3D"js keywor=
d">typeof</code> <code class=3D"js plain">context =3D=3D=3D </code><code cl=
ass=3D"js string">"string"</code> <code class=3D"js plain">) {</code></div>=
<div class=3D"line number5 index4 alt2"><code class=3D"js spaces">&nbsp;&nb=
sp;&nbsp;&nbsp;</code><code class=3D"js keyword">var</code> <code class=3D"=
js plain">tmp =3D fn[ context ];</code></div><div class=3D"line number6 ind=
ex5 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code cl=
ass=3D"js plain">context =3D fn;</code></div><div class=3D"line number7 ind=
ex6 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code cl=
ass=3D"js plain">fn =3D tmp;</code></div><div class=3D"line number8 index7 =
alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js plain"=
>}</code></div><div class=3D"line number9 index8 alt2">&nbsp;</div><div cla=
ss=3D"line number10 index9 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</co=
de><code class=3D"js comments">// Quick check to determine if target is cal=
lable, in the spec</code></div><div class=3D"line number11 index10 alt2"><c=
ode class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js comments">// t=
his throws a TypeError, but we will just return undefined.</code></div><div=
 class=3D"line number12 index11 alt1"><code class=3D"js spaces">&nbsp;&nbsp=
;</code><code class=3D"js keyword">if</code> <code class=3D"js plain">( !jQ=
uery.isFunction( fn ) ) {</code></div><div class=3D"line number13 index12 a=
lt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js keyword">return</code> <code class=3D"js plain">undefined;</code></d=
iv><div class=3D"line number14 index13 alt1"><code class=3D"js spaces">&nbs=
p;&nbsp;</code><code class=3D"js plain">}</code></div><div class=3D"line nu=
mber15 index14 alt2">&nbsp;</div><div class=3D"line number16 index15 alt1">=
<code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js comments">//=
 Simulated bind</code></div><div class=3D"line number17 index16 alt2"><code=
 class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js keyword">var</cod=
e> <code class=3D"js plain">args =3D slice.call( arguments, 2 ),</code></di=
v><div class=3D"line number18 index17 alt1"><code class=3D"js spaces">&nbsp=
;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">proxy =3D </code><code c=
lass=3D"js keyword">function</code><code class=3D"js plain">() {</code></di=
v><div class=3D"line number19 index18 alt2"><code class=3D"js spaces">&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">return</co=
de> <code class=3D"js plain">fn.apply( context, args.concat( slice.call( ar=
guments ) ) );</code></div><div class=3D"line number20 index19 alt1"><code =
class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain"=
>};</code></div><div class=3D"line number21 index20 alt2">&nbsp;</div><div =
class=3D"line number22 index21 alt1"><code class=3D"js spaces">&nbsp;&nbsp;=
</code><code class=3D"js comments">// Set the guid of unique handler to the=
 same of original handler, so it can be removed</code></div><div class=3D"l=
ine number23 index22 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><co=
de class=3D"js plain">proxy.guid =3D fn.guid =3D fn.guid || proxy.guid || j=
Query.guid++;</code></div><div class=3D"line number24 index23 alt1">&nbsp;<=
/div><div class=3D"line number25 index24 alt2"><code class=3D"js spaces">&n=
bsp;&nbsp;</code><code class=3D"js keyword">return</code> <code class=3D"js=
 plain">proxy;</code></div><div class=3D"line number26 index25 alt1"><code =
class=3D"js plain">}</code></div></div></td></tr></tbody></table></div></di=
v>



<h2 id=3D"builderpatternjquery">
  <a href=3D"https://addyosmani.com/resources/essentialjsdesignpatterns/boo=
k/#builderpatternjquery" class=3D"subhead-link">#</a>
  The Builder Pattern
</h2>

<p>When working with the DOM, we often want to construct new elements dynam=
ically - a process which can increase in complexity depending on the final =
markup, attributes and properties we wish our constructed elements to conta=
in.</p>

<p>Complex elements require special care when being defined, especially if =
we want the flexibility to either literally define the final markup for our=
 elements (which can get messy) or take a more readable object-oriented rou=
te instead. Having a mechanism for building our complex DOM objects that is=
 independent from the objects themselves gives us this flexibility and that=
 is exactly what the Builder pattern provides.</p>

<p>Builders allow us to construct complex objects by only specifying the ty=
pe and content of the object, shielding us from the process of creating or =
representing the object explicitly.</p>

<p>The jQuery dollar sign allows us to do just this as it provides a number=
 of different means for dynamically building new jQuery (and DOM) objects, =
by either passing in the complete markup for an element, partial markup and=
 content or using the jQuery for construction:</p>


<div><div id=3D"highlighter_678578" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div></td><td class=3D"code"><div class=3D"container"><div class=3D"line nu=
mber1 index0 alt2"><code class=3D"js plain">$( </code><code class=3D"js str=
ing">'&lt;div class=3D"foo"&gt;bar&lt;/div&gt;'</code> <code class=3D"js pl=
ain">);</code></div><div class=3D"line number2 index1 alt1">&nbsp;</div><di=
v class=3D"line number3 index2 alt2"><code class=3D"js plain">$( </code><co=
de class=3D"js string">'&lt;p id=3D"test"&gt;foo &lt;em&gt;bar&lt;/em&gt;&l=
t;/p&gt;'</code><code class=3D"js plain">).appendTo(</code><code class=3D"j=
s string">"body"</code><code class=3D"js plain">);</code></div><div class=
=3D"line number4 index3 alt1">&nbsp;</div><div class=3D"line number5 index4=
 alt2"><code class=3D"js keyword">var</code> <code class=3D"js plain">newPa=
ragraph =3D $( </code><code class=3D"js string">"&lt;p /&gt;"</code> <code =
class=3D"js plain">).text( </code><code class=3D"js string">"Hello world"</=
code> <code class=3D"js plain">);</code></div><div class=3D"line number6 in=
dex5 alt1">&nbsp;</div><div class=3D"line number7 index6 alt2"><code class=
=3D"js plain">$( </code><code class=3D"js string">"&lt;input /&gt;"</code> =
<code class=3D"js plain">)</code></div><div class=3D"line number8 index7 al=
t1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><c=
ode class=3D"js plain">.attr({ </code><code class=3D"js string">"type"</cod=
e><code class=3D"js plain">: </code><code class=3D"js string">"text"</code>=
<code class=3D"js plain">, </code><code class=3D"js string">"id"</code><cod=
e class=3D"js plain">:</code><code class=3D"js string">"sample"</code><code=
 class=3D"js plain">})</code></div><div class=3D"line number9 index8 alt2">=
<code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code =
class=3D"js plain">.appendTo(</code><code class=3D"js string">"#container"<=
/code><code class=3D"js plain">);</code></div></div></td></tr></tbody></tab=
le></div></div>
<p></p>
<p>&nbsp;</p>

<p>Below is a snippet from jQuery core's internal <code>jQuery.prototype</c=
ode> method which assists with the construction of jQuery objects from mark=
up passed to the <code>jQuery()</code> selector. Regardless of whether or n=
ot <code>document.createElement</code> is used to create a new element, a r=
eference to the element (found or created) is injected into the returned ob=
ject so further methods such as <code>.attr()</code> can be easily used on =
it right after.</p>

<div><div id=3D"highlighter_362533" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</=
div><div class=3D"line number19 index18 alt2">19</div><div class=3D"line nu=
mber20 index19 alt1">20</div><div class=3D"line number21 index20 alt2">21</=
div><div class=3D"line number22 index21 alt1">22</div><div class=3D"line nu=
mber23 index22 alt2">23</div><div class=3D"line number24 index23 alt1">24</=
div></td><td class=3D"code"><div class=3D"container"><div class=3D"line num=
ber1 index0 alt2"><code class=3D"js comments">// HANDLE: $(html) -&gt; $(ar=
ray)</code></div><div class=3D"line number2 index1 alt1"><code class=3D"js =
spaces">&nbsp;&nbsp;</code><code class=3D"js keyword">if</code> <code class=
=3D"js plain">( match[1] ) {</code></div><div class=3D"line number3 index2 =
alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js plain">context =3D context </code><code class=3D"js keyword">instanc=
eof</code> <code class=3D"js plain">jQuery ? context[0] : context;</code></=
div><div class=3D"line number4 index3 alt1"><code class=3D"js spaces">&nbsp=
;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">doc =3D ( context ? cont=
ext.ownerDocument || context : document );</code></div><div class=3D"line n=
umber5 index4 alt2">&nbsp;</div><div class=3D"line number6 index5 alt1"><co=
de class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js com=
ments">// If a single string is passed in and it's a single tag</code></div=
><div class=3D"line number7 index6 alt2"><code class=3D"js spaces">&nbsp;&n=
bsp;&nbsp;&nbsp;</code><code class=3D"js comments">// just do a createEleme=
nt and skip the rest</code></div><div class=3D"line number8 index7 alt1"><c=
ode class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js pl=
ain">ret =3D rsingleTag.exec( selector );</code></div><div class=3D"line nu=
mber9 index8 alt2">&nbsp;</div><div class=3D"line number10 index9 alt1"><co=
de class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js key=
word">if</code> <code class=3D"js plain">( ret ) {</code></div><div class=
=3D"line number11 index10 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">if</code> <code class=
=3D"js plain">( jQuery.isPlainObject( context ) ) {</code></div><div class=
=3D"line number12 index11 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">selector =3D=
 [ document.createElement( ret[1] ) ];</code></div><div class=3D"line numbe=
r13 index12 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">jQuery.fn.attr.call( selec=
tor, context, </code><code class=3D"js keyword">true</code> <code class=3D"=
js plain">);</code></div><div class=3D"line number14 index13 alt1">&nbsp;</=
div><div class=3D"line number15 index14 alt2"><code class=3D"js spaces">&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">} </code><=
code class=3D"js keyword">else</code> <code class=3D"js plain">{</code></di=
v><div class=3D"line number16 index15 alt1"><code class=3D"js spaces">&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">=
selector =3D [ doc.createElement( ret[1] ) ];</code></div><div class=3D"lin=
e number17 index16 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;</code><code class=3D"js plain">}</code></div><div class=3D"lin=
e number18 index17 alt1">&nbsp;</div><div class=3D"line number19 index18 al=
t2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D=
"js plain">} </code><code class=3D"js keyword">else</code> <code class=3D"j=
s plain">{</code></div><div class=3D"line number20 index19 alt1"><code clas=
s=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"j=
s plain">ret =3D jQuery.buildFragment( [ match[1] ], [ doc ] );</code></div=
><div class=3D"line number21 index20 alt2"><code class=3D"js spaces">&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">selector =3D =
( ret.cacheable ? jQuery.clone(ret.fragment) : ret.fragment ).childNodes;</=
code></div><div class=3D"line number22 index21 alt1"><code class=3D"js spac=
es">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">}</code></div><=
div class=3D"line number23 index22 alt2">&nbsp;</div><div class=3D"line num=
ber24 index23 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</cod=
e><code class=3D"js keyword">return</code> <code class=3D"js plain">jQuery.=
merge( </code><code class=3D"js keyword">this</code><code class=3D"js plain=
">, selector );</code></div></div></td></tr></tbody></table></div></div>



<p>&nbsp;</p>
<h1 id=3D"jquerypluginpatterns">
  <a href=3D"https://addyosmani.com/resources/essentialjsdesignpatterns/boo=
k/#jquerypluginpatterns" class=3D"subhead-link">#</a>
  jQuery Plugin Design Patterns
</h1>


<p>jQuery plugin development has evolved over the past few years. We no lon=
ger have just one way to write plugins, but many. In reality, certain plugi=
n design patterns might work better for a particular problem or component t=
han others.</p>

<p>Some developers may wish to use the jQuery UI <a href=3D"http://ajpiano.=
com/widgetfactory/#slide1">widget factory</a>; it=E2=80=99s great for compl=
ex, flexible UI components. Some may not.</p>

<p>Some might like to structure their plugins more like modules (similar to=
 the module pattern) or use a more modern module format such as AMD.</p>

<p>Some might want their plugins to harness the power of prototypal inherit=
ance. Others may wish to use custom events or Publish/Subscribe to communic=
ate from plugins to the rest of their app. And so on.</p>

<p>I began to think about plugin patterns after noticing a number of effort=
s to create a one-size-fits-all jQuery plugin boilerplate. While such a boi=
lerplate is a great idea in theory, the reality is that we rarely write plu=
gins in one fixed way, using a single pattern all the time.</p>

<p>Let us assume that we=E2=80=99ve tried our hand at writing our own jQuer=
y plugins at some point and we=E2=80=99re comfortable putting together some=
thing that works. It=E2=80=99s functional. It does what it needs to do, but=
 perhaps we feel it could be structured better. Maybe it could be more flex=
ible or could be designed to address more of the issues developers commonly=
 run into. If this sounds familiar, then you might find this chapter useful=
. In it, we're going to explore a number of jQuery plugin patterns that hav=
e worked well for other developers in the wild.</p>


<p><strong>Note:</strong> This chapter is targeted at intermediate to advan=
ced developers, although we will briefly review some jQuery plugin fundamen=
tals to begin.

</p><p>If you don=E2=80=99t feel quite ready for this just yet, I=E2=80=99m=
 happy to recommend the official jQuery <a href=3D"http://docs.jquery.com/P=
lugins/Authoring">Plugins/Authoring</a> guide, Ben Alman=E2=80=99s <a href=
=3D"http://msdn.microsoft.com/en-us/scriptjunkie/ff696759">plugin style gui=
de</a> and Remy Sharp=E2=80=99s =E2=80=9C<a href=3D"http://remysharp.com/20=
10/06/03/signs-of-a-poorly-written-jquery-plugin/">Signs of a Poorly Writte=
n jQuery Plugin</a>.=E2=80=9D as reading material prior to starting this se=
ction.</p>

<h3>Patterns</h3>

<p>jQuery plugins have few concrete rules, which is one of the reasons for =
the incredible diversity in how they are implemented across the community. =
At the most basic level, we can write a plugin simply by adding a new funct=
ion property to jQuery=E2=80=99s <code>jQuery.fn</code> object, as follows:=
</p>

<div><div id=3D"highlighter_429672" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div></td><td class=3D"code"><div class=3D"container"><di=
v class=3D"line number1 index0 alt2"><code class=3D"js plain">$.fn.myPlugin=
Name =3D </code><code class=3D"js keyword">function</code> <code class=3D"j=
s plain">() {</code></div><div class=3D"line number2 index1 alt1"><code cla=
ss=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments"=
>// our plugin logic</code></div><div class=3D"line number3 index2 alt2"><c=
ode class=3D"js plain">};</code></div></div></td></tr></tbody></table></div=
></div>

<p>This is great for compactness, but the following would be a better found=
ation to build on:</p>

<div><div id=3D"highlighter_197600" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div></td><td class=3D"code"><div clas=
s=3D"container"><div class=3D"line number1 index0 alt2"><code class=3D"js p=
lain">(</code><code class=3D"js keyword">function</code><code class=3D"js p=
lain">( $ ){</code></div><div class=3D"line number2 index1 alt1"><code clas=
s=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js plain">$.fn.myPluginNa=
me =3D </code><code class=3D"js keyword">function</code> <code class=3D"js =
plain">() {</code></div><div class=3D"line number3 index2 alt2"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">/=
/ our plugin logic</code></div><div class=3D"line number4 index3 alt1"><cod=
e class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js plain">};</code>=
</div><div class=3D"line number5 index4 alt2"><code class=3D"js plain">})( =
jQuery );</code></div></div></td></tr></tbody></table></div></div>

<p>Here, we=E2=80=99ve wrapped our plugin logic in an anonymous function. T=
o ensure that our use of the <code>$</code> sign as a shorthand creates no =
conflicts between jQuery and other JavaScript libraries, we simply pass it =
to this closure, which maps it to the dollar sign. This ensures that it can=
=E2=80=99t be affected by anything outside of its scope of execution.</p>

<p>An alternative way to write this pattern would be to use <code>jQuery.ex=
tend()</code>, which enables us to define multiple functions at once and wh=
ich sometimes make more sense semantically:</p>

<div><div id=3D"highlighter_474042" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div></td><td class=
=3D"code"><div class=3D"container"><div class=3D"line number1 index0 alt2">=
<code class=3D"js plain">(</code><code class=3D"js keyword">function</code>=
<code class=3D"js plain">( $ ){</code></div><div class=3D"line number2 inde=
x1 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code cla=
ss=3D"js plain">$.extend($.fn, {</code></div><div class=3D"line number3 ind=
ex2 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;</code><code class=3D"js plain">myplugin: </code><code class=3D"js=
 keyword">function</code><code class=3D"js plain">(){</code></div><div clas=
s=3D"line number4 index3 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D=
"js comments">// your plugin logic</code></div><div class=3D"line number5 i=
ndex4 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;</code><code class=3D"js plain">}</code></div><div class=3D"line=
 number6 index5 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</c=
ode><code class=3D"js plain">});</code></div><div class=3D"line number7 ind=
ex6 alt2"><code class=3D"js plain">})( jQuery );</code></div></div></td></t=
r></tbody></table></div></div>

<p>We have now reviewed some jQuery plugin fundamentals, but a lot more cou=
ld be done to take this further. <em>A Lightweight Start</em> is the first =
complete plugin design pattern we=E2=80=99ll be exploring and it covers som=
e best practices that we can use for basic everyday plugin development, tak=
ing into account common gotchas worth applying.</p>

<h4>Note</h4>

<p>While most of the patterns below will be explained, I recommend reading =
through the comments in the code, because they will offer more insight into=
 why certain best practices are applied. </p>

<p>I should also mention that none of this would be possible without the pr=
evious work, input and advice of other members of the jQuery community. I=
=E2=80=99ve listed them inline with each pattern so that one can read up on=
 their individual work if interested.</p>

<p>&nbsp;</p>
<p>&nbsp;</p>
<h3>'A Lightweight Start' Pattern</h3>

<p>Let=E2=80=99s begin our deeper look at plugin patterns with something ba=
sic that follows best practices (including those in the jQuery plugin-autho=
ring guide). This pattern is ideal for developers who are either new to plu=
gin development or who just want to achieve something simple (such as a uti=
lity plugin). <em>A Lightweight Start</em> uses the following:</p>

<ul>
<li>Common best practices such as a semi-colon placed before the functions =
invocation (we'll go through why in the comments below)</li>

<li><code>window, document, undefined</code> passed in as arguments.</li>

<li>A basic defaults object.</li>

<li>A simple plugin constructor for logic related to the initial creation a=
nd the assignment of the element to work with.</li>

<li>Extending the options with defaults.</li>

<li>A lightweight wrapper around the constructor, which helps to avoid issu=
es such as multiple instantiations.</li>

<li>Adherence to the jQuery core style guidelines for maximized readability=
.</li>
</ul>

<div><div id=3D"highlighter_128758" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</=
div><div class=3D"line number19 index18 alt2">19</div><div class=3D"line nu=
mber20 index19 alt1">20</div><div class=3D"line number21 index20 alt2">21</=
div><div class=3D"line number22 index21 alt1">22</div><div class=3D"line nu=
mber23 index22 alt2">23</div><div class=3D"line number24 index23 alt1">24</=
div><div class=3D"line number25 index24 alt2">25</div><div class=3D"line nu=
mber26 index25 alt1">26</div><div class=3D"line number27 index26 alt2">27</=
div><div class=3D"line number28 index27 alt1">28</div><div class=3D"line nu=
mber29 index28 alt2">29</div><div class=3D"line number30 index29 alt1">30</=
div><div class=3D"line number31 index30 alt2">31</div><div class=3D"line nu=
mber32 index31 alt1">32</div><div class=3D"line number33 index32 alt2">33</=
div><div class=3D"line number34 index33 alt1">34</div><div class=3D"line nu=
mber35 index34 alt2">35</div><div class=3D"line number36 index35 alt1">36</=
div><div class=3D"line number37 index36 alt2">37</div><div class=3D"line nu=
mber38 index37 alt1">38</div><div class=3D"line number39 index38 alt2">39</=
div><div class=3D"line number40 index39 alt1">40</div><div class=3D"line nu=
mber41 index40 alt2">41</div><div class=3D"line number42 index41 alt1">42</=
div><div class=3D"line number43 index42 alt2">43</div><div class=3D"line nu=
mber44 index43 alt1">44</div><div class=3D"line number45 index44 alt2">45</=
div><div class=3D"line number46 index45 alt1">46</div><div class=3D"line nu=
mber47 index46 alt2">47</div><div class=3D"line number48 index47 alt1">48</=
div><div class=3D"line number49 index48 alt2">49</div><div class=3D"line nu=
mber50 index49 alt1">50</div><div class=3D"line number51 index50 alt2">51</=
div><div class=3D"line number52 index51 alt1">52</div><div class=3D"line nu=
mber53 index52 alt2">53</div><div class=3D"line number54 index53 alt1">54</=
div><div class=3D"line number55 index54 alt2">55</div><div class=3D"line nu=
mber56 index55 alt1">56</div><div class=3D"line number57 index56 alt2">57</=
div><div class=3D"line number58 index57 alt1">58</div><div class=3D"line nu=
mber59 index58 alt2">59</div><div class=3D"line number60 index59 alt1">60</=
div><div class=3D"line number61 index60 alt2">61</div><div class=3D"line nu=
mber62 index61 alt1">62</div><div class=3D"line number63 index62 alt2">63</=
div><div class=3D"line number64 index63 alt1">64</div><div class=3D"line nu=
mber65 index64 alt2">65</div><div class=3D"line number66 index65 alt1">66</=
div><div class=3D"line number67 index66 alt2">67</div><div class=3D"line nu=
mber68 index67 alt1">68</div></td><td class=3D"code"><div class=3D"containe=
r"><div class=3D"line number1 index0 alt2"><code class=3D"js comments">/*!<=
/code></div><div class=3D"line number2 index1 alt1"><code class=3D"js space=
s">&nbsp;</code><code class=3D"js comments">* jQuery lightweight plugin boi=
lerplate</code></div><div class=3D"line number3 index2 alt2"><code class=3D=
"js spaces">&nbsp;</code><code class=3D"js comments">* Original author: @aj=
piano</code></div><div class=3D"line number4 index3 alt1"><code class=3D"js=
 spaces">&nbsp;</code><code class=3D"js comments">* Further changes, commen=
ts: @addyosmani</code></div><div class=3D"line number5 index4 alt2"><code c=
lass=3D"js spaces">&nbsp;</code><code class=3D"js comments">* Licensed unde=
r the MIT license</code></div><div class=3D"line number6 index5 alt1"><code=
 class=3D"js spaces">&nbsp;</code><code class=3D"js comments">*/</code></di=
v><div class=3D"line number7 index6 alt2">&nbsp;</div><div class=3D"line nu=
mber8 index7 alt1">&nbsp;</div><div class=3D"line number9 index8 alt2"><cod=
e class=3D"js comments">// the semi-colon before the function invocation is=
 a safety</code></div><div class=3D"line number10 index9 alt1"><code class=
=3D"js comments">// net against concatenated scripts and/or other plugins</=
code></div><div class=3D"line number11 index10 alt2"><code class=3D"js comm=
ents">// that are not closed properly.</code></div><div class=3D"line numbe=
r12 index11 alt1"><code class=3D"js plain">;(</code><code class=3D"js keywo=
rd">function</code> <code class=3D"js plain">( $, window, document, undefin=
ed ) {</code></div><div class=3D"line number13 index12 alt2">&nbsp;</div><d=
iv class=3D"line number14 index13 alt1"><code class=3D"js spaces">&nbsp;&nb=
sp;&nbsp;&nbsp;</code><code class=3D"js comments">// undefined is used here=
 as the undefined global</code></div><div class=3D"line number15 index14 al=
t2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D=
"js comments">// variable in ECMAScript 3 and is mutable (i.e. it can</code=
></div><div class=3D"line number16 index15 alt1"><code class=3D"js spaces">=
&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// be changed by=
 someone else). undefined isn't really</code></div><div class=3D"line numbe=
r17 index16 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code>=
<code class=3D"js comments">// being passed in so we can ensure that its va=
lue is</code></div><div class=3D"line number18 index17 alt1"><code class=3D=
"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// t=
ruly undefined. In ES5, undefined can no longer be</code></div><div class=
=3D"line number19 index18 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp=
;&nbsp;</code><code class=3D"js comments">// modified.</code></div><div cla=
ss=3D"line number20 index19 alt1">&nbsp;</div><div class=3D"line number21 i=
ndex20 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code=
 class=3D"js comments">// window and document are passed through as local</=
code></div><div class=3D"line number22 index21 alt1"><code class=3D"js spac=
es">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// variables=
 rather than as globals, because this (slightly)</code></div><div class=3D"=
line number23 index22 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nb=
sp;</code><code class=3D"js comments">// quickens the resolution process an=
d can be more</code></div><div class=3D"line number24 index23 alt1"><code c=
lass=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comment=
s">// efficiently minified (especially when both are</code></div><div class=
=3D"line number25 index24 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp=
;&nbsp;</code><code class=3D"js comments">// regularly referenced in our pl=
ugin).</code></div><div class=3D"line number26 index25 alt1">&nbsp;</div><d=
iv class=3D"line number27 index26 alt2"><code class=3D"js spaces">&nbsp;&nb=
sp;&nbsp;&nbsp;</code><code class=3D"js comments">// Create the defaults on=
ce</code></div><div class=3D"line number28 index27 alt1"><code class=3D"js =
spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">var</code=
> <code class=3D"js plain">pluginName =3D </code><code class=3D"js string">=
"defaultPluginName"</code><code class=3D"js plain">,</code></div><div class=
=3D"line number29 index28 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">defaults =3D=
 {</code></div><div class=3D"line number30 index29 alt1"><code class=3D"js =
spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;</code><code class=3D"js plain">propertyName: </code><code class=3D"js=
 string">"value"</code></div><div class=3D"line number31 index30 alt2"><cod=
e class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</cod=
e><code class=3D"js plain">};</code></div><div class=3D"line number32 index=
31 alt1">&nbsp;</div><div class=3D"line number33 index32 alt2"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">/=
/ The actual plugin constructor</code></div><div class=3D"line number34 ind=
ex33 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code c=
lass=3D"js keyword">function</code> <code class=3D"js plain">Plugin( elemen=
t, options ) {</code></div><div class=3D"line number35 index34 alt2"><code =
class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>=
<code class=3D"js keyword">this</code><code class=3D"js plain">.element =3D=
 element;</code></div><div class=3D"line number36 index35 alt1">&nbsp;</div=
><div class=3D"line number37 index36 alt2"><code class=3D"js spaces">&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments=
">// jQuery has an extend method that merges the</code></div><div class=3D"=
line number38 index37 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// contents o=
f two or more objects, storing the</code></div><div class=3D"line number39 =
index38 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;</code><code class=3D"js comments">// result in the first obje=
ct. The first object</code></div><div class=3D"line number40 index39 alt1">=
<code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<=
/code><code class=3D"js comments">// is generally empty because we don't wa=
nt to alter</code></div><div class=3D"line number41 index40 alt2"><code cla=
ss=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><co=
de class=3D"js comments">// the default options for future instances of the=
 plugin</code></div><div class=3D"line number42 index41 alt1"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code=
 class=3D"js keyword">this</code><code class=3D"js plain">.options =3D $.ex=
tend( {}, defaults, options) ;</code></div><div class=3D"line number43 inde=
x42 alt2">&nbsp;</div><div class=3D"line number44 index43 alt1"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code=
 class=3D"js keyword">this</code><code class=3D"js plain">._defaults =3D de=
faults;</code></div><div class=3D"line number45 index44 alt2"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code=
 class=3D"js keyword">this</code><code class=3D"js plain">._name =3D plugin=
Name;</code></div><div class=3D"line number46 index45 alt1">&nbsp;</div><di=
v class=3D"line number47 index46 alt2"><code class=3D"js spaces">&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">thi=
s</code><code class=3D"js plain">.init();</code></div><div class=3D"line nu=
mber48 index47 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</co=
de><code class=3D"js plain">}</code></div><div class=3D"line number49 index=
48 alt2">&nbsp;</div><div class=3D"line number50 index49 alt1"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">Plug=
in.prototype.init =3D </code><code class=3D"js keyword">function</code> <co=
de class=3D"js plain">() {</code></div><div class=3D"line number51 index50 =
alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;</code><code class=3D"js comments">// Place initialization logic here<=
/code></div><div class=3D"line number52 index51 alt1"><code class=3D"js spa=
ces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"=
js comments">// We already have access to the DOM element and</code></div><=
div class=3D"line number53 index52 alt2"><code class=3D"js spaces">&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">=
// the options via the instance, e.g. this.element</code></div><div class=
=3D"line number54 index53 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// and th=
is.options</code></div><div class=3D"line number55 index54 alt2"><code clas=
s=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">};<=
/code></div><div class=3D"line number56 index55 alt1">&nbsp;</div><div clas=
s=3D"line number57 index56 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbs=
p;&nbsp;</code><code class=3D"js comments">// A really lightweight plugin w=
rapper around the constructor,</code></div><div class=3D"line number58 inde=
x57 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code cl=
ass=3D"js comments">// preventing against multiple instantiations</code></d=
iv><div class=3D"line number59 index58 alt2"><code class=3D"js spaces">&nbs=
p;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">$.fn[pluginName] =3D </=
code><code class=3D"js keyword">function</code> <code class=3D"js plain">( =
options ) {</code></div><div class=3D"line number60 index59 alt1"><code cla=
ss=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><co=
de class=3D"js keyword">return</code> <code class=3D"js keyword">this</code=
><code class=3D"js plain">.each(</code><code class=3D"js keyword">function<=
/code> <code class=3D"js plain">() {</code></div><div class=3D"line number6=
1 index60 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">if=
</code> <code class=3D"js plain">( !$.data(</code><code class=3D"js keyword=
">this</code><code class=3D"js plain">, </code><code class=3D"js string">"p=
lugin_"</code> <code class=3D"js plain">+ pluginName )) {</code></div><div =
class=3D"line number62 index61 alt1"><code class=3D"js spaces">&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;</code><code class=3D"js plain">$.data( </code><code class=3D"js k=
eyword">this</code><code class=3D"js plain">, </code><code class=3D"js stri=
ng">"plugin_"</code> <code class=3D"js plain">+ pluginName,</code></div><di=
v class=3D"line number63 index62 alt2"><code class=3D"js spaces">&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;</code><code class=3D"js keyword">new</code> <code class=3D"js p=
lain">Plugin( </code><code class=3D"js keyword">this</code><code class=3D"j=
s plain">, options ));</code></div><div class=3D"line number64 index63 alt1=
"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">}</code></div><div=
 class=3D"line number65 index64 alt2"><code class=3D"js spaces">&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">});</c=
ode></div><div class=3D"line number66 index65 alt1"><code class=3D"js space=
s">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">}</code></div><d=
iv class=3D"line number67 index66 alt2">&nbsp;</div><div class=3D"line numb=
er68 index67 alt1"><code class=3D"js plain">})( jQuery, window, document );=
</code></div></div></td></tr></tbody></table></div></div>

<p>Usage:</p>
<p></p><div><div id=3D"highlighter_663880" class=3D"syntaxhighlighter  js a=
codecode"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/re=
sources/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_hel=
p help">?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=
=3D"0"><tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 al=
t2">1</div><div class=3D"line number2 index1 alt1">2</div><div class=3D"lin=
e number3 index2 alt2">3</div></td><td class=3D"code"><div class=3D"contain=
er"><div class=3D"line number1 index0 alt2"><code class=3D"js plain">$(</co=
de><code class=3D"js string">"#elem"</code><code class=3D"js plain">).defau=
ltPluginName({</code></div><div class=3D"line number2 index1 alt1"><code cl=
ass=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js plain">propertyName:=
 </code><code class=3D"js string">"a custom value"</code></div><div class=
=3D"line number3 index2 alt2"><code class=3D"js plain">});</code></div></di=
v></td></tr></tbody></table></div></div><p></p>


<h4>Further Reading</h4>

<ul>
<li><a href=3D"http://docs.jquery.com/Plugins/Authoring">Plugins/Authoring<=
/a>, jQuery</li>

<li>=E2=80=9C<a href=3D"http://remysharp.com/2010/06/03/signs-of-a-poorly-w=
ritten-jquery-plugin/">Signs of a Poorly Written jQuery Plugin</a>,=E2=80=
=9D Remy Sharp</li>

<li>=E2=80=9C<a href=3D"http://msdn.microsoft.com/en-us/scriptjunkie/ff6082=
09">How to Create Your Own jQuery Plugin</a>,=E2=80=9D Elijah Manor</li>

<li>=E2=80=9C<a href=3D"http://msdn.microsoft.com/en-us/scriptjunkie/ff6967=
59">Style in jQuery Plugins and Why It Matters</a>,=E2=80=9D Ben Almon</li>

<li>=E2=80=9C<a href=3D"http://enterprisejquery.com/2010/07/create-your-fir=
st-jquery-plugin-part-2-revising-your-plugin/">Create Your First jQuery Plu=
gin, Part 2</a>,=E2=80=9D Andrew Wirick</li>
</ul>

<p>&nbsp;</p>
<p>&nbsp;</p>
<h3>=E2=80=9CComplete=E2=80=9D Widget Factory Pattern</h3>

<p>While the jQuery plugin authoring guide is a great introduction to plugi=
n development, it doesn't help obscure away common plugin plumbing tasks th=
at we have to deal with on a regular basis.</p>

<p>The jQuery UI Widget Factory is a solution to this problem that helps us=
 build complex, stateful plugins based on object-oriented principles. It al=
so eases communication with our plugins instance, obfuscating a number of t=
he repetitive tasks that we would have to code when working with basic plug=
ins.</p>

<p>Stateful plugins help us keep track of their current state, also allowin=
g us to change properties of the plugin after it has been initialized.</p>

<p>One of the great things about the Widget Factory is that the majority of=
 the jQuery UI library actually uses it as a base for its components. This =
means that if we=E2=80=99re looking for further guidance on structure beyon=
d this pattern, we won=E2=80=99t have to look beyond the jQuery UI reposito=
ry on GitHub (<a href=3D"https://github.com/jquery/jquery-ui">https://githu=
b.com/jquery/jquery-ui</a>).</p>

<p>This jQuery UI Widget Factory pattern covers almost all of the supported=
 default factory methods, including triggering events. As per the last patt=
ern, comments are included for all of the methods used and further guidance=
 is given in the inline comments.</p>


<div><div id=3D"highlighter_831300" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</=
div><div class=3D"line number19 index18 alt2">19</div><div class=3D"line nu=
mber20 index19 alt1">20</div><div class=3D"line number21 index20 alt2">21</=
div><div class=3D"line number22 index21 alt1">22</div><div class=3D"line nu=
mber23 index22 alt2">23</div><div class=3D"line number24 index23 alt1">24</=
div><div class=3D"line number25 index24 alt2">25</div><div class=3D"line nu=
mber26 index25 alt1">26</div><div class=3D"line number27 index26 alt2">27</=
div><div class=3D"line number28 index27 alt1">28</div><div class=3D"line nu=
mber29 index28 alt2">29</div><div class=3D"line number30 index29 alt1">30</=
div><div class=3D"line number31 index30 alt2">31</div><div class=3D"line nu=
mber32 index31 alt1">32</div><div class=3D"line number33 index32 alt2">33</=
div><div class=3D"line number34 index33 alt1">34</div><div class=3D"line nu=
mber35 index34 alt2">35</div><div class=3D"line number36 index35 alt1">36</=
div><div class=3D"line number37 index36 alt2">37</div><div class=3D"line nu=
mber38 index37 alt1">38</div><div class=3D"line number39 index38 alt2">39</=
div><div class=3D"line number40 index39 alt1">40</div><div class=3D"line nu=
mber41 index40 alt2">41</div><div class=3D"line number42 index41 alt1">42</=
div><div class=3D"line number43 index42 alt2">43</div><div class=3D"line nu=
mber44 index43 alt1">44</div><div class=3D"line number45 index44 alt2">45</=
div><div class=3D"line number46 index45 alt1">46</div><div class=3D"line nu=
mber47 index46 alt2">47</div><div class=3D"line number48 index47 alt1">48</=
div><div class=3D"line number49 index48 alt2">49</div><div class=3D"line nu=
mber50 index49 alt1">50</div><div class=3D"line number51 index50 alt2">51</=
div><div class=3D"line number52 index51 alt1">52</div><div class=3D"line nu=
mber53 index52 alt2">53</div><div class=3D"line number54 index53 alt1">54</=
div><div class=3D"line number55 index54 alt2">55</div><div class=3D"line nu=
mber56 index55 alt1">56</div><div class=3D"line number57 index56 alt2">57</=
div><div class=3D"line number58 index57 alt1">58</div><div class=3D"line nu=
mber59 index58 alt2">59</div><div class=3D"line number60 index59 alt1">60</=
div><div class=3D"line number61 index60 alt2">61</div><div class=3D"line nu=
mber62 index61 alt1">62</div><div class=3D"line number63 index62 alt2">63</=
div><div class=3D"line number64 index63 alt1">64</div><div class=3D"line nu=
mber65 index64 alt2">65</div><div class=3D"line number66 index65 alt1">66</=
div><div class=3D"line number67 index66 alt2">67</div><div class=3D"line nu=
mber68 index67 alt1">68</div><div class=3D"line number69 index68 alt2">69</=
div><div class=3D"line number70 index69 alt1">70</div><div class=3D"line nu=
mber71 index70 alt2">71</div><div class=3D"line number72 index71 alt1">72</=
div><div class=3D"line number73 index72 alt2">73</div><div class=3D"line nu=
mber74 index73 alt1">74</div><div class=3D"line number75 index74 alt2">75</=
div><div class=3D"line number76 index75 alt1">76</div><div class=3D"line nu=
mber77 index76 alt2">77</div><div class=3D"line number78 index77 alt1">78</=
div><div class=3D"line number79 index78 alt2">79</div><div class=3D"line nu=
mber80 index79 alt1">80</div><div class=3D"line number81 index80 alt2">81</=
div><div class=3D"line number82 index81 alt1">82</div><div class=3D"line nu=
mber83 index82 alt2">83</div><div class=3D"line number84 index83 alt1">84</=
div><div class=3D"line number85 index84 alt2">85</div><div class=3D"line nu=
mber86 index85 alt1">86</div><div class=3D"line number87 index86 alt2">87</=
div></td><td class=3D"code"><div class=3D"container"><div class=3D"line num=
ber1 index0 alt2"><code class=3D"js comments">/*!</code></div><div class=3D=
"line number2 index1 alt1"><code class=3D"js spaces">&nbsp;</code><code cla=
ss=3D"js comments">* jQuery UI Widget-factory plugin boilerplate (for 1.8/9=
+)</code></div><div class=3D"line number3 index2 alt2"><code class=3D"js sp=
aces">&nbsp;</code><code class=3D"js comments">* Author: @addyosmani</code>=
</div><div class=3D"line number4 index3 alt1"><code class=3D"js spaces">&nb=
sp;</code><code class=3D"js comments">* Further changes: @peolanha</code></=
div><div class=3D"line number5 index4 alt2"><code class=3D"js spaces">&nbsp=
;</code><code class=3D"js comments">* Licensed under the MIT license</code>=
</div><div class=3D"line number6 index5 alt1"><code class=3D"js spaces">&nb=
sp;</code><code class=3D"js comments">*/</code></div><div class=3D"line num=
ber7 index6 alt2">&nbsp;</div><div class=3D"line number8 index7 alt1">&nbsp=
;</div><div class=3D"line number9 index8 alt2"><code class=3D"js plain">;(<=
/code><code class=3D"js keyword">function</code> <code class=3D"js plain">(=
 $, window, document, undefined ) {</code></div><div class=3D"line number10=
 index9 alt1">&nbsp;</div><div class=3D"line number11 index10 alt2"><code c=
lass=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comment=
s">// define our widget under a namespace of your choice</code></div><div c=
lass=3D"line number12 index11 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&=
nbsp;&nbsp;</code><code class=3D"js comments">// with additional parameters=
 e.g.</code></div><div class=3D"line number13 index12 alt2"><code class=3D"=
js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// $.=
widget( "namespace.widgetname", (optional) - an</code></div><div class=3D"l=
ine number14 index13 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbs=
p;</code><code class=3D"js comments">// existing widget prototype to inheri=
t from, an object</code></div><div class=3D"line number15 index14 alt2"><co=
de class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js com=
ments">// literal to become the widget's prototype );</code></div><div clas=
s=3D"line number16 index15 alt1">&nbsp;</div><div class=3D"line number17 in=
dex16 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code =
class=3D"js plain">$.widget( </code><code class=3D"js string">"namespace.wi=
dgetname"</code><code class=3D"js plain">, {</code></div><div class=3D"line=
 number18 index17 alt1">&nbsp;</div><div class=3D"line number19 index18 alt=
2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</code><code class=3D"js comments">//Options to be used as defaults</code=
></div><div class=3D"line number20 index19 alt1"><code class=3D"js spaces">=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js pl=
ain">options: {</code></div><div class=3D"line number21 index20 alt2"><code=
 class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">someValue: </code><code c=
lass=3D"js keyword">null</code></div><div class=3D"line number22 index21 al=
t1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;</code><code class=3D"js plain">},</code></div><div class=3D"line number=
23 index22 alt2">&nbsp;</div><div class=3D"line number24 index23 alt1"><cod=
e class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</cod=
e><code class=3D"js comments">//Setup widget (e.g. element creation, apply =
theming</code></div><div class=3D"line number25 index24 alt2"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code=
 class=3D"js comments">//, bind events etc.)</code></div><div class=3D"line=
 number26 index25 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">_create: </code><cod=
e class=3D"js keyword">function</code> <code class=3D"js plain">() {</code>=
</div><div class=3D"line number27 index26 alt2">&nbsp;</div><div class=3D"l=
ine number28 index27 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js =
comments">// _create will automatically run the first time</code></div><div=
 class=3D"line number29 index28 alt2"><code class=3D"js spaces">&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code c=
lass=3D"js comments">// this widget is called. Put the initial widget</code=
></div><div class=3D"line number30 index29 alt1"><code class=3D"js spaces">=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</c=
ode><code class=3D"js comments">// setup code here, then we can access the =
element</code></div><div class=3D"line number31 index30 alt2"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;</code><code class=3D"js comments">// on which the widget was c=
alled via this.element.</code></div><div class=3D"line number32 index31 alt=
1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// The options=
 defined above can be accessed</code></div><div class=3D"line number33 inde=
x32 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// via =
this.options this.element.addStuff();</code></div><div class=3D"line number=
34 index33 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</code><code class=3D"js plain">},</code></div><div class=
=3D"line number35 index34 alt2">&nbsp;</div><div class=3D"line number36 ind=
ex35 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;</code><code class=3D"js comments">// Destroy an instantiated plu=
gin and clean up</code></div><div class=3D"line number37 index36 alt2"><cod=
e class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</cod=
e><code class=3D"js comments">// modifications the widget has made to the D=
OM</code></div><div class=3D"line number38 index37 alt1"><code class=3D"js =
spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js plain">destroy: </code><code class=3D"js keyword">function</code> <c=
ode class=3D"js plain">() {</code></div><div class=3D"line number39 index38=
 alt2">&nbsp;</div><div class=3D"line number40 index39 alt1"><code class=3D=
"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;</code><code class=3D"js comments">// this.element.removeStuff();<=
/code></div><div class=3D"line number41 index40 alt2"><code class=3D"js spa=
ces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</code><code class=3D"js comments">// For UI 1.8, destroy must be invoked=
 from the</code></div><div class=3D"line number42 index41 alt1"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;</code><code class=3D"js comments">// base widget</code></div><=
div class=3D"line number43 index42 alt2"><code class=3D"js spaces">&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><cod=
e class=3D"js plain">$.Widget.prototype.destroy.call( </code><code class=3D=
"js keyword">this</code> <code class=3D"js plain">);</code></div><div class=
=3D"line number44 index43 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js comments">// For UI 1.9, define _destroy instead and don't</code></d=
iv><div class=3D"line number45 index44 alt2"><code class=3D"js spaces">&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>=
<code class=3D"js comments">// worry about</code></div><div class=3D"line n=
umber46 index45 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comme=
nts">// calling the base widget</code></div><div class=3D"line number47 ind=
ex46 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;</code><code class=3D"js plain">},</code></div><div class=3D"line=
 number48 index47 alt1">&nbsp;</div><div class=3D"line number49 index48 alt=
2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</code><code class=3D"js plain">methodB: </code><code class=3D"js keyword=
">function</code> <code class=3D"js plain">( event ) {</code></div><div cla=
ss=3D"line number50 index49 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js comments">//_trigger dispatches callbacks the plugin user</code></di=
v><div class=3D"line number51 index50 alt2"><code class=3D"js spaces">&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><=
code class=3D"js comments">// can subscribe to</code></div><div class=3D"li=
ne number52 index51 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js c=
omments">// signature: _trigger( "callbackName", [eventObject],</code></div=
><div class=3D"line number53 index52 alt2"><code class=3D"js spaces">&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><c=
ode class=3D"js comments">// [uiObject] )</code></div><div class=3D"line nu=
mber54 index53 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js commen=
ts">// e.g. this._trigger( "hover", e /*where e.type =3D=3D</code></div><di=
v class=3D"line number55 index54 alt2"><code class=3D"js spaces">&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code =
class=3D"js comments">// "mouseenter"*/, { hovered: $(e.target)});</code></=
div><div class=3D"line number56 index55 alt1"><code class=3D"js spaces">&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code=
><code class=3D"js keyword">this</code><code class=3D"js plain">._trigger( =
</code><code class=3D"js string">"methodA"</code><code class=3D"js plain">,=
 event, {</code></div><div class=3D"line number57 index56 alt2"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">key: va=
lue</code></div><div class=3D"line number58 index57 alt1"><code class=3D"js=
 spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;</code><code class=3D"js plain">});</code></div><div class=3D"line nu=
mber59 index58 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">},</code></div><div cla=
ss=3D"line number60 index59 alt1">&nbsp;</div><div class=3D"line number61 i=
ndex60 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;</code><code class=3D"js plain">methodA: </code><code class=3D"=
js keyword">function</code> <code class=3D"js plain">( event ) {</code></di=
v><div class=3D"line number62 index61 alt1"><code class=3D"js spaces">&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><=
code class=3D"js keyword">this</code><code class=3D"js plain">._trigger( </=
code><code class=3D"js string">"dataChanged"</code><code class=3D"js plain"=
>, event, {</code></div><div class=3D"line number63 index62 alt2"><code cla=
ss=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">key: =
value</code></div><div class=3D"line number64 index63 alt1"><code class=3D"=
js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;</code><code class=3D"js plain">});</code></div><div class=3D"line =
number65 index64 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">},</code></div><div c=
lass=3D"line number66 index65 alt1">&nbsp;</div><div class=3D"line number67=
 index66 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;</code><code class=3D"js comments">// Respond to any changes =
the user makes to the</code></div><div class=3D"line number68 index67 alt1"=
><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
</code><code class=3D"js comments">// option method</code></div><div class=
=3D"line number69 index68 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">_setOption: =
</code><code class=3D"js keyword">function</code> <code class=3D"js plain">=
( key, value ) {</code></div><div class=3D"line number70 index69 alt1"><cod=
e class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">switch</code> <code cl=
ass=3D"js plain">( key ) {</code></div><div class=3D"line number71 index70 =
alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">case</code> =
<code class=3D"js string">"someValue"</code><code class=3D"js plain">:</cod=
e></div><div class=3D"line number72 index71 alt1"><code class=3D"js spaces"=
>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// this.options.so=
meValue =3D doSomethingWith( value );</code></div><div class=3D"line number=
73 index72 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><cod=
e class=3D"js keyword">break</code><code class=3D"js plain">;</code></div><=
div class=3D"line number74 index73 alt1"><code class=3D"js spaces">&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><cod=
e class=3D"js keyword">default</code><code class=3D"js plain">:</code></div=
><div class=3D"line number75 index74 alt2"><code class=3D"js spaces">&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;</code><code class=3D"js comments">// this.options[ key ] =
=3D value;</code></div><div class=3D"line number76 index75 alt1"><code clas=
s=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">brea=
k</code><code class=3D"js plain">;</code></div><div class=3D"line number77 =
index76 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">}</cod=
e></div><div class=3D"line number78 index77 alt1">&nbsp;</div><div class=3D=
"line number79 index78 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"j=
s comments">// For UI 1.8, _setOption must be manually invoked</code></div>=
<div class=3D"line number80 index79 alt1"><code class=3D"js spaces">&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><co=
de class=3D"js comments">// from the base widget</code></div><div class=3D"=
line number81 index80 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js=
 plain">$.Widget.prototype._setOption.apply( </code><code class=3D"js keywo=
rd">this</code><code class=3D"js plain">, arguments );</code></div><div cla=
ss=3D"line number82 index81 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js comments">// For UI 1.9 the _super method can be used instead</code>=
</div><div class=3D"line number83 index82 alt2"><code class=3D"js spaces">&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</co=
de><code class=3D"js comments">// this._super( "_setOption", key, value );<=
/code></div><div class=3D"line number84 index83 alt1"><code class=3D"js spa=
ces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"=
js plain">}</code></div><div class=3D"line number85 index84 alt2"><code cla=
ss=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">})=
;</code></div><div class=3D"line number86 index85 alt1">&nbsp;</div><div cl=
ass=3D"line number87 index86 alt2"><code class=3D"js plain">})( jQuery, win=
dow, document );</code></div></div></td></tr></tbody></table></div></div>

<p>Usage:</p>
<p></p><div><div id=3D"highlighter_403731" class=3D"syntaxhighlighter  js a=
codecode"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/re=
sources/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_hel=
p help">?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=
=3D"0"><tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 al=
t2">1</div><div class=3D"line number2 index1 alt1">2</div><div class=3D"lin=
e number3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</di=
v><div class=3D"line number5 index4 alt2">5</div></td><td class=3D"code"><d=
iv class=3D"container"><div class=3D"line number1 index0 alt2"><code class=
=3D"js keyword">var</code> <code class=3D"js plain">collection =3D $(</code=
><code class=3D"js string">"#elem"</code><code class=3D"js plain">).widgetN=
ame({</code></div><div class=3D"line number2 index1 alt1"><code class=3D"js=
 spaces">&nbsp;&nbsp;</code><code class=3D"js plain">foo: </code><code clas=
s=3D"js keyword">false</code></div><div class=3D"line number3 index2 alt2">=
<code class=3D"js plain">});</code></div><div class=3D"line number4 index3 =
alt1">&nbsp;</div><div class=3D"line number5 index4 alt2"><code class=3D"js=
 plain">collection.widgetName(</code><code class=3D"js string">"methodB"</c=
ode><code class=3D"js plain">);</code></div></div></td></tr></tbody></table=
></div></div><p></p>

<h4>Further Reading</h4>

<ul>
<li><a href=3D"http://ajpiano.com/widgetfactory/#slide1">The jQuery UI Widg=
et Factory</a></li>

<li>=E2=80=9C<a href=3D"http://msdn.microsoft.com/en-us/scriptjunkie/ff7066=
00">Introduction to Stateful Plugins and the Widget Factory</a>,=E2=80=9D D=
oug Neiner</li>

<li>=E2=80=9C<a href=3D"http://wiki.jqueryui.com/w/page/12138135/Widget%20f=
actory">Widget Factory</a>=E2=80=9D (explained), Scott Gonzalez</li>

<li>=E2=80=9C<a href=3D"http://bililite.com/blog/understanding-jquery-ui-wi=
dgets-a-tutorial/">Understanding jQuery UI Widgets: A Tutorial</a>,=E2=80=
=9D Hacking at 0300</li>
</ul>

<p>&nbsp;</p>
<p>&nbsp;</p>

<h3>Nested Namespacing Plugin Pattern</h3>

<p>As we've previously covered in the book, namespacing our code is a way t=
o avoid collisions with other objects and variables in the global namespace=
. They=E2=80=99re important because we want to safeguard our plugin from br=
eaking in the event that another script on the page uses the same variable =
or plugin names as ours. As a good citizen of the global namespace, we must=
 also do our best not to prevent other developers scripts from executing be=
cause of the same issues.</p>

<p>JavaScript doesn't really have built-in support for namespaces as other =
languages do, but it does have objects that can be used to achieve a simila=
r effect. Employing a top-level object as the name of our namespace, we can=
 easily check for the existence of another object on the page with the same=
 name. If such an object does not exist, then we define it; if it does exis=
t, then we simply extend it with our plugin.</p>

<p>Objects (or, rather, object literals) can be used to create nested names=
paces, such as <code>namespace.subnamespace.pluginName</code> and so on. Bu=
t to keep things simple, the namespacing boilerplate below should show us e=
verything we need to get started with these concepts.</p>

<div><div id=3D"highlighter_729433" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</=
div><div class=3D"line number19 index18 alt2">19</div><div class=3D"line nu=
mber20 index19 alt1">20</div><div class=3D"line number21 index20 alt2">21</=
div><div class=3D"line number22 index21 alt1">22</div><div class=3D"line nu=
mber23 index22 alt2">23</div><div class=3D"line number24 index23 alt1">24</=
div><div class=3D"line number25 index24 alt2">25</div><div class=3D"line nu=
mber26 index25 alt1">26</div><div class=3D"line number27 index26 alt2">27</=
div><div class=3D"line number28 index27 alt1">28</div><div class=3D"line nu=
mber29 index28 alt2">29</div><div class=3D"line number30 index29 alt1">30</=
div><div class=3D"line number31 index30 alt2">31</div><div class=3D"line nu=
mber32 index31 alt1">32</div><div class=3D"line number33 index32 alt2">33</=
div><div class=3D"line number34 index33 alt1">34</div><div class=3D"line nu=
mber35 index34 alt2">35</div><div class=3D"line number36 index35 alt1">36</=
div><div class=3D"line number37 index36 alt2">37</div><div class=3D"line nu=
mber38 index37 alt1">38</div><div class=3D"line number39 index38 alt2">39</=
div><div class=3D"line number40 index39 alt1">40</div><div class=3D"line nu=
mber41 index40 alt2">41</div><div class=3D"line number42 index41 alt1">42</=
div><div class=3D"line number43 index42 alt2">43</div><div class=3D"line nu=
mber44 index43 alt1">44</div><div class=3D"line number45 index44 alt2">45</=
div><div class=3D"line number46 index45 alt1">46</div><div class=3D"line nu=
mber47 index46 alt2">47</div><div class=3D"line number48 index47 alt1">48</=
div><div class=3D"line number49 index48 alt2">49</div><div class=3D"line nu=
mber50 index49 alt1">50</div><div class=3D"line number51 index50 alt2">51</=
div><div class=3D"line number52 index51 alt1">52</div><div class=3D"line nu=
mber53 index52 alt2">53</div><div class=3D"line number54 index53 alt1">54</=
div></td><td class=3D"code"><div class=3D"container"><div class=3D"line num=
ber1 index0 alt2"><code class=3D"js comments">/*!</code></div><div class=3D=
"line number2 index1 alt1"><code class=3D"js spaces">&nbsp;</code><code cla=
ss=3D"js comments">* jQuery namespaced "Starter" plugin boilerplate</code><=
/div><div class=3D"line number3 index2 alt2"><code class=3D"js spaces">&nbs=
p;</code><code class=3D"js comments">* Author: @dougneiner</code></div><div=
 class=3D"line number4 index3 alt1"><code class=3D"js spaces">&nbsp;</code>=
<code class=3D"js comments">* Further changes: @addyosmani</code></div><div=
 class=3D"line number5 index4 alt2"><code class=3D"js spaces">&nbsp;</code>=
<code class=3D"js comments">* Licensed under the MIT license</code></div><d=
iv class=3D"line number6 index5 alt1"><code class=3D"js spaces">&nbsp;</cod=
e><code class=3D"js comments">*/</code></div><div class=3D"line number7 ind=
ex6 alt2">&nbsp;</div><div class=3D"line number8 index7 alt1"><code class=
=3D"js plain">;(</code><code class=3D"js keyword">function</code> <code cla=
ss=3D"js plain">( $ ) {</code></div><div class=3D"line number9 index8 alt2"=
><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js=
 keyword">if</code> <code class=3D"js plain">(!$.myNamespace) {</code></div=
><div class=3D"line number10 index9 alt1"><code class=3D"js spaces">&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">$.=
myNamespace =3D {};</code></div><div class=3D"line number11 index10 alt2"><=
code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js p=
lain">};</code></div><div class=3D"line number12 index11 alt1">&nbsp;</div>=
<div class=3D"line number13 index12 alt2"><code class=3D"js spaces">&nbsp;&=
nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">$.myNamespace.myPluginName=
 =3D </code><code class=3D"js keyword">function</code> <code class=3D"js pl=
ain">( el, myFunctionParam, options ) {</code></div><div class=3D"line numb=
er14 index13 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// To avoid scope issu=
es, use "base" instead of "this"</code></div><div class=3D"line number15 in=
dex14 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;</code><code class=3D"js comments">// to reference this class fr=
om internal events and functions.</code></div><div class=3D"line number16 i=
ndex15 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;</code><code class=3D"js keyword">var</code> <code class=3D"js =
plain">base =3D </code><code class=3D"js keyword">this</code><code class=3D=
"js plain">;</code></div><div class=3D"line number17 index16 alt2">&nbsp;</=
div><div class=3D"line number18 index17 alt1"><code class=3D"js spaces">&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comme=
nts">// Access to jQuery and DOM versions of element</code></div><div class=
=3D"line number19 index18 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">base.$el =3D=
 $( el );</code></div><div class=3D"line number20 index19 alt1"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code=
 class=3D"js plain">base.el =3D el;</code></div><div class=3D"line number21=
 index20 alt2">&nbsp;</div><div class=3D"line number22 index21 alt1"><code =
class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>=
<code class=3D"js comments">// Add a reverse reference to the DOM object</c=
ode></div><div class=3D"line number23 index22 alt2"><code class=3D"js space=
s">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js=
 plain">base.$el.data( </code><code class=3D"js string">"myNamespace.myPlug=
inName"</code><code class=3D"js plain">, base );</code></div><div class=3D"=
line number24 index23 alt1">&nbsp;</div><div class=3D"line number25 index24=
 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;</code><code class=3D"js plain">base.init =3D </code><code class=3D"j=
s keyword">function</code> <code class=3D"js plain">() {</code></div><div c=
lass=3D"line number26 index25 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code cla=
ss=3D"js plain">base.myFunctionParam =3D myFunctionParam;</code></div><div =
class=3D"line number27 index26 alt2">&nbsp;</div><div class=3D"line number2=
8 index27 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">base=
.options =3D $.extend({},</code></div><div class=3D"line number29 index28 a=
lt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">$.myNamespace.m=
yPluginName.defaultOptions, options);</code></div><div class=3D"line number=
30 index29 alt1">&nbsp;</div><div class=3D"line number31 index30 alt2"><cod=
e class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// Put our initializa=
tion code here</code></div><div class=3D"line number32 index31 alt1"><code =
class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>=
<code class=3D"js plain">};</code></div><div class=3D"line number33 index32=
 alt2">&nbsp;</div><div class=3D"line number34 index33 alt1"><code class=3D=
"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code cl=
ass=3D"js comments">// Sample Function, Uncomment to use</code></div><div c=
lass=3D"line number35 index34 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// ba=
se.functionName =3D function( parameters ){</code></div><div class=3D"line =
number36 index35 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">//</code></div><di=
v class=3D"line number37 index36 alt2"><code class=3D"js spaces">&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">//=
 };</code></div><div class=3D"line number38 index37 alt1"><code class=3D"js=
 spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js comments">// Run initializer</code></div><div class=3D"line number39=
 index38 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;</code><code class=3D"js plain">base.init();</code></div><div=
 class=3D"line number40 index39 alt1"><code class=3D"js spaces">&nbsp;&nbsp=
;&nbsp;&nbsp;</code><code class=3D"js plain">};</code></div><div class=3D"l=
ine number41 index40 alt2">&nbsp;</div><div class=3D"line number42 index41 =
alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js plain">$.myNamespace.myPluginName.defaultOptions =3D {</code></div><=
div class=3D"line number43 index42 alt2"><code class=3D"js spaces">&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">myD=
efaultValue: </code><code class=3D"js string">""</code></div><div class=3D"=
line number44 index43 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nb=
sp;</code><code class=3D"js plain">};</code></div><div class=3D"line number=
45 index44 alt2">&nbsp;</div><div class=3D"line number46 index45 alt1"><cod=
e class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plai=
n">$.fn.mynamespace_myPluginName =3D </code><code class=3D"js keyword">func=
tion</code></div><div class=3D"line number47 index46 alt2"><code class=3D"j=
s spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code clas=
s=3D"js plain">( myFunctionParam, options ) {</code></div><div class=3D"lin=
e number48 index47 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">return</code> <co=
de class=3D"js keyword">this</code><code class=3D"js plain">.each(</code><c=
ode class=3D"js keyword">function</code> <code class=3D"js plain">() {</cod=
e></div><div class=3D"line number49 index48 alt2"><code class=3D"js spaces"=
>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</=
code><code class=3D"js plain">(</code><code class=3D"js keyword">new</code>=
 <code class=3D"js plain">$.myNamespace.myPluginName( </code><code class=3D=
"js keyword">this</code><code class=3D"js plain">,</code></div><div class=
=3D"line number50 index49 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js plain">myFunctionParam, options ));</code></div><div class=3D"line n=
umber51 index50 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">});</code></div><div c=
lass=3D"line number52 index51 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&=
nbsp;&nbsp;</code><code class=3D"js plain">};</code></div><div class=3D"lin=
e number53 index52 alt2">&nbsp;</div><div class=3D"line number54 index53 al=
t1"><code class=3D"js plain">})( jQuery );</code></div></div></td></tr></tb=
ody></table></div></div>

<p>Usage:</p>
<p></p><div><div id=3D"highlighter_491750" class=3D"syntaxhighlighter  js a=
codecode"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/re=
sources/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_hel=
p help">?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=
=3D"0"><tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 al=
t2">1</div><div class=3D"line number2 index1 alt1">2</div><div class=3D"lin=
e number3 index2 alt2">3</div></td><td class=3D"code"><div class=3D"contain=
er"><div class=3D"line number1 index0 alt2"><code class=3D"js plain">$(</co=
de><code class=3D"js string">"#elem"</code><code class=3D"js plain">).mynam=
espace_myPluginName({</code></div><div class=3D"line number2 index1 alt1"><=
code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js plain">myDefa=
ultValue: </code><code class=3D"js string">"foobar"</code></div><div class=
=3D"line number3 index2 alt2"><code class=3D"js plain">});</code></div></di=
v></td></tr></tbody></table></div></div><p></p>

<h4>Further Reading</h4>

<ul>
<li>=E2=80=9C<a href=3D"http://javascriptweblog.wordpress.com/2010/12/07/na=
mespacing-in-javascript/">Namespacing in JavaScript</a>,=E2=80=9D Angus Cro=
ll</li>

<li>=E2=80=9C<a href=3D"http://ryanflorence.com/use-your-fn-jquery-namespac=
e/">Use Your $.fn jQuery Namespace</a>,=E2=80=9D Ryan Florence</li>

<li>=E2=80=9C<a href=3D"http://michaux.ca/articles/javascript-namespacing">=
JavaScript Namespacing</a>,=E2=80=9D Peter Michaux</li>

<li>=E2=80=9C<a href=3D"http://www.2ality.com/2011/04/modules-and-namespace=
s-in-javascript.html">Modules and namespaces in JavaScript</a>,=E2=80=9D Ax=
el Rauschmayer</li>
</ul>

<p>&nbsp;</p>
<p>&nbsp;</p>
<h3>Custom Events Plugin Pattern (With The Widget factory)</h3>

<p>In the <em>JavaScript Design Patterns</em> section of the book, we discu=
ssed the Observer pattern and later went on to cover jQuery's support for c=
ustom events, which offer a similar solution for implementing Publish/Subsc=
ribe. This same pattern can be used when writing jQuery plugins.</p>

<p>The basic idea here is that objects in a page can publish event notifica=
tions when something interesting occurs in our application. Other objects t=
hen subscribe to (or listen) for these events and respond accordingly. This=
 results in the logic for our application being significantly more decouple=
d, as each object no longer needs to directly communicate with another.</p>

<p>In the following jQuery UI widget factory pattern, we=E2=80=99ll impleme=
nt a basic custom event-based Publish/Subscribe system that allows our plug=
in to subscribe to event notifications from the rest of our application, wh=
ich will be responsible for publishing them.</p>

<div><div id=3D"highlighter_675764" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</=
div><div class=3D"line number19 index18 alt2">19</div><div class=3D"line nu=
mber20 index19 alt1">20</div><div class=3D"line number21 index20 alt2">21</=
div><div class=3D"line number22 index21 alt1">22</div><div class=3D"line nu=
mber23 index22 alt2">23</div><div class=3D"line number24 index23 alt1">24</=
div><div class=3D"line number25 index24 alt2">25</div><div class=3D"line nu=
mber26 index25 alt1">26</div><div class=3D"line number27 index26 alt2">27</=
div><div class=3D"line number28 index27 alt1">28</div><div class=3D"line nu=
mber29 index28 alt2">29</div><div class=3D"line number30 index29 alt1">30</=
div><div class=3D"line number31 index30 alt2">31</div><div class=3D"line nu=
mber32 index31 alt1">32</div><div class=3D"line number33 index32 alt2">33</=
div><div class=3D"line number34 index33 alt1">34</div><div class=3D"line nu=
mber35 index34 alt2">35</div><div class=3D"line number36 index35 alt1">36</=
div><div class=3D"line number37 index36 alt2">37</div><div class=3D"line nu=
mber38 index37 alt1">38</div><div class=3D"line number39 index38 alt2">39</=
div><div class=3D"line number40 index39 alt1">40</div><div class=3D"line nu=
mber41 index40 alt2">41</div><div class=3D"line number42 index41 alt1">42</=
div><div class=3D"line number43 index42 alt2">43</div><div class=3D"line nu=
mber44 index43 alt1">44</div><div class=3D"line number45 index44 alt2">45</=
div><div class=3D"line number46 index45 alt1">46</div><div class=3D"line nu=
mber47 index46 alt2">47</div><div class=3D"line number48 index47 alt1">48</=
div><div class=3D"line number49 index48 alt2">49</div></td><td class=3D"cod=
e"><div class=3D"container"><div class=3D"line number1 index0 alt2"><code c=
lass=3D"js comments">/*!</code></div><div class=3D"line number2 index1 alt1=
"><code class=3D"js spaces">&nbsp;</code><code class=3D"js comments">* jQue=
ry custom-events plugin boilerplate</code></div><div class=3D"line number3 =
index2 alt2"><code class=3D"js spaces">&nbsp;</code><code class=3D"js comme=
nts">* Author: DevPatch</code></div><div class=3D"line number4 index3 alt1"=
><code class=3D"js spaces">&nbsp;</code><code class=3D"js comments">* Furth=
er changes: @addyosmani</code></div><div class=3D"line number5 index4 alt2"=
><code class=3D"js spaces">&nbsp;</code><code class=3D"js comments">* Licen=
sed under the MIT license</code></div><div class=3D"line number6 index5 alt=
1"><code class=3D"js spaces">&nbsp;</code><code class=3D"js comments">*/</c=
ode></div><div class=3D"line number7 index6 alt2">&nbsp;</div><div class=3D=
"line number8 index7 alt1"><code class=3D"js comments">// In this pattern, =
we use jQuery's custom events to add</code></div><div class=3D"line number9=
 index8 alt2"><code class=3D"js comments">// pub/sub (publish/subscribe) ca=
pabilities to widgets.</code></div><div class=3D"line number10 index9 alt1"=
><code class=3D"js comments">// Each widget would publish certain events an=
d subscribe</code></div><div class=3D"line number11 index10 alt2"><code cla=
ss=3D"js comments">// to others. This approach effectively helps to decoupl=
e</code></div><div class=3D"line number12 index11 alt1"><code class=3D"js c=
omments">// the widgets and enables them to function independently.</code><=
/div><div class=3D"line number13 index12 alt2">&nbsp;</div><div class=3D"li=
ne number14 index13 alt1"><code class=3D"js plain">;(</code><code class=3D"=
js keyword">function</code> <code class=3D"js plain">( $, window, document,=
 undefined ) {</code></div><div class=3D"line number15 index14 alt2"><code =
class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain"=
>$.widget( </code><code class=3D"js string">"ao.eventStatus"</code><code cl=
ass=3D"js plain">, {</code></div><div class=3D"line number16 index15 alt1">=
<code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<=
/code><code class=3D"js plain">options: {</code></div><div class=3D"line nu=
mber17 index16 alt2">&nbsp;</div><div class=3D"line number18 index17 alt1">=
<code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<=
/code><code class=3D"js plain">},</code></div><div class=3D"line number19 i=
ndex18 alt2">&nbsp;</div><div class=3D"line number20 index19 alt1"><code cl=
ass=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><c=
ode class=3D"js plain">_create: </code><code class=3D"js keyword">function<=
/code><code class=3D"js plain">() {</code></div><div class=3D"line number21=
 index20 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">var=
</code> <code class=3D"js plain">self =3D </code><code class=3D"js keyword"=
>this</code><code class=3D"js plain">;</code></div><div class=3D"line numbe=
r22 index21 alt1">&nbsp;</div><div class=3D"line number23 index22 alt2"><co=
de class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">//self.element.addCl=
ass( "my-widget" );</code></div><div class=3D"line number24 index23 alt1">&=
nbsp;</div><div class=3D"line number25 index24 alt2"><code class=3D"js spac=
es">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;</code><code class=3D"js comments">//subscribe to "myEventStart"</code></d=
iv><div class=3D"line number26 index25 alt1"><code class=3D"js spaces">&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>=
<code class=3D"js plain">self.element.on( </code><code class=3D"js string">=
"myEventStart"</code><code class=3D"js plain">, </code><code class=3D"js ke=
yword">function</code><code class=3D"js plain">( e ) {</code></div><div cla=
ss=3D"line number27 index26 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;</code><code class=3D"js plain">console.log( </code><code class=3D"js=
 string">"event start"</code> <code class=3D"js plain">);</code></div><div =
class=3D"line number28 index27 alt1"><code class=3D"js spaces">&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code cl=
ass=3D"js plain">});</code></div><div class=3D"line number29 index28 alt2">=
&nbsp;</div><div class=3D"line number30 index29 alt1"><code class=3D"js spa=
ces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</code><code class=3D"js comments">//subscribe to "myEventEnd"</code></di=
v><div class=3D"line number31 index30 alt2"><code class=3D"js spaces">&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><=
code class=3D"js plain">self.element.on( </code><code class=3D"js string">"=
myEventEnd"</code><code class=3D"js plain">, </code><code class=3D"js keywo=
rd">function</code><code class=3D"js plain">( e ) {</code></div><div class=
=3D"line number32 index31 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;</code><code class=3D"js plain">console.log( </code><code class=3D"js s=
tring">"event end"</code> <code class=3D"js plain">);</code></div><div clas=
s=3D"line number33 index32 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js plain">});</code></div><div class=3D"line number34 index33 alt1">&nb=
sp;</div><div class=3D"line number35 index34 alt2"><code class=3D"js spaces=
">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<=
/code><code class=3D"js comments">//unsubscribe to "myEventStart"</code></d=
iv><div class=3D"line number36 index35 alt1"><code class=3D"js spaces">&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>=
<code class=3D"js comments">//self.element.off( "myEventStart", function(e)=
{</code></div><div class=3D"line number37 index36 alt2"><code class=3D"js s=
paces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">///console.l=
og( "unsubscribed to this event" );</code></div><div class=3D"line number38=
 index37 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">//=
});</code></div><div class=3D"line number39 index38 alt2"><code class=3D"js=
 spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js plain">},</code></div><div class=3D"line number40 index39 alt1">&nbs=
p;</div><div class=3D"line number41 index40 alt2"><code class=3D"js spaces"=
>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js p=
lain">destroy: </code><code class=3D"js keyword">function</code><code class=
=3D"js plain">(){</code></div><div class=3D"line number42 index41 alt1"><co=
de class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">$.Widget.prototype.dest=
roy.apply( </code><code class=3D"js keyword">this</code><code class=3D"js p=
lain">, arguments );</code></div><div class=3D"line number43 index42 alt2">=
<code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<=
/code><code class=3D"js plain">},</code></div><div class=3D"line number44 i=
ndex43 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code=
 class=3D"js plain">});</code></div><div class=3D"line number45 index44 alt=
2"><code class=3D"js plain">})( jQuery, window, document );</code></div><di=
v class=3D"line number46 index45 alt1">&nbsp;</div><div class=3D"line numbe=
r47 index46 alt2"><code class=3D"js comments">// Publishing event notificat=
ions</code></div><div class=3D"line number48 index47 alt1"><code class=3D"j=
s comments">// $( ".my-widget" ).trigger( "myEventStart");</code></div><div=
 class=3D"line number49 index48 alt2"><code class=3D"js comments">// $( ".m=
y-widget" ).trigger( "myEventEnd" );</code></div></div></td></tr></tbody></=
table></div></div>

<p>Usage:</p>
<p></p><div><div id=3D"highlighter_463317" class=3D"syntaxhighlighter  js a=
codecode"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/re=
sources/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_hel=
p help">?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=
=3D"0"><tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 al=
t2">1</div><div class=3D"line number2 index1 alt1">2</div><div class=3D"lin=
e number3 index2 alt2">3</div></td><td class=3D"code"><div class=3D"contain=
er"><div class=3D"line number1 index0 alt2"><code class=3D"js keyword">var<=
/code> <code class=3D"js plain">el =3D $( </code><code class=3D"js string">=
"#elem"</code> <code class=3D"js plain">);</code></div><div class=3D"line n=
umber2 index1 alt1"><code class=3D"js plain">el.eventStatus();</code></div>=
<div class=3D"line number3 index2 alt2"><code class=3D"js plain">el.eventSt=
atus().trigger( </code><code class=3D"js string">"myEventStart"</code> <cod=
e class=3D"js plain">);</code></div></div></td></tr></tbody></table></div><=
/div><p></p>


<h4>Further Reading</h4>

<ul>
<li>=E2=80=9C<a href=3D"http://www.devpatch.com/articles/2010-03-22-communi=
cation-between-jquery-ui-widgets/">Communication Between jQuery UI Widgets<=
/a>,=E2=80=9D Benjamin Sternthal</li>
</ul>

<p>&nbsp;</p>
<p>&nbsp;</p>
<h3>Prototypal Inheritance With The DOM-To-Object Bridge Pattern</h3>

<p>As covered earlier, in JavaScript, we don=E2=80=99t have the traditional=
 notion of classes that we would find in other classical programming langua=
ges, but we do have prototypal inheritance. With prototypal inheritance, an=
 object inherits from another object. We can apply this concept to jQuery p=
lugin development.</p>

<p>Yepnope.js author <a href=3D"http://alexsexton.com/">Alex Sexton</a> and=
 jQuery team member <a href=3D"http://scottgonzalez.com/">Scott Gonzalez</a=
> have looked at this topic in detail. In sum, they discovered that for org=
anized modular development, clearly separating the object that defines the =
logic for a plugin from the plugin-generation process itself can be benefic=
ial.</p>

<p>The benefit is that testing our plugins code becomes significantly easie=
r and we are also able to adjust the way things work behind the scenes with=
out altering the way that any object APIs we implement are used.</p>

<p>In Sexton=E2=80=99s article on this topic, he implemented a bridge that =
enables us to attach our general logic to a particular plugin, which we=E2=
=80=99ve implemented in the pattern below.</p>

<p>One of the other advantages of this pattern is that we don=E2=80=99t hav=
e to constantly repeat the same plugin initialization code, thus ensuring t=
hat the concepts behind DRY development are maintained. Some developers mig=
ht also find this pattern easier to read than others.</p>

<div><div id=3D"highlighter_707931" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</=
div><div class=3D"line number19 index18 alt2">19</div><div class=3D"line nu=
mber20 index19 alt1">20</div><div class=3D"line number21 index20 alt2">21</=
div><div class=3D"line number22 index21 alt1">22</div><div class=3D"line nu=
mber23 index22 alt2">23</div><div class=3D"line number24 index23 alt1">24</=
div><div class=3D"line number25 index24 alt2">25</div><div class=3D"line nu=
mber26 index25 alt1">26</div><div class=3D"line number27 index26 alt2">27</=
div><div class=3D"line number28 index27 alt1">28</div><div class=3D"line nu=
mber29 index28 alt2">29</div><div class=3D"line number30 index29 alt1">30</=
div><div class=3D"line number31 index30 alt2">31</div><div class=3D"line nu=
mber32 index31 alt1">32</div><div class=3D"line number33 index32 alt2">33</=
div><div class=3D"line number34 index33 alt1">34</div><div class=3D"line nu=
mber35 index34 alt2">35</div><div class=3D"line number36 index35 alt1">36</=
div><div class=3D"line number37 index36 alt2">37</div><div class=3D"line nu=
mber38 index37 alt1">38</div><div class=3D"line number39 index38 alt2">39</=
div><div class=3D"line number40 index39 alt1">40</div><div class=3D"line nu=
mber41 index40 alt2">41</div><div class=3D"line number42 index41 alt1">42</=
div><div class=3D"line number43 index42 alt2">43</div><div class=3D"line nu=
mber44 index43 alt1">44</div><div class=3D"line number45 index44 alt2">45</=
div><div class=3D"line number46 index45 alt1">46</div><div class=3D"line nu=
mber47 index46 alt2">47</div><div class=3D"line number48 index47 alt1">48</=
div><div class=3D"line number49 index48 alt2">49</div><div class=3D"line nu=
mber50 index49 alt1">50</div><div class=3D"line number51 index50 alt2">51</=
div><div class=3D"line number52 index51 alt1">52</div><div class=3D"line nu=
mber53 index52 alt2">53</div><div class=3D"line number54 index53 alt1">54</=
div><div class=3D"line number55 index54 alt2">55</div><div class=3D"line nu=
mber56 index55 alt1">56</div><div class=3D"line number57 index56 alt2">57</=
div><div class=3D"line number58 index57 alt1">58</div><div class=3D"line nu=
mber59 index58 alt2">59</div><div class=3D"line number60 index59 alt1">60</=
div><div class=3D"line number61 index60 alt2">61</div></td><td class=3D"cod=
e"><div class=3D"container"><div class=3D"line number1 index0 alt2"><code c=
lass=3D"js comments">/*!</code></div><div class=3D"line number2 index1 alt1=
"><code class=3D"js spaces">&nbsp;</code><code class=3D"js comments">* jQue=
ry prototypal inheritance plugin boilerplate</code></div><div class=3D"line=
 number3 index2 alt2"><code class=3D"js spaces">&nbsp;</code><code class=3D=
"js comments">* Author: Alex Sexton, Scott Gonzalez</code></div><div class=
=3D"line number4 index3 alt1"><code class=3D"js spaces">&nbsp;</code><code =
class=3D"js comments">* Further changes: @addyosmani</code></div><div class=
=3D"line number5 index4 alt2"><code class=3D"js spaces">&nbsp;</code><code =
class=3D"js comments">* Licensed under the MIT license</code></div><div cla=
ss=3D"line number6 index5 alt1"><code class=3D"js spaces">&nbsp;</code><cod=
e class=3D"js comments">*/</code></div><div class=3D"line number7 index6 al=
t2">&nbsp;</div><div class=3D"line number8 index7 alt1">&nbsp;</div><div cl=
ass=3D"line number9 index8 alt2"><code class=3D"js comments">// myObject - =
an object representing a concept we wish to model</code></div><div class=3D=
"line number10 index9 alt1"><code class=3D"js comments">// (e.g. a car)</co=
de></div><div class=3D"line number11 index10 alt2"><code class=3D"js keywor=
d">var</code> <code class=3D"js plain">myObject =3D {</code></div><div clas=
s=3D"line number12 index11 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</co=
de><code class=3D"js plain">init: </code><code class=3D"js keyword">functio=
n</code><code class=3D"js plain">( options, elem ) {</code></div><div class=
=3D"line number13 index12 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp=
;&nbsp;</code><code class=3D"js comments">// Mix in the passed-in options w=
ith the default options</code></div><div class=3D"line number14 index13 alt=
1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"=
js keyword">this</code><code class=3D"js plain">.options =3D $.extend( {}, =
</code><code class=3D"js keyword">this</code><code class=3D"js plain">.opti=
ons, options );</code></div><div class=3D"line number15 index14 alt2">&nbsp=
;</div><div class=3D"line number16 index15 alt1"><code class=3D"js spaces">=
&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// Save the elem=
ent reference, both as a jQuery</code></div><div class=3D"line number17 ind=
ex16 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code c=
lass=3D"js comments">// reference and a normal reference</code></div><div c=
lass=3D"line number18 index17 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&=
nbsp;&nbsp;</code><code class=3D"js keyword">this</code><code class=3D"js p=
lain">.elem =3D elem;</code></div><div class=3D"line number19 index18 alt2"=
><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js=
 keyword">this</code><code class=3D"js plain">.$elem =3D $( elem );</code><=
/div><div class=3D"line number20 index19 alt1">&nbsp;</div><div class=3D"li=
ne number21 index20 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp=
;</code><code class=3D"js comments">// Build the DOM's initial structure</c=
ode></div><div class=3D"line number22 index21 alt1"><code class=3D"js space=
s">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">this</code><co=
de class=3D"js plain">._build();</code></div><div class=3D"line number23 in=
dex22 alt2">&nbsp;</div><div class=3D"line number24 index23 alt1"><code cla=
ss=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments"=
>// return this so that we can chain and use the bridge with less code.</co=
de></div><div class=3D"line number25 index24 alt2"><code class=3D"js spaces=
">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">return</code> <=
code class=3D"js keyword">this</code><code class=3D"js plain">;</code></div=
><div class=3D"line number26 index25 alt1"><code class=3D"js spaces">&nbsp;=
&nbsp;</code><code class=3D"js plain">},</code></div><div class=3D"line num=
ber27 index26 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code clas=
s=3D"js plain">options: {</code></div><div class=3D"line number28 index27 a=
lt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js plain">name: </code><code class=3D"js string">"No name"</code></div>=
<div class=3D"line number29 index28 alt2"><code class=3D"js spaces">&nbsp;&=
nbsp;</code><code class=3D"js plain">},</code></div><div class=3D"line numb=
er30 index29 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=
=3D"js plain">_build: </code><code class=3D"js keyword">function</code><cod=
e class=3D"js plain">(){</code></div><div class=3D"line number31 index30 al=
t2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D=
"js comments">//this.$elem.html( "&lt;h1&gt;"+this.options.name+"&lt;/h1&gt=
;" );</code></div><div class=3D"line number32 index31 alt1"><code class=3D"=
js spaces">&nbsp;&nbsp;</code><code class=3D"js plain">},</code></div><div =
class=3D"line number33 index32 alt2"><code class=3D"js spaces">&nbsp;&nbsp;=
</code><code class=3D"js plain">myMethod: </code><code class=3D"js keyword"=
>function</code><code class=3D"js plain">( msg ){</code></div><div class=3D=
"line number34 index33 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&n=
bsp;</code><code class=3D"js comments">// We have direct access to the asso=
ciated and cached</code></div><div class=3D"line number35 index34 alt2"><co=
de class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js com=
ments">// jQuery element</code></div><div class=3D"line number36 index35 al=
t1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D=
"js comments">// this.$elem.append( "&lt;p&gt;"+msg+"&lt;/p&gt;" );</code><=
/div><div class=3D"line number37 index36 alt2"><code class=3D"js spaces">&n=
bsp;&nbsp;</code><code class=3D"js plain">}</code></div><div class=3D"line =
number38 index37 alt1"><code class=3D"js plain">};</code></div><div class=
=3D"line number39 index38 alt2">&nbsp;</div><div class=3D"line number40 ind=
ex39 alt1">&nbsp;</div><div class=3D"line number41 index40 alt2"><code clas=
s=3D"js comments">// Object.create support test, and fallback for browsers =
without it</code></div><div class=3D"line number42 index41 alt1"><code clas=
s=3D"js keyword">if</code> <code class=3D"js plain">( </code><code class=3D=
"js keyword">typeof</code> <code class=3D"js plain">Object.create !=3D=3D <=
/code><code class=3D"js string">"function"</code> <code class=3D"js plain">=
) {</code></div><div class=3D"line number43 index42 alt2"><code class=3D"js=
 spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">Object.cre=
ate =3D </code><code class=3D"js keyword">function</code> <code class=3D"js=
 plain">(o) {</code></div><div class=3D"line number44 index43 alt1"><code c=
lass=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><=
code class=3D"js keyword">function</code> <code class=3D"js plain">F() {}</=
code></div><div class=3D"line number45 index44 alt2"><code class=3D"js spac=
es">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"j=
s plain">F.prototype =3D o;</code></div><div class=3D"line number46 index45=
 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;</code><code class=3D"js keyword">return</code> <code class=3D"js key=
word">new</code> <code class=3D"js plain">F();</code></div><div class=3D"li=
ne number47 index46 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp=
;</code><code class=3D"js plain">};</code></div><div class=3D"line number48=
 index47 alt1"><code class=3D"js plain">}</code></div><div class=3D"line nu=
mber49 index48 alt2">&nbsp;</div><div class=3D"line number50 index49 alt1">=
&nbsp;</div><div class=3D"line number51 index50 alt2"><code class=3D"js com=
ments">// Create a plugin based on a defined object</code></div><div class=
=3D"line number52 index51 alt1"><code class=3D"js plain">$.plugin =3D </cod=
e><code class=3D"js keyword">function</code><code class=3D"js plain">( name=
, object ) {</code></div><div class=3D"line number53 index52 alt2"><code cl=
ass=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js plain">$.fn[name] =
=3D </code><code class=3D"js keyword">function</code><code class=3D"js plai=
n">( options ) {</code></div><div class=3D"line number54 index53 alt1"><cod=
e class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyw=
ord">return</code> <code class=3D"js keyword">this</code><code class=3D"js =
plain">.each(</code><code class=3D"js keyword">function</code><code class=
=3D"js plain">() {</code></div><div class=3D"line number55 index54 alt2"><c=
ode class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code cl=
ass=3D"js keyword">if</code> <code class=3D"js plain">( ! $.data( </code><c=
ode class=3D"js keyword">this</code><code class=3D"js plain">, name ) ) {</=
code></div><div class=3D"line number56 index55 alt1"><code class=3D"js spac=
es">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"j=
s plain">$.data( </code><code class=3D"js keyword">this</code><code class=
=3D"js plain">, name, Object.create( object ).init(</code></div><div class=
=3D"line number57 index56 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">options, </c=
ode><code class=3D"js keyword">this</code> <code class=3D"js plain">) );</c=
ode></div><div class=3D"line number58 index57 alt1"><code class=3D"js space=
s">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">}</c=
ode></div><div class=3D"line number59 index58 alt2"><code class=3D"js space=
s">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">});</code></div>=
<div class=3D"line number60 index59 alt1"><code class=3D"js spaces">&nbsp;&=
nbsp;</code><code class=3D"js plain">};</code></div><div class=3D"line numb=
er61 index60 alt2"><code class=3D"js plain">};</code></div></div></td></tr>=
</tbody></table></div></div>

<p>Usage:</p>
<p></p><div><div id=3D"highlighter_39005" class=3D"syntaxhighlighter  js ac=
odecode"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/res=
ources/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help=
 help">?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=
=3D"0"><tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 al=
t2">1</div><div class=3D"line number2 index1 alt1">2</div><div class=3D"lin=
e number3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</di=
v><div class=3D"line number5 index4 alt2">5</div><div class=3D"line number6=
 index5 alt1">6</div></td><td class=3D"code"><div class=3D"container"><div =
class=3D"line number1 index0 alt2"><code class=3D"js plain">$.plugin( </cod=
e><code class=3D"js string">"myobj"</code><code class=3D"js plain">, myObje=
ct );</code></div><div class=3D"line number2 index1 alt1">&nbsp;</div><div =
class=3D"line number3 index2 alt2"><code class=3D"js plain">$(</code><code =
class=3D"js string">"#elem"</code><code class=3D"js plain">).myobj( {name: =
</code><code class=3D"js string">"John"</code><code class=3D"js plain">} );=
</code></div><div class=3D"line number4 index3 alt1">&nbsp;</div><div class=
=3D"line number5 index4 alt2"><code class=3D"js keyword">var</code> <code c=
lass=3D"js plain">collection =3D $( </code><code class=3D"js string">"#elem=
"</code> <code class=3D"js plain">).data( </code><code class=3D"js string">=
"myobj"</code> <code class=3D"js plain">);</code></div><div class=3D"line n=
umber6 index5 alt1"><code class=3D"js plain">collection.myMethod( </code><c=
ode class=3D"js string">"I am a method"</code><code class=3D"js plain">);</=
code></div></div></td></tr></tbody></table></div></div><p></p>


<h4>Further Reading</h4>

<ul>
<li>=E2=80=9C<a href=3D"http://alexsexton.com/?p=3D51">Using Inheritance Pa=
tterns To Organize Large jQuery Applications</a>,=E2=80=9D Alex Sexton</li>

<li>=E2=80=9C<a href=3D"http://www.slideshare.net/SlexAxton/how-to-manage-l=
arge-jquery-apps">How to Manage Large Applications With jQuery or Whatever<=
/a>=E2=80=9D (further discussion), Alex Sexton</li>

<li>=E2=80=9C<a href=3D"http://blog.bigbinary.com/2010/03/12/pratical-examp=
le-of-need-for-prototypal-inheritance.html">Practical Example of the Need f=
or Prototypal Inheritance</a>,=E2=80=9D Neeraj Singh</li>

<li>=E2=80=9C<a href=3D"http://javascript.crockford.com/prototypal.html">Pr=
ototypal Inheritance in JavaScript</a>,=E2=80=9D Douglas Crockford</li>
</ul>


<p>&nbsp;</p>
<p>&nbsp;</p>
<h3>jQuery UI Widget Factory Bridge Pattern</h3>

<p>If you liked the idea of generating plugins based on objects in the last=
 design pattern, then you might be interested in a method found in the jQue=
ry UI Widget Factory called <code>$.widget.bridge</code>.</p>

<p>This bridge basically serves as a middle layer between a JavaScript obje=
ct that is created using <code>$.widget</code> and the jQuery core API, pro=
viding a more built-in solution to achieving object-based plugin definition=
. Effectively, we=E2=80=99re able to create stateful plugins using a custom=
 constructor.</p>

<p>Moreover,<code>$.widget.bridge</code> provides access to a number of oth=
er capabilities, including the following:</p>

<ul>
<li>Both public and private methods are handled as one would expect in clas=
sical OOP (i.e. public methods are exposed, while calls to private methods =
are not possible).</li>

<li>Automatic protection against multiple initializations.</li>

<li>Automatic generation of instances of a passed object, and storage of th=
em within the selection=E2=80=99s internal <code>$.data</code> cache.</li>

<li>Options can be altered post-initialization.</li>
</ul>

<p>For further information on how to use this pattern, please see the inlin=
e comments below:</p>

<div><div id=3D"highlighter_567336" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</=
div><div class=3D"line number19 index18 alt2">19</div><div class=3D"line nu=
mber20 index19 alt1">20</div><div class=3D"line number21 index20 alt2">21</=
div><div class=3D"line number22 index21 alt1">22</div><div class=3D"line nu=
mber23 index22 alt2">23</div><div class=3D"line number24 index23 alt1">24</=
div><div class=3D"line number25 index24 alt2">25</div><div class=3D"line nu=
mber26 index25 alt1">26</div><div class=3D"line number27 index26 alt2">27</=
div><div class=3D"line number28 index27 alt1">28</div><div class=3D"line nu=
mber29 index28 alt2">29</div><div class=3D"line number30 index29 alt1">30</=
div><div class=3D"line number31 index30 alt2">31</div><div class=3D"line nu=
mber32 index31 alt1">32</div><div class=3D"line number33 index32 alt2">33</=
div><div class=3D"line number34 index33 alt1">34</div><div class=3D"line nu=
mber35 index34 alt2">35</div><div class=3D"line number36 index35 alt1">36</=
div><div class=3D"line number37 index36 alt2">37</div><div class=3D"line nu=
mber38 index37 alt1">38</div><div class=3D"line number39 index38 alt2">39</=
div><div class=3D"line number40 index39 alt1">40</div><div class=3D"line nu=
mber41 index40 alt2">41</div><div class=3D"line number42 index41 alt1">42</=
div><div class=3D"line number43 index42 alt2">43</div><div class=3D"line nu=
mber44 index43 alt1">44</div><div class=3D"line number45 index44 alt2">45</=
div><div class=3D"line number46 index45 alt1">46</div><div class=3D"line nu=
mber47 index46 alt2">47</div><div class=3D"line number48 index47 alt1">48</=
div><div class=3D"line number49 index48 alt2">49</div><div class=3D"line nu=
mber50 index49 alt1">50</div><div class=3D"line number51 index50 alt2">51</=
div><div class=3D"line number52 index51 alt1">52</div><div class=3D"line nu=
mber53 index52 alt2">53</div><div class=3D"line number54 index53 alt1">54</=
div><div class=3D"line number55 index54 alt2">55</div><div class=3D"line nu=
mber56 index55 alt1">56</div><div class=3D"line number57 index56 alt2">57</=
div><div class=3D"line number58 index57 alt1">58</div><div class=3D"line nu=
mber59 index58 alt2">59</div><div class=3D"line number60 index59 alt1">60</=
div><div class=3D"line number61 index60 alt2">61</div><div class=3D"line nu=
mber62 index61 alt1">62</div><div class=3D"line number63 index62 alt2">63</=
div><div class=3D"line number64 index63 alt1">64</div><div class=3D"line nu=
mber65 index64 alt2">65</div><div class=3D"line number66 index65 alt1">66</=
div><div class=3D"line number67 index66 alt2">67</div><div class=3D"line nu=
mber68 index67 alt1">68</div><div class=3D"line number69 index68 alt2">69</=
div><div class=3D"line number70 index69 alt1">70</div><div class=3D"line nu=
mber71 index70 alt2">71</div><div class=3D"line number72 index71 alt1">72</=
div><div class=3D"line number73 index72 alt2">73</div></td><td class=3D"cod=
e"><div class=3D"container"><div class=3D"line number1 index0 alt2"><code c=
lass=3D"js comments">/*!</code></div><div class=3D"line number2 index1 alt1=
"><code class=3D"js spaces">&nbsp;</code><code class=3D"js comments">* jQue=
ry UI Widget factory "bridge" plugin boilerplate</code></div><div class=3D"=
line number3 index2 alt2"><code class=3D"js spaces">&nbsp;</code><code clas=
s=3D"js comments">* Author: @erichynds</code></div><div class=3D"line numbe=
r4 index3 alt1"><code class=3D"js spaces">&nbsp;</code><code class=3D"js co=
mments">* Further changes, additional comments: @addyosmani</code></div><di=
v class=3D"line number5 index4 alt2"><code class=3D"js spaces">&nbsp;</code=
><code class=3D"js comments">* Licensed under the MIT license</code></div><=
div class=3D"line number6 index5 alt1"><code class=3D"js spaces">&nbsp;</co=
de><code class=3D"js comments">*/</code></div><div class=3D"line number7 in=
dex6 alt2">&nbsp;</div><div class=3D"line number8 index7 alt1">&nbsp;</div>=
<div class=3D"line number9 index8 alt2"><code class=3D"js comments">// a "w=
idgetName" object constructor</code></div><div class=3D"line number10 index=
9 alt1"><code class=3D"js comments">// required: this must accept two argum=
ents,</code></div><div class=3D"line number11 index10 alt2"><code class=3D"=
js comments">// options: an object of configuration options</code></div><di=
v class=3D"line number12 index11 alt1"><code class=3D"js comments">// eleme=
nt: the DOM element the instance was created on</code></div><div class=3D"l=
ine number13 index12 alt2"><code class=3D"js keyword">var</code> <code clas=
s=3D"js plain">widgetName =3D </code><code class=3D"js keyword">function</c=
ode><code class=3D"js plain">( options, element ){</code></div><div class=
=3D"line number14 index13 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</cod=
e><code class=3D"js keyword">this</code><code class=3D"js plain">.name =3D =
</code><code class=3D"js string">"myWidgetName"</code><code class=3D"js pla=
in">;</code></div><div class=3D"line number15 index14 alt2"><code class=3D"=
js spaces">&nbsp;&nbsp;</code><code class=3D"js keyword">this</code><code c=
lass=3D"js plain">.options =3D options;</code></div><div class=3D"line numb=
er16 index15 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=
=3D"js keyword">this</code><code class=3D"js plain">.element =3D element;</=
code></div><div class=3D"line number17 index16 alt2"><code class=3D"js spac=
es">&nbsp;&nbsp;</code><code class=3D"js keyword">this</code><code class=3D=
"js plain">._init();</code></div><div class=3D"line number18 index17 alt1">=
<code class=3D"js plain">}</code></div><div class=3D"line number19 index18 =
alt2">&nbsp;</div><div class=3D"line number20 index19 alt1"><code class=3D"=
js comments">// the "widgetName" prototype</code></div><div class=3D"line n=
umber21 index20 alt2"><code class=3D"js plain">widgetName.prototype =3D {</=
code></div><div class=3D"line number22 index21 alt1">&nbsp;</div><div class=
=3D"line number23 index22 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp=
;&nbsp;</code><code class=3D"js comments">// _create will automatically run=
 the first time this</code></div><div class=3D"line number24 index23 alt1">=
<code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js =
comments">// widget is called</code></div><div class=3D"line number25 index=
24 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code cla=
ss=3D"js plain">_create: </code><code class=3D"js keyword">function</code><=
code class=3D"js plain">(){</code></div><div class=3D"line number26 index25=
 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;</code><code class=3D"js comments">// creation code</code></div><div =
class=3D"line number27 index26 alt2"><code class=3D"js spaces">&nbsp;&nbsp;=
&nbsp;&nbsp;</code><code class=3D"js plain">},</code></div><div class=3D"li=
ne number28 index27 alt1">&nbsp;</div><div class=3D"line number29 index28 a=
lt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js comments">// required: initialization logic for the plugin goes into=
 _init</code></div><div class=3D"line number30 index29 alt1"><code class=3D=
"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// T=
his fires when our instance is first created and when</code></div><div clas=
s=3D"line number31 index30 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbs=
p;&nbsp;</code><code class=3D"js comments">// attempting to initialize the =
widget again (by the bridge)</code></div><div class=3D"line number32 index3=
1 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code clas=
s=3D"js comments">// after it has already been initialized.</code></div><di=
v class=3D"line number33 index32 alt2"><code class=3D"js spaces">&nbsp;&nbs=
p;&nbsp;&nbsp;</code><code class=3D"js plain">_init: </code><code class=3D"=
js keyword">function</code><code class=3D"js plain">(){</code></div><div cl=
ass=3D"line number34 index33 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// ini=
t code</code></div><div class=3D"line number35 index34 alt2"><code class=3D=
"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">},</cod=
e></div><div class=3D"line number36 index35 alt1">&nbsp;</div><div class=3D=
"line number37 index36 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&n=
bsp;</code><code class=3D"js comments">// required: objects to be used with=
 the bridge must contain an</code></div><div class=3D"line number38 index37=
 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js comments">// "option". Post-initialization, the logic for changing o=
ptions</code></div><div class=3D"line number39 index38 alt2"><code class=3D=
"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// g=
oes here.</code></div><div class=3D"line number40 index39 alt1"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">opti=
on: </code><code class=3D"js keyword">function</code><code class=3D"js plai=
n">( key, value ){</code></div><div class=3D"line number41 index40 alt2">&n=
bsp;</div><div class=3D"line number42 index41 alt1"><code class=3D"js space=
s">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js=
 comments">// optional: get/change options post initialization</code></div>=
<div class=3D"line number43 index42 alt2"><code class=3D"js spaces">&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments"=
>// ignore if you don't require them.</code></div><div class=3D"line number=
44 index43 alt1">&nbsp;</div><div class=3D"line number45 index44 alt2"><cod=
e class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</cod=
e><code class=3D"js comments">// signature: $("#foo").bar({ cool:false });<=
/code></div><div class=3D"line number46 index45 alt1"><code class=3D"js spa=
ces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"=
js keyword">if</code><code class=3D"js plain">( $.isPlainObject( key ) ){</=
code></div><div class=3D"line number47 index46 alt2"><code class=3D"js spac=
es">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;</code><code class=3D"js keyword">this</code><code class=3D"js plain">.opt=
ions =3D $.extend( </code><code class=3D"js keyword">true</code><code class=
=3D"js plain">, </code><code class=3D"js keyword">this</code><code class=3D=
"js plain">.options, key );</code></div><div class=3D"line number48 index47=
 alt1">&nbsp;</div><div class=3D"line number49 index48 alt2"><code class=3D=
"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code cl=
ass=3D"js comments">// signature: $( "#foo" ).option( "cool" ); - getter</c=
ode></div><div class=3D"line number50 index49 alt1"><code class=3D"js space=
s">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js=
 plain">} </code><code class=3D"js keyword">else</code> <code class=3D"js k=
eyword">if</code> <code class=3D"js plain">( key &amp;&amp; </code><code cl=
ass=3D"js keyword">typeof</code> <code class=3D"js plain">value =3D=3D=3D <=
/code><code class=3D"js string">"undefined"</code> <code class=3D"js plain"=
>){</code></div><div class=3D"line number51 index50 alt2"><code class=3D"js=
 spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;</code><code class=3D"js keyword">return</code> <code class=3D"js key=
word">this</code><code class=3D"js plain">.options[ key ];</code></div><div=
 class=3D"line number52 index51 alt1">&nbsp;</div><div class=3D"line number=
53 index52 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</code><code class=3D"js comments">// signature: $( "#foo" =
).bar("option", "baz", false );</code></div><div class=3D"line number54 ind=
ex53 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;</code><code class=3D"js plain">} </code><code class=3D"js keywor=
d">else</code> <code class=3D"js plain">{</code></div><div class=3D"line nu=
mber55 index54 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keywor=
d">this</code><code class=3D"js plain">.options[ key ] =3D value;</code></d=
iv><div class=3D"line number56 index55 alt1"><code class=3D"js spaces">&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain"=
>}</code></div><div class=3D"line number57 index56 alt2">&nbsp;</div><div c=
lass=3D"line number58 index57 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// re=
quired: option must return the current instance.</code></div><div class=3D"=
line number59 index58 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// When re-in=
itializing an instance on elements, option</code></div><div class=3D"line n=
umber60 index59 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// is called first =
and is then chained to the _init method.</code></div><div class=3D"line num=
ber61 index60 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">return</code> <code cl=
ass=3D"js keyword">this</code><code class=3D"js plain">;</code></div><div c=
lass=3D"line number62 index61 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&=
nbsp;&nbsp;</code><code class=3D"js plain">},</code></div><div class=3D"lin=
e number63 index62 alt2">&nbsp;</div><div class=3D"line number64 index63 al=
t1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D=
"js comments">// notice no underscore is used for public methods</code></di=
v><div class=3D"line number65 index64 alt2"><code class=3D"js spaces">&nbsp=
;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">publicFunction: </code><=
code class=3D"js keyword">function</code><code class=3D"js plain">(){</code=
></div><div class=3D"line number66 index65 alt1"><code class=3D"js spaces">=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js pl=
ain">console.log( </code><code class=3D"js string">"public function"</code>=
 <code class=3D"js plain">);</code></div><div class=3D"line number67 index6=
6 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code clas=
s=3D"js plain">},</code></div><div class=3D"line number68 index67 alt1">&nb=
sp;</div><div class=3D"line number69 index68 alt2"><code class=3D"js spaces=
">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// underscores=
 are used for private methods</code></div><div class=3D"line number70 index=
69 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code cla=
ss=3D"js plain">_privateFunction: </code><code class=3D"js keyword">functio=
n</code><code class=3D"js plain">(){</code></div><div class=3D"line number7=
1 index70 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;</code><code class=3D"js plain">console.log( </code><code cl=
ass=3D"js string">"private function"</code> <code class=3D"js plain">);</co=
de></div><div class=3D"line number72 index71 alt1"><code class=3D"js spaces=
">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">}</code></div><di=
v class=3D"line number73 index72 alt2"><code class=3D"js plain">};</code></=
div></div></td></tr></tbody></table></div></div>

<p>Usage:</p>
<p></p><div><div id=3D"highlighter_142594" class=3D"syntaxhighlighter  js a=
codecode"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/re=
sources/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_hel=
p help">?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=
=3D"0"><tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 al=
t2">1</div><div class=3D"line number2 index1 alt1">2</div><div class=3D"lin=
e number3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</di=
v><div class=3D"line number5 index4 alt2">5</div><div class=3D"line number6=
 index5 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div cl=
ass=3D"line number8 index7 alt1">8</div><div class=3D"line number9 index8 a=
lt2">9</div><div class=3D"line number10 index9 alt1">10</div><div class=3D"=
line number11 index10 alt2">11</div><div class=3D"line number12 index11 alt=
1">12</div><div class=3D"line number13 index12 alt2">13</div><div class=3D"=
line number14 index13 alt1">14</div><div class=3D"line number15 index14 alt=
2">15</div><div class=3D"line number16 index15 alt1">16</div><div class=3D"=
line number17 index16 alt2">17</div><div class=3D"line number18 index17 alt=
1">18</div></td><td class=3D"code"><div class=3D"container"><div class=3D"l=
ine number1 index0 alt2"><code class=3D"js comments">// connect the widget =
obj to jQuery's API under the "foo" namespace</code></div><div class=3D"lin=
e number2 index1 alt1"><code class=3D"js plain">$.widget.bridge( </code><co=
de class=3D"js string">"foo"</code><code class=3D"js plain">, widgetName );=
</code></div><div class=3D"line number3 index2 alt2">&nbsp;</div><div class=
=3D"line number4 index3 alt1"><code class=3D"js comments">// create an inst=
ance of the widget for use</code></div><div class=3D"line number5 index4 al=
t2"><code class=3D"js keyword">var</code> <code class=3D"js plain">instance=
 =3D $( </code><code class=3D"js string">"#foo"</code> <code class=3D"js pl=
ain">).foo({</code></div><div class=3D"line number6 index5 alt1"><code clas=
s=3D"js spaces">&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">baz: </co=
de><code class=3D"js keyword">true</code></div><div class=3D"line number7 i=
ndex6 alt2"><code class=3D"js plain">});</code></div><div class=3D"line num=
ber8 index7 alt1">&nbsp;</div><div class=3D"line number9 index8 alt2"><code=
 class=3D"js comments">// our widget instance exists in the elem's data</co=
de></div><div class=3D"line number10 index9 alt1"><code class=3D"js comment=
s">// Outputs: #elem</code></div><div class=3D"line number11 index10 alt2">=
<code class=3D"js plain">console.log(instance.data( </code><code class=3D"j=
s string">"foo"</code> <code class=3D"js plain">).element);</code></div><di=
v class=3D"line number12 index11 alt1">&nbsp;</div><div class=3D"line numbe=
r13 index12 alt2"><code class=3D"js comments">// bridge allows us to call p=
ublic methods</code></div><div class=3D"line number14 index13 alt1"><code c=
lass=3D"js comments">// Outputs: "public method"</code></div><div class=3D"=
line number15 index14 alt2"><code class=3D"js plain">instance.foo(</code><c=
ode class=3D"js string">"publicFunction"</code><code class=3D"js plain">);<=
/code></div><div class=3D"line number16 index15 alt1">&nbsp;</div><div clas=
s=3D"line number17 index16 alt2"><code class=3D"js comments">// bridge prev=
ents calls to internal methods</code></div><div class=3D"line number18 inde=
x17 alt1"><code class=3D"js plain">instance.foo(</code><code class=3D"js st=
ring">"_privateFunction"</code><code class=3D"js plain">);</code></div></di=
v></td></tr></tbody></table></div></div><p></p>

<h4>Further Reading</h4>

<ul>
<li>=E2=80=9C<a href=3D"http://erichynds.com/jquery/using-jquery-ui-widget-=
factory-bridge/">Using $.widget.bridge Outside of the Widget Factory</a>,=
=E2=80=9D Eric Hynds</li>
</ul>

<p>&nbsp;</p>
<p>&nbsp;</p>
<h3>jQuery Mobile Widgets With The Widget factory</h3>

<p>jQuery mobile is a jQuery project framework that encourages the design o=
f ubiquitous web applications that work both on popular mobile devices and =
platforms and on the desktop. Rather than writing unique applications for e=
ach device or OS, we simply write the code once and it should ideally run o=
n many of the A-, B- and C-grade browsers out there at the moment.</p>

<p>The fundamentals behind jQuery mobile can also be applied to plugin and =
widget development.</p>

<p>What=E2=80=99s interesting in this next pattern is that although there a=
re small, subtle differences in writing a =E2=80=9Cmobile=E2=80=9D-optimize=
d widget, those familiar with using the jQuery UI Widget Factory pattern fr=
om earlier should be able to grasp this in next to no time.</p>

<p>The mobile-optimized widget below has a number of interesting difference=
s than the standard UI widget pattern we saw earlier:</p>

<ul>
<li><code>$.mobile.widget</code> is referenced as an existing widget protot=
ype from which to inherit. For standard widgets, passing through any such p=
rototype is unnecessary for basic development, but using this jQuery-mobile=
 specific widget prototype provides internal access to further =E2=80=9Copt=
ions=E2=80=9D formatting.</li>

<li>In <code>_create()</code>, a guide is provided on how the official jQue=
ry mobile widgets handle element selection, opting for a role-based approac=
h that better fits the jQM mark-up. This isn=E2=80=99t at all to say that s=
tandard selection isn=E2=80=99t recommended, only that this approach might =
make more sense given the structure of jQuery Mobile pages.</li>

<li>Guidelines are also provided in comment form for applying our plugin me=
thods on <code>pagecreate</code> as well as for selecting the plugin applic=
ation via data roles and data attributes.</li>
</ul>

<div><div id=3D"highlighter_737395" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</=
div><div class=3D"line number19 index18 alt2">19</div><div class=3D"line nu=
mber20 index19 alt1">20</div><div class=3D"line number21 index20 alt2">21</=
div><div class=3D"line number22 index21 alt1">22</div><div class=3D"line nu=
mber23 index22 alt2">23</div><div class=3D"line number24 index23 alt1">24</=
div><div class=3D"line number25 index24 alt2">25</div><div class=3D"line nu=
mber26 index25 alt1">26</div><div class=3D"line number27 index26 alt2">27</=
div><div class=3D"line number28 index27 alt1">28</div><div class=3D"line nu=
mber29 index28 alt2">29</div><div class=3D"line number30 index29 alt1">30</=
div><div class=3D"line number31 index30 alt2">31</div><div class=3D"line nu=
mber32 index31 alt1">32</div><div class=3D"line number33 index32 alt2">33</=
div><div class=3D"line number34 index33 alt1">34</div><div class=3D"line nu=
mber35 index34 alt2">35</div><div class=3D"line number36 index35 alt1">36</=
div><div class=3D"line number37 index36 alt2">37</div><div class=3D"line nu=
mber38 index37 alt1">38</div><div class=3D"line number39 index38 alt2">39</=
div><div class=3D"line number40 index39 alt1">40</div><div class=3D"line nu=
mber41 index40 alt2">41</div><div class=3D"line number42 index41 alt1">42</=
div><div class=3D"line number43 index42 alt2">43</div><div class=3D"line nu=
mber44 index43 alt1">44</div><div class=3D"line number45 index44 alt2">45</=
div><div class=3D"line number46 index45 alt1">46</div><div class=3D"line nu=
mber47 index46 alt2">47</div><div class=3D"line number48 index47 alt1">48</=
div><div class=3D"line number49 index48 alt2">49</div><div class=3D"line nu=
mber50 index49 alt1">50</div><div class=3D"line number51 index50 alt2">51</=
div><div class=3D"line number52 index51 alt1">52</div><div class=3D"line nu=
mber53 index52 alt2">53</div><div class=3D"line number54 index53 alt1">54</=
div><div class=3D"line number55 index54 alt2">55</div><div class=3D"line nu=
mber56 index55 alt1">56</div><div class=3D"line number57 index56 alt2">57</=
div><div class=3D"line number58 index57 alt1">58</div><div class=3D"line nu=
mber59 index58 alt2">59</div><div class=3D"line number60 index59 alt1">60</=
div><div class=3D"line number61 index60 alt2">61</div><div class=3D"line nu=
mber62 index61 alt1">62</div><div class=3D"line number63 index62 alt2">63</=
div><div class=3D"line number64 index63 alt1">64</div><div class=3D"line nu=
mber65 index64 alt2">65</div><div class=3D"line number66 index65 alt1">66</=
div><div class=3D"line number67 index66 alt2">67</div><div class=3D"line nu=
mber68 index67 alt1">68</div><div class=3D"line number69 index68 alt2">69</=
div><div class=3D"line number70 index69 alt1">70</div><div class=3D"line nu=
mber71 index70 alt2">71</div><div class=3D"line number72 index71 alt1">72</=
div><div class=3D"line number73 index72 alt2">73</div><div class=3D"line nu=
mber74 index73 alt1">74</div><div class=3D"line number75 index74 alt2">75</=
div><div class=3D"line number76 index75 alt1">76</div><div class=3D"line nu=
mber77 index76 alt2">77</div><div class=3D"line number78 index77 alt1">78</=
div><div class=3D"line number79 index78 alt2">79</div><div class=3D"line nu=
mber80 index79 alt1">80</div><div class=3D"line number81 index80 alt2">81</=
div><div class=3D"line number82 index81 alt1">82</div><div class=3D"line nu=
mber83 index82 alt2">83</div><div class=3D"line number84 index83 alt1">84</=
div><div class=3D"line number85 index84 alt2">85</div><div class=3D"line nu=
mber86 index85 alt1">86</div><div class=3D"line number87 index86 alt2">87</=
div><div class=3D"line number88 index87 alt1">88</div><div class=3D"line nu=
mber89 index88 alt2">89</div><div class=3D"line number90 index89 alt1">90</=
div></td><td class=3D"code"><div class=3D"container"><div class=3D"line num=
ber1 index0 alt2"><code class=3D"js comments">/*!</code></div><div class=3D=
"line number2 index1 alt1"><code class=3D"js spaces">&nbsp;</code><code cla=
ss=3D"js comments">* (jQuery mobile) jQuery UI Widget-factory plugin boiler=
plate (for 1.8/9+)</code></div><div class=3D"line number3 index2 alt2"><cod=
e class=3D"js spaces">&nbsp;</code><code class=3D"js comments">* Author: @s=
cottjehl</code></div><div class=3D"line number4 index3 alt1"><code class=3D=
"js spaces">&nbsp;</code><code class=3D"js comments">* Further changes: @ad=
dyosmani</code></div><div class=3D"line number5 index4 alt2"><code class=3D=
"js spaces">&nbsp;</code><code class=3D"js comments">* Licensed under the M=
IT license</code></div><div class=3D"line number6 index5 alt1"><code class=
=3D"js spaces">&nbsp;</code><code class=3D"js comments">*/</code></div><div=
 class=3D"line number7 index6 alt2">&nbsp;</div><div class=3D"line number8 =
index7 alt1"><code class=3D"js plain">;(</code><code class=3D"js keyword">f=
unction</code> <code class=3D"js plain">( $, window, document, undefined ) =
{</code></div><div class=3D"line number9 index8 alt2">&nbsp;</div><div clas=
s=3D"line number10 index9 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp=
;&nbsp;</code><code class=3D"js comments">// define a widget under a namesp=
ace of our choice</code></div><div class=3D"line number11 index10 alt2"><co=
de class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js com=
ments">// here "mobile" has been used in the first argument</code></div><di=
v class=3D"line number12 index11 alt1"><code class=3D"js spaces">&nbsp;&nbs=
p;&nbsp;&nbsp;</code><code class=3D"js plain">$.widget( </code><code class=
=3D"js string">"mobile.widgetName"</code><code class=3D"js plain">, $.mobil=
e.widget, {</code></div><div class=3D"line number13 index12 alt2">&nbsp;</d=
iv><div class=3D"line number14 index13 alt1"><code class=3D"js spaces">&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js commen=
ts">// Options to be used as defaults</code></div><div class=3D"line number=
15 index14 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</code><code class=3D"js plain">options: {</code></div><div=
 class=3D"line number16 index15 alt1"><code class=3D"js spaces">&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code c=
lass=3D"js plain">foo: </code><code class=3D"js keyword">true</code><code c=
lass=3D"js plain">,</code></div><div class=3D"line number17 index16 alt2"><=
code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">bar: </code><code cla=
ss=3D"js keyword">false</code></div><div class=3D"line number18 index17 alt=
1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</code><code class=3D"js plain">},</code></div><div class=3D"line number1=
9 index18 alt2">&nbsp;</div><div class=3D"line number20 index19 alt1"><code=
 class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code=
><code class=3D"js plain">_create: </code><code class=3D"js keyword">functi=
on</code><code class=3D"js plain">() {</code></div><div class=3D"line numbe=
r21 index20 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments"=
>// _create will automatically run the first time this</code></div><div cla=
ss=3D"line number22 index21 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js comments">// widget is called. Put the initial widget set-up code</c=
ode></div><div class=3D"line number23 index22 alt2"><code class=3D"js space=
s">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
</code><code class=3D"js comments">// here, then we can access the element =
on which</code></div><div class=3D"line number24 index23 alt1"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;</code><code class=3D"js comments">// the widget was called via=
 this.element</code></div><div class=3D"line number25 index24 alt2"><code c=
lass=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</code><code class=3D"js comments">// The options defined a=
bove can be accessed via</code></div><div class=3D"line number26 index25 al=
t1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// this.optio=
ns</code></div><div class=3D"line number27 index26 alt2">&nbsp;</div><div c=
lass=3D"line number28 index27 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code cla=
ss=3D"js comments">// var m =3D this.element,</code></div><div class=3D"lin=
e number29 index28 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js co=
mments">// p =3D m.parents( ":jqmData(role=3D"page")" ),</code></div><div c=
lass=3D"line number30 index29 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code cla=
ss=3D"js comments">// c =3D p.find( ":jqmData(role=3D"content")" )</code></=
div><div class=3D"line number31 index30 alt2"><code class=3D"js spaces">&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain=
">},</code></div><div class=3D"line number32 index31 alt1">&nbsp;</div><div=
 class=3D"line number33 index32 alt2"><code class=3D"js spaces">&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// =
Private methods/props start with underscores</code></div><div class=3D"line=
 number34 index33 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">_dosomething: </code=
><code class=3D"js keyword">function</code><code class=3D"js plain">(){ ...=
 },</code></div><div class=3D"line number35 index34 alt2">&nbsp;</div><div =
class=3D"line number36 index35 alt1"><code class=3D"js spaces">&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// P=
ublic methods like these below can can be called</code></div><div class=3D"=
line number37 index36 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// externally=
:</code></div><div class=3D"line number38 index37 alt1"><code class=3D"js s=
paces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js comments">// $("#myelem").foo( "enable", arguments );</code></div><d=
iv class=3D"line number39 index38 alt2">&nbsp;</div><div class=3D"line numb=
er40 index39 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">enable: </code><code clas=
s=3D"js keyword">function</code><code class=3D"js plain">() { ... },</code>=
</div><div class=3D"line number41 index40 alt2">&nbsp;</div><div class=3D"l=
ine number42 index41 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// Destroy an =
instantiated plugin and clean up modifications</code></div><div class=3D"li=
ne number43 index42 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// the widget h=
as made to the DOM</code></div><div class=3D"line number44 index43 alt1"><c=
ode class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</c=
ode><code class=3D"js plain">destroy: </code><code class=3D"js keyword">fun=
ction</code> <code class=3D"js plain">() {</code></div><div class=3D"line n=
umber45 index44 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comme=
nts">// this.element.removeStuff();</code></div><div class=3D"line number46=
 index45 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">//=
 For UI 1.8, destroy must be invoked from the</code></div><div class=3D"lin=
e number47 index46 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js co=
mments">// base widget</code></div><div class=3D"line number48 index47 alt1=
"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">$.Widget.prototype=
.destroy.call( </code><code class=3D"js keyword">this</code> <code class=3D=
"js plain">);</code></div><div class=3D"line number49 index48 alt2"><code c=
lass=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</code><code class=3D"js comments">// For UI 1.9, define _d=
estroy instead and don't</code></div><div class=3D"line number50 index49 al=
t1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// worry abou=
t calling the base widget</code></div><div class=3D"line number51 index50 a=
lt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;</code><code class=3D"js plain">},</code></div><div class=3D"line numbe=
r52 index51 alt1">&nbsp;</div><div class=3D"line number53 index52 alt2"><co=
de class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</co=
de><code class=3D"js plain">methodB: </code><code class=3D"js keyword">func=
tion</code> <code class=3D"js plain">( event ) {</code></div><div class=3D"=
line number54 index53 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js=
 comments">//_trigger dispatches callbacks the plugin user can</code></div>=
<div class=3D"line number55 index54 alt2"><code class=3D"js spaces">&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><co=
de class=3D"js comments">// subscribe to</code></div><div class=3D"line num=
ber56 index55 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comment=
s">// signature: _trigger( "callbackName", [eventObject],</code></div><div =
class=3D"line number57 index56 alt2"><code class=3D"js spaces">&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code cl=
ass=3D"js comments">// [uiObject] )</code></div><div class=3D"line number58=
 index57 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">//=
 e.g. this._trigger( "hover", e /*where e.type =3D=3D</code></div><div clas=
s=3D"line number59 index58 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js comments">// "mouseenter"*/, { hovered: $(e.target)});</code></div><=
div class=3D"line number60 index59 alt1"><code class=3D"js spaces">&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><cod=
e class=3D"js keyword">this</code><code class=3D"js plain">._trigger( </cod=
e><code class=3D"js string">"methodA"</code><code class=3D"js plain">, even=
t, {</code></div><div class=3D"line number61 index60 alt2"><code class=3D"j=
s spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">key: value</=
code></div><div class=3D"line number62 index61 alt1"><code class=3D"js spac=
es">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;</code><code class=3D"js plain">});</code></div><div class=3D"line number6=
3 index62 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;</code><code class=3D"js plain">},</code></div><div class=3D=
"line number64 index63 alt1">&nbsp;</div><div class=3D"line number65 index6=
4 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;</code><code class=3D"js plain">methodA: </code><code class=3D"js ke=
yword">function</code> <code class=3D"js plain">( event ) {</code></div><di=
v class=3D"line number66 index65 alt1"><code class=3D"js spaces">&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code =
class=3D"js keyword">this</code><code class=3D"js plain">._trigger( </code>=
<code class=3D"js string">"dataChanged"</code><code class=3D"js plain">, ev=
ent, {</code></div><div class=3D"line number67 index66 alt2"><code class=3D=
"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">key: value=
</code></div><div class=3D"line number68 index67 alt1"><code class=3D"js sp=
aces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;</code><code class=3D"js plain">});</code></div><div class=3D"line numbe=
r69 index68 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">},</code></div><div class=
=3D"line number70 index69 alt1">&nbsp;</div><div class=3D"line number71 ind=
ex70 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;</code><code class=3D"js comments">// Respond to any changes the =
user makes to the option method</code></div><div class=3D"line number72 ind=
ex71 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;</code><code class=3D"js plain">_setOption: </code><code class=3D=
"js keyword">function</code> <code class=3D"js plain">( key, value ) {</cod=
e></div><div class=3D"line number73 index72 alt2"><code class=3D"js spaces"=
>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</=
code><code class=3D"js keyword">switch</code> <code class=3D"js plain">( ke=
y ) {</code></div><div class=3D"line number74 index73 alt1"><code class=3D"=
js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;</code><code class=3D"js keyword">case</code> <code class=3D"js str=
ing">"someValue"</code><code class=3D"js plain">:</code></div><div class=3D=
"line number75 index74 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;</code><code class=3D"js comments">// this.options.someValue =3D doSomethi=
ngWith( value );</code></div><div class=3D"line number76 index75 alt1"><cod=
e class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword=
">break</code><code class=3D"js plain">;</code></div><div class=3D"line num=
ber77 index76 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword=
">default</code><code class=3D"js plain">:</code></div><div class=3D"line n=
umber78 index77 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code=
><code class=3D"js comments">// this.options[ key ] =3D value;</code></div>=
<div class=3D"line number79 index78 alt2"><code class=3D"js spaces">&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;</code><code class=3D"js keyword">break</code><code class=3D"=
js plain">;</code></div><div class=3D"line number80 index79 alt1"><code cla=
ss=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;</code><code class=3D"js plain">}</code></div><div class=3D"l=
ine number81 index80 alt2">&nbsp;</div><div class=3D"line number82 index81 =
alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// For UI 1=
.8, _setOption must be manually invoked from</code></div><div class=3D"line=
 number83 index82 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js com=
ments">// the base widget</code></div><div class=3D"line number84 index83 a=
lt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">$.Widget.protot=
ype._setOption.apply(</code><code class=3D"js keyword">this</code><code cla=
ss=3D"js plain">, arguments);</code></div><div class=3D"line number85 index=
84 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// For U=
I 1.9 the _super method can be used instead</code></div><div class=3D"line =
number86 index85 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comm=
ents">// this._super( "_setOption", key, value );</code></div><div class=3D=
"line number87 index86 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">}</code></div><=
div class=3D"line number88 index87 alt1"><code class=3D"js spaces">&nbsp;&n=
bsp;&nbsp;&nbsp;</code><code class=3D"js plain">});</code></div><div class=
=3D"line number89 index88 alt2">&nbsp;</div><div class=3D"line number90 ind=
ex89 alt1"><code class=3D"js plain">})( jQuery, window, document );</code><=
/div></div></td></tr></tbody></table></div></div>

<p>Usage:</p>
<p></p><div><div id=3D"highlighter_945403" class=3D"syntaxhighlighter  js a=
codecode"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/re=
sources/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_hel=
p help">?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=
=3D"0"><tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 al=
t2">1</div><div class=3D"line number2 index1 alt1">2</div><div class=3D"lin=
e number3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</di=
v><div class=3D"line number5 index4 alt2">5</div></td><td class=3D"code"><d=
iv class=3D"container"><div class=3D"line number1 index0 alt2"><code class=
=3D"js keyword">var</code> <code class=3D"js plain">instance =3D $( </code>=
<code class=3D"js string">"#foo"</code> <code class=3D"js plain">).widgetNa=
me({</code></div><div class=3D"line number2 index1 alt1"><code class=3D"js =
spaces">&nbsp;&nbsp;</code><code class=3D"js plain">foo: </code><code class=
=3D"js keyword">false</code></div><div class=3D"line number3 index2 alt2"><=
code class=3D"js plain">});</code></div><div class=3D"line number4 index3 a=
lt1">&nbsp;</div><div class=3D"line number5 index4 alt2"><code class=3D"js =
plain">instance.widgetName( </code><code class=3D"js string">"methodB"</cod=
e> <code class=3D"js plain">);</code></div></div></td></tr></tbody></table>=
</div></div><p></p>

<p>We can also self-initialize this widget whenever a new page in jQuery Mo=
bile is created. jQuery Mobile's <em>page</em> plugin dispatches a <em>crea=
te</em> event when a jQuery Mobile page (found via the <code>data-role=3D"p=
age"</code> attribute) is first initialized. We can listen for that event (=
called "pagecreate") and run our plugin automatically whenever a new page i=
s created.</p>

<p></p><div><div id=3D"highlighter_419892" class=3D"syntaxhighlighter  js a=
codecode"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/re=
sources/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_hel=
p help">?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=
=3D"0"><tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 al=
t2">1</div><div class=3D"line number2 index1 alt1">2</div><div class=3D"lin=
e number3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</di=
v><div class=3D"line number5 index4 alt2">5</div><div class=3D"line number6=
 index5 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div cl=
ass=3D"line number8 index7 alt1">8</div><div class=3D"line number9 index8 a=
lt2">9</div><div class=3D"line number10 index9 alt1">10</div><div class=3D"=
line number11 index10 alt2">11</div><div class=3D"line number12 index11 alt=
1">12</div><div class=3D"line number13 index12 alt2">13</div></td><td class=
=3D"code"><div class=3D"container"><div class=3D"line number1 index0 alt2">=
<code class=3D"js plain">$(document).on(</code><code class=3D"js string">"p=
agecreate"</code><code class=3D"js plain">, </code><code class=3D"js keywor=
d">function</code> <code class=3D"js plain">( e ) {</code></div><div class=
=3D"line number2 index1 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&=
nbsp;</code><code class=3D"js comments">// In here, e.target refers to the =
page that was created</code></div><div class=3D"line number3 index2 alt2"><=
code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js c=
omments">// (it's the target of the pagecreate event)</code></div><div clas=
s=3D"line number4 index3 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;=
&nbsp;</code><code class=3D"js comments">// So, we can simply find elements=
 on this page that match a</code></div><div class=3D"line number5 index4 al=
t2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D=
"js comments">// selector of our choosing, and call our plugin on them.</co=
de></div><div class=3D"line number6 index5 alt1"><code class=3D"js spaces">=
&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// Here's how we=
'd call our "foo" plugin on any element with a</code></div><div class=3D"li=
ne number7 index6 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;<=
/code><code class=3D"js comments">// data-role attribute of "foo":</code></=
div><div class=3D"line number8 index7 alt1"><code class=3D"js spaces">&nbsp=
;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">$(e.target).find( </code=
><code class=3D"js string">"[data-role=3D"</code><code class=3D"js plain">f=
oo</code><code class=3D"js string">"]"</code> <code class=3D"js plain">).fo=
o( options );</code></div><div class=3D"line number9 index8 alt2">&nbsp;</d=
iv><div class=3D"line number10 index9 alt1"><code class=3D"js spaces">&nbsp=
;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// Or, better yet, le=
t's write the selector accounting for the configurable</code></div><div cla=
ss=3D"line number11 index10 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nb=
sp;&nbsp;</code><code class=3D"js comments">// data-attribute namespace</co=
de></div><div class=3D"line number12 index11 alt1"><code class=3D"js spaces=
">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">$( e.target ).fin=
d( </code><code class=3D"js string">":jqmData(role=3D"</code><code class=3D=
"js plain">foo</code><code class=3D"js string">")"</code> <code class=3D"js=
 plain">).foo( options );</code></div><div class=3D"line number13 index12 a=
lt2"><code class=3D"js plain">});</code></div></div></td></tr></tbody></tab=
le></div></div><p></p>

<p>We can now simply reference the script containing our widget and <code>p=
agecreate</code> binding in a page running jQuery Mobile site, and it will =
automatically run like any other jQuery Mobile plugin.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>


<h3>RequireJS And The jQuery UI Widget Factory</h3>

<p>As we covered in the section on <em>Modern Module Design Patterns</em>, =
RequireJS is an AMD-compatible script loader that provides a clean solution=
 for encapsulating application logic inside manageable modules.</p>

<p>It=E2=80=99s able to load modules in the correct order (through its orde=
r plugin), simplifies the process of combining scripts via its excellent r.=
js optimizer and provides the means for defining dynamic dependencies on a =
per-module basis.</p>

<p>In the boilerplate pattern below, we demonstrate how an AMD (and thus Re=
quireJS) compatible jQuery UI widget can be defined that does the following=
:</p>

<ul>
<li>Allows the definition of widget module dependencies, building on top of=
 the previous jQuery UI Widget Factory pattern presented earlier.</li>

<li>Demonstrates one approach to passing in HTML template assets for creati=
ng templated widgets (using Underscore.js micro-templating).</li>

<li>Includes a quick tip on adjustments that we can make to our widget modu=
le if we wish to later pass it through to the RequireJS optimizer.</li>
</ul>

<div><div id=3D"highlighter_127651" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</=
div><div class=3D"line number19 index18 alt2">19</div><div class=3D"line nu=
mber20 index19 alt1">20</div><div class=3D"line number21 index20 alt2">21</=
div><div class=3D"line number22 index21 alt1">22</div><div class=3D"line nu=
mber23 index22 alt2">23</div><div class=3D"line number24 index23 alt1">24</=
div><div class=3D"line number25 index24 alt2">25</div><div class=3D"line nu=
mber26 index25 alt1">26</div><div class=3D"line number27 index26 alt2">27</=
div><div class=3D"line number28 index27 alt1">28</div><div class=3D"line nu=
mber29 index28 alt2">29</div><div class=3D"line number30 index29 alt1">30</=
div><div class=3D"line number31 index30 alt2">31</div><div class=3D"line nu=
mber32 index31 alt1">32</div><div class=3D"line number33 index32 alt2">33</=
div><div class=3D"line number34 index33 alt1">34</div><div class=3D"line nu=
mber35 index34 alt2">35</div><div class=3D"line number36 index35 alt1">36</=
div><div class=3D"line number37 index36 alt2">37</div><div class=3D"line nu=
mber38 index37 alt1">38</div><div class=3D"line number39 index38 alt2">39</=
div><div class=3D"line number40 index39 alt1">40</div><div class=3D"line nu=
mber41 index40 alt2">41</div><div class=3D"line number42 index41 alt1">42</=
div><div class=3D"line number43 index42 alt2">43</div><div class=3D"line nu=
mber44 index43 alt1">44</div><div class=3D"line number45 index44 alt2">45</=
div><div class=3D"line number46 index45 alt1">46</div><div class=3D"line nu=
mber47 index46 alt2">47</div><div class=3D"line number48 index47 alt1">48</=
div><div class=3D"line number49 index48 alt2">49</div><div class=3D"line nu=
mber50 index49 alt1">50</div><div class=3D"line number51 index50 alt2">51</=
div><div class=3D"line number52 index51 alt1">52</div><div class=3D"line nu=
mber53 index52 alt2">53</div><div class=3D"line number54 index53 alt1">54</=
div><div class=3D"line number55 index54 alt2">55</div><div class=3D"line nu=
mber56 index55 alt1">56</div><div class=3D"line number57 index56 alt2">57</=
div><div class=3D"line number58 index57 alt1">58</div><div class=3D"line nu=
mber59 index58 alt2">59</div><div class=3D"line number60 index59 alt1">60</=
div><div class=3D"line number61 index60 alt2">61</div><div class=3D"line nu=
mber62 index61 alt1">62</div><div class=3D"line number63 index62 alt2">63</=
div><div class=3D"line number64 index63 alt1">64</div><div class=3D"line nu=
mber65 index64 alt2">65</div><div class=3D"line number66 index65 alt1">66</=
div><div class=3D"line number67 index66 alt2">67</div><div class=3D"line nu=
mber68 index67 alt1">68</div><div class=3D"line number69 index68 alt2">69</=
div><div class=3D"line number70 index69 alt1">70</div><div class=3D"line nu=
mber71 index70 alt2">71</div><div class=3D"line number72 index71 alt1">72</=
div><div class=3D"line number73 index72 alt2">73</div><div class=3D"line nu=
mber74 index73 alt1">74</div><div class=3D"line number75 index74 alt2">75</=
div><div class=3D"line number76 index75 alt1">76</div><div class=3D"line nu=
mber77 index76 alt2">77</div><div class=3D"line number78 index77 alt1">78</=
div><div class=3D"line number79 index78 alt2">79</div><div class=3D"line nu=
mber80 index79 alt1">80</div><div class=3D"line number81 index80 alt2">81</=
div><div class=3D"line number82 index81 alt1">82</div><div class=3D"line nu=
mber83 index82 alt2">83</div><div class=3D"line number84 index83 alt1">84</=
div><div class=3D"line number85 index84 alt2">85</div><div class=3D"line nu=
mber86 index85 alt1">86</div><div class=3D"line number87 index86 alt2">87</=
div><div class=3D"line number88 index87 alt1">88</div><div class=3D"line nu=
mber89 index88 alt2">89</div><div class=3D"line number90 index89 alt1">90</=
div><div class=3D"line number91 index90 alt2">91</div><div class=3D"line nu=
mber92 index91 alt1">92</div><div class=3D"line number93 index92 alt2">93</=
div><div class=3D"line number94 index93 alt1">94</div><div class=3D"line nu=
mber95 index94 alt2">95</div><div class=3D"line number96 index95 alt1">96</=
div></td><td class=3D"code"><div class=3D"container"><div class=3D"line num=
ber1 index0 alt2"><code class=3D"js comments">/*!</code></div><div class=3D=
"line number2 index1 alt1"><code class=3D"js spaces">&nbsp;</code><code cla=
ss=3D"js comments">* jQuery UI Widget + RequireJS module boilerplate (for 1=
.8/9+)</code></div><div class=3D"line number3 index2 alt2"><code class=3D"j=
s spaces">&nbsp;</code><code class=3D"js comments">* Authors: @jrburke, @ad=
dyosmani</code></div><div class=3D"line number4 index3 alt1"><code class=3D=
"js spaces">&nbsp;</code><code class=3D"js comments">* Licensed under the M=
IT license</code></div><div class=3D"line number5 index4 alt2"><code class=
=3D"js spaces">&nbsp;</code><code class=3D"js comments">*/</code></div><div=
 class=3D"line number6 index5 alt1">&nbsp;</div><div class=3D"line number7 =
index6 alt2"><code class=3D"js comments">// Note from James:</code></div><d=
iv class=3D"line number8 index7 alt1"><code class=3D"js comments">//</code>=
</div><div class=3D"line number9 index8 alt2"><code class=3D"js comments">/=
/ This assumes we are using the RequireJS+jQuery file, and</code></div><div=
 class=3D"line number10 index9 alt1"><code class=3D"js comments">// that th=
e following files are all in the same directory:</code></div><div class=3D"=
line number11 index10 alt2"><code class=3D"js comments">//</code></div><div=
 class=3D"line number12 index11 alt1"><code class=3D"js comments">// - requ=
ire-jquery.js</code></div><div class=3D"line number13 index12 alt2"><code c=
lass=3D"js comments">// - jquery-ui.custom.min.js (custom jQuery UI build w=
ith widget factory)</code></div><div class=3D"line number14 index13 alt1"><=
code class=3D"js comments">// - templates/</code></div><div class=3D"line n=
umber15 index14 alt2"><code class=3D"js comments">// - asset.html</code></d=
iv><div class=3D"line number16 index15 alt1"><code class=3D"js comments">//=
 - ao.myWidget.js</code></div><div class=3D"line number17 index16 alt2">&nb=
sp;</div><div class=3D"line number18 index17 alt1"><code class=3D"js commen=
ts">// Then we can construct the widget as follows:</code></div><div class=
=3D"line number19 index18 alt2">&nbsp;</div><div class=3D"line number20 ind=
ex19 alt1"><code class=3D"js comments">// ao.myWidget.js file:</code></div>=
<div class=3D"line number21 index20 alt2"><code class=3D"js plain">define( =
</code><code class=3D"js string">"ao.myWidget"</code><code class=3D"js plai=
n">, [</code><code class=3D"js string">"jquery"</code><code class=3D"js pla=
in">, </code><code class=3D"js string">"text!templates/asset.html"</code><c=
ode class=3D"js plain">, </code><code class=3D"js string">"underscore"</cod=
e><code class=3D"js plain">, </code><code class=3D"js string">"jquery-ui.cu=
stom.min"</code><code class=3D"js plain">], </code><code class=3D"js keywor=
d">function</code> <code class=3D"js plain">( $, assetHtml, _ ) {</code></d=
iv><div class=3D"line number22 index21 alt1">&nbsp;</div><div class=3D"line=
 number23 index22 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;<=
/code><code class=3D"js comments">// define our widget under a namespace of=
 our choice</code></div><div class=3D"line number24 index23 alt1"><code cla=
ss=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments"=
>// "ao" is used here as a demonstration</code></div><div class=3D"line num=
ber25 index24 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</cod=
e><code class=3D"js plain">$.widget( </code><code class=3D"js string">"ao.m=
yWidget"</code><code class=3D"js plain">, {</code></div><div class=3D"line =
number26 index25 alt1">&nbsp;</div><div class=3D"line number27 index26 alt2=
"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;</code><code class=3D"js comments">// Options to be used as defaults</code=
></div><div class=3D"line number28 index27 alt1"><code class=3D"js spaces">=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js pl=
ain">options: {},</code></div><div class=3D"line number29 index28 alt2">&nb=
sp;</div><div class=3D"line number30 index29 alt1"><code class=3D"js spaces=
">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js =
comments">// Set up widget (e.g. create element, apply theming,</code></div=
><div class=3D"line number31 index30 alt2"><code class=3D"js spaces">&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments=
">// bind events, etc.)</code></div><div class=3D"line number32 index31 alt=
1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</code><code class=3D"js plain">_create: </code><code class=3D"js keyword=
">function</code> <code class=3D"js plain">() {</code></div><div class=3D"l=
ine number33 index32 alt2">&nbsp;</div><div class=3D"line number34 index33 =
alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// _create =
will automatically run the first time</code></div><div class=3D"line number=
35 index34 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">=
// this widget is called. Put the initial widget</code></div><div class=3D"=
line number36 index35 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js=
 comments">// set-up code here, then we can access the element</code></div>=
<div class=3D"line number37 index36 alt2"><code class=3D"js spaces">&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><co=
de class=3D"js comments">// on which the widget was called via this.element=
.</code></div><div class=3D"line number38 index37 alt1"><code class=3D"js s=
paces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;</code><code class=3D"js comments">// The options defined above can be =
accessed via</code></div><div class=3D"line number39 index38 alt2"><code cl=
ass=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;</code><code class=3D"js comments">// this.options</code></d=
iv><div class=3D"line number40 index39 alt1">&nbsp;</div><div class=3D"line=
 number41 index40 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js com=
ments">// this.element.addStuff();</code></div><div class=3D"line number42 =
index41 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// =
this.element.addStuff();</code></div><div class=3D"line number43 index42 al=
t2">&nbsp;</div><div class=3D"line number44 index43 alt1"><code class=3D"js=
 spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;</code><code class=3D"js comments">// We can then use Underscore temp=
lating with</code></div><div class=3D"line number45 index44 alt2"><code cla=
ss=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;</code><code class=3D"js comments">// with the assetHtml that=
 has been pulled in</code></div><div class=3D"line number46 index45 alt1"><=
code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// var template =
=3D _.template( assetHtml );</code></div><div class=3D"line number47 index4=
6 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// this.c=
ontent.append( template({}) );</code></div><div class=3D"line number48 inde=
x47 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;</code><code class=3D"js plain">},</code></div><div class=3D"line =
number49 index48 alt2">&nbsp;</div><div class=3D"line number50 index49 alt1=
"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;</code><code class=3D"js comments">// Destroy an instantiated plugin and c=
lean up modifications</code></div><div class=3D"line number51 index50 alt2"=
><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
</code><code class=3D"js comments">// that the widget has made to the DOM</=
code></div><div class=3D"line number52 index51 alt1"><code class=3D"js spac=
es">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"j=
s plain">destroy: </code><code class=3D"js keyword">function</code> <code c=
lass=3D"js plain">() {</code></div><div class=3D"line number53 index52 alt2=
"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// this.element=
.removeStuff();</code></div><div class=3D"line number54 index53 alt1"><code=
 class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// For UI 1.8, destroy=
 must be invoked from the base</code></div><div class=3D"line number55 inde=
x54 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// widg=
et</code></div><div class=3D"line number56 index55 alt1"><code class=3D"js =
spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;</code><code class=3D"js plain">$.Widget.prototype.destroy.call( </cod=
e><code class=3D"js keyword">this</code> <code class=3D"js plain">);</code>=
</div><div class=3D"line number57 index56 alt2"><code class=3D"js spaces">&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</co=
de><code class=3D"js comments">// For UI 1.9, define _destroy instead and d=
on't worry</code></div><div class=3D"line number58 index57 alt1"><code clas=
s=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;</code><code class=3D"js comments">// about calling the base w=
idget</code></div><div class=3D"line number59 index58 alt2"><code class=3D"=
js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code cla=
ss=3D"js plain">},</code></div><div class=3D"line number60 index59 alt1">&n=
bsp;</div><div class=3D"line number61 index60 alt2"><code class=3D"js space=
s">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js=
 plain">methodB: </code><code class=3D"js keyword">function</code> <code cl=
ass=3D"js plain">( event ) {</code></div><div class=3D"line number62 index6=
1 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// _trigg=
er dispatches callbacks the plugin user can</code></div><div class=3D"line =
number63 index62 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comm=
ents">// subscribe to</code></div><div class=3D"line number64 index63 alt1"=
><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// signature: _t=
rigger( "callbackName", [eventObject],</code></div><div class=3D"line numbe=
r65 index64 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments"=
>// [uiObject] )</code></div><div class=3D"line number66 index65 alt1"><cod=
e class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">this</code><code class=
=3D"js plain">._trigger( </code><code class=3D"js string">"methodA"</code><=
code class=3D"js plain">, event, {</code></div><div class=3D"line number67 =
index66 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code c=
lass=3D"js plain">key: value</code></div><div class=3D"line number68 index6=
7 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">});</code></=
div><div class=3D"line number69 index68 alt2"><code class=3D"js spaces">&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain=
">},</code></div><div class=3D"line number70 index69 alt1">&nbsp;</div><div=
 class=3D"line number71 index70 alt2"><code class=3D"js spaces">&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">method=
A: </code><code class=3D"js keyword">function</code> <code class=3D"js plai=
n">( event ) {</code></div><div class=3D"line number72 index71 alt1"><code =
class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">this</code><code class=
=3D"js plain">._trigger(</code><code class=3D"js string">"dataChanged"</cod=
e><code class=3D"js plain">, event, {</code></div><div class=3D"line number=
73 index72 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><cod=
e class=3D"js plain">key: value</code></div><div class=3D"line number74 ind=
ex73 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">});</code=
></div><div class=3D"line number75 index74 alt2"><code class=3D"js spaces">=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js pl=
ain">},</code></div><div class=3D"line number76 index75 alt1">&nbsp;</div><=
div class=3D"line number77 index76 alt2"><code class=3D"js spaces">&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">=
// Respond to any changes the user makes to the option method</code></div><=
div class=3D"line number78 index77 alt1"><code class=3D"js spaces">&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">_se=
tOption: </code><code class=3D"js keyword">function</code> <code class=3D"j=
s plain">( key, value ) {</code></div><div class=3D"line number79 index78 a=
lt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">switch</code>=
 <code class=3D"js plain">(key) {</code></div><div class=3D"line number80 i=
ndex79 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">case<=
/code> <code class=3D"js string">"someValue"</code><code class=3D"js plain"=
>:</code></div><div class=3D"line number81 index80 alt2"><code class=3D"js =
spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// this.opt=
ions.someValue =3D doSomethingWith( value );</code></div><div class=3D"line=
 number82 index81 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</co=
de><code class=3D"js keyword">break</code><code class=3D"js plain">;</code>=
</div><div class=3D"line number83 index82 alt2"><code class=3D"js spaces">&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</co=
de><code class=3D"js keyword">default</code><code class=3D"js plain">:</cod=
e></div><div class=3D"line number84 index83 alt1"><code class=3D"js spaces"=
>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// this.options[ k=
ey ] =3D value;</code></div><div class=3D"line number85 index84 alt2"><code=
 class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword"=
>break</code><code class=3D"js plain">;</code></div><div class=3D"line numb=
er86 index85 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">}=
</code></div><div class=3D"line number87 index86 alt2">&nbsp;</div><div cla=
ss=3D"line number88 index87 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js comments">// For UI 1.8, _setOption must be manually invoked from</c=
ode></div><div class=3D"line number89 index88 alt2"><code class=3D"js space=
s">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
</code><code class=3D"js comments">// the base widget</code></div><div clas=
s=3D"line number90 index89 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js plain">$.Widget.prototype._setOption.apply( </code><code class=3D"js=
 keyword">this</code><code class=3D"js plain">, arguments );</code></div><d=
iv class=3D"line number91 index90 alt2"><code class=3D"js spaces">&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code=
 class=3D"js comments">// For UI 1.9 the _super method can be used instead<=
/code></div><div class=3D"line number92 index91 alt1"><code class=3D"js spa=
ces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;</code><code class=3D"js comments">// this._super( "_setOption", key, val=
ue );</code></div><div class=3D"line number93 index92 alt2"><code class=3D"=
js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code cla=
ss=3D"js plain">}</code></div><div class=3D"line number94 index93 alt1">&nb=
sp;</div><div class=3D"line number95 index94 alt2"><code class=3D"js spaces=
">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">});</code></div><=
div class=3D"line number96 index95 alt1"><code class=3D"js plain">});</code=
></div></div></td></tr></tbody></table></div></div>

<p>Usage:</p>

<p>index.html:</p>
<p></p><div><div id=3D"highlighter_800669" class=3D"syntaxhighlighter  js a=
codecode"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/re=
sources/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_hel=
p help">?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=
=3D"0"><tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 al=
t2">1</div></td><td class=3D"code"><div class=3D"container"><div class=3D"l=
ine number1 index0 alt2"><code class=3D"js plain">&lt;script data-main=3D</=
code><code class=3D"js string">"scripts/main"</code> <code class=3D"js plai=
n">src=3D</code><code class=3D"js string">"<a href=3D"http://requirejs.org/=
docs/release/1.0.1/minified/require.js">http://requirejs.org/docs/release/1=
.0.1/minified/require.js</a>"</code><code class=3D"js plain">&gt;&lt;/scrip=
t&gt;</code></div></div></td></tr></tbody></table></div></div><p></p>

<p>main.js</p>
<p></p><div><div id=3D"highlighter_294075" class=3D"syntaxhighlighter  js a=
codecode"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/re=
sources/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_hel=
p help">?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=
=3D"0"><tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 al=
t2">1</div><div class=3D"line number2 index1 alt1">2</div><div class=3D"lin=
e number3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</di=
v><div class=3D"line number5 index4 alt2">5</div><div class=3D"line number6=
 index5 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div cl=
ass=3D"line number8 index7 alt1">8</div><div class=3D"line number9 index8 a=
lt2">9</div><div class=3D"line number10 index9 alt1">10</div><div class=3D"=
line number11 index10 alt2">11</div><div class=3D"line number12 index11 alt=
1">12</div><div class=3D"line number13 index12 alt2">13</div><div class=3D"=
line number14 index13 alt1">14</div><div class=3D"line number15 index14 alt=
2">15</div><div class=3D"line number16 index15 alt1">16</div><div class=3D"=
line number17 index16 alt2">17</div></td><td class=3D"code"><div class=3D"c=
ontainer"><div class=3D"line number1 index0 alt2"><code class=3D"js plain">=
require({</code></div><div class=3D"line number2 index1 alt1">&nbsp;</div><=
div class=3D"line number3 index2 alt2"><code class=3D"js spaces">&nbsp;&nbs=
p;&nbsp;&nbsp;</code><code class=3D"js plain">paths: {</code></div><div cla=
ss=3D"line number4 index3 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js string">"jquery"</c=
ode><code class=3D"js plain">: </code><code class=3D"js string">"<a href=3D=
"https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min">https://aja=
x.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min</a>"</code><code class=
=3D"js plain">,</code></div><div class=3D"line number5 index4 alt2"><code c=
lass=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><=
code class=3D"js string">"jqueryui"</code><code class=3D"js plain">: </code=
><code class=3D"js string">"<a href=3D"https://ajax.googleapis.com/ajax/lib=
s/jqueryui/1.8.18/jquery-ui.min">https://ajax.googleapis.com/ajax/libs/jque=
ryui/1.8.18/jquery-ui.min</a>"</code><code class=3D"js plain">,</code></div=
><div class=3D"line number6 index5 alt1"><code class=3D"js spaces">&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js string">"b=
oilerplate"</code><code class=3D"js plain">: </code><code class=3D"js strin=
g">"../patterns/jquery.widget-factory.requirejs.boilerplate"</code></div><d=
iv class=3D"line number7 index6 alt2"><code class=3D"js spaces">&nbsp;&nbsp=
;&nbsp;&nbsp;</code><code class=3D"js plain">}</code></div><div class=3D"li=
ne number8 index7 alt1"><code class=3D"js plain">}, [</code><code class=3D"=
js string">"require"</code><code class=3D"js plain">, </code><code class=3D=
"js string">"jquery"</code><code class=3D"js plain">, </code><code class=3D=
"js string">"jqueryui"</code><code class=3D"js plain">, </code><code class=
=3D"js string">"boilerplate"</code><code class=3D"js plain">],</code></div>=
<div class=3D"line number9 index8 alt2"><code class=3D"js keyword">function=
</code> <code class=3D"js plain">(req, $) {</code></div><div class=3D"line =
number10 index9 alt1">&nbsp;</div><div class=3D"line number11 index10 alt2"=
><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js=
 plain">$(</code><code class=3D"js keyword">function</code> <code class=3D"=
js plain">() {</code></div><div class=3D"line number12 index11 alt1">&nbsp;=
</div><div class=3D"line number13 index12 alt2"><code class=3D"js spaces">&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js key=
word">var</code> <code class=3D"js plain">instance =3D $(</code><code class=
=3D"js string">"#elem"</code><code class=3D"js plain">).myWidget();</code><=
/div><div class=3D"line number14 index13 alt1"><code class=3D"js spaces">&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plai=
n">instance.myWidget(</code><code class=3D"js string">"methodB"</code><code=
 class=3D"js plain">);</code></div><div class=3D"line number15 index14 alt2=
">&nbsp;</div><div class=3D"line number16 index15 alt1"><code class=3D"js s=
paces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">});</code></=
div><div class=3D"line number17 index16 alt2"><code class=3D"js plain">});<=
/code></div></div></td></tr></tbody></table></div></div><p></p>

<h4>Further Reading</h4>

<ul>
<li>=E2=80=9C<a href=3D"http://speakerrate.com/talks/2983-fast-modular-code=
-with-jquery-and-requirejs">Fast Modular Code With jQuery and RequireJS</a>=
,=E2=80=9D James Burke</li>

<li>=E2=80=9C<a href=3D"http://jquerysbestfriends.com/#slide1">jQuery=E2=80=
=99s Best Friends</a>,=E2=80=9D Alex Sexton</li>

<li>=E2=80=9C<a href=3D"http://www.angrycoding.com/2011/09/managing-depende=
ncies-with-requirejs.html">Managing Dependencies With RequireJS</a>,=E2=80=
=9D Ruslan Matveev</li>
</ul>

<p>&nbsp;</p>
<p>&nbsp;</p>
<h3>Globally And Per-Call Overridable Options (Best Options Pattern)</h3>

<p>For our next pattern, we=E2=80=99ll look at an optimal approach to confi=
guring options and defaults for a plugin. The way most of us are probably f=
amiliar with defining plugin options is to pass through an object literal o=
f defaults to <code>$.extend()</code>, as demonstrated in our basic plugin =
boilerplate.</p>

<p>If, however, we=E2=80=99re working with a plugin with many customizable =
options that we would like users to be able to override either globally or =
on a per-call level, then we can structure things a little more optimally.<=
/p>

<p>Instead, by referring to an options object defined within the plugin nam=
espace explicitly (for example, <code>$fn.pluginName.options</code>) and me=
rging this with any options passed through to the plugin when it is initial=
ly invoked, users have the option of either passing options through during =
plugin initialization or overriding options outside of the plugin (as demon=
strated here).</p>

<div><div id=3D"highlighter_415410" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</=
div><div class=3D"line number19 index18 alt2">19</div><div class=3D"line nu=
mber20 index19 alt1">20</div><div class=3D"line number21 index20 alt2">21</=
div><div class=3D"line number22 index21 alt1">22</div><div class=3D"line nu=
mber23 index22 alt2">23</div><div class=3D"line number24 index23 alt1">24</=
div><div class=3D"line number25 index24 alt2">25</div><div class=3D"line nu=
mber26 index25 alt1">26</div><div class=3D"line number27 index26 alt2">27</=
div><div class=3D"line number28 index27 alt1">28</div><div class=3D"line nu=
mber29 index28 alt2">29</div><div class=3D"line number30 index29 alt1">30</=
div><div class=3D"line number31 index30 alt2">31</div><div class=3D"line nu=
mber32 index31 alt1">32</div><div class=3D"line number33 index32 alt2">33</=
div><div class=3D"line number34 index33 alt1">34</div><div class=3D"line nu=
mber35 index34 alt2">35</div><div class=3D"line number36 index35 alt1">36</=
div><div class=3D"line number37 index36 alt2">37</div><div class=3D"line nu=
mber38 index37 alt1">38</div><div class=3D"line number39 index38 alt2">39</=
div><div class=3D"line number40 index39 alt1">40</div><div class=3D"line nu=
mber41 index40 alt2">41</div><div class=3D"line number42 index41 alt1">42</=
div><div class=3D"line number43 index42 alt2">43</div><div class=3D"line nu=
mber44 index43 alt1">44</div><div class=3D"line number45 index44 alt2">45</=
div></td><td class=3D"code"><div class=3D"container"><div class=3D"line num=
ber1 index0 alt2"><code class=3D"js comments">/*!</code></div><div class=3D=
"line number2 index1 alt1"><code class=3D"js spaces">&nbsp;</code><code cla=
ss=3D"js comments">* jQuery "best options" plugin boilerplate</code></div><=
div class=3D"line number3 index2 alt2"><code class=3D"js spaces">&nbsp;</co=
de><code class=3D"js comments">* Author: @cowboy</code></div><div class=3D"=
line number4 index3 alt1"><code class=3D"js spaces">&nbsp;</code><code clas=
s=3D"js comments">* Further changes: @addyosmani</code></div><div class=3D"=
line number5 index4 alt2"><code class=3D"js spaces">&nbsp;</code><code clas=
s=3D"js comments">* Licensed under the MIT license</code></div><div class=
=3D"line number6 index5 alt1"><code class=3D"js spaces">&nbsp;</code><code =
class=3D"js comments">*/</code></div><div class=3D"line number7 index6 alt2=
">&nbsp;</div><div class=3D"line number8 index7 alt1">&nbsp;</div><div clas=
s=3D"line number9 index8 alt2"><code class=3D"js plain">;(</code><code clas=
s=3D"js keyword">function</code> <code class=3D"js plain">( $, window, docu=
ment, undefined ) {</code></div><div class=3D"line number10 index9 alt1">&n=
bsp;</div><div class=3D"line number11 index10 alt2"><code class=3D"js space=
s">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">$.fn.pluginName =
=3D </code><code class=3D"js keyword">function</code> <code class=3D"js pla=
in">( options ) {</code></div><div class=3D"line number12 index11 alt1">&nb=
sp;</div><div class=3D"line number13 index12 alt2"><code class=3D"js spaces=
">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js =
comments">// Here's a best practice for overriding "defaults"</code></div><=
div class=3D"line number14 index13 alt1"><code class=3D"js spaces">&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">=
// with specified options. Note how, rather than a</code></div><div class=
=3D"line number15 index14 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// regula=
r defaults object being passed as the second</code></div><div class=3D"line=
 number16 index15 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// parameter, we =
instead refer to $.fn.pluginName.options</code></div><div class=3D"line num=
ber17 index16 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// explicitly, mergin=
g it with the options passed directly</code></div><div class=3D"line number=
18 index17 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;</code><code class=3D"js comments">// to the plugin. This a=
llows us to override options both</code></div><div class=3D"line number19 i=
ndex18 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;</code><code class=3D"js comments">// globally and on a per-cal=
l level.</code></div><div class=3D"line number20 index19 alt1">&nbsp;</div>=
<div class=3D"line number21 index20 alt2"><code class=3D"js spaces">&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">op=
tions =3D $.extend( {}, $.fn.pluginName.options, options );</code></div><di=
v class=3D"line number22 index21 alt1">&nbsp;</div><div class=3D"line numbe=
r23 index22 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">return</code> <code clas=
s=3D"js keyword">this</code><code class=3D"js plain">.each(</code><code cla=
ss=3D"js keyword">function</code> <code class=3D"js plain">() {</code></div=
><div class=3D"line number24 index23 alt1">&nbsp;</div><div class=3D"line n=
umber25 index24 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keywo=
rd">var</code> <code class=3D"js plain">elem =3D $(</code><code class=3D"js=
 keyword">this</code><code class=3D"js plain">);</code></div><div class=3D"=
line number26 index25 alt1">&nbsp;</div><div class=3D"line number27 index26=
 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;</code><code class=3D"js plain">});</code></div><div class=3D"line nu=
mber28 index27 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</co=
de><code class=3D"js plain">};</code></div><div class=3D"line number29 inde=
x28 alt2">&nbsp;</div><div class=3D"line number30 index29 alt1"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">/=
/ Globally overriding options</code></div><div class=3D"line number31 index=
30 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code cla=
ss=3D"js comments">// Here are our publicly accessible default plugin optio=
ns</code></div><div class=3D"line number32 index31 alt1"><code class=3D"js =
spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// that =
are available in case the user doesn't pass in all</code></div><div class=
=3D"line number33 index32 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp=
;&nbsp;</code><code class=3D"js comments">// of the values expected. The us=
er is given a default</code></div><div class=3D"line number34 index33 alt1"=
><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js=
 comments">// experience but can also override the values as necessary.</co=
de></div><div class=3D"line number35 index34 alt2"><code class=3D"js spaces=
">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// e.g. $fn.pl=
uginName.key =3D"otherval";</code></div><div class=3D"line number36 index35=
 alt1">&nbsp;</div><div class=3D"line number37 index36 alt2"><code class=3D=
"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">$.fn.pl=
uginName.options =3D {</code></div><div class=3D"line number38 index37 alt1=
">&nbsp;</div><div class=3D"line number39 index38 alt2"><code class=3D"js s=
paces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js plain">key: </code><code class=3D"js string">"value"</code><code cla=
ss=3D"js plain">,</code></div><div class=3D"line number40 index39 alt1"><co=
de class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</co=
de><code class=3D"js plain">myMethod: </code><code class=3D"js keyword">fun=
ction</code> <code class=3D"js plain">( elem, param ) {</code></div><div cl=
ass=3D"line number41 index40 alt2">&nbsp;</div><div class=3D"line number42 =
index41 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;</code><code class=3D"js plain">}</code></div><div class=3D"li=
ne number43 index42 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp=
;</code><code class=3D"js plain">};</code></div><div class=3D"line number44=
 index43 alt1">&nbsp;</div><div class=3D"line number45 index44 alt2"><code =
class=3D"js plain">})( jQuery, window, document );</code></div></div></td><=
/tr></tbody></table></div></div>

<p>Usage:</p>
<p></p><div><div id=3D"highlighter_752289" class=3D"syntaxhighlighter  js a=
codecode"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/re=
sources/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_hel=
p help">?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=
=3D"0"><tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 al=
t2">1</div><div class=3D"line number2 index1 alt1">2</div><div class=3D"lin=
e number3 index2 alt2">3</div></td><td class=3D"code"><div class=3D"contain=
er"><div class=3D"line number1 index0 alt2"><code class=3D"js plain">$(</co=
de><code class=3D"js string">"#elem"</code><code class=3D"js plain">).plugi=
nName({</code></div><div class=3D"line number2 index1 alt1"><code class=3D"=
js spaces">&nbsp;&nbsp;</code><code class=3D"js plain">key: </code><code cl=
ass=3D"js string">"foobar"</code></div><div class=3D"line number3 index2 al=
t2"><code class=3D"js plain">});</code></div></div></td></tr></tbody></tabl=
e></div></div><p></p>


<h4>Further Reading</h4>

<ul>
<li><a href=3D"http://benalman.com/talks/jquery-pluginization.html">jQuery =
Pluginization</a> and the <a href=3D"https://gist.github.com/472783/e8bf473=
40413129a8abe5fac55c83336efb5d4e1">accompanying gist</a>, Ben Alman</li>
</ul>

<p>&nbsp;</p>
<p>&nbsp;</p>
<h3>A Highly Configurable And Mutable Plugin Pattern</h3>

<p>In this pattern, similar to Alex Sexton's prototypal inheritance plugin =
pattern, logic for our plugin isn=E2=80=99t nested in a jQuery plugin itsel=
f. We instead define our plugin logic using a constructor and an object lit=
eral defined on its prototype. jQuery is then used for the actual instantia=
tion of the plugin object.</p>

<p>Customization is taken to the next level by employing two little tricks,=
 one of which we=E2=80=99ve seen in previous patterns:</p>

<ul>
<li>Options can be overridden both globally and per collection of elements/=
</li>

<li>Options can be customized on a <strong>per-element</strong> level throu=
gh HTML5 data attributes (as shown below). This facilitates plugin behavior=
 that can be applied to a collection of elements but then customized inline=
 without the need to instantiate each element with a different default valu=
e. </li>
</ul>

<p>We don=E2=80=99t see the latter option in the wild too often, but it can=
 be a significantly cleaner solution (as long as we don=E2=80=99t mind the =
inline approach). If wondering where this could be useful, imagine writing =
a draggable plugin for a large set of elements. We could go about customizi=
ng their options as follows:</p>

<div><div id=3D"highlighter_42800" class=3D"syntaxhighlighter  js acodecode=
"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources/=
essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help">=
?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0"><=
tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</d=
iv><div class=3D"line number2 index1 alt1">2</div><div class=3D"line number=
3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div></td><=
td class=3D"code"><div class=3D"container"><div class=3D"line number1 index=
0 alt2"><code class=3D"js plain">$( </code><code class=3D"js string">".item=
-a"</code> <code class=3D"js plain">).draggable( {</code><code class=3D"js =
string">"defaultPosition"</code><code class=3D"js plain">:</code><code clas=
s=3D"js string">"top-left"</code><code class=3D"js plain">} );</code></div>=
<div class=3D"line number2 index1 alt1"><code class=3D"js plain">$( </code>=
<code class=3D"js string">".item-b"</code> <code class=3D"js plain">).dragg=
able( {</code><code class=3D"js string">"defaultPosition"</code><code class=
=3D"js plain">:</code><code class=3D"js string">"bottom-right"</code><code =
class=3D"js plain">} );</code></div><div class=3D"line number3 index2 alt2"=
><code class=3D"js plain">$( </code><code class=3D"js string">".item-c"</co=
de> <code class=3D"js plain">).draggable( {</code><code class=3D"js string"=
>"defaultPosition"</code><code class=3D"js plain">:</code><code class=3D"js=
 string">"bottom-left"</code><code class=3D"js plain">} );</code></div><div=
 class=3D"line number4 index3 alt1"><code class=3D"js comments">//etc</code=
></div></div></td></tr></tbody></table></div></div>

<p>But using our patterns inline approach, the following would be possible:=
</p>

<div><div id=3D"highlighter_322838" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div></td><td class=3D"code"><div class=3D"container"><div class=3D"line num=
ber1 index0 alt2"><code class=3D"js plain">$( </code><code class=3D"js stri=
ng">".items"</code> <code class=3D"js plain">).draggable();</code></div></d=
iv></td></tr></tbody></table></div></div>

<div><div id=3D"highlighter_930941" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div></td><td class=3D"code"><div class=3D"container"><di=
v class=3D"line number1 index0 alt2"><code class=3D"js plain">html</code></=
div><div class=3D"line number2 index1 alt1"><code class=3D"js plain">&lt;li=
 </code><code class=3D"js keyword">class</code><code class=3D"js plain">=3D=
</code><code class=3D"js string">"item"</code> <code class=3D"js plain">dat=
a-plugin-options=3D</code><code class=3D"js string">"{"</code><code class=
=3D"js plain">defaultPosition</code><code class=3D"js string">":"</code><co=
de class=3D"js plain">top-left</code><code class=3D"js string">"}"</code><c=
ode class=3D"js plain">&gt;&lt;/div&gt;</code></div><div class=3D"line numb=
er3 index2 alt2"><code class=3D"js plain">&lt;li </code><code class=3D"js k=
eyword">class</code><code class=3D"js plain">=3D</code><code class=3D"js st=
ring">"item"</code> <code class=3D"js plain">data-plugin-options=3D</code><=
code class=3D"js string">"{"</code><code class=3D"js plain">defaultPosition=
</code><code class=3D"js string">":"</code><code class=3D"js plain">bottom-=
left</code><code class=3D"js string">"}"</code><code class=3D"js plain">&gt=
;&lt;/div&gt;</code></div></div></td></tr></tbody></table></div></div>

<p>And so on. We may well have a preference for one of these approaches, bu=
t it is just another variation worth being aware of.</p>

<div><div id=3D"highlighter_700354" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</=
div><div class=3D"line number19 index18 alt2">19</div><div class=3D"line nu=
mber20 index19 alt1">20</div><div class=3D"line number21 index20 alt2">21</=
div><div class=3D"line number22 index21 alt1">22</div><div class=3D"line nu=
mber23 index22 alt2">23</div><div class=3D"line number24 index23 alt1">24</=
div><div class=3D"line number25 index24 alt2">25</div><div class=3D"line nu=
mber26 index25 alt1">26</div><div class=3D"line number27 index26 alt2">27</=
div><div class=3D"line number28 index27 alt1">28</div><div class=3D"line nu=
mber29 index28 alt2">29</div><div class=3D"line number30 index29 alt1">30</=
div><div class=3D"line number31 index30 alt2">31</div><div class=3D"line nu=
mber32 index31 alt1">32</div><div class=3D"line number33 index32 alt2">33</=
div><div class=3D"line number34 index33 alt1">34</div><div class=3D"line nu=
mber35 index34 alt2">35</div><div class=3D"line number36 index35 alt1">36</=
div><div class=3D"line number37 index36 alt2">37</div><div class=3D"line nu=
mber38 index37 alt1">38</div><div class=3D"line number39 index38 alt2">39</=
div><div class=3D"line number40 index39 alt1">40</div><div class=3D"line nu=
mber41 index40 alt2">41</div><div class=3D"line number42 index41 alt1">42</=
div><div class=3D"line number43 index42 alt2">43</div><div class=3D"line nu=
mber44 index43 alt1">44</div><div class=3D"line number45 index44 alt2">45</=
div><div class=3D"line number46 index45 alt1">46</div><div class=3D"line nu=
mber47 index46 alt2">47</div><div class=3D"line number48 index47 alt1">48</=
div><div class=3D"line number49 index48 alt2">49</div><div class=3D"line nu=
mber50 index49 alt1">50</div><div class=3D"line number51 index50 alt2">51</=
div><div class=3D"line number52 index51 alt1">52</div><div class=3D"line nu=
mber53 index52 alt2">53</div><div class=3D"line number54 index53 alt1">54</=
div><div class=3D"line number55 index54 alt2">55</div><div class=3D"line nu=
mber56 index55 alt1">56</div><div class=3D"line number57 index56 alt2">57</=
div><div class=3D"line number58 index57 alt1">58</div><div class=3D"line nu=
mber59 index58 alt2">59</div><div class=3D"line number60 index59 alt1">60</=
div><div class=3D"line number61 index60 alt2">61</div><div class=3D"line nu=
mber62 index61 alt1">62</div><div class=3D"line number63 index62 alt2">63</=
div><div class=3D"line number64 index63 alt1">64</div><div class=3D"line nu=
mber65 index64 alt2">65</div><div class=3D"line number66 index65 alt1">66</=
div><div class=3D"line number67 index66 alt2">67</div><div class=3D"line nu=
mber68 index67 alt1">68</div><div class=3D"line number69 index68 alt2">69</=
div></td><td class=3D"code"><div class=3D"container"><div class=3D"line num=
ber1 index0 alt2"><code class=3D"js comments">/*</code></div><div class=3D"=
line number2 index1 alt1"><code class=3D"js spaces">&nbsp;</code><code clas=
s=3D"js comments">* "Highly configurable" mutable plugin boilerplate</code>=
</div><div class=3D"line number3 index2 alt2"><code class=3D"js spaces">&nb=
sp;</code><code class=3D"js comments">* Author: @markdalgleish</code></div>=
<div class=3D"line number4 index3 alt1"><code class=3D"js spaces">&nbsp;</c=
ode><code class=3D"js comments">* Further changes, comments: @addyosmani</c=
ode></div><div class=3D"line number5 index4 alt2"><code class=3D"js spaces"=
>&nbsp;</code><code class=3D"js comments">* Licensed under the MIT license<=
/code></div><div class=3D"line number6 index5 alt1"><code class=3D"js space=
s">&nbsp;</code><code class=3D"js comments">*/</code></div><div class=3D"li=
ne number7 index6 alt2">&nbsp;</div><div class=3D"line number8 index7 alt1"=
>&nbsp;</div><div class=3D"line number9 index8 alt2"><code class=3D"js comm=
ents">// Note that with this pattern, as per Alex Sexton's, the plugin logi=
c</code></div><div class=3D"line number10 index9 alt1"><code class=3D"js co=
mments">// hasn't been nested in a jQuery plugin. Instead, we just use</cod=
e></div><div class=3D"line number11 index10 alt2"><code class=3D"js comment=
s">// jQuery for its instantiation.</code></div><div class=3D"line number12=
 index11 alt1">&nbsp;</div><div class=3D"line number13 index12 alt2"><code =
class=3D"js plain">;(</code><code class=3D"js keyword">function</code><code=
 class=3D"js plain">( $, window, document, undefined ){</code></div><div cl=
ass=3D"line number14 index13 alt1">&nbsp;</div><div class=3D"line number15 =
index14 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"j=
s comments">// our plugin constructor</code></div><div class=3D"line number=
16 index15 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=
=3D"js keyword">var</code> <code class=3D"js plain">Plugin =3D </code><code=
 class=3D"js keyword">function</code><code class=3D"js plain">( elem, optio=
ns ){</code></div><div class=3D"line number17 index16 alt2"><code class=3D"=
js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js key=
word">this</code><code class=3D"js plain">.elem =3D elem;</code></div><div =
class=3D"line number18 index17 alt1"><code class=3D"js spaces">&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">this</code><code =
class=3D"js plain">.$elem =3D $(elem);</code></div><div class=3D"line numbe=
r19 index18 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;</code><code class=3D"js keyword">this</code><code class=3D"js plain">=
.options =3D options;</code></div><div class=3D"line number20 index19 alt1"=
>&nbsp;</div><div class=3D"line number21 index20 alt2"><code class=3D"js sp=
aces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments=
">// This next line takes advantage of HTML5 data attributes</code></div><d=
iv class=3D"line number22 index21 alt1"><code class=3D"js spaces">&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// to support=
 customization of the plugin on a per-element</code></div><div class=3D"lin=
e number23 index22 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;</code><code class=3D"js comments">// basis. For example,</code=
></div><div class=3D"line number24 index23 alt1"><code class=3D"js spaces">=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// &=
lt;div class=3D"item" data-plugin-options=3D"{'message':'Goodbye World!'}"&=
gt;&lt;/div&gt;</code></div><div class=3D"line number25 index24 alt2"><code=
 class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js keyword">this</code><code class=3D"js plain">.metadata =3D </code><c=
ode class=3D"js keyword">this</code><code class=3D"js plain">.$elem.data( <=
/code><code class=3D"js string">"plugin-options"</code> <code class=3D"js p=
lain">);</code></div><div class=3D"line number26 index25 alt1"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">};</=
code></div><div class=3D"line number27 index26 alt2">&nbsp;</div><div class=
=3D"line number28 index27 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</cod=
e><code class=3D"js comments">// the plugin prototype</code></div><div clas=
s=3D"line number29 index28 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</co=
de><code class=3D"js plain">Plugin.prototype =3D {</code></div><div class=
=3D"line number30 index29 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp=
;&nbsp;</code><code class=3D"js plain">defaults: {</code></div><div class=
=3D"line number31 index30 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">message: </code><code cl=
ass=3D"js string">"Hello world!"</code></div><div class=3D"line number32 in=
dex31 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code =
class=3D"js plain">},</code></div><div class=3D"line number33 index32 alt2"=
>&nbsp;</div><div class=3D"line number34 index33 alt1"><code class=3D"js sp=
aces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">init: </code>=
<code class=3D"js keyword">function</code><code class=3D"js plain">() {</co=
de></div><div class=3D"line number35 index34 alt2"><code class=3D"js spaces=
">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">//=
 Introduce defaults that can be extended either</code></div><div class=3D"l=
ine number36 index35 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;</code><code class=3D"js comments">// globally or using an ob=
ject literal.</code></div><div class=3D"line number37 index36 alt2"><code c=
lass=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js keyword">this</code><code class=3D"js plain">.config =3D $.extend( {=
}, </code><code class=3D"js keyword">this</code><code class=3D"js plain">.d=
efaults, </code><code class=3D"js keyword">this</code><code class=3D"js pla=
in">.options,</code></div><div class=3D"line number38 index37 alt1"><code c=
lass=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js keyword">this</code><code class=3D"js plain">.metadata );</code></di=
v><div class=3D"line number39 index38 alt2">&nbsp;</div><div class=3D"line =
number40 index39 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;</code><code class=3D"js comments">// Sample usage:</code></div><=
div class=3D"line number41 index40 alt2"><code class=3D"js spaces">&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// Set the m=
essage per instance:</code></div><div class=3D"line number42 index41 alt1">=
<code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code =
class=3D"js comments">// $( "#elem" ).plugin( { message: "Goodbye World!"} =
);</code></div><div class=3D"line number43 index42 alt2"><code class=3D"js =
spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js commen=
ts">// or</code></div><div class=3D"line number44 index43 alt1"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js=
 comments">// var p =3D new Plugin( document.getElementById( "elem" ),</cod=
e></div><div class=3D"line number45 index44 alt2"><code class=3D"js spaces"=
>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// =
{ message: "Goodbye World!"}).init()</code></div><div class=3D"line number4=
6 index45 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;</code><code class=3D"js comments">// or, set the global default message=
:</code></div><div class=3D"line number47 index46 alt2"><code class=3D"js s=
paces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comment=
s">// Plugin.defaults.message =3D "Goodbye World!"</code></div><div class=
=3D"line number48 index47 alt1">&nbsp;</div><div class=3D"line number49 ind=
ex48 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</=
code><code class=3D"js keyword">this</code><code class=3D"js plain">.sample=
Method();</code></div><div class=3D"line number50 index49 alt1"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js=
 keyword">return</code> <code class=3D"js keyword">this</code><code class=
=3D"js plain">;</code></div><div class=3D"line number51 index50 alt2"><code=
 class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain=
">},</code></div><div class=3D"line number52 index51 alt1">&nbsp;</div><div=
 class=3D"line number53 index52 alt2"><code class=3D"js spaces">&nbsp;&nbsp=
;&nbsp;&nbsp;</code><code class=3D"js plain">sampleMethod: </code><code cla=
ss=3D"js keyword">function</code><code class=3D"js plain">() {</code></div>=
<div class=3D"line number54 index53 alt1"><code class=3D"js spaces">&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// e.g. sho=
w the currently configured message</code></div><div class=3D"line number55 =
index54 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;</code><code class=3D"js comments">// console.log(this.config.message);</c=
ode></div><div class=3D"line number56 index55 alt1"><code class=3D"js space=
s">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">}</code></div><d=
iv class=3D"line number57 index56 alt2"><code class=3D"js spaces">&nbsp;&nb=
sp;</code><code class=3D"js plain">}</code></div><div class=3D"line number5=
8 index57 alt1">&nbsp;</div><div class=3D"line number59 index58 alt2"><code=
 class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js plain">Plugin.def=
aults =3D Plugin.prototype.defaults;</code></div><div class=3D"line number6=
0 index59 alt1">&nbsp;</div><div class=3D"line number61 index60 alt2"><code=
 class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js plain">$.fn.plugi=
n =3D </code><code class=3D"js keyword">function</code><code class=3D"js pl=
ain">( options ) {</code></div><div class=3D"line number62 index61 alt1"><c=
ode class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js ke=
yword">return</code> <code class=3D"js keyword">this</code><code class=3D"j=
s plain">.each(</code><code class=3D"js keyword">function</code><code class=
=3D"js plain">() {</code></div><div class=3D"line number63 index62 alt2"><c=
ode class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code cl=
ass=3D"js keyword">new</code> <code class=3D"js plain">Plugin( </code><code=
 class=3D"js keyword">this</code><code class=3D"js plain">, options ).init(=
);</code></div><div class=3D"line number64 index63 alt1"><code class=3D"js =
spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">});</code><=
/div><div class=3D"line number65 index64 alt2"><code class=3D"js spaces">&n=
bsp;&nbsp;</code><code class=3D"js plain">};</code></div><div class=3D"line=
 number66 index65 alt1">&nbsp;</div><div class=3D"line number67 index66 alt=
2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js comments"=
>// optional: window.Plugin =3D Plugin;</code></div><div class=3D"line numb=
er68 index67 alt1">&nbsp;</div><div class=3D"line number69 index68 alt2"><c=
ode class=3D"js plain">})( jQuery, window, document );</code></div></div></=
td></tr></tbody></table></div></div>

<p>Usage:</p>
<p></p><div><div id=3D"highlighter_624618" class=3D"syntaxhighlighter  js a=
codecode"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/re=
sources/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_hel=
p help">?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=
=3D"0"><tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 al=
t2">1</div><div class=3D"line number2 index1 alt1">2</div><div class=3D"lin=
e number3 index2 alt2">3</div></td><td class=3D"code"><div class=3D"contain=
er"><div class=3D"line number1 index0 alt2"><code class=3D"js plain">$(</co=
de><code class=3D"js string">"#elem"</code><code class=3D"js plain">).plugi=
n({</code></div><div class=3D"line number2 index1 alt1"><code class=3D"js s=
paces">&nbsp;&nbsp;</code><code class=3D"js plain">message: </code><code cl=
ass=3D"js string">"foobar"</code></div><div class=3D"line number3 index2 al=
t2"><code class=3D"js plain">});</code></div></div></td></tr></tbody></tabl=
e></div></div><p></p>

<h4>Further Reading</h4>

<ul>
<li>=E2=80=9C<a href=3D"http://markdalgleish.com/2011/05/creating-highly-co=
nfigurable-jquery-plugins/">Creating Highly Configurable jQuery Plugins</a>=
,=E2=80=9D Mark Dalgleish</li>

<li>=E2=80=9C<a href=3D"http://markdalgleish.com/2011/09/html5data-creating=
-highly-configurable-jquery-plugins-part-2/">Writing Highly Configurable jQ=
uery Plugins, Part 2</a>,=E2=80=9D Mark Dalgleish</li>
</ul>

<p>&nbsp;</p>


<h3>What Makes A Good Plugin Beyond Patterns?</h3>

<p>At the end of the day, design patterns are just one facet to writing mai=
ntainable jQuery plugins. There are a number of other factors worth conside=
ring and I would like to share my own criteria for selecting third-party pl=
ugins to address some of the other concerns. I hope this helps increase the=
 overall quality of your plugin projects:</p>

<p><strong>Quality</strong></p>
<p>Adhere to best practices with respect to both the JavaScript and jQuery =
that you write. Are efforts being made to lint the plugin code using either=
 jsHint or jsLint? Is the plugin written optimally?</p>

<p><strong>Code Style</strong></p>
<p>Does the plugin follow a consistent code style guide such as the <a href=
=3D"http://docs.jquery.com/JQuery_Core_Style_Guidelines">jQuery Core Style =
Guidelines</a>? If not, is your code at least relatively clean and readable=
?</p>

<p><strong>Compatibility</strong></p><p>
</p><p>Which versions of jQuery is the plugin compatible with? Has it been =
tested with the latest jQuery-git builds or latest stable? If the plugin wa=
s written before jQuery 1.6, then it might have issues with attributes and =
properties, because the way they were approached changed in that release.</=
p>

<p>New versions of jQuery offer improvements and opportunities for the jQue=
ry project to improve on what the core library offers. With this comes occa=
sional breakages (mainly in major releases) as we move towards a better way=
 of doing things. I=E2=80=99d like to see plugin authors update their code =
when necessary or, at a minimum, test their plugins with new versions to ma=
ke sure everything works as expected.</p>

<p><strong>Reliability</strong></p><p>
</p><p>The plugin should come with its own set of unit tests. Not only do t=
hese prove it actually functions as expected, but they can also improve the=
 design without breaking it for end users. I consider unit tests essential =
for any serious jQuery plugin that is meant for a production environment, a=
nd they=E2=80=99re not that hard to write. For an excellent guide to automa=
ted JavaScript testing with QUnit, you may be interested in =E2=80=9C<a hre=
f=3D"http://msdn.microsoft.com/en-us/scriptjunkie/gg749824">Automating Java=
Script Testing With QUnit</a>,=E2=80=9D by <a href=3D"http://bassistance.de=
/">J=C3=B6rn Zaefferer</a>.</p>

<p><strong>Performance</strong></p><p>
</p><p>If the plugin needs to perform tasks that require extensive processi=
ng or heavily manipulation of the DOM, one should follow best practices for=
 benchmarking to help minimize this. Use <a href=3D"http://jsperf.com/">jsP=
erf.com</a> to test segments of the code to a) how well it performs in diff=
erent browsers and b) discover what, if anything, might be optimized furthe=
r.</p>

<p><strong>Documentation</strong></p><p>
</p><p>If the intension is for other developers to use the plugin, ensure t=
hat it=E2=80=99s well documented. Document the API and how the plugin is to=
 be used. What methods and options does the plugin support? Does it have an=
y gotchas that users need to be aware of? If users cannot figure out how to=
 use the plugin, they=E2=80=99ll likely look for an alternative. It is also=
 of great help to comment your plugin code. This is by far the best gift yo=
u can offer other developers. If someone feels they can navigate your code =
base well enough to use it or improve it, then you=E2=80=99ve done a good j=
ob.</p>

<p><strong>Likelihood of maintenance</strong></p><p>
</p><p>When releasing a plugin, estimate how much time may be required for =
maintenance and support. We all love to share our plugins with the communit=
y, but one needs to set expectations for ones ability to answer questions, =
address issues and make continuous improvements. This can be done simply by=
 stating the project intentions for maintenance support upfront in the <em>=
README</em> file.</p>

<h2>Conclusions</h2>

<p>In this chapter, we explored several time-saving design patterns and bes=
t practices that can be employed to improve how jQuery plugins can be writt=
en. Some are better suited to certain use cases than others, but I hope on =
the whole these patterns are useful.</p>

<p>Remember, when selecting a pattern, it is important to be practical. Don=
=E2=80=99t use a plugin pattern just for the sake of it, rather, invest tim=
e in understanding the underlying structure, and establish how well it solv=
es your problem or fits the component you=E2=80=99re trying to build. </p>


<h2 id=3D"detailnamespacing">Namespacing Patterns</h2>

<p>In this section, we're going to explore patterns for namespacing in Java=
Script. Namespaces can be considered a logical grouping of units of code un=
der a unique identifier. The identifier can be referenced in many namespace=
s and each identifier can itself contain a hierarchy of its own nested (or =
sub) namespaces.</p>

<p>In application development, we employ namespaces for a number of importa=
nt reasons. In JavaScript, they help us avoid <b>collisions</b> with other =
objects or variables in the global namespace. They're also extremely useful=
 for helping organize blocks of functionality in a code-base so that it can=
 be more easily referenced and used.</p>

<p>Namespacing any serious script or application is critical as it's import=
ant to safeguard our code from breaking in the event of another script on t=
he page using the <b>same</b> variable or method names we are. With the num=
ber of <b>third-party</b> tags regularly injected into pages these days, th=
is can be a common problem we all need to tackle at some point in our caree=
rs. As a well-behaved "citizen" of the global namespace, it's also imperati=
ve that we do our best to similarly not prevent other developer's scripts e=
xecuting due to the same issues.</p>

<p>Whilst JavaScript doesn't really have built-in support for namespaces li=
ke other languages, it does have objects and closures which can be used to =
achieve a similar effect.</p>

<p><a name=3D"beginners"></a></p>

<h2>Namespacing Fundamentals</h2>
<p>Namespaces can be found in almost any serious JavaScript application. Un=
less we're working with a simple code-snippet, it's imperative that we do o=
ur best to ensure that we're implementing namespacing correctly as it's not=
 just simple to pick-up, it'll also avoid third party code clobbering our o=
wn. The patterns we'll be examining in this section are:</p>
<ol>
  <li>Single global variables</li>
  <li>Prefix namespacing</li>
  <li>Object literal notation</li>
  <li>Nested namespacing</li>
  <li>Immediately-invoked Function Expressions</li>
  <li>Namespace injection</li>
</ol>
<h3>1. Single global variables</h3>
<p>One popular pattern for namespacing in JavaScript is opting for a single=
 global variable as our primary object of reference. A skeleton implementat=
ion of this where we return an object with functions and properties can be =
found below:</p>
<div><div id=3D"highlighter_684511" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div></td><td class=3D"code"><div class=3D"cont=
ainer"><div class=3D"line number1 index0 alt2"><code class=3D"js keyword">v=
ar</code> <code class=3D"js plain">myApplication =3D (</code><code class=3D=
"js keyword">function</code> <code class=3D"js plain">() {</code></div><div=
 class=3D"line number2 index1 alt1"><code class=3D"js spaces">&nbsp;&nbsp;<=
/code><code class=3D"js keyword">function</code><code class=3D"js plain">()=
 {</code></div><div class=3D"line number3 index2 alt2"><code class=3D"js sp=
aces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">//...</cod=
e></div><div class=3D"line number4 index3 alt1"><code class=3D"js spaces">&=
nbsp;&nbsp;</code><code class=3D"js plain">},</code></div><div class=3D"lin=
e number5 index4 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code c=
lass=3D"js keyword">return</code> <code class=3D"js plain">{</code></div><d=
iv class=3D"line number6 index5 alt1"><code class=3D"js spaces">&nbsp;&nbsp=
;&nbsp;&nbsp;</code><code class=3D"js comments">//...</code></div><div clas=
s=3D"line number7 index6 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code=
><code class=3D"js plain">}</code></div><div class=3D"line number8 index7 a=
lt1"><code class=3D"js plain">})();</code></div></div></td></tr></tbody></t=
able></div></div>
<p>Although this works for certain situations, the biggest challenge with t=
he single global variable pattern is ensuring that no one else has used the=
 same global variable name as we have in the page.</p>

<h3>2. Prefix namespacing </h3>

<p>One solution to the above problem, as mentioned by <a href=3D"http://mic=
haux.ca/articles/javascript-namespacing">Peter Michaux</a>, is to use prefi=
x namespacing. It's a simple concept at heart, but the idea is we select a =
unique prefix namespace we wish to use (in this example, <code>myApplicatio=
n_</code>) and then define any methods, variables or other objects after th=
e prefix as follows:</p>
<div><div id=3D"highlighter_309678" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div></td><td class=3D"code"><div clas=
s=3D"container"><div class=3D"line number1 index0 alt2"><code class=3D"js k=
eyword">var</code> <code class=3D"js plain">myApplication_propertyA =3D {};=
</code></div><div class=3D"line number2 index1 alt1"><code class=3D"js keyw=
ord">var</code> <code class=3D"js plain">myApplication_propertyB =3D {};</c=
ode></div><div class=3D"line number3 index2 alt2"><code class=3D"js keyword=
">function</code> <code class=3D"js plain">myApplication_myMethod() {</code=
></div><div class=3D"line number4 index3 alt1"><code class=3D"js spaces">&n=
bsp;&nbsp;</code><code class=3D"js comments">//...</code></div><div class=
=3D"line number5 index4 alt2"><code class=3D"js plain">}</code></div></div>=
</td></tr></tbody></table></div></div>
<p>This is effective from the perspective of decreasing the chances of a pa=
rticular variable existing in the global scope, but remember that a uniquel=
y named object can have the same effect.</p>

<p>This aside, the biggest issue with the pattern is that it can result in =
a large number of global objects once our application starts to grow. There=
 is also quite a heavy reliance on our prefix not being used by any other d=
evelopers in the global namespace, so be careful if opting to use this.</p>

<p>For more on Peter's views about the single global variable pattern, read=
 his excellent post on them <a href=3D"http://peter.michaux.ca/articles/jav=
ascript-namespacing">http://peter.michaux.ca/articles/javascript-namespacin=
g</a>.</p>

<h3>3. Object literal notation</h3>
<p>Object literal notation (which we also cover in the module pattern secti=
on of the book) can be thought of as an object containing a collection of k=
ey:value pairs with a colon separating each pair of keys and values where k=
eys can also represent new namespaces.</p>
<div><div id=3D"highlighter_994928" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div></td><td class=3D"code"><div class=3D"containe=
r"><div class=3D"line number1 index0 alt2"><code class=3D"js keyword">var</=
code> <code class=3D"js plain">myApplication =3D {</code></div><div class=
=3D"line number2 index1 alt1">&nbsp;</div><div class=3D"line number3 index2=
 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js comme=
nts">// As we've seen, we can easily define functionality for</code></div><=
div class=3D"line number4 index3 alt1"><code class=3D"js spaces">&nbsp;&nbs=
p;</code><code class=3D"js comments">// this object literal..</code></div><=
div class=3D"line number5 index4 alt2"><code class=3D"js spaces">&nbsp;&nbs=
p;</code><code class=3D"js plain">getInfo: </code><code class=3D"js keyword=
">function</code><code class=3D"js plain">() {</code></div><div class=3D"li=
ne number6 index5 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;<=
/code><code class=3D"js comments">//...</code></div><div class=3D"line numb=
er7 index6 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=
=3D"js plain">},</code></div><div class=3D"line number8 index7 alt1">&nbsp;=
</div><div class=3D"line number9 index8 alt2"><code class=3D"js spaces">&nb=
sp;&nbsp;</code><code class=3D"js comments">// but we can also populate it =
to support</code></div><div class=3D"line number10 index9 alt1"><code class=
=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js comments">// further ob=
ject namespaces containing anything</code></div><div class=3D"line number11=
 index10 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"=
js comments">// anything we wish:</code></div><div class=3D"line number12 i=
ndex11 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js=
 plain">models: {},</code></div><div class=3D"line number13 index12 alt2"><=
code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js plain">views:=
 {</code></div><div class=3D"line number14 index13 alt1"><code class=3D"js =
spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain"=
>pages: {}</code></div><div class=3D"line number15 index14 alt2"><code clas=
s=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js plain">},</code></div>=
<div class=3D"line number16 index15 alt1"><code class=3D"js spaces">&nbsp;&=
nbsp;</code><code class=3D"js plain">collections: {}</code></div><div class=
=3D"line number17 index16 alt2"><code class=3D"js plain">};</code></div></d=
iv></td></tr></tbody></table></div></div>
<p>One can also opt for adding properties directly to the namespace:</p>
<div><div id=3D"highlighter_539295" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div></td><td class=3D"code"><div class=3D"container"><div class=3D"line num=
ber1 index0 alt2"><code class=3D"js plain">myApplication.foo =3D </code><co=
de class=3D"js keyword">function</code><code class=3D"js plain">() {</code>=
</div><div class=3D"line number2 index1 alt1"><code class=3D"js spaces">&nb=
sp;&nbsp;</code><code class=3D"js keyword">return</code> <code class=3D"js =
string">"bar"</code><code class=3D"js plain">;</code></div><div class=3D"li=
ne number3 index2 alt2"><code class=3D"js plain">}</code></div><div class=
=3D"line number4 index3 alt1">&nbsp;</div><div class=3D"line number5 index4=
 alt2"><code class=3D"js plain">myApplication.utils =3D {</code></div><div =
class=3D"line number6 index5 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</=
code><code class=3D"js plain">toString: </code><code class=3D"js keyword">f=
unction</code><code class=3D"js plain">() {</code></div><div class=3D"line =
number7 index6 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;</code><code class=3D"js comments">//...</code></div><div class=3D"=
line number8 index7 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><cod=
e class=3D"js plain">},</code></div><div class=3D"line number9 index8 alt2"=
><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js keyword">ex=
port</code><code class=3D"js plain">: </code><code class=3D"js keyword">fun=
ction</code><code class=3D"js plain">() {</code></div><div class=3D"line nu=
mber10 index9 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;</code><code class=3D"js comments">//...</code></div><div class=3D"l=
ine number11 index10 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><co=
de class=3D"js plain">}</code></div><div class=3D"line number12 index11 alt=
1"><code class=3D"js plain">}</code></div></div></td></tr></tbody></table><=
/div></div>
<p>Object literals have the advantage of not polluting the global namespace=
 but assist in organizing code and parameters logically. They are truly ben=
eficial if we wish to create easily-readable structures that can be expande=
d to support deep nesting. Unlike simple global variables, object literals =
often also take into account tests for the existence of a variable by the s=
ame name so the chances of collision occurring are significantly reduced.</=
p>

<p>In the next sample, we demonstrate a number of different ways in which w=
e can check to see if a variable (object or plugin namespace) already exist=
s, defining it if it doesn't.</p>

<div><div id=3D"highlighter_483556" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div></td><td class=3D"code"><div class=3D"containe=
r"><div class=3D"line number1 index0 alt2"><code class=3D"js comments">// T=
his doesn't check for existence of "myApplication" in</code></div><div clas=
s=3D"line number2 index1 alt1"><code class=3D"js comments">// the global na=
mespace. Bad practice as we can easily</code></div><div class=3D"line numbe=
r3 index2 alt2"><code class=3D"js comments">// clobber an existing variable=
/namespace with the same name</code></div><div class=3D"line number4 index3=
 alt1"><code class=3D"js keyword">var</code> <code class=3D"js plain">myApp=
lication =3D {};</code></div><div class=3D"line number5 index4 alt2">&nbsp;=
</div><div class=3D"line number6 index5 alt1"><code class=3D"js comments">/=
/ The following options *do* check for variable/namespace existence.</code>=
</div><div class=3D"line number7 index6 alt2"><code class=3D"js comments">/=
/ If already defined, we use that instance, otherwise we assign a new</code=
></div><div class=3D"line number8 index7 alt1"><code class=3D"js comments">=
// object literal to myApplication.</code></div><div class=3D"line number9 =
index8 alt2"><code class=3D"js comments">//</code></div><div class=3D"line =
number10 index9 alt1"><code class=3D"js comments">// Option 1: var myApplic=
ation =3D myApplication || {};</code></div><div class=3D"line number11 inde=
x10 alt2"><code class=3D"js comments">// Option 2: if( !MyApplication ){ My=
Application =3D {} };</code></div><div class=3D"line number12 index11 alt1"=
><code class=3D"js comments">// Option 3: window.myApplication || ( window.=
myApplication =3D {} );</code></div><div class=3D"line number13 index12 alt=
2"><code class=3D"js comments">// Option 4: var myApplication =3D $.fn.myAp=
plication =3D function() {};</code></div><div class=3D"line number14 index1=
3 alt1"><code class=3D"js comments">// Option 5: var myApplication =3D myAp=
plication =3D=3D=3D undefined ? {} : myApplication;</code></div></div></td>=
</tr></tbody></table></div></div>We'll often see developers opting for Opti=
on 1 or Option 2 - they are both straight-forward to understand and are equ=
ivalent in terms of their end-result.<p></p>

<p>Option 3 assumes that we're working in the global namespace, but it coul=
d also be written as:</p>

<div><div id=3D"highlighter_840496" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div></td><td class=3D"code"><div class=3D"container"><div class=3D"line num=
ber1 index0 alt2"><code class=3D"js plain">myApplication || (myApplication =
=3D {});</code></div></div></td></tr></tbody></table></div></div>

<p>This variation assumes that <code>myApplication</code> has already been =
initialized and so it's only really useful for a parameter/argument scenari=
o as in the following example:</p>

<div><div id=3D"highlighter_223396" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</=
div><div class=3D"line number19 index18 alt2">19</div><div class=3D"line nu=
mber20 index19 alt1">20</div></td><td class=3D"code"><div class=3D"containe=
r"><div class=3D"line number1 index0 alt2"><code class=3D"js keyword">funct=
ion</code> <code class=3D"js plain">foo() {</code></div><div class=3D"line =
number2 index1 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><code cla=
ss=3D"js plain">myApplication || ( myApplication =3D {} );</code></div><div=
 class=3D"line number3 index2 alt2"><code class=3D"js plain">}</code></div>=
<div class=3D"line number4 index3 alt1">&nbsp;</div><div class=3D"line numb=
er5 index4 alt2"><code class=3D"js comments">// myApplication hasn't been i=
nitialized,</code></div><div class=3D"line number6 index5 alt1"><code class=
=3D"js comments">// so foo() throws a ReferenceError</code></div><div class=
=3D"line number7 index6 alt2">&nbsp;</div><div class=3D"line number8 index7=
 alt1"><code class=3D"js plain">foo();</code></div><div class=3D"line numbe=
r9 index8 alt2">&nbsp;</div><div class=3D"line number10 index9 alt1"><code =
class=3D"js comments">// However accepting myApplication as an</code></div>=
<div class=3D"line number11 index10 alt2"><code class=3D"js comments">// ar=
gument</code></div><div class=3D"line number12 index11 alt1">&nbsp;</div><d=
iv class=3D"line number13 index12 alt2"><code class=3D"js keyword">function=
</code> <code class=3D"js plain">foo( myApplication ) {</code></div><div cl=
ass=3D"line number14 index13 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</=
code><code class=3D"js plain">myApplication || ( myApplication =3D {} );</c=
ode></div><div class=3D"line number15 index14 alt2"><code class=3D"js plain=
">}</code></div><div class=3D"line number16 index15 alt1">&nbsp;</div><div =
class=3D"line number17 index16 alt2"><code class=3D"js plain">foo();</code>=
</div><div class=3D"line number18 index17 alt1">&nbsp;</div><div class=3D"l=
ine number19 index18 alt2"><code class=3D"js comments">// Even if myApplica=
tion =3D=3D=3D undefined, there is no error</code></div><div class=3D"line =
number20 index19 alt1"><code class=3D"js comments">// and myApplication get=
s set to {} correctly</code></div></div></td></tr></tbody></table></div></d=
iv>

<p>Options 4 can be useful for writing jQuery plugins where:</p>

<div><div id=3D"highlighter_300276" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div></td><td class=3D"code"><div class=3D"cont=
ainer"><div class=3D"line number1 index0 alt2"><code class=3D"js comments">=
// If we were to define a new plugin..</code></div><div class=3D"line numbe=
r2 index1 alt1"><code class=3D"js keyword">var</code> <code class=3D"js pla=
in">myPlugin =3D $.fn.myPlugin =3D </code><code class=3D"js keyword">functi=
on</code><code class=3D"js plain">() { ... };</code></div><div class=3D"lin=
e number3 index2 alt2">&nbsp;</div><div class=3D"line number4 index3 alt1">=
<code class=3D"js comments">// Then later rather than having to type:</code=
></div><div class=3D"line number5 index4 alt2"><code class=3D"js plain">$.f=
n.myPlugin.defaults =3D {};</code></div><div class=3D"line number6 index5 a=
lt1">&nbsp;</div><div class=3D"line number7 index6 alt2"><code class=3D"js =
comments">// We can do:</code></div><div class=3D"line number8 index7 alt1"=
><code class=3D"js plain">myPlugin.defaults =3D {};</code></div></div></td>=
</tr></tbody></table></div></div>

<p>This results in better compression (minification) and can save on scope =
lookups.</p>

<p>Option 5 is a little similar to Option 4, but is a long-form which evalu=
ates whether <code>myApplication</code> is <code>undefined</code> inline su=
ch that it's defined as an object if not, otherwise set to an existing valu=
e for <code>myApplication</code> if so.</p>

<p></p>It is shown just for the sake of being thorough but in most situatio=
ns, Options 1-4 will more than suffice for most needs.<p></p>

<p>There is of course a great deal of variance in how and where object lite=
rals are used for organizing and structuring code. For smaller applications=
 wishing to expose a nested API for a particular self-enclosed module, we m=
ay just find ourselves using the Revealing Module Pattern, which we covered=
 earlier in the book:</p>
<div><div id=3D"highlighter_943294" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</=
div><div class=3D"line number19 index18 alt2">19</div><div class=3D"line nu=
mber20 index19 alt1">20</div><div class=3D"line number21 index20 alt2">21</=
div><div class=3D"line number22 index21 alt1">22</div><div class=3D"line nu=
mber23 index22 alt2">23</div><div class=3D"line number24 index23 alt1">24</=
div><div class=3D"line number25 index24 alt2">25</div><div class=3D"line nu=
mber26 index25 alt1">26</div><div class=3D"line number27 index26 alt2">27</=
div></td><td class=3D"code"><div class=3D"container"><div class=3D"line num=
ber1 index0 alt2"><code class=3D"js keyword">var</code> <code class=3D"js p=
lain">namespace =3D (</code><code class=3D"js keyword">function</code> <cod=
e class=3D"js plain">() {</code></div><div class=3D"line number2 index1 alt=
1">&nbsp;</div><div class=3D"line number3 index2 alt2"><code class=3D"js sp=
aces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// defined=
 within the local scope</code></div><div class=3D"line number4 index3 alt1"=
><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js=
 keyword">var</code> <code class=3D"js plain">privateMethod1 =3D </code><co=
de class=3D"js keyword">function</code> <code class=3D"js plain">() { </cod=
e><code class=3D"js comments">/* ... */</code> <code class=3D"js plain">},<=
/code></div><div class=3D"line number5 index4 alt2"><code class=3D"js space=
s">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js=
 plain">privateMethod2 =3D </code><code class=3D"js keyword">function</code=
> <code class=3D"js plain">() { </code><code class=3D"js comments">/* ... *=
/</code> <code class=3D"js plain">},</code></div><div class=3D"line number6=
 index5 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;</code><code class=3D"js plain">privateProperty1 =3D </code><c=
ode class=3D"js string">"foobar"</code><code class=3D"js plain">;</code></d=
iv><div class=3D"line number7 index6 alt2">&nbsp;</div><div class=3D"line n=
umber8 index7 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><code clas=
s=3D"js keyword">return</code> <code class=3D"js plain">{</code></div><div =
class=3D"line number9 index8 alt2">&nbsp;</div><div class=3D"line number10 =
index9 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code=
 class=3D"js comments">// the object literal returned here can have as many=
</code></div><div class=3D"line number11 index10 alt2"><code class=3D"js sp=
aces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// nested =
depths as we wish, however as mentioned,</code></div><div class=3D"line num=
ber12 index11 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</cod=
e><code class=3D"js comments">// this way of doing things works best for sm=
aller,</code></div><div class=3D"line number13 index12 alt2"><code class=3D=
"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">// l=
imited-scope applications in my personal opinion</code></div><div class=3D"=
line number14 index13 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nb=
sp;</code><code class=3D"js plain">publicMethod1: privateMethod1,</code></d=
iv><div class=3D"line number15 index14 alt2">&nbsp;</div><div class=3D"line=
 number16 index15 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;<=
/code><code class=3D"js comments">// nested namespace with public propertie=
s</code></div><div class=3D"line number17 index16 alt2"><code class=3D"js s=
paces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">properties: =
{</code></div><div class=3D"line number18 index17 alt1"><code class=3D"js s=
paces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=
=3D"js plain">publicProperty1: privateProperty1</code></div><div class=3D"l=
ine number19 index18 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbs=
p;</code><code class=3D"js plain">},</code></div><div class=3D"line number2=
0 index19 alt1">&nbsp;</div><div class=3D"line number21 index20 alt2"><code=
 class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comme=
nts">// another tested namespace</code></div><div class=3D"line number22 in=
dex21 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code =
class=3D"js plain">utils: {</code></div><div class=3D"line number23 index22=
 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;</code><code class=3D"js plain">publicMethod2: privateMethod2</code><=
/div><div class=3D"line number24 index23 alt1"><code class=3D"js spaces">&n=
bsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">}</code></div><div cl=
ass=3D"line number25 index24 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&n=
bsp;&nbsp;</code><code class=3D"js plain">...</code></div><div class=3D"lin=
e number26 index25 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><code=
 class=3D"js plain">}</code></div><div class=3D"line number27 index26 alt2"=
><code class=3D"js plain">})();</code></div></div></td></tr></tbody></table=
></div></div>
<p>The benefit of object literals is that they offer us a very elegant key/=
value syntax to work with; one where we're able to easily encapsulate any d=
istinct logic or functionality for our application in a way that clearly se=
parates it from others and provides a solid foundation for extending our co=
de.</p>
<p>A possible downside however is that object literals have the potential t=
o grow into long syntactic constructs. Opting to take advantage of the nest=
ed namespace pattern (which also uses the same pattern as its base)</p>
<p>This pattern has a number of other useful applications too. In addition =
to namespacing, it's often of benefit to decouple the default configuration=
 for our application into a single area that can be easily modified without=
 the need to search through our entire codebase just to alter them - object=
 literals work great for this purpose. Here's an example of a hypothetical =
object literal for configuration:</p>
<div><div id=3D"highlighter_888247" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</=
div></td><td class=3D"code"><div class=3D"container"><div class=3D"line num=
ber1 index0 alt2"><code class=3D"js keyword">var</code> <code class=3D"js p=
lain">myConfig =3D {</code></div><div class=3D"line number2 index1 alt1">&n=
bsp;</div><div class=3D"line number3 index2 alt2"><code class=3D"js spaces"=
>&nbsp;&nbsp;</code><code class=3D"js plain">language: </code><code class=
=3D"js string">"english"</code><code class=3D"js plain">,</code></div><div =
class=3D"line number4 index3 alt1">&nbsp;</div><div class=3D"line number5 i=
ndex4 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js =
plain">defaults: {</code></div><div class=3D"line number6 index5 alt1"><cod=
e class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plai=
n">enableGeolocation: </code><code class=3D"js keyword">true</code><code cl=
ass=3D"js plain">,</code></div><div class=3D"line number7 index6 alt2"><cod=
e class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plai=
n">enableSharing: </code><code class=3D"js keyword">false</code><code class=
=3D"js plain">,</code></div><div class=3D"line number8 index7 alt1"><code c=
lass=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">=
maxPhotos: 20</code></div><div class=3D"line number9 index8 alt2"><code cla=
ss=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js plain">},</code></div=
><div class=3D"line number10 index9 alt1">&nbsp;</div><div class=3D"line nu=
mber11 index10 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code cla=
ss=3D"js plain">theme: {</code></div><div class=3D"line number12 index11 al=
t1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D=
"js plain">skin: </code><code class=3D"js string">"a"</code><code class=3D"=
js plain">,</code></div><div class=3D"line number13 index12 alt2"><code cla=
ss=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">to=
olbars: {</code></div><div class=3D"line number14 index13 alt1"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js=
 plain">index: </code><code class=3D"js string">"ui-navigation-toolbar"</co=
de><code class=3D"js plain">,</code></div><div class=3D"line number15 index=
14 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</co=
de><code class=3D"js plain">pages: </code><code class=3D"js string">"ui-cus=
tom-toolbar"</code></div><div class=3D"line number16 index15 alt1"><code cl=
ass=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">}=
</code></div><div class=3D"line number17 index16 alt2"><code class=3D"js sp=
aces">&nbsp;&nbsp;</code><code class=3D"js plain">}</code></div><div class=
=3D"line number18 index17 alt1"><code class=3D"js plain">}</code></div></di=
v></td></tr></tbody></table></div></div>
<p>Note that JSON is a subset of object literal notation and there are real=
ly only minor syntactical differences between it and the above (e.g JSON ke=
ys must be strings). If for any reason one wishes to use JSON for storing c=
onfiguration data instead (e.g. for simpler storage when sending to the bac=
k-end), feel free to. For more on the object literal pattern, I recommend r=
eading Rebecca Murphey's excellent <a href=3D"http://rmurphey.com/blog/2009=
/10/15/using-objects-to-organize-your-code/">article</a> on the topic as sh=
e covers a few areas we didn't touch upon.</p>
<h3>4. Nested namespacing</h3>
<p>An extension of the object literal pattern is nested namespacing. It's a=
nother common pattern used that offers a lower risk of collision due to the=
 fact that even if a namespace already exists, it's unlikely the same neste=
d children do.</p>
<p>Does this look familiar?</p>
<div><div id=3D"highlighter_645244" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div></td><td class=3D"code"><div class=3D"container"><div class=3D"line num=
ber1 index0 alt2"><code class=3D"js plain">YAHOO.util.Dom.getElementsByClas=
sName(</code><code class=3D"js string">"test"</code><code class=3D"js plain=
">);</code></div></div></td></tr></tbody></table></div></div>
<p>Older versions of Yahoo!'s YUI library use the nested object namespacing=
 pattern regularly. During my time as an engineer at AOL, we also used this=
 pattern in many of our larger applications. A sample implementation of nes=
ted namespacing may look like this:</p>
<div><div id=3D"highlighter_42930" class=3D"syntaxhighlighter  js acodecode=
"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources/=
essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help">=
?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0"><=
tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</d=
iv><div class=3D"line number2 index1 alt1">2</div><div class=3D"line number=
3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div c=
lass=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5 =
alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"l=
ine number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9</=
div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line num=
ber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</d=
iv></td><td class=3D"code"><div class=3D"container"><div class=3D"line numb=
er1 index0 alt2"><code class=3D"js keyword">var</code> <code class=3D"js pl=
ain">myApp =3D myApp || {};</code></div><div class=3D"line number2 index1 a=
lt1">&nbsp;</div><div class=3D"line number3 index2 alt2"><code class=3D"js =
comments">// perform a similar existence check when defining nested</code><=
/div><div class=3D"line number4 index3 alt1"><code class=3D"js comments">//=
 children</code></div><div class=3D"line number5 index4 alt2"><code class=
=3D"js plain">myApp.routers =3D myApp.routers || {};</code></div><div class=
=3D"line number6 index5 alt1"><code class=3D"js plain">myApp.model =3D myAp=
p.model || {};</code></div><div class=3D"line number7 index6 alt2"><code cl=
ass=3D"js plain">myApp.model.special =3D myApp.model.special || {};</code><=
/div><div class=3D"line number8 index7 alt1">&nbsp;</div><div class=3D"line=
 number9 index8 alt2"><code class=3D"js comments">// nested namespaces can =
be as complex as required:</code></div><div class=3D"line number10 index9 a=
lt1"><code class=3D"js comments">// myApp.utilities.charting.html5.plotGrap=
h(/*..*/);</code></div><div class=3D"line number11 index10 alt2"><code clas=
s=3D"js comments">// myApp.modules.financePlanner.getSummary();</code></div=
><div class=3D"line number12 index11 alt1"><code class=3D"js comments">// m=
yApp.services.social.facebook.realtimeStream.getLatest();</code></div></div=
></td></tr></tbody></table></div></div>
<p><strong>Note: The above differs from how YUI3 approaches namespacing as =
modules there use a sandboxed API host object with far less and far shallow=
er namespacing.</strong></p>

<p>We can also opt to declare new nested namespaces/properties as indexed p=
roperties as follows:</p>
<div><div id=3D"highlighter_926147" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div></td><td class=3D"code"><div class=3D"container"><di=
v class=3D"line number1 index0 alt2"><code class=3D"js plain">myApp[</code>=
<code class=3D"js string">"routers"</code><code class=3D"js plain">] =3D my=
App[</code><code class=3D"js string">"routers"</code><code class=3D"js plai=
n">] || {};</code></div><div class=3D"line number2 index1 alt1"><code class=
=3D"js plain">myApp[</code><code class=3D"js string">"models"</code><code c=
lass=3D"js plain">] =3D myApp[</code><code class=3D"js string">"models"</co=
de><code class=3D"js plain">] || {};</code></div><div class=3D"line number3=
 index2 alt2"><code class=3D"js plain">myApp[</code><code class=3D"js strin=
g">"controllers"</code><code class=3D"js plain">] =3D myApp[</code><code cl=
ass=3D"js string">"controllers"</code><code class=3D"js plain">] || {};</co=
de></div></div></td></tr></tbody></table></div></div>
<p>Both options are readable, organized and offer a relatively safe way of =
namespacing our application in a similar fashion to what we may be used to =
in other languages. The only real caveat however is that it requires our br=
owser's JavaScript engine first locating the myApp object and then digging =
down until it gets to the function we actually wish to use.</p>
<p>This can mean an increased amount of work to perform lookups, however de=
velopers such as <a href=3D"http://twitter.com/kangax">Juriy Zaytsev</a> ha=
ve previously tested and found the performance differences between single o=
bject namespacing vs the "nested" approach to be quite negligible.</p>

<h3>5. Immediately-invoked Function Expressions (IIFE)s</h3>

<p>Earlier in the book, we briefly covered the concept of an <a href=3D"htt=
p://benalman.com/news/2010/11/immediately-invoked-function-expression/">IIF=
E</a> (immediately-invoked function expression) which is effectively an unn=
amed function, immediately invoked after it's been defined. If it sounds fa=
miliar it's because you may have previous come across it referred to as a s=
elf-executing (or self-invoked) anonymous function, however I personally fe=
el Ben Alman's IIFE naming is more accurate. In JavaScript, because both va=
riables and functions explicitly defined within such a context may only be =
accessed inside of it, function invocation provides an easy means to achiev=
ing privacy.</p>

<p>IIFEs are a popular approach to encapsulating application logic to prote=
ct it from the global namespace but also have their use in the world of nam=
espacing.</p>

<p>Examples of IIFEs can be found below:</p>

<div><div id=3D"highlighter_782813" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div></td><td class=3D"code"><div clas=
s=3D"container"><div class=3D"line number1 index0 alt2"><code class=3D"js c=
omments">// an (anonymous) immediately-invoked function expression</code></=
div><div class=3D"line number2 index1 alt1"><code class=3D"js plain">(</cod=
e><code class=3D"js keyword">function</code> <code class=3D"js plain">() { =
</code><code class=3D"js comments">/*...*/</code> <code class=3D"js plain">=
})();</code></div><div class=3D"line number3 index2 alt2">&nbsp;</div><div =
class=3D"line number4 index3 alt1"><code class=3D"js comments">// a named i=
mmediately-invoked function expression</code></div><div class=3D"line numbe=
r5 index4 alt2"><code class=3D"js plain">(</code><code class=3D"js keyword"=
>function</code> <code class=3D"js plain">foobar () { </code><code class=3D=
"js comments">/*..*/</code> <code class=3D"js plain">})();</code></div></di=
v></td></tr></tbody></table></div></div>

<p>Examples of self-executing functions, which are quite different than IIF=
Es, can be found below:</p>

<div><div id=3D"highlighter_556060" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div></td><td class=3D"code"><div clas=
s=3D"container"><div class=3D"line number1 index0 alt2"><code class=3D"js c=
omments">// named self-executing function</code></div><div class=3D"line nu=
mber2 index1 alt1"><code class=3D"js keyword">function</code> <code class=
=3D"js plain">foobar () { foobar(); }</code></div><div class=3D"line number=
3 index2 alt2">&nbsp;</div><div class=3D"line number4 index3 alt1"><code cl=
ass=3D"js comments">// anonymous self-executing function</code></div><div c=
lass=3D"line number5 index4 alt2"><code class=3D"js keyword">var</code> <co=
de class=3D"js plain">foobar =3D </code><code class=3D"js keyword">function=
</code> <code class=3D"js plain">() { arguments.callee(); }</code></div></d=
iv></td></tr></tbody></table></div></div>

<p>Back to the IIFEs, a slightly more expanded version of the first IIFE ex=
ample might look like:</p>
<div><div id=3D"highlighter_486926" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div></td><td class=3D"cod=
e"><div class=3D"container"><div class=3D"line number1 index0 alt2"><code c=
lass=3D"js keyword">var</code> <code class=3D"js plain">namespace =3D names=
pace || {};</code></div><div class=3D"line number2 index1 alt1">&nbsp;</div=
><div class=3D"line number3 index2 alt2"><code class=3D"js comments">// her=
e a namespace object is passed as a function</code></div><div class=3D"line=
 number4 index3 alt1"><code class=3D"js comments">// parameter, where we as=
sign public methods and</code></div><div class=3D"line number5 index4 alt2"=
><code class=3D"js comments">// properties to it</code></div><div class=3D"=
line number6 index5 alt1"><code class=3D"js plain">(</code><code class=3D"j=
s keyword">function</code><code class=3D"js plain">( o ) {</code></div><div=
 class=3D"line number7 index6 alt2"><code class=3D"js spaces">&nbsp;&nbsp;<=
/code><code class=3D"js plain">o.foo =3D </code><code class=3D"js string">"=
foo"</code><code class=3D"js plain">;</code></div><div class=3D"line number=
8 index7 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"=
js plain">o.bar =3D </code><code class=3D"js keyword">function</code><code =
class=3D"js plain">() {</code></div><div class=3D"line number9 index8 alt2"=
><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js=
 keyword">return</code> <code class=3D"js string">"bar"</code><code class=
=3D"js plain">;</code></div><div class=3D"line number10 index9 alt1"><code =
class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js plain">};</code></=
div><div class=3D"line number11 index10 alt2"><code class=3D"js plain">})( =
namespace );</code></div><div class=3D"line number12 index11 alt1">&nbsp;</=
div><div class=3D"line number13 index12 alt2"><code class=3D"js plain">cons=
ole.log( namespace );</code></div></div></td></tr></tbody></table></div></d=
iv>
<p>Whilst readable, this example could be significantly expanded on to addr=
ess common development concerns such as defined levels of privacy (public/p=
rivate functions and variables) as well as convenient namespace extension. =
Let's go through some more code:</p>
<div><div id=3D"highlighter_274492" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</=
div><div class=3D"line number19 index18 alt2">19</div><div class=3D"line nu=
mber20 index19 alt1">20</div><div class=3D"line number21 index20 alt2">21</=
div><div class=3D"line number22 index21 alt1">22</div><div class=3D"line nu=
mber23 index22 alt2">23</div><div class=3D"line number24 index23 alt1">24</=
div><div class=3D"line number25 index24 alt2">25</div><div class=3D"line nu=
mber26 index25 alt1">26</div><div class=3D"line number27 index26 alt2">27</=
div><div class=3D"line number28 index27 alt1">28</div><div class=3D"line nu=
mber29 index28 alt2">29</div><div class=3D"line number30 index29 alt1">30</=
div><div class=3D"line number31 index30 alt2">31</div><div class=3D"line nu=
mber32 index31 alt1">32</div><div class=3D"line number33 index32 alt2">33</=
div><div class=3D"line number34 index33 alt1">34</div><div class=3D"line nu=
mber35 index34 alt2">35</div><div class=3D"line number36 index35 alt1">36</=
div><div class=3D"line number37 index36 alt2">37</div><div class=3D"line nu=
mber38 index37 alt1">38</div><div class=3D"line number39 index38 alt2">39</=
div><div class=3D"line number40 index39 alt1">40</div><div class=3D"line nu=
mber41 index40 alt2">41</div><div class=3D"line number42 index41 alt1">42</=
div><div class=3D"line number43 index42 alt2">43</div><div class=3D"line nu=
mber44 index43 alt1">44</div><div class=3D"line number45 index44 alt2">45</=
div><div class=3D"line number46 index45 alt1">46</div><div class=3D"line nu=
mber47 index46 alt2">47</div><div class=3D"line number48 index47 alt1">48</=
div><div class=3D"line number49 index48 alt2">49</div><div class=3D"line nu=
mber50 index49 alt1">50</div><div class=3D"line number51 index50 alt2">51</=
div></td><td class=3D"code"><div class=3D"container"><div class=3D"line num=
ber1 index0 alt2"><code class=3D"js comments">// namespace (our namespace n=
ame) and undefined are passed here</code></div><div class=3D"line number2 i=
ndex1 alt1"><code class=3D"js comments">// to ensure 1. namespace can be mo=
dified locally and isn't</code></div><div class=3D"line number3 index2 alt2=
"><code class=3D"js comments">// overwritten outside of our function contex=
t</code></div><div class=3D"line number4 index3 alt1"><code class=3D"js com=
ments">// 2. the value of undefined is guaranteed as being truly</code></di=
v><div class=3D"line number5 index4 alt2"><code class=3D"js comments">// un=
defined. This is to avoid issues with undefined being</code></div><div clas=
s=3D"line number6 index5 alt1"><code class=3D"js comments">// mutable pre-E=
S5.</code></div><div class=3D"line number7 index6 alt2">&nbsp;</div><div cl=
ass=3D"line number8 index7 alt1"><code class=3D"js plain">;(</code><code cl=
ass=3D"js keyword">function</code> <code class=3D"js plain">( namespace, un=
defined ) {</code></div><div class=3D"line number9 index8 alt2">&nbsp;</div=
><div class=3D"line number10 index9 alt1"><code class=3D"js spaces">&nbsp;&=
nbsp;</code><code class=3D"js comments">// private properties</code></div><=
div class=3D"line number11 index10 alt2"><code class=3D"js spaces">&nbsp;&n=
bsp;</code><code class=3D"js keyword">var</code> <code class=3D"js plain">f=
oo =3D </code><code class=3D"js string">"foo"</code><code class=3D"js plain=
">,</code></div><div class=3D"line number12 index11 alt1"><code class=3D"js=
 spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain=
">bar =3D </code><code class=3D"js string">"bar"</code><code class=3D"js pl=
ain">;</code></div><div class=3D"line number13 index12 alt2">&nbsp;</div><d=
iv class=3D"line number14 index13 alt1"><code class=3D"js spaces">&nbsp;&nb=
sp;</code><code class=3D"js comments">// public methods and properties</cod=
e></div><div class=3D"line number15 index14 alt2"><code class=3D"js spaces"=
>&nbsp;&nbsp;</code><code class=3D"js plain">namespace.foobar =3D </code><c=
ode class=3D"js string">"foobar"</code><code class=3D"js plain">;</code></d=
iv><div class=3D"line number16 index15 alt1">&nbsp;</div><div class=3D"line=
 number17 index16 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code =
class=3D"js plain">namespace.say =3D </code><code class=3D"js keyword">func=
tion</code> <code class=3D"js plain">( msg ) {</code></div><div class=3D"li=
ne number18 index17 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp=
;</code><code class=3D"js plain">speak( msg );</code></div><div class=3D"li=
ne number19 index18 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><cod=
e class=3D"js plain">};</code></div><div class=3D"line number20 index19 alt=
1">&nbsp;</div><div class=3D"line number21 index20 alt2"><code class=3D"js =
spaces">&nbsp;&nbsp;</code><code class=3D"js plain">namespace.sayHello =3D =
</code><code class=3D"js keyword">function</code> <code class=3D"js plain">=
() {</code></div><div class=3D"line number22 index21 alt1"><code class=3D"j=
s spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">namespace=
.say( </code><code class=3D"js string">"hello world"</code> <code class=3D"=
js plain">);</code></div><div class=3D"line number23 index22 alt2"><code cl=
ass=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js plain">};</code></di=
v><div class=3D"line number24 index23 alt1">&nbsp;</div><div class=3D"line =
number25 index24 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code c=
lass=3D"js comments">// private method</code></div><div class=3D"line numbe=
r26 index25 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=
=3D"js keyword">function</code> <code class=3D"js plain">speak(msg) {</code=
></div><div class=3D"line number27 index26 alt2"><code class=3D"js spaces">=
&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">console.log( </code=
><code class=3D"js string">"You said: "</code> <code class=3D"js plain">+ m=
sg );</code></div><div class=3D"line number28 index27 alt1"><code class=3D"=
js spaces">&nbsp;&nbsp;</code><code class=3D"js plain">};</code></div><div =
class=3D"line number29 index28 alt2">&nbsp;</div><div class=3D"line number3=
0 index29 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D=
"js comments">// check to evaluate whether "namespace" exists in the</code>=
</div><div class=3D"line number31 index30 alt2"><code class=3D"js spaces">&=
nbsp;&nbsp;</code><code class=3D"js comments">// global namespace - if not,=
 assign window.namespace an</code></div><div class=3D"line number32 index31=
 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js comme=
nts">// object literal</code></div><div class=3D"line number33 index32 alt2=
">&nbsp;</div><div class=3D"line number34 index33 alt1"><code class=3D"js p=
lain">})( window.namespace =3D window.namespace || {} );</code></div><div c=
lass=3D"line number35 index34 alt2">&nbsp;</div><div class=3D"line number36=
 index35 alt1">&nbsp;</div><div class=3D"line number37 index36 alt2"><code =
class=3D"js comments">// we can then test our properties and methods as fol=
lows</code></div><div class=3D"line number38 index37 alt1">&nbsp;</div><div=
 class=3D"line number39 index38 alt2"><code class=3D"js comments">// public=
</code></div><div class=3D"line number40 index39 alt1">&nbsp;</div><div cla=
ss=3D"line number41 index40 alt2"><code class=3D"js comments">// Outputs: f=
oobar</code></div><div class=3D"line number42 index41 alt1"><code class=3D"=
js plain">console.log( namespace.foobar );</code></div><div class=3D"line n=
umber43 index42 alt2">&nbsp;</div><div class=3D"line number44 index43 alt1"=
><code class=3D"js comments">// Outputs: You said: hello world</code></div>=
<div class=3D"line number45 index44 alt2"><code class=3D"js plain">namespac=
e.sayHello();</code></div><div class=3D"line number46 index45 alt1">&nbsp;<=
/div><div class=3D"line number47 index46 alt2"><code class=3D"js comments">=
// assigning new properties</code></div><div class=3D"line number48 index47=
 alt1"><code class=3D"js plain">namespace.foobar2 =3D </code><code class=3D=
"js string">"foobar"</code><code class=3D"js plain">;</code></div><div clas=
s=3D"line number49 index48 alt2">&nbsp;</div><div class=3D"line number50 in=
dex49 alt1"><code class=3D"js comments">// Outputs: foobar</code></div><div=
 class=3D"line number51 index50 alt2"><code class=3D"js plain">console.log(=
 namespace.foobar2 );</code></div></div></td></tr></tbody></table></div></d=
iv>
<p>Extensibility is of course key to any scalable namespacing pattern and I=
IFEs can be used to achieve this quite easily. In the below example, our "n=
amespace" is once again passed as an argument to our anonymous function and=
 is then extended (or decorated) with further functionality:</p>
<div><div id=3D"highlighter_837726" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div></td><td class=3D"code"><div class=3D"containe=
r"><div class=3D"line number1 index0 alt2"><code class=3D"js comments">// l=
et's extend the namespace with new functionality</code></div><div class=3D"=
line number2 index1 alt1"><code class=3D"js plain">(</code><code class=3D"j=
s keyword">function</code><code class=3D"js plain">( namespace, undefined )=
 {</code></div><div class=3D"line number3 index2 alt2">&nbsp;</div><div cla=
ss=3D"line number4 index3 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</cod=
e><code class=3D"js comments">// public method</code></div><div class=3D"li=
ne number5 index4 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code =
class=3D"js plain">namespace.sayGoodbye =3D </code><code class=3D"js keywor=
d">function</code> <code class=3D"js plain">() {</code></div><div class=3D"=
line number6 index5 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp=
;</code><code class=3D"js plain">namespace.say( </code><code class=3D"js st=
ring">"goodbye"</code> <code class=3D"js plain">);</code></div><div class=
=3D"line number7 index6 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code>=
<code class=3D"js plain">}</code></div><div class=3D"line number8 index7 al=
t1"><code class=3D"js plain">})( window.namespace =3D window.namespace || {=
});</code></div><div class=3D"line number9 index8 alt2">&nbsp;</div><div cl=
ass=3D"line number10 index9 alt1"><code class=3D"js comments">// Outputs: g=
oodbye</code></div><div class=3D"line number11 index10 alt2"><code class=3D=
"js plain">namespace.sayGoodbye();</code></div></div></td></tr></tbody></ta=
ble></div></div>

<p>If you would like to find out more about this pattern, I recommend readi=
ng Ben's <a href=3D"http://benalman.com/news/2010/11/immediately-invoked-fu=
nction-expression/">IIFE post</a> for more information.</p>

<h3>6. Namespace injection</h3>

<p>Namespace injection is another variation on the IIFE where we "inject" t=
he methods and properties for a specific namespace from within a function w=
rapper using <i>this</i> as a namespace proxy. The benefit this pattern off=
ers is easy application of functional behaviour to multiple objects or name=
spaces and can come in useful when applying a set of base methods to be bui=
lt on later (e.g. getters and setters).</p>
<p>The disadvantages of this pattern are that there may be easier or more o=
ptimal approaches to achieving this goal (e.g. deep object extension / merg=
ing) which I cover earlier in the section.</p>
<p>Below we can see an example of this pattern in action, where we use it t=
o populate the behaviour for two namespaces: one initially defined (utils) =
and another which we dynamically create as a part of the functionality assi=
gnment for utils (a new namespace called <i>tools</i>).</p>
<div><div id=3D"highlighter_117605" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</=
div><div class=3D"line number19 index18 alt2">19</div><div class=3D"line nu=
mber20 index19 alt1">20</div><div class=3D"line number21 index20 alt2">21</=
div><div class=3D"line number22 index21 alt1">22</div><div class=3D"line nu=
mber23 index22 alt2">23</div><div class=3D"line number24 index23 alt1">24</=
div><div class=3D"line number25 index24 alt2">25</div><div class=3D"line nu=
mber26 index25 alt1">26</div><div class=3D"line number27 index26 alt2">27</=
div><div class=3D"line number28 index27 alt1">28</div><div class=3D"line nu=
mber29 index28 alt2">29</div><div class=3D"line number30 index29 alt1">30</=
div><div class=3D"line number31 index30 alt2">31</div><div class=3D"line nu=
mber32 index31 alt1">32</div><div class=3D"line number33 index32 alt2">33</=
div><div class=3D"line number34 index33 alt1">34</div><div class=3D"line nu=
mber35 index34 alt2">35</div><div class=3D"line number36 index35 alt1">36</=
div><div class=3D"line number37 index36 alt2">37</div><div class=3D"line nu=
mber38 index37 alt1">38</div><div class=3D"line number39 index38 alt2">39</=
div><div class=3D"line number40 index39 alt1">40</div><div class=3D"line nu=
mber41 index40 alt2">41</div><div class=3D"line number42 index41 alt1">42</=
div><div class=3D"line number43 index42 alt2">43</div><div class=3D"line nu=
mber44 index43 alt1">44</div><div class=3D"line number45 index44 alt2">45</=
div><div class=3D"line number46 index45 alt1">46</div><div class=3D"line nu=
mber47 index46 alt2">47</div></td><td class=3D"code"><div class=3D"containe=
r"><div class=3D"line number1 index0 alt2"><code class=3D"js keyword">var</=
code> <code class=3D"js plain">myApp =3D myApp || {};</code></div><div clas=
s=3D"line number2 index1 alt1"><code class=3D"js plain">myApp.utils =3D {};=
</code></div><div class=3D"line number3 index2 alt2">&nbsp;</div><div class=
=3D"line number4 index3 alt1"><code class=3D"js plain">(</code><code class=
=3D"js keyword">function</code> <code class=3D"js plain">() {</code></div><=
div class=3D"line number5 index4 alt2"><code class=3D"js spaces">&nbsp;&nbs=
p;</code><code class=3D"js keyword">var</code> <code class=3D"js plain">val=
 =3D 5;</code></div><div class=3D"line number6 index5 alt1">&nbsp;</div><di=
v class=3D"line number7 index6 alt2"><code class=3D"js spaces">&nbsp;&nbsp;=
</code><code class=3D"js keyword">this</code><code class=3D"js plain">.getV=
alue =3D </code><code class=3D"js keyword">function</code> <code class=3D"j=
s plain">() {</code></div><div class=3D"line number8 index7 alt1"><code cla=
ss=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">=
return</code> <code class=3D"js plain">val;</code></div><div class=3D"line =
number9 index8 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code cla=
ss=3D"js plain">};</code></div><div class=3D"line number10 index9 alt1">&nb=
sp;</div><div class=3D"line number11 index10 alt2"><code class=3D"js spaces=
">&nbsp;&nbsp;</code><code class=3D"js keyword">this</code><code class=3D"j=
s plain">.setValue =3D </code><code class=3D"js keyword">function</code><co=
de class=3D"js plain">( newVal ) {</code></div><div class=3D"line number12 =
index11 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><cod=
e class=3D"js plain">val =3D newVal;</code></div><div class=3D"line number1=
3 index12 alt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D=
"js plain">}</code></div><div class=3D"line number14 index13 alt1">&nbsp;</=
div><div class=3D"line number15 index14 alt2"><code class=3D"js spaces">&nb=
sp;&nbsp;</code><code class=3D"js comments">// also introduce a new sub-nam=
espace</code></div><div class=3D"line number16 index15 alt1"><code class=3D=
"js spaces">&nbsp;&nbsp;</code><code class=3D"js keyword">this</code><code =
class=3D"js plain">.tools =3D {};</code></div><div class=3D"line number17 i=
ndex16 alt2">&nbsp;</div><div class=3D"line number18 index17 alt1"><code cl=
ass=3D"js plain">}).apply( myApp.utils );</code></div><div class=3D"line nu=
mber19 index18 alt2">&nbsp;</div><div class=3D"line number20 index19 alt1">=
<code class=3D"js comments">// inject new behaviour into the tools namespac=
e</code></div><div class=3D"line number21 index20 alt2"><code class=3D"js c=
omments">// which we defined via the utilities module</code></div><div clas=
s=3D"line number22 index21 alt1">&nbsp;</div><div class=3D"line number23 in=
dex22 alt2"><code class=3D"js plain">(</code><code class=3D"js keyword">fun=
ction</code> <code class=3D"js plain">() {</code></div><div class=3D"line n=
umber24 index23 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</c=
ode><code class=3D"js keyword">this</code><code class=3D"js plain">.diagnos=
e =3D </code><code class=3D"js keyword">function</code><code class=3D"js pl=
ain">() {</code></div><div class=3D"line number25 index24 alt2"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js=
 keyword">return</code> <code class=3D"js string">"diagnosis"</code><code c=
lass=3D"js plain">;</code></div><div class=3D"line number26 index25 alt1"><=
code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js p=
lain">}</code></div><div class=3D"line number27 index26 alt2"><code class=
=3D"js plain">}).apply( myApp.utils.tools );</code></div><div class=3D"line=
 number28 index27 alt1">&nbsp;</div><div class=3D"line number29 index28 alt=
2"><code class=3D"js comments">// note, this same approach to extension cou=
ld be applied</code></div><div class=3D"line number30 index29 alt1"><code c=
lass=3D"js comments">// to a regular IIFE, by just passing in the context a=
s</code></div><div class=3D"line number31 index30 alt2"><code class=3D"js c=
omments">// an argument and modifying the context rather than just</code></=
div><div class=3D"line number32 index31 alt1"><code class=3D"js comments">/=
/ "this"</code></div><div class=3D"line number33 index32 alt2">&nbsp;</div>=
<div class=3D"line number34 index33 alt1"><code class=3D"js comments">// Us=
age:</code></div><div class=3D"line number35 index34 alt2">&nbsp;</div><div=
 class=3D"line number36 index35 alt1"><code class=3D"js comments">// Output=
s our populated namespace</code></div><div class=3D"line number37 index36 a=
lt2"><code class=3D"js plain">console.log( myApp );</code></div><div class=
=3D"line number38 index37 alt1">&nbsp;</div><div class=3D"line number39 ind=
ex38 alt2"><code class=3D"js comments">// Outputs: 5</code></div><div class=
=3D"line number40 index39 alt1"><code class=3D"js plain">console.log( myApp=
.utils.getValue() );</code></div><div class=3D"line number41 index40 alt2">=
&nbsp;</div><div class=3D"line number42 index41 alt1"><code class=3D"js com=
ments">// Sets the value of `val` and returns it</code></div><div class=3D"=
line number43 index42 alt2"><code class=3D"js plain">myApp.utils.setValue( =
25 );</code></div><div class=3D"line number44 index43 alt1"><code class=3D"=
js plain">console.log( myApp.utils.getValue() );</code></div><div class=3D"=
line number45 index44 alt2">&nbsp;</div><div class=3D"line number46 index45=
 alt1"><code class=3D"js comments">// Testing another level down</code></di=
v><div class=3D"line number47 index46 alt2"><code class=3D"js plain">consol=
e.log( myApp.utils.tools.diagnose() );</code></div></div></td></tr></tbody>=
</table></div></div>
<p>Angus Croll has also <a href=3D"http://msdn.microsoft.com/en-us/scriptju=
nkie/gg578608">previously</a> suggested the idea of using the call API to p=
rovide a natural separation between contexts and arguments. This pattern ca=
n feel a lot more like a module creator, but as modules still offer an enca=
psulation solution, we'll briefly cover it for the sake of thoroughness:</p=
>
<div><div id=3D"highlighter_303646" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</=
div><div class=3D"line number19 index18 alt2">19</div><div class=3D"line nu=
mber20 index19 alt1">20</div><div class=3D"line number21 index20 alt2">21</=
div><div class=3D"line number22 index21 alt1">22</div><div class=3D"line nu=
mber23 index22 alt2">23</div><div class=3D"line number24 index23 alt1">24</=
div><div class=3D"line number25 index24 alt2">25</div><div class=3D"line nu=
mber26 index25 alt1">26</div></td><td class=3D"code"><div class=3D"containe=
r"><div class=3D"line number1 index0 alt2"><code class=3D"js comments">// d=
efine a namespace we can use later</code></div><div class=3D"line number2 i=
ndex1 alt1"><code class=3D"js keyword">var</code> <code class=3D"js plain">=
ns =3D ns || {},</code></div><div class=3D"line number3 index2 alt2"><code =
class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain"=
>ns2 =3D ns2 || {};</code></div><div class=3D"line number4 index3 alt1">&nb=
sp;</div><div class=3D"line number5 index4 alt2"><code class=3D"js comments=
">// the module/namespace creator</code></div><div class=3D"line number6 in=
dex5 alt1"><code class=3D"js keyword">var</code> <code class=3D"js plain">c=
reator =3D </code><code class=3D"js keyword">function</code><code class=3D"=
js plain">( val ) {</code></div><div class=3D"line number7 index6 alt2">&nb=
sp;</div><div class=3D"line number8 index7 alt1"><code class=3D"js spaces">=
&nbsp;&nbsp;</code><code class=3D"js keyword">var</code> <code class=3D"js =
plain">val =3D val || 0;</code></div><div class=3D"line number9 index8 alt2=
">&nbsp;</div><div class=3D"line number10 index9 alt1"><code class=3D"js sp=
aces">&nbsp;&nbsp;</code><code class=3D"js keyword">this</code><code class=
=3D"js plain">.next =3D </code><code class=3D"js keyword">function</code> <=
code class=3D"js plain">() {</code></div><div class=3D"line number11 index1=
0 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code clas=
s=3D"js keyword">return</code> <code class=3D"js plain">val++</code></div><=
div class=3D"line number12 index11 alt1"><code class=3D"js spaces">&nbsp;&n=
bsp;</code><code class=3D"js plain">};</code></div><div class=3D"line numbe=
r13 index12 alt2">&nbsp;</div><div class=3D"line number14 index13 alt1"><co=
de class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js keyword">this</=
code><code class=3D"js plain">.reset =3D </code><code class=3D"js keyword">=
function</code> <code class=3D"js plain">() {</code></div><div class=3D"lin=
e number15 index14 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;=
</code><code class=3D"js plain">val =3D 0;</code></div><div class=3D"line n=
umber16 index15 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><code cl=
ass=3D"js plain">};</code></div><div class=3D"line number17 index16 alt2"><=
code class=3D"js plain">};</code></div><div class=3D"line number18 index17 =
alt1">&nbsp;</div><div class=3D"line number19 index18 alt2"><code class=3D"=
js plain">creator.call( ns );</code></div><div class=3D"line number20 index=
19 alt1">&nbsp;</div><div class=3D"line number21 index20 alt2"><code class=
=3D"js comments">// ns.next, ns.reset now exist</code></div><div class=3D"l=
ine number22 index21 alt1"><code class=3D"js plain">creator.call( ns2, 5000=
 );</code></div><div class=3D"line number23 index22 alt2">&nbsp;</div><div =
class=3D"line number24 index23 alt1"><code class=3D"js comments">// ns2 con=
tains the same methods</code></div><div class=3D"line number25 index24 alt2=
"><code class=3D"js comments">// but has an overridden value for val</code>=
</div><div class=3D"line number26 index25 alt1"><code class=3D"js comments"=
>// of 5000</code></div></div></td></tr></tbody></table></div></div>
<p>As mentioned, this type of pattern is useful for assigning a similar bas=
e set of functionality to multiple modules or namespaces. I would however o=
nly really suggest using it where explicitly declaring functionality within=
 an object/closure for direct access doesn't make sense.</p>

<h2>Advanced namespacing patterns</h2>

<p>We'll now explore some advanced patterns and utilities that I have found=
 invaluable when working on larger applications - some of which have requir=
ed a re-think of traditional approaches to application namespacing. I'll no=
te that I am not advocating any of the following as <em>the</em> way to nam=
espace, but rather ways that I have found work in practice.</p>

<h3>Automating nested namespacing</h3>
<p>As we've reviewed, nested namespaces can provide an organized hierarchy =
of structure for a unit of code. An example of such a namespace could be th=
e following: <i>application.utilities.drawing.canvas.2d</i>. This can also =
be expanded using the object literal pattern to be:</p>
<div><div id=3D"highlighter_259042" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div></td><td class=3D"code"><div class=3D"containe=
r"><div class=3D"line number1 index0 alt2"><code class=3D"js keyword">var</=
code> <code class=3D"js plain">application =3D {</code></div><div class=3D"=
line number2 index1 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><cod=
e class=3D"js plain">utilities: {</code></div><div class=3D"line number3 in=
dex2 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code c=
lass=3D"js plain">drawing: {</code></div><div class=3D"line number4 index3 =
alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>=
<code class=3D"js plain">canvas: {</code></div><div class=3D"line number5 i=
ndex4 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;</code><code class=3D"js plain">2d:{</code></div><div class=3D"l=
ine number6 index5 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">//..=
.</code></div><div class=3D"line number7 index6 alt2"><code class=3D"js spa=
ces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"=
js plain">}</code></div><div class=3D"line number8 index7 alt1"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js=
 plain">}</code></div><div class=3D"line number9 index8 alt2"><code class=
=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">}</c=
ode></div><div class=3D"line number10 index9 alt1"><code class=3D"js spaces=
">&nbsp;&nbsp;</code><code class=3D"js plain">}</code></div><div class=3D"l=
ine number11 index10 alt2"><code class=3D"js plain">};</code></div></div></=
td></tr></tbody></table></div></div>

<p>One of the obvious challenges with this pattern is that each additional =
layer we wish to create requires yet another object to be defined as a chil=
d of some parent in our top-level namespace. This can become particularly l=
aborious when multiple depths are required as our application increases in =
complexity.</p>

<p>How can this problem be better solved? In <a href=3D"http://www.amazon.c=
om/JavaScript-Patterns-Stoyan-Stefanov/dp/0596806752">JavaScript Patterns</=
a>, <a href=3D"http://jspatterns.com/">Stoyan Stefanov</a> presents a very-=
clever approach for automatically defining nested namespaces under an exist=
ing global variable. He suggests a convenience method that takes a single s=
tring argument for a nest, parses this and automatically populates our base=
 namespace with the objects required.</p>

<p>The method he suggests using is the following, which I've updated it to =
be a generic function for easier re-use with multiple namespaces:</p>
<div><div id=3D"highlighter_30283" class=3D"syntaxhighlighter  js acodecode=
"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources/=
essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help">=
?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0"><=
tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</d=
iv><div class=3D"line number2 index1 alt1">2</div><div class=3D"line number=
3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div c=
lass=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5 =
alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"l=
ine number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9</=
div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line num=
ber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</d=
iv><div class=3D"line number13 index12 alt2">13</div><div class=3D"line num=
ber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</d=
iv><div class=3D"line number16 index15 alt1">16</div><div class=3D"line num=
ber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</d=
iv><div class=3D"line number19 index18 alt2">19</div><div class=3D"line num=
ber20 index19 alt1">20</div><div class=3D"line number21 index20 alt2">21</d=
iv><div class=3D"line number22 index21 alt1">22</div><div class=3D"line num=
ber23 index22 alt2">23</div><div class=3D"line number24 index23 alt1">24</d=
iv><div class=3D"line number25 index24 alt2">25</div><div class=3D"line num=
ber26 index25 alt1">26</div><div class=3D"line number27 index26 alt2">27</d=
iv><div class=3D"line number28 index27 alt1">28</div><div class=3D"line num=
ber29 index28 alt2">29</div><div class=3D"line number30 index29 alt1">30</d=
iv><div class=3D"line number31 index30 alt2">31</div><div class=3D"line num=
ber32 index31 alt1">32</div><div class=3D"line number33 index32 alt2">33</d=
iv><div class=3D"line number34 index33 alt1">34</div><div class=3D"line num=
ber35 index34 alt2">35</div><div class=3D"line number36 index35 alt1">36</d=
iv><div class=3D"line number37 index36 alt2">37</div><div class=3D"line num=
ber38 index37 alt1">38</div><div class=3D"line number39 index38 alt2">39</d=
iv><div class=3D"line number40 index39 alt1">40</div><div class=3D"line num=
ber41 index40 alt2">41</div><div class=3D"line number42 index41 alt1">42</d=
iv><div class=3D"line number43 index42 alt2">43</div></td><td class=3D"code=
"><div class=3D"container"><div class=3D"line number1 index0 alt2"><code cl=
ass=3D"js comments">// top-level namespace being assigned an object literal=
</code></div><div class=3D"line number2 index1 alt1"><code class=3D"js keyw=
ord">var</code> <code class=3D"js plain">myApp =3D myApp || {};</code></div=
><div class=3D"line number3 index2 alt2">&nbsp;</div><div class=3D"line num=
ber4 index3 alt1"><code class=3D"js comments">// a convenience function for=
 parsing string namespaces and</code></div><div class=3D"line number5 index=
4 alt2"><code class=3D"js comments">// automatically generating nested name=
spaces</code></div><div class=3D"line number6 index5 alt1"><code class=3D"j=
s keyword">function</code> <code class=3D"js plain">extend( ns, ns_string )=
 {</code></div><div class=3D"line number7 index6 alt2"><code class=3D"js sp=
aces">&nbsp;&nbsp;</code><code class=3D"js keyword">var</code> <code class=
=3D"js plain">parts =3D ns_string.split(</code><code class=3D"js string">".=
"</code><code class=3D"js plain">),</code></div><div class=3D"line number8 =
index7 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
</code><code class=3D"js plain">parent =3D ns,</code></div><div class=3D"li=
ne number9 index8 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;</code><code class=3D"js plain">pl;</code></div><div class=3D"li=
ne number10 index9 alt1">&nbsp;</div><div class=3D"line number11 index10 al=
t2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js plain">p=
l =3D parts.length;</code></div><div class=3D"line number12 index11 alt1">&=
nbsp;</div><div class=3D"line number13 index12 alt2"><code class=3D"js spac=
es">&nbsp;&nbsp;</code><code class=3D"js keyword">for</code> <code class=3D=
"js plain">( </code><code class=3D"js keyword">var</code> <code class=3D"js=
 plain">i =3D 0; i &lt; pl; i++ ) {</code></div><div class=3D"line number14=
 index13 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><co=
de class=3D"js comments">// create a property if it doesn't exist</code></d=
iv><div class=3D"line number15 index14 alt2"><code class=3D"js spaces">&nbs=
p;&nbsp;&nbsp;&nbsp;</code><code class=3D"js keyword">if</code> <code class=
=3D"js plain">( </code><code class=3D"js keyword">typeof</code> <code class=
=3D"js plain">parent[parts[i]] =3D=3D=3D </code><code class=3D"js string">"=
undefined"</code> <code class=3D"js plain">) {</code></div><div class=3D"li=
ne number16 index15 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;</code><code class=3D"js plain">parent[parts[i]] =3D {};</code=
></div><div class=3D"line number17 index16 alt2"><code class=3D"js spaces">=
&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">}</code></div><div =
class=3D"line number18 index17 alt1">&nbsp;</div><div class=3D"line number1=
9 index18 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><c=
ode class=3D"js plain">parent =3D parent[parts[i]];</code></div><div class=
=3D"line number20 index19 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</cod=
e><code class=3D"js plain">}</code></div><div class=3D"line number21 index2=
0 alt2">&nbsp;</div><div class=3D"line number22 index21 alt1"><code class=
=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js keyword">return</code> =
<code class=3D"js plain">parent;</code></div><div class=3D"line number23 in=
dex22 alt2"><code class=3D"js plain">}</code></div><div class=3D"line numbe=
r24 index23 alt1">&nbsp;</div><div class=3D"line number25 index24 alt2"><co=
de class=3D"js comments">// Usage:</code></div><div class=3D"line number26 =
index25 alt1"><code class=3D"js comments">// extend myApp with a deeply nes=
ted namespace</code></div><div class=3D"line number27 index26 alt2"><code c=
lass=3D"js keyword">var</code> <code class=3D"js plain">mod =3D extend(myAp=
p, </code><code class=3D"js string">"modules.module2"</code><code class=3D"=
js plain">);</code></div><div class=3D"line number28 index27 alt1">&nbsp;</=
div><div class=3D"line number29 index28 alt2"><code class=3D"js comments">/=
/ the correct object with nested depths is output</code></div><div class=3D=
"line number30 index29 alt1"><code class=3D"js plain">console.log(mod);</co=
de></div><div class=3D"line number31 index30 alt2">&nbsp;</div><div class=
=3D"line number32 index31 alt1"><code class=3D"js comments">// minor test t=
o check the instance of mod can also</code></div><div class=3D"line number3=
3 index32 alt2"><code class=3D"js comments">// be used outside of the myApp=
 namesapce as a clone</code></div><div class=3D"line number34 index33 alt1"=
><code class=3D"js comments">// that includes the extensions</code></div><d=
iv class=3D"line number35 index34 alt2">&nbsp;</div><div class=3D"line numb=
er36 index35 alt1"><code class=3D"js comments">// Outputs: true</code></div=
><div class=3D"line number37 index36 alt2"><code class=3D"js plain">console=
.log(mod =3D=3D myApp.modules.module2);</code></div><div class=3D"line numb=
er38 index37 alt1">&nbsp;</div><div class=3D"line number39 index38 alt2"><c=
ode class=3D"js comments">// further demonstration of easier nested namespa=
ce</code></div><div class=3D"line number40 index39 alt1"><code class=3D"js =
comments">// assignment using extend</code></div><div class=3D"line number4=
1 index40 alt2"><code class=3D"js plain">extend(myApp, </code><code class=
=3D"js string">"moduleA.moduleB.moduleC.moduleD"</code><code class=3D"js pl=
ain">);</code></div><div class=3D"line number42 index41 alt1"><code class=
=3D"js plain">extend(myApp, </code><code class=3D"js string">"longer.versio=
n.looks.like.this"</code><code class=3D"js plain">);</code></div><div class=
=3D"line number43 index42 alt2"><code class=3D"js plain">console.log(myApp)=
;</code></div></div></td></tr></tbody></table></div></div>
<p>Web inspector output:</p>
<p><img border=3D"0" src=3D"https://addyosmani.com/resources/essentialjsdes=
ignpatterns/book/images/ns1.png" width=3D"520"></p>
<p>Where one would previously have had to explicitly declare the various ne=
sts for their namespace as objects, this can now be easily achieved using a=
 single, cleaner line of code.</p>

<h3>Dependency declaration pattern</h3>
<p>We're now going to explore a minor augmentation to the nested namespacin=
g pattern which we'll refer to as the Dependency Declaration pattern. We al=
l know that local references to objects can decrease overall lookup times, =
but let's apply this to namespacing to see how it might look in practice:</=
p>
<div><div id=3D"highlighter_928092" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</=
div></td><td class=3D"code"><div class=3D"container"><div class=3D"line num=
ber1 index0 alt2"><code class=3D"js comments">// common approach to accessi=
ng nested namespaces</code></div><div class=3D"line number2 index1 alt1"><c=
ode class=3D"js plain">myApp.utilities.math.fibonacci( 25 );</code></div><d=
iv class=3D"line number3 index2 alt2"><code class=3D"js plain">myApp.utilit=
ies.math.sin( 56 );</code></div><div class=3D"line number4 index3 alt1"><co=
de class=3D"js plain">myApp.utilities.drawing.plot( 98,50,60 );</code></div=
><div class=3D"line number5 index4 alt2">&nbsp;</div><div class=3D"line num=
ber6 index5 alt1"><code class=3D"js comments">// with local/cached referenc=
es</code></div><div class=3D"line number7 index6 alt2"><code class=3D"js ke=
yword">var</code> <code class=3D"js plain">utils =3D myApp.utilities,</code=
></div><div class=3D"line number8 index7 alt1"><code class=3D"js plain">mat=
hs =3D utils.math,</code></div><div class=3D"line number9 index8 alt2"><cod=
e class=3D"js plain">drawing =3D utils.drawing;</code></div><div class=3D"l=
ine number10 index9 alt1">&nbsp;</div><div class=3D"line number11 index10 a=
lt2"><code class=3D"js comments">// easier to access the namespace</code></=
div><div class=3D"line number12 index11 alt1"><code class=3D"js plain">math=
s.fibonacci( 25 );</code></div><div class=3D"line number13 index12 alt2"><c=
ode class=3D"js plain">maths.sin( 56 );</code></div><div class=3D"line numb=
er14 index13 alt1"><code class=3D"js plain">drawing.plot( 98, 50,60 );</cod=
e></div><div class=3D"line number15 index14 alt2">&nbsp;</div><div class=3D=
"line number16 index15 alt1"><code class=3D"js comments">// note that the a=
bove is particularly performant when</code></div><div class=3D"line number1=
7 index16 alt2"><code class=3D"js comments">// compared to hundreds or thou=
sands of calls to nested</code></div><div class=3D"line number18 index17 al=
t1"><code class=3D"js comments">// namespaces vs. a local reference to the =
namespace</code></div></div></td></tr></tbody></table></div></div>
<p>Working with a local variable here is almost always faster than working =
with a top-level global (e.g.myApp). It's also both more convenient and mor=
e performant than accessing nested properties/sub-namespaces on every subse=
quent line and can improve readability in more complex applications.</p>

<p>Stoyan recommends declaring localized namespaces required by a function =
or module at the top of our function scope (using the single-variable patte=
rn) and calls this a dependency declaration pattern. One of the benefits th=
is offers is a decrease in locating dependencies and resolving them, should=
 we have an extendable architecture that dynamically loads modules into our=
 namespace when required.</p>

<p>In my opinion this pattern works best when working at a modular level, l=
ocalizing a namespace to be used by a group of methods. Localizing namespac=
es on a per-function level, especially where there is significant overlap b=
etween namespace dependencies would be something I would recommend avoiding=
 where possible. Instead, define it further up and just have them all acces=
s the same reference.</p>

<h3>Deep object extension</h3>
<p>An alternative approach to automatic namespacing is deep object extensio=
n. Namespaces defined using object literal notation may be easily extended =
(or merged) with other objects (or namespaces) such that the properties and=
 functions of both namespaces can be accessible under the same namespace po=
st-merge.</p>

<p>This is something that's been made fairly easy to accomplish with modern=
 JavaScript frameworks (e.g. see jQuery's <a href=3D"http://api.jquery.com/=
jQuery.extend/">$.extend</a>), however, if looking to extend object (namesp=
aces) using vanilla JS, the following routine may be of assistance.</p>

<div><div id=3D"highlighter_539953" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</=
div><div class=3D"line number19 index18 alt2">19</div><div class=3D"line nu=
mber20 index19 alt1">20</div><div class=3D"line number21 index20 alt2">21</=
div><div class=3D"line number22 index21 alt1">22</div><div class=3D"line nu=
mber23 index22 alt2">23</div><div class=3D"line number24 index23 alt1">24</=
div><div class=3D"line number25 index24 alt2">25</div><div class=3D"line nu=
mber26 index25 alt1">26</div><div class=3D"line number27 index26 alt2">27</=
div><div class=3D"line number28 index27 alt1">28</div><div class=3D"line nu=
mber29 index28 alt2">29</div><div class=3D"line number30 index29 alt1">30</=
div><div class=3D"line number31 index30 alt2">31</div><div class=3D"line nu=
mber32 index31 alt1">32</div><div class=3D"line number33 index32 alt2">33</=
div><div class=3D"line number34 index33 alt1">34</div><div class=3D"line nu=
mber35 index34 alt2">35</div><div class=3D"line number36 index35 alt1">36</=
div><div class=3D"line number37 index36 alt2">37</div><div class=3D"line nu=
mber38 index37 alt1">38</div><div class=3D"line number39 index38 alt2">39</=
div><div class=3D"line number40 index39 alt1">40</div><div class=3D"line nu=
mber41 index40 alt2">41</div><div class=3D"line number42 index41 alt1">42</=
div><div class=3D"line number43 index42 alt2">43</div><div class=3D"line nu=
mber44 index43 alt1">44</div><div class=3D"line number45 index44 alt2">45</=
div><div class=3D"line number46 index45 alt1">46</div><div class=3D"line nu=
mber47 index46 alt2">47</div><div class=3D"line number48 index47 alt1">48</=
div><div class=3D"line number49 index48 alt2">49</div><div class=3D"line nu=
mber50 index49 alt1">50</div><div class=3D"line number51 index50 alt2">51</=
div><div class=3D"line number52 index51 alt1">52</div><div class=3D"line nu=
mber53 index52 alt2">53</div><div class=3D"line number54 index53 alt1">54</=
div><div class=3D"line number55 index54 alt2">55</div><div class=3D"line nu=
mber56 index55 alt1">56</div><div class=3D"line number57 index56 alt2">57</=
div><div class=3D"line number58 index57 alt1">58</div><div class=3D"line nu=
mber59 index58 alt2">59</div><div class=3D"line number60 index59 alt1">60</=
div><div class=3D"line number61 index60 alt2">61</div><div class=3D"line nu=
mber62 index61 alt1">62</div><div class=3D"line number63 index62 alt2">63</=
div><div class=3D"line number64 index63 alt1">64</div><div class=3D"line nu=
mber65 index64 alt2">65</div><div class=3D"line number66 index65 alt1">66</=
div><div class=3D"line number67 index66 alt2">67</div><div class=3D"line nu=
mber68 index67 alt1">68</div><div class=3D"line number69 index68 alt2">69</=
div><div class=3D"line number70 index69 alt1">70</div><div class=3D"line nu=
mber71 index70 alt2">71</div><div class=3D"line number72 index71 alt1">72</=
div><div class=3D"line number73 index72 alt2">73</div><div class=3D"line nu=
mber74 index73 alt1">74</div><div class=3D"line number75 index74 alt2">75</=
div><div class=3D"line number76 index75 alt1">76</div><div class=3D"line nu=
mber77 index76 alt2">77</div><div class=3D"line number78 index77 alt1">78</=
div><div class=3D"line number79 index78 alt2">79</div><div class=3D"line nu=
mber80 index79 alt1">80</div><div class=3D"line number81 index80 alt2">81</=
div><div class=3D"line number82 index81 alt1">82</div><div class=3D"line nu=
mber83 index82 alt2">83</div></td><td class=3D"code"><div class=3D"containe=
r"><div class=3D"line number1 index0 alt2"><code class=3D"js comments">// e=
xtend.js</code></div><div class=3D"line number2 index1 alt1"><code class=3D=
"js comments">// Written by Andrew Dupont, optimized by Addy Osmani</code><=
/div><div class=3D"line number3 index2 alt2">&nbsp;</div><div class=3D"line=
 number4 index3 alt1"><code class=3D"js keyword">function</code> <code clas=
s=3D"js plain">extend( destination, source ) {</code></div><div class=3D"li=
ne number5 index4 alt2">&nbsp;</div><div class=3D"line number6 index5 alt1"=
><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js keyword">va=
r</code> <code class=3D"js plain">toString =3D Object.prototype.toString,</=
code></div><div class=3D"line number7 index6 alt2"><code class=3D"js spaces=
">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">objTe=
st =3D toString.call({});</code></div><div class=3D"line number8 index7 alt=
1">&nbsp;</div><div class=3D"line number9 index8 alt2"><code class=3D"js sp=
aces">&nbsp;&nbsp;</code><code class=3D"js keyword">for</code> <code class=
=3D"js plain">( </code><code class=3D"js keyword">var</code> <code class=3D=
"js plain">property </code><code class=3D"js keyword">in</code> <code class=
=3D"js plain">source ) {</code></div><div class=3D"line number10 index9 alt=
1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"=
js keyword">if</code> <code class=3D"js plain">( source[property] &amp;&amp=
; objTest =3D=3D=3D toString.call(source[property]) ) {</code></div><div cl=
ass=3D"line number11 index10 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">destination[property]=
 =3D destination[property] || {};</code></div><div class=3D"line number12 i=
ndex11 alt1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
</code><code class=3D"js plain">extend(destination[property], source[proper=
ty]);</code></div><div class=3D"line number13 index12 alt2"><code class=3D"=
js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">} </code=
><code class=3D"js keyword">else</code> <code class=3D"js plain">{</code></=
div><div class=3D"line number14 index13 alt1"><code class=3D"js spaces">&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">destinatio=
n[property] =3D source[property];</code></div><div class=3D"line number15 i=
ndex14 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code=
 class=3D"js plain">}</code></div><div class=3D"line number16 index15 alt1"=
><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js plain">}</c=
ode></div><div class=3D"line number17 index16 alt2">&nbsp;</div><div class=
=3D"line number18 index17 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</cod=
e><code class=3D"js keyword">return</code> <code class=3D"js plain">destina=
tion;</code></div><div class=3D"line number19 index18 alt2"><code class=3D"=
js plain">};</code></div><div class=3D"line number20 index19 alt1">&nbsp;</=
div><div class=3D"line number21 index20 alt2"><code class=3D"js plain">cons=
ole.group( </code><code class=3D"js string">"objExtend namespacing tests"</=
code> <code class=3D"js plain">);</code></div><div class=3D"line number22 i=
ndex21 alt1">&nbsp;</div><div class=3D"line number23 index22 alt2"><code cl=
ass=3D"js comments">// define a top-level namespace for usage</code></div><=
div class=3D"line number24 index23 alt1"><code class=3D"js keyword">var</co=
de> <code class=3D"js plain">myNS =3D myNS || {};</code></div><div class=3D=
"line number25 index24 alt2">&nbsp;</div><div class=3D"line number26 index2=
5 alt1"><code class=3D"js comments">// 1. extend namespace with a "utils" o=
bject</code></div><div class=3D"line number27 index26 alt2"><code class=3D"=
js plain">extend(myNS, {</code></div><div class=3D"line number28 index27 al=
t1"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js plain">u=
tils:{</code></div><div class=3D"line number29 index28 alt2"><code class=3D=
"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">//..=
.</code></div><div class=3D"line number30 index29 alt1"><code class=3D"js s=
paces">&nbsp;&nbsp;</code><code class=3D"js plain">}</code></div><div class=
=3D"line number31 index30 alt2"><code class=3D"js plain">});</code></div><d=
iv class=3D"line number32 index31 alt1">&nbsp;</div><div class=3D"line numb=
er33 index32 alt2"><code class=3D"js plain">console.log( </code><code class=
=3D"js string">"test 1"</code><code class=3D"js plain">, myNS);</code></div=
><div class=3D"line number34 index33 alt1"><code class=3D"js comments">// m=
yNS.utils now exists</code></div><div class=3D"line number35 index34 alt2">=
&nbsp;</div><div class=3D"line number36 index35 alt1"><code class=3D"js com=
ments">// 2. extend with multiple depths (namespace.hello.world.wave)</code=
></div><div class=3D"line number37 index36 alt2"><code class=3D"js plain">e=
xtend(myNS, {</code></div><div class=3D"line number38 index37 alt1"><code c=
lass=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js plain">hello: {</co=
de></div><div class=3D"line number39 index38 alt2"><code class=3D"js spaces=
">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">world: {</code></=
div><div class=3D"line number40 index39 alt1"><code class=3D"js spaces">&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">wave: {</c=
ode></div><div class=3D"line number41 index40 alt2"><code class=3D"js space=
s">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js=
 plain">test: </code><code class=3D"js keyword">function</code><code class=
=3D"js plain">() {</code></div><div class=3D"line number42 index41 alt1"><c=
ode class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;</code><code class=3D"js comments">//...</code></div><div class=3D=
"line number43 index42 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">}</code></div><=
div class=3D"line number44 index43 alt1"><code class=3D"js spaces">&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">}</code></div><=
div class=3D"line number45 index44 alt2"><code class=3D"js spaces">&nbsp;&n=
bsp;&nbsp;&nbsp;</code><code class=3D"js plain">}</code></div><div class=3D=
"line number46 index45 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><=
code class=3D"js plain">}</code></div><div class=3D"line number47 index46 a=
lt2"><code class=3D"js plain">});</code></div><div class=3D"line number48 i=
ndex47 alt1">&nbsp;</div><div class=3D"line number49 index48 alt2"><code cl=
ass=3D"js comments">// test direct assignment works as expected</code></div=
><div class=3D"line number50 index49 alt1"><code class=3D"js plain">myNS.he=
llo.test1 =3D </code><code class=3D"js string">"this is a test"</code><code=
 class=3D"js plain">;</code></div><div class=3D"line number51 index50 alt2"=
><code class=3D"js plain">myNS.hello.world.test2 =3D </code><code class=3D"=
js string">"this is another test"</code><code class=3D"js plain">;</code></=
div><div class=3D"line number52 index51 alt1"><code class=3D"js plain">cons=
ole.log( </code><code class=3D"js string">"test 2"</code><code class=3D"js =
plain">, myNS );</code></div><div class=3D"line number53 index52 alt2">&nbs=
p;</div><div class=3D"line number54 index53 alt1"><code class=3D"js comment=
s">// 3. what if myNS already contains the namespace being added</code></di=
v><div class=3D"line number55 index54 alt2"><code class=3D"js comments">// =
(e.g. "library")? we want to ensure no namespaces are being</code></div><di=
v class=3D"line number56 index55 alt1"><code class=3D"js comments">// overw=
ritten during extension</code></div><div class=3D"line number57 index56 alt=
2">&nbsp;</div><div class=3D"line number58 index57 alt1"><code class=3D"js =
plain">myNS.library =3D {</code></div><div class=3D"line number59 index58 a=
lt2"><code class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js plain">=
foo:</code><code class=3D"js keyword">function</code> <code class=3D"js pla=
in">() {}</code></div><div class=3D"line number60 index59 alt1"><code class=
=3D"js plain">};</code></div><div class=3D"line number61 index60 alt2">&nbs=
p;</div><div class=3D"line number62 index61 alt1"><code class=3D"js plain">=
extend( myNS, {</code></div><div class=3D"line number63 index62 alt2"><code=
 class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js plain">library: {=
</code></div><div class=3D"line number64 index63 alt1"><code class=3D"js sp=
aces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">bar: </code><=
code class=3D"js keyword">function</code><code class=3D"js plain">() {</cod=
e></div><div class=3D"line number65 index64 alt2"><code class=3D"js spaces"=
>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js comments">//.=
..</code></div><div class=3D"line number66 index65 alt1"><code class=3D"js =
spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=3D"js plain">}</code></d=
iv><div class=3D"line number67 index66 alt2"><code class=3D"js spaces">&nbs=
p;&nbsp;</code><code class=3D"js plain">}</code></div><div class=3D"line nu=
mber68 index67 alt1"><code class=3D"js plain">});</code></div><div class=3D=
"line number69 index68 alt2">&nbsp;</div><div class=3D"line number70 index6=
9 alt1"><code class=3D"js comments">// confirmed that extend is operating s=
afely (as expected)</code></div><div class=3D"line number71 index70 alt2"><=
code class=3D"js comments">// myNS now also contains library.foo, library.b=
ar</code></div><div class=3D"line number72 index71 alt1"><code class=3D"js =
plain">console.log( </code><code class=3D"js string">"test 3"</code><code c=
lass=3D"js plain">, myNS );</code></div><div class=3D"line number73 index72=
 alt2">&nbsp;</div><div class=3D"line number74 index73 alt1"><code class=3D=
"js comments">// 4. what if we wanted easier access to a specific namespace=
 without having</code></div><div class=3D"line number75 index74 alt2"><code=
 class=3D"js comments">// to type the whole namespace out each time?</code>=
</div><div class=3D"line number76 index75 alt1">&nbsp;</div><div class=3D"l=
ine number77 index76 alt2"><code class=3D"js keyword">var</code> <code clas=
s=3D"js plain">shorterAccess1 =3D myNS.hello.world;</code></div><div class=
=3D"line number78 index77 alt1"><code class=3D"js plain">shorterAccess1.tes=
t3 =3D </code><code class=3D"js string">"hello again"</code><code class=3D"=
js plain">;</code></div><div class=3D"line number79 index78 alt2"><code cla=
ss=3D"js plain">console.log( </code><code class=3D"js string">"test 4"</cod=
e><code class=3D"js plain">, myNS);</code></div><div class=3D"line number80=
 index79 alt1">&nbsp;</div><div class=3D"line number81 index80 alt2"><code =
class=3D"js comments">//success, myApp.hello.world.test3 is now "hello agai=
n"</code></div><div class=3D"line number82 index81 alt1">&nbsp;</div><div c=
lass=3D"line number83 index82 alt2"><code class=3D"js plain">console.groupE=
nd();</code></div></div></td></tr></tbody></table></div></div>
<p><strong>Note:</strong> The above implementation is not cross-browser com=
patible for all objects and should be considered a proof-of-concept only. O=
ne may find the Underscore.js <code>extend()</code> method a simpler, more =
cross-browser implementation to start with <a href=3D"http://documentcloud.=
github.io/underscore/docs/underscore.html#section-82">http://documentcloud.=
github.io/underscore/docs/underscore.html#section-82</a>.</p>

<p>For developers that are going to use jQuery in their application, one ca=
n achieve the exact same object namespace extensibility with <code>$.extend=
</code> as follows:</p>
<div><div id=3D"highlighter_122329" class=3D"syntaxhighlighter  js acodecod=
e"><div class=3D"toolbar"><span><a href=3D"https://addyosmani.com/resources=
/essentialjsdesignpatterns/book/#" class=3D"toolbar_item command_help help"=
>?</a></span></div><table border=3D"0" cellpadding=3D"0" cellspacing=3D"0">=
<tbody><tr><td class=3D"gutter"><div class=3D"line number1 index0 alt2">1</=
div><div class=3D"line number2 index1 alt1">2</div><div class=3D"line numbe=
r3 index2 alt2">3</div><div class=3D"line number4 index3 alt1">4</div><div =
class=3D"line number5 index4 alt2">5</div><div class=3D"line number6 index5=
 alt1">6</div><div class=3D"line number7 index6 alt2">7</div><div class=3D"=
line number8 index7 alt1">8</div><div class=3D"line number9 index8 alt2">9<=
/div><div class=3D"line number10 index9 alt1">10</div><div class=3D"line nu=
mber11 index10 alt2">11</div><div class=3D"line number12 index11 alt1">12</=
div><div class=3D"line number13 index12 alt2">13</div><div class=3D"line nu=
mber14 index13 alt1">14</div><div class=3D"line number15 index14 alt2">15</=
div><div class=3D"line number16 index15 alt1">16</div><div class=3D"line nu=
mber17 index16 alt2">17</div><div class=3D"line number18 index17 alt1">18</=
div><div class=3D"line number19 index18 alt2">19</div><div class=3D"line nu=
mber20 index19 alt1">20</div><div class=3D"line number21 index20 alt2">21</=
div><div class=3D"line number22 index21 alt1">22</div><div class=3D"line nu=
mber23 index22 alt2">23</div><div class=3D"line number24 index23 alt1">24</=
div><div class=3D"line number25 index24 alt2">25</div></td><td class=3D"cod=
e"><div class=3D"container"><div class=3D"line number1 index0 alt2"><code c=
lass=3D"js comments">// top-level namespace</code></div><div class=3D"line =
number2 index1 alt1"><code class=3D"js keyword">var</code> <code class=3D"j=
s plain">myApp =3D myApp || {};</code></div><div class=3D"line number3 inde=
x2 alt2">&nbsp;</div><div class=3D"line number4 index3 alt1"><code class=3D=
"js comments">// directly assign a nested namespace</code></div><div class=
=3D"line number5 index4 alt2"><code class=3D"js plain">myApp.library =3D {<=
/code></div><div class=3D"line number6 index5 alt1"><code class=3D"js space=
s">&nbsp;&nbsp;</code><code class=3D"js plain">foo: </code><code class=3D"j=
s keyword">function</code><code class=3D"js plain">() {</code></div><div cl=
ass=3D"line number7 index6 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbs=
p;&nbsp;</code><code class=3D"js comments">//...</code></div><div class=3D"=
line number8 index7 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><cod=
e class=3D"js plain">}</code></div><div class=3D"line number9 index8 alt2">=
<code class=3D"js plain">};</code></div><div class=3D"line number10 index9 =
alt1">&nbsp;</div><div class=3D"line number11 index10 alt2"><code class=3D"=
js comments">// deep extend/merge this namespace with another</code></div><=
div class=3D"line number12 index11 alt1"><code class=3D"js comments">// to =
make things interesting, let's say it's a namespace</code></div><div class=
=3D"line number13 index12 alt2"><code class=3D"js comments">// with the sam=
e name but with a different function</code></div><div class=3D"line number1=
4 index13 alt1"><code class=3D"js comments">// signature: $.extend( deep, t=
arget, object1, object2 )</code></div><div class=3D"line number15 index14 a=
lt2"><code class=3D"js plain">$.extend( </code><code class=3D"js keyword">t=
rue</code><code class=3D"js plain">, myApp, {</code></div><div class=3D"lin=
e number16 index15 alt1"><code class=3D"js spaces">&nbsp;&nbsp;</code><code=
 class=3D"js plain">library:{</code></div><div class=3D"line number17 index=
16 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code cla=
ss=3D"js plain">bar: </code><code class=3D"js keyword">function</code><code=
 class=3D"js plain">(){</code></div><div class=3D"line number18 index17 alt=
1"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><co=
de class=3D"js comments">//...</code></div><div class=3D"line number19 inde=
x18 alt2"><code class=3D"js spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code cl=
ass=3D"js plain">}</code></div><div class=3D"line number20 index19 alt1"><c=
ode class=3D"js spaces">&nbsp;&nbsp;</code><code class=3D"js plain">}</code=
></div><div class=3D"line number21 index20 alt2"><code class=3D"js plain">}=
);</code></div><div class=3D"line number22 index21 alt1">&nbsp;</div><div c=
lass=3D"line number23 index22 alt2"><code class=3D"js plain">console.log(</=
code><code class=3D"js string">"test"</code><code class=3D"js plain">, myAp=
p);</code></div><div class=3D"line number24 index23 alt1"><code class=3D"js=
 comments">// myApp now contains both library.foo() and library.bar() metho=
ds</code></div><div class=3D"line number25 index24 alt2"><code class=3D"js =
comments">// nothing has been overwritten which is what we're hoping for.</=
code></div></div></td></tr></tbody></table></div></div>
<p>For the sake of thoroughness, please see <a href=3D"https://gist.github.=
com/1221980">here</a> for jQuery $.extend equivalents to the rest of the na=
mespacing experiments found in this section.</p>

<h3>Recommendation</h3>

<p>Reviewing the namespace patterns we've explored in this section, the opt=
ion that I would personally use for most larger applications is nested obje=
ct namespacing with the object literal pattern. Where possible, I would imp=
lement this using automated nested namespacing, however this is just a pers=
onal preference.</p>

<p>IIFEs and single global variables may work fine for applications in the =
small to medium range, however, larger codebases requiring both namespaces =
and deep sub-namespaces require a succinct solution that promotes readabili=
ty and scales. I feel this pattern achieves all of these objectives well.</=
p>

<p>I would also recommend trying out some of the suggested advanced utility=
 methods for namespace extension as they really can save us time in the lon=
g-run.</p>


<p>&nbsp;</p>
<h1 id=3D"conclusions">Conclusions</h1>
<p>That's it for this introductory adventure into the world of design patte=
rns in JavaScript and jQuery - I hope you've found it beneficial.</p>

  <p>
  Design patterns make it easy for us to build on the shoulders of develope=
rs who have defined solutions to challenging problems and architectures ove=
r a number of decades. The contents of this book should hopefully provide s=
ufficient information to get started using the patterns we covered in your =
own scripts, plugins and web applications.</p>

  <p>It's important for us to be aware of these patterns but it's also esse=
ntial to know how and when to use them. Study the pros and cons of each pat=
tern before employing them. Take the time out to experiment with patterns t=
o fully appreciate what they offer and make usage judgements based on a pat=
tern's true value to your application.</p>

<p>If I=E2=80=99ve encouraged your interest in this area further and you wo=
uld like to learn more about design patterns, there are a number of excelle=
nt titles on this area available for generic software development and of co=
urse, JavaScript.</p>

<p>I am happy to recommend:</p>
<ol>
  <li>"<a href=3D"http://www.amazon.com/Patterns-Enterprise-Application-Arc=
hitecture-Martin/dp/0321127420">Patterns Of Enterprise Application Architec=
ture</a>" by Martin Fowler</li>
  <li>"<a href=3D"http://www.amazon.com/JavaScript-Patterns-Stoyan-Stefanov=
/dp/0596806752/ref=3Dsr_1_1?ie=3DUTF8&amp;s=3Dbooks&amp;qid=3D1289759956&am=
p;sr=3D1-1">JavaScript Patterns</a>" by Stoyan Stefanov</li>
</ol>
<p>&nbsp;</p>

<p>Thanks for reading <em>Learning JavaScript Design Patterns</em>. For mor=
e educational material on learning JavaScript, please feel free to read mor=
e from me on my blog at <a href=3D"http://addyosmani.com/">http://addyosman=
i.com</a> or on Twitter <a href=3D"http://twitter.com/addyosmani">@addyosma=
ni</a>.</p>
<p>&nbsp;</p>

<p>Until next time, the very best of luck with your adventures in JavaScrip=
t!</p>

<p>&nbsp;</p>
<h1 id=3D"references"><span id=3D"internal-source-marker_0.0509541385521644=
6">References</span>
</h1>
<ol id=3D"references-list">
  <li>Design Principles and Design Patterns - Robert C Martin <a href=3D"ht=
tp://www.objectmentor.com/resources/articles/Principles_and_Patterns.pdf">h=
ttp://www.objectmentor.com/resources/articles/Principles_and_Patterns.pdf</=
a></li>
  <li>Ralph Johnson - Special Issue of ACM On Patterns and Pattern Language=
s - <a href=3D"http://www.cs.wustl.edu/~schmidt/CACM-editorial.html">http:/=
/www.cs.wustl.edu/~schmidt/CACM-editorial.html</a></li>
  <li>Hillside Engineering Design Patterns Library - <a href=3D"http://hill=
side.net/patterns/">http://hillside.net/patterns/</a></li>
  <li>Pro JavaScript Design Patterns - Ross Harmes and Dustin Diaz <a href=
=3D"http://jsdesignpatterns.com/">http://jsdesignpatterns.com/</a></li>
  <li>Design Pattern Definitions - <a href=3D"http://en.wikipedia.org/wiki/=
Design_Patterns">http://en.wikipedia.org/wiki/Design_Patterns</a></li>
  <li>Patterns and Software Terminology <a href=3D"http://www.cmcrossroads.=
com/bradapp/docs/patterns-intro.html">http://www.cmcrossroads.com/bradapp/d=
ocs/patterns-intro.html</a></li>
  <li>Reap the benefits of Design Patterns - Jeff Juday <a href=3D"http://w=
ww.techrepublic.com/article/reap-the-benefits-of-design-patterns-in-softwar=
e-development/">http://articles.techrepublic.com.com/5100-10878_11-5173591.=
html</a></li>
  <li>JavaScript Design Patterns - Subramanyan Guhan <a href=3D"http://www.=
slideshare.net/rmsguhan/javascript-design-patterns">http://www.slideshare.n=
et/rmsguhan/javascript-design-patterns</a></li>
  <li>What Are Design Patterns and Do I Need Them? - James Moaoriello <a hr=
ef=3D"http://www.developer.com/design/article.php/1474561">http://www.devel=
oper.com/design/article.php/1474561</a></li>
  <li>Software Design Patterns - Alex Barnett <a href=3D"http://alexbarnett=
.net/blog/archive/2007/07/20/software-design-patterns.aspx">http://alexbarn=
ett.net/blog/archive/2007/07/20/software-design-patterns.aspx</a></li>
  <li>Evaluating Software Design Patterns - Gunni Rode <a href=3D"http://ww=
w.rode.dk/thesis/">http://www.rode.dk/thesis/</a></li>
  <li>SourceMaking Design Patterns <a href=3D"http://sourcemaking.com/desig=
n_patterns">http://sourcemaking.com/design_patterns</a></li>
  <li>JavaScript Patterns - Stoyan Stevanov - <a href=3D"http://www.slidesh=
are.net/stoyan/javascript-patterns">http://www.slideshare.net/stoyan/javasc=
ript-patterns</a></li>
  <li>Stack Overflow - Design Pattern Implementations in JavaScript (discus=
sion) <a href=3D"http://stackoverflow.com/questions/24642/what-are-some-exa=
mples-of-design-pattern-implementations-using-javascript">http://stackoverf=
low.com/questions/24642/what-are-some-examples-of-design-pattern-implementa=
tions-using-javascript</a></li>
  <li>The Elements of a Design Pattern - Jared Spool <a href=3D"http://www.=
uie.com/articles/elements_of_a_design_pattern/">http://www.uie.com/articles=
/elements_of_a_design_pattern/</a></li>
  <li>Stack Overflow - Examples of Practical JS Design Patterns (discussion=
) <a href=3D"http://stackoverflow.com/questions/3722820/examples-of-practic=
al-javascript-object-oriented-design-patterns">http://stackoverflow.com/que=
stions/3722820/examples-of-practical-javascript-object-oriented-design-patt=
erns</a></li>
  <li>Design Patterns in JavaScript Part 1 - Nicholas Zakas <a href=3D"http=
://www.webreference.com/programming/javascript/ncz/column5/">http://www.web=
reference.com/programming/javascript/ncz/column5/</a></li>
  <li>Stack Overflow - Design Patterns in jQuery <a href=3D"http://stackove=
rflow.com/questions/3631039/design-patterns-used-in-the-jquery-library">htt=
p://stackoverflow.com/questions/3631039/design-patterns-used-in-the-jquery-=
library</a></li>
  <li>Classifying Design Patterns By AntiClue - Elyse Neilson <a href=3D"ht=
tp://www.anticlue.net/archives/000198.htm">http://www.anticlue.net/archives=
/000198.htm</a></li>
  <li>Design Patterns, Pattern Languages and Frameworks - Douglas Schmidt <=
a href=3D"http://www.cs.wustl.edu/~schmidt/patterns.html">http://www.cs.wus=
tl.edu/~schmidt/patterns.html</a></li>
  <li>Show Love To The Module Pattern - Christian Heilmann <a href=3D"http:=
//www.wait-till-i.com/2007/07/24/show-love-to-the-module-pattern/">http://w=
ww.wait-till-i.com/2007/07/24/show-love-to-the-module-pattern/</a></li>
  <li>Software Designs Made Simple - Anoop Mashudanan <a href=3D"http://www=
.scribd.com/doc/16352479/Software-Design-Patterns-Made-Simple">http://www.s=
cribd.com/doc/16352479/Software-Design-Patterns-Made-Simple</a></li>
  <li>Introduction to the JavaScript Module Pattern <a href=3D"https://www.=
unleashed-technologies.com/blog/2010/12/09/introduction-javascript-module-d=
esign-pattern">https://www.unleashed-technologies.com/blog/2010/12/09/intro=
duction-javascript-module-design-pattern</a></li>
  <li>Design Patterns Explained - <a href=3D"http://c2.com/cgi/wiki?DesignP=
atterns">http://c2.com/cgi/wiki?DesignPatterns</a></li>
  <li>Mixins explained <a href=3D"http://en.wikipedia.org/wiki/Mixin">http:=
//en.wikipedia.org/wiki/Mixin</a></li>
  <li>Working with GoF's Design Patterns In JavaScript <a href=3D"http://as=
palliance.com/1782_Working_with_GoFs_Design_Patterns_in_JavaScript_Programm=
ing.all">http://aspalliance.com/1782_Working_with_GoFs_Design_Patterns_in_J=
avaScript_Programming.all</a></li>
  <li>Using Object.create <a href=3D"http://stackoverflow.com/questions/270=
9612/using-object-create-instead-of-new">http://stackoverflow.com/questions=
/2709612/using-object-create-instead-of-new</a>
  </li><li>t3knomanster's JavaScript Design Patterns - <a href=3D"http://t3=
knomanser.livejournal.com/922171.html">http://t3knomanser.livejournal.com/9=
22171.html</a></li>
  <li>JavaScript Advantages - Object Literals <a href=3D"http://stackoverfl=
ow.com/questions/1600130/javascript-advantages-of-object-literal">http://st=
ackoverflow.com/questions/1600130/javascript-advantages-of-object-literal</=
a></li>
  <li>JavaScript Class Patterns - Liam McLennan <a href=3D"http://geekswith=
blogs.net/liammclennan/archive/2011/02/06/143842.aspx">http://geekswithblog=
s.net/liammclennan/archive/2011/02/06/143842.aspx</a></li>
  <li>Understanding proxies in jQuery - <a href=3D"http://stackoverflow.com=
/questions/4986329/understanding-proxy-in-jquery">http://stackoverflow.com/=
questions/4986329/understanding-proxy-in-jquery</a></li>
  <li>Observer Pattern Using JavaScript - <a href=3D"http://www.codeproject=
.com/Articles/13914/Observer-Design-Pattern-Using-JavaScript">http://www.co=
deproject.com/Articles/13914/Observer-Design-Pattern-Using-JavaScript</a></=
li>
  <li>Speaking on the Observer pattern - <a href=3D"http://www.javaworld.co=
m/javaworld/javaqa/2001-05/04-qa-0525-observer.html">http://www.javaworld.c=
om/javaworld/javaqa/2001-05/04-qa-0525-observer.html</a></li>
</ol>
<p>
</p>
  </div>
  <div class=3D"footer">
    <p>Learning JavaScript Design Patterns. =C2=A9 Addy Osmani 2017.</p>
    <!-- end .footer --></div>
  <!-- end .container --></div>


    <div class=3D"codecodecode">
  <div class=3D"codecodecontrols">
    <a class=3D"goBackToTheCode" href=3D"https://addyosmani.com/resources/e=
ssentialjsdesignpatterns/book/#">go back to the code.</a>
    <a class=3D"closeCodeCode" href=3D"https://addyosmani.com/resources/ess=
entialjsdesignpatterns/book/#">close.</a>
  </div>
  <div class=3D"codecode"></div>
</div>

   =20

    <!-- Google Analytics: change UA-XXXXX-X to be your site's ID. -->
   =20
 =20

</body></html>
------MultipartBoundary--AOMleexeI7P8H4Im2MNvercLtpKAYhfsToYqkozzPB----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://addyosmani.com/resources/essentialjsdesignpatterns/book/styles/vendor.css

@charset "utf-8";

.codecodecode, .content, .copyright, h1 { text-align: left; }

#references-list, pre { overflow-wrap: break-word; }

.acodecode { cursor: pointer; }

.acodecodeactive { cursor: default; }

.codecodecode { position: fixed; z-index: 100; left: 2%; bottom: -30px; wid=
th: 96%; height: 0px; max-height: 270px; }

.codecodecode > div { box-shadow: rgb(68, 68, 68) 0px 0px 3px; }

.codecodecontrols { height: 30px; margin-top: -30px; background-color: rgba=
(255, 255, 255, 0.8); border-radius: 8px 8px 0px 0px; }

.codecodecontrols a { float: left; line-height: 30px; margin-left: 6px; fon=
t-family: Arial; font-size: 12px; }

.codecodecontrols .closeCodeCode { float: right; margin-right: 6px; }

.acodecode.codecode, .codecode { border-radius: 0px !important; position: r=
elative !important; width: 100% !important; margin: 0px !important; overflo=
w: auto !important; cursor: default !important; }

div.codecode [id^=3D"highlighter"] div.bar.show, div.codecode [id^=3D"highl=
ighter"] div.toolbar { display: none !important; }

h1 { padding-bottom: 13px; }

h2.booktitle { font-size: 1.5em; color: rgb(102, 102, 102); }

.subhead-link { font-size: 0.75em; margin-left: -15px; margin-top: 5px; flo=
at: left; visibility: hidden; }

.subhead-link:hover { text-decoration: none; visibility: visible; }

h1:hover .subhead-link, h2:hover .subhead-link, h3:hover .subhead-link, h4:=
hover .subhead-link { visibility: visible; }

.container { background: rgb(255, 255, 255); }

.footer, header { background: rgb(255, 255, 255); }

.content { padding: 10px 0px; }

.fltrt { float: right; margin-left: 8px; }

.fltlft { float: left; margin-right: 8px; }

.clearfloat { clear: both; height: 0px; font-size: 1px; line-height: 0; }

.booktitle { text-align: center; line-height: 41px; border-bottom: 1px soli=
d rgb(255, 255, 255); padding: 0px; font-size: 2.2em; }

.booktitle.author { font-size: 24px; }

#contents-list { background: rgb(238, 238, 238); border: 3px solid rgb(221,=
 221, 221); padding: 1em 1em 1em 3em; }

.subitem { margin-left: 25px; }

pre { display: block; line-height: 18px; background-color: rgb(245, 245, 24=
5); border-radius: 4px; white-space: pre-wrap; word-break: break-all; }

div.syntaxhighlighter { padding: 1em 0px; }

.syntaxhighlighter a, .syntaxhighlighter code, .syntaxhighlighter div, .syn=
taxhighlighter table, .syntaxhighlighter table caption, .syntaxhighlighter =
table tbody, .syntaxhighlighter table td, .syntaxhighlighter table thead, .=
syntaxhighlighter table tr, .syntaxhighlighter textarea { border-radius: 0p=
x !important; background: 0px 0px !important; border: 0px !important; botto=
m: auto !important; float: none !important; height: auto !important; left: =
auto !important; line-height: 1.1em !important; margin: 0px !important; out=
line: 0px !important; overflow: visible !important; padding: 0px !important=
; position: static !important; right: auto !important; text-align: left !im=
portant; top: auto !important; vertical-align: baseline !important; width: =
auto !important; box-sizing: content-box !important; font-family: Consolas,=
 "Bitstream Vera Sans Mono", "Courier New", Courier, monospace !important; =
font-weight: 400 !important; font-style: normal !important; font-size: 1em =
!important; min-height: auto !important; }

.syntaxhighlighter, .syntaxhighlighter table td.code .container { position:=
 relative !important; }

.syntaxhighlighter, .syntaxhighlighter table, .syntaxhighlighter table td.c=
ode { width: 100% !important; }

.syntaxhighlighter .bold, .syntaxhighlighter .script, .syntaxhighlighter.pr=
inting .script { font-weight: 700 !important; }

.syntaxhighlighter { margin: 1em 0px !important; overflow: auto !important;=
 font-size: 1em !important; }

.syntaxhighlighter.source { overflow: hidden !important; }

.syntaxhighlighter .italic { font-style: italic !important; }

.syntaxhighlighter .line { white-space: pre !important; }

.syntaxhighlighter table caption { text-align: left !important; padding: 0.=
5em 0px 0.5em 1em !important; }

.syntaxhighlighter table td.code .container textarea { box-sizing: border-b=
ox !important; position: absolute !important; left: 0px !important; top: 0p=
x !important; width: 100% !important; height: 100% !important; border: none=
 !important; background: rgb(255, 255, 255) !important; padding-left: 1em !=
important; overflow: hidden !important; white-space: pre !important; }

.syntaxhighlighter table td.gutter .line { text-align: right !important; pa=
dding: 0px 0.5em 0px 1em !important; }

.syntaxhighlighter table td.code .line { padding: 0px 1em !important; }

.syntaxhighlighter.nogutter td.code .container textarea, .syntaxhighlighter=
.nogutter td.code .line { padding-left: 0px !important; }

.syntaxhighlighter.show { display: block !important; }

.syntaxhighlighter.collapsed table { display: none !important; }

.syntaxhighlighter.collapsed .toolbar { padding: 0.1em 0.8em 0px !important=
; font-size: 1em !important; position: static !important; width: auto !impo=
rtant; height: auto !important; }

.syntaxhighlighter.collapsed .toolbar span { display: inline !important; ma=
rgin-right: 1em !important; }

.syntaxhighlighter.collapsed .toolbar span a { padding: 0px !important; dis=
play: none !important; }

.syntaxhighlighter .toolbar span.title, .syntaxhighlighter.collapsed .toolb=
ar span a.expandSource { display: inline !important; }

.syntaxhighlighter .toolbar { position: absolute !important; right: 1px !im=
portant; top: 1px !important; width: 11px !important; height: 11px !importa=
nt; font-size: 10px !important; z-index: 10 !important; }

.syntaxhighlighter .toolbar a { display: block !important; text-align: cent=
er !important; text-decoration: none !important; padding-top: 1px !importan=
t; }

.syntaxhighlighter .toolbar a.expandSource, .syntaxhighlighter.printing .to=
olbar { display: none !important; }

.syntaxhighlighter.ie { font-size: 0.9em !important; padding: 1px 0px !impo=
rtant; }

.syntaxhighlighter.ie .toolbar { line-height: 8px !important; }

.syntaxhighlighter.ie .toolbar a { padding-top: 0px !important; }

.syntaxhighlighter.printing .line.alt1 .content, .syntaxhighlighter.printin=
g .line.alt2 .content, .syntaxhighlighter.printing .line.highlighted .numbe=
r, .syntaxhighlighter.printing .line.highlighted.alt1 .content, .syntaxhigh=
lighter.printing .line.highlighted.alt2 .content { background: 0px 0px !imp=
ortant; }

.syntaxhighlighter.printing .line .number { color: rgb(187, 187, 187) !impo=
rtant; }

.syntaxhighlighter.printing .line .content, .syntaxhighlighter.printing .pl=
ain, .syntaxhighlighter.printing .plain a { color: rgb(0, 0, 0) !important;=
 }

.syntaxhighlighter.printing a { text-decoration: none !important; }

.syntaxhighlighter.printing .comments, .syntaxhighlighter.printing .comment=
s a { color: rgb(0, 130, 0) !important; }

.syntaxhighlighter.printing .string, .syntaxhighlighter.printing .string a =
{ color: rgb(0, 0, 255) !important; }

.syntaxhighlighter.printing .keyword { color: rgb(0, 102, 153) !important; =
font-weight: 700 !important; }

.syntaxhighlighter.printing .preprocessor { color: gray !important; }

.syntaxhighlighter.printing .variable { color: rgb(170, 119, 0) !important;=
 }

.syntaxhighlighter.printing .value { color: rgb(0, 153, 0) !important; }

.syntaxhighlighter.printing .functions { color: rgb(255, 20, 147) !importan=
t; }

.syntaxhighlighter.printing .constants { color: rgb(0, 102, 204) !important=
; }

.syntaxhighlighter.printing .color1, .syntaxhighlighter.printing .color1 a =
{ color: gray !important; }

.syntaxhighlighter.printing .color2, .syntaxhighlighter.printing .color2 a =
{ color: rgb(255, 20, 147) !important; }

.syntaxhighlighter.printing .color3, .syntaxhighlighter.printing .color3 a =
{ color: red !important; }

.syntaxhighlighter.printing .break, .syntaxhighlighter.printing .break a { =
color: rgb(0, 0, 0) !important; }

.syntaxhighlighter, .syntaxhighlighter .line.alt1, .syntaxhighlighter .line=
.alt2 { background-color: rgb(27, 36, 38) !important; }

.syntaxhighlighter .line.highlighted.alt1, .syntaxhighlighter .line.highlig=
hted.alt2 { background-color: rgb(50, 62, 65) !important; }

.syntaxhighlighter .line.highlighted.number, .syntaxhighlighter table capti=
on { color: rgb(185, 189, 182) !important; }

.syntaxhighlighter .gutter { color: rgb(175, 175, 175) !important; }

.syntaxhighlighter .gutter .line { border-right: 3px solid rgb(67, 90, 95) =
!important; }

.syntaxhighlighter .gutter .line.highlighted { background-color: rgb(67, 90=
, 95) !important; color: rgb(27, 36, 38) !important; }

.syntaxhighlighter.printing .line .content { border: none !important; }

.syntaxhighlighter.collapsed { overflow: visible !important; }

.syntaxhighlighter.collapsed .toolbar { color: rgb(91, 161, 207) !important=
; background: rgb(0, 0, 0) !important; border: 1px solid rgb(67, 90, 95) !i=
mportant; }

.syntaxhighlighter.collapsed .toolbar a { color: rgb(91, 161, 207) !importa=
nt; }

.syntaxhighlighter.collapsed .toolbar a:hover { color: rgb(92, 230, 56) !im=
portant; }

.syntaxhighlighter .toolbar { color: rgb(255, 255, 255) !important; backgro=
und: rgb(67, 90, 95) !important; border: none !important; }

.syntaxhighlighter .toolbar a { color: rgb(255, 255, 255) !important; }

.syntaxhighlighter .toolbar a:hover { color: rgb(224, 232, 255) !important;=
 }

.syntaxhighlighter .plain, .syntaxhighlighter .plain a { color: rgb(185, 18=
9, 182) !important; }

.syntaxhighlighter .comments, .syntaxhighlighter .comments a { color: rgb(1=
35, 138, 133) !important; }

.syntaxhighlighter .string, .syntaxhighlighter .string a { color: rgb(92, 2=
30, 56) !important; }

.syntaxhighlighter .keyword { color: rgb(91, 161, 207) !important; }

.syntaxhighlighter .preprocessor { color: rgb(67, 90, 95) !important; }

.syntaxhighlighter .variable { color: rgb(255, 170, 62) !important; }

.syntaxhighlighter .value { color: rgb(0, 153, 0) !important; }

.syntaxhighlighter .functions { color: rgb(255, 170, 62) !important; }

.syntaxhighlighter .constants { color: rgb(224, 232, 255) !important; }

.syntaxhighlighter .script { color: rgb(91, 161, 207) !important; }

.syntaxhighlighter .color1, .syntaxhighlighter .color1 a { color: rgb(224, =
232, 255) !important; }

.syntaxhighlighter .color2, .syntaxhighlighter .color2 a { color: rgb(255, =
255, 255) !important; }

.syntaxhighlighter .color3, .syntaxhighlighter .color3 a { color: rgb(255, =
170, 62) !important; }

.sausage-set { position: fixed; right: 0px; top: 0px; width: 15px; height: =
100%; border-left: 2px solid rgb(255, 255, 255); border-right: 2px solid rg=
b(255, 255, 255); background-color: rgb(255, 255, 255); font-family: "Helve=
tica Neue", Arial, sans-serif; }

.sausage { position: absolute; left: 0px; width: 100%; height: 100%; backgr=
ound-color: rgb(241, 241, 241); text-decoration: none; border-radius: 8px; =
box-shadow: rgba(0, 0, 0, 0.024) 0px 1px 2px 4px inset; cursor: pointer; }

.sausage-current, .sausage-hover { background-color: rgb(242, 228, 237); }

.sausage-span { position: absolute; right: 24px; top: 5px; z-index: 2; disp=
lay: none; width: 100px; padding: 2px 3px; color: rgb(0, 0, 0); background-=
color: rgb(255, 255, 255); border: 2px solid rgb(153, 0, 102); font-size: 1=
0px; line-height: 12px; font-weight: 700; text-align: center; border-radius=
: 7px; box-shadow: rgba(0, 0, 0, 0.05) 1px 1px 1px 1px; }

.blocks, .clearfix, .container, .edition_list, .editions, .inner, .logo spa=
n, .sausage-current .sausage-span, .sausage-hover .sausage-span, article, a=
side, dialog, figure, footer, header, hgroup, nav, section { display: block=
; }

hr, table { width: 100%; }

h1, h3 { line-height: 1; }

a img, hr { border: none; }

a, abbr, acronym, address, article, aside, blockquote, body, caption, code,=
 dd, del, dfn, dialog, div, dl, dt, em, fieldset, figure, footer, form, h1,=
 h2, h3, h4, h5, h6, header, hgroup, html, iframe, img, label, legend, li, =
nav, object, ol, p, pre, q, section, span, table, tbody, td, tfoot, th, the=
ad, tr, ul { margin: 0px; padding: 0px; border: 0px; font-weight: inherit; =
font-style: inherit; font-size: 100%; font-family: inherit; vertical-align:=
 baseline; }

address, dfn, em, tfoot { font-style: italic; }

.search, table, td, th { vertical-align: middle; }

caption, td, th { text-align: left; font-weight: 400; }

blockquote::after, blockquote::before, q::after, q::before { content: ""; }

blockquote, q { quotes: "" ""; }

.search, body, input[type=3D"text"], input[type=3D"submit"] { font-family: =
Palatino, "Palatino Linotype", Georgia, Times, "Times New Roman", serif; }

html { font-size: 100.01%; }

h1, h2, h3, h4, h5, h6 { font-weight: 400; color: rgb(0, 0, 0); }

h1 { font-size: 3em; margin-bottom: 0.5em; }

h2 { font-size: 2em; margin-bottom: 0.75em; }

h3 { font-size: 1.5em; }

h4 { font-size: 1.2em; line-height: 1.25; margin-bottom: 1.25em; }

h5, h6 { font-size: 1em; font-weight: 700; }

h5 { margin-bottom: 1.5em; }

h1 img, h2 img, h3 img, h4 img, h5 img, h6 img { margin: 0px; }

p { margin: 0px 0px 1.5em; }

p img.left { float: left; margin: 1.5em 1.5em 1.5em 0px; padding: 0px; }

p img.right { float: right; margin: 1.5em 0px 1.5em 1.5em; }

address, blockquote, dl { margin: 0px 0px 1.5em; }

blockquote p, h3 { margin-bottom: 0.5em; }

dfn, dl dt, strong, th { font-weight: 700; }

sub, sup { line-height: 0; }

del { color: rgb(102, 102, 102); }

li ol, li ul { margin: 0px; }

ol, ul { margin: 0px 1.5em 1.5em 0px; padding-left: 3.333em; }

ul { list-style-type: disc; }

ol { list-style-type: decimal; }

dd { margin-left: 1.5em; }

table { border-collapse: separate; border-spacing: 0px; margin-bottom: 1.4e=
m; }

thead th { background: rgb(195, 217, 255); }

caption, td, th { padding: 4px 10px 4px 5px; }

body { line-height: 1.5; font-size: 100%; color: rgb(0, 0, 0); background: =
url("../images/base.png") rgb(246, 246, 246); }

h3 { border-bottom: 1px solid rgb(204, 204, 204); padding-bottom: 0.5em; }

.lead { font-size: 1.5em; }

.stage_links { color: rgb(119, 119, 119); }

a, a:link, a:visited { color: rgb(153, 0, 102); text-decoration: none; }

a:active, a:focus, a:hover { color: rgb(225, 6, 178); text-decoration: unde=
rline; }

hr.space { background: rgb(255, 255, 255); color: rgb(255, 255, 255); visib=
ility: hidden; }

hr { background: rgb(204, 204, 204); color: rgb(204, 204, 204); clear: both=
; float: none; height: 0.1em; margin: 0px 0px 1.45em; }

.gttr, .last { float: left; }

hr.bold { height: 1px; background-color: rgb(153, 0, 102); color: rgb(153, =
0, 102); }

blockquote { overflow: hidden; padding: 0px 1.5em; color: rgb(0, 0, 0); fon=
t-style: normal; }

.attribution { font-style: italic; text-align: right; color: rgb(119, 119, =
119); }

code { padding: 2px 4px; color: rgb(221, 17, 68); background-color: rgb(247=
, 247, 249); border: 1px solid rgb(225, 225, 232); font-family: Menlo, Mona=
co, Consolas, "Courier New", monospace; font-size: 12px; border-radius: 3px=
; }

.caption, caption { caption-side: bottom; background: 0px 0px; font-style: =
italic; }

tr.even td { background: rgb(244, 244, 244); }

tfoot td { border-top: 1px solid rgb(234, 234, 234); font-weight: 700; font=
-style: normal; }

.edition_list p, .logo span, .product_title { font-style: italic; }

abbr, acronym { border: none; }

abbr[title]:hover { border-bottom: 1px dotted rgb(102, 102, 102); cursor: h=
elp; }

.red { background: red; }

.highlight { background: rgb(238, 195, 195); }

.blocks::after, .clearfix::after, .container::after, .edition_list::after, =
.editions::after, .inner::after { content: " "; display: block; height: 0px=
; clear: both; visibility: hidden; overflow: hidden; }

.clear { clear: both; }

.container { max-width: 940px; margin: 0px auto; padding: 0px 16px; text-al=
ign: left; }

.figure img, .lyt_img { max-width: 100%; }

.gttr { margin-right: 2.9%; }

.sidebar { width: 32%; float: right; margin-right: 0px; }

.content_footer { clear: both; }

.span10, .span2, .span3, .span4, .span6, .span8 { margin-right: 2.3%; float=
: left; }

.span2 { width: 14.6341%; }

.span3 { width: 23.1707%; }

.span4 { width: 31.7073%; }

.span6 { width: 48.7805%; }

.span8 { width: 65.8537%; }

.span10 { width: 73.1707%; }

.blocks, .editions { margin: 1.5em 0px; clear: both; }

.editions { margin-bottom: 0px; }

.last { margin-right: 0px !important; }

.page_header { overflow: hidden; padding: 0px 0px 0.2em; margin: 1.5em 0px;=
 }

.logo { width: 49.5%; float: left; margin-bottom: 0px; }

.logo span { font-size: 0.5em; }

.logo a, .logo a:link, .logo a:visited { color: rgb(0, 0, 0); }

.logo a:active, .logo a:focus, .logo a:hover { color: rgb(153, 0, 102); tex=
t-decoration: none; }

.search_box { width: 50%; float: right; }

.search { width: auto; float: right; }

.edition_list, .info_bubble, .inner, .stage { padding: 1em 1.5em; backgroun=
d: rgb(255, 255, 255); border-radius: 3px; box-shadow: rgb(153, 153, 153) 0=
px 0px 8px; }

.stage { margin-bottom: 1.5em; padding: 3em 50% 1.5em 3em; }

.edition_list { margin: 0px 0px 1em; clear: both; overflow: hidden; }

.edition_list p, .info_bubble p { margin-bottom: 0px; }

.edition_list h2 { margin-bottom: 0px; font-size: 1.8em; line-height: 1.5; =
font-weight: 700; }

.edition_list ul { margin: 0px; padding: 0px; list-style: none; display: in=
line; }

.edition_list ul li { display: inline; margin-right: 1em; padding-right: 1e=
m; border-right: 1px solid rgb(246, 246, 246); }

.edition_list ul li:last-child { margin-right: 0px; padding-right: 0px; bor=
der-right: none; }

.info_bubble { padding-bottom: 1em; color: rgb(255, 255, 255); text-shadow:=
 rgb(0, 0, 0) 1px 1px 0px; background: rgb(153, 0, 102); position: relative=
; overflow: visible; }

.info_bubble.startpage { padding-bottom: 1em; min-height: 9em; z-index: 0; =
height: auto !important; }

.info_bubble.startpage span { position: absolute; display: block; bottom: 1=
em; left: -2em; width: 40px; height: 40px; z-index: 100; }

.blocks > div { margin-bottom: 1.5em; }

.footer { margin: 1.5em 0px 0px; padding: 1.5em 0px 0px; overflow: hidden; =
}

#buy { position: relative; }

#offers { position: absolute; bottom: 0px; font-size: 0.625em; margin: 0px;=
 padding: 0px; list-style: none; display: none; }

.save_a_tree h3 { display: none; line-height: 1.5; border-bottom: none; }

#offers li { display: inline; margin-right: 1em; padding-right: 1em; border=
-right: 1px solid rgb(246, 246, 246); }

#offers li:last-child { margin-right: 0px; padding-right: 0px; border-right=
: none; }

.shopping_cart_button_line, .shopping_cart_button_line_bottom { border-top:=
 1px solid rgb(204, 204, 204); margin-top: 0.5em; padding: 0.5em 1px 0px; o=
verflow: hidden; clear: both; }

.shopping_cart_button_line_bottom { margin-bottom: 7em; }

.shopping_cart_button_line:first-child { border-top: none; }

div.header { font-size: 1.5em; line-height: 1; border-bottom: 1px solid rgb=
(204, 204, 204); margin-bottom: 0.5em; padding-bottom: 0.5em; color: rgb(0,=
 0, 0); text-shadow: rgb(255, 255, 255) 1px 1px 0px; }

.product_title { margin-bottom: 1.5em; }

.product_price { float: left; }

.price { color: rgb(102, 102, 102); }

.product_buy_link { float: right; line-height: 1; }

.ebook_formats, .safari_read_now, .whatisthis { font-size: 0.75em; }

.safari_read_now { float: right; line-height: 2; }

input[type=3D"text"], input[type=3D"submit"] { font-size: 1em; border-radiu=
s: 0.5em; vertical-align: middle; }

input[type=3D"text"] { width: 140px; margin: 0.5em 0px; padding: 0.5em 0.5e=
m 0.3em; border: 1px solid rgb(241, 241, 240); color: rgb(102, 102, 102); b=
ox-shadow: rgb(153, 153, 153) 3px 3px 2px inset; }

input[type=3D"text"]:active, input[type=3D"text"]:focus, input[type=3D"text=
"]:hover { background: rgb(255, 255, 255); color: rgb(0, 0, 0); outline: 0p=
x; }

input[type=3D"submit"] { width: auto; margin: 0px; padding: 0.28em 0.5em; b=
ackground: rgb(153, 0, 102); color: rgb(255, 255, 255); border: 0px; text-t=
ransform: uppercase; cursor: pointer; text-shadow: rgb(0, 0, 0) 1px 1px 0px=
; box-shadow: rgb(153, 153, 153) 0px 0px 2px; }

input[type=3D"submit"]:active, input[type=3D"submit"]:focus, input[type=3D"=
submit"]:hover { color: rgb(255, 255, 255); background: rgb(225, 6, 178); t=
ext-shadow: rgb(0, 0, 0) 1px 1px 0px; box-shadow: rgb(51, 51, 51) 0px 0px 3=
px; }

a.anchor { color: rgb(0, 0, 0); }

a.anchor:hover { text-decoration: none; }

.figure { padding-top: 1.5em; }

.caption, .figure { display: block; margin-bottom: 1.5em; text-align: cente=
r; }

.figure * { text-align: left; }

.caption { font-size: 0.875em; }

.figure .caption { text-align: center; }

.figure img { margin-bottom: 0.5em; }

.attribution::before { content: ""; }

.sidebar ul { font-size: 0.9em; padding-left: 2em; list-style-type: square;=
 }

.disabled, .footer a, .footer a:active, .footer a:focus, .footer a:hover, .=
footer a:link, .footer a:visited, .info_bubble a, .info_bubble a:active, .i=
nfo_bubble a:focus, .info_bubble a:hover, .info_bubble a:link, .info_bubble=
 a:visited { color: rgb(187, 187, 187); }

.buybuttonswidget { padding-bottom: 10px; background: rgb(255, 255, 255); }

@media (max-width: 320px) {
  .container { max-width: 300px; }
  #reviews { display: none; }
}

@media (max-width: 1024px) and (min-width: 768px) {
  .container { max-width: 740px; width: 740px; }
}

@media (min-width: 1025px) {
  .container { width: 740px; }
}
------MultipartBoundary--AOMleexeI7P8H4Im2MNvercLtpKAYhfsToYqkozzPB----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: https://addyosmani.com/resources/essentialjsdesignpatterns/book/images/base.png

iVBORw0KGgoAAAANSUhEUgAAADMAAAAzCAMAAAANf8AYAAAAFVBMVEXs7Ozv7+/p6ent7e3r6+vu
7u7q6uoJkgNWAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAA2NJREFUSEuV
lktyZDEQAhMKuP+RZ/Fsz8cT7uilNpKCgqTYNk5jJ90i6xpmVSlRQrkUdkS+w4fp9SZRssWSrds5
W4XDjYtv+Ho0cXsqyRzvcnQxW1r1KsdSduplA5vTZck5GfPdVk93h+qek7M8y95JoOEcRcdR+67J
1quOnuIcyZnFE4Nu3GVHqp3uaupBFMm+0iskWiSOVepkpdO8XGUFSfHtjk44KjF3BGzHQu3k07kV
uWXC7NAx+WxDpalkHMUpcYvm3pw6k0+yNSdRDMpcVHQ9RUFIYfN0twsOccJNqOVyrVkuvTvlLuG4
Y3e+xwmU4KxUp20SqGh3a+fTDrQq1tbldJOc7c//4Ksda2l2CWGtlKWTaK6dynxXsaN2AhHBi+JK
PmMkYTQtA3Yf4n2Z1eactut8PQv1sp5jc9t8lS/j2tU+LecGQ+6yIm5yojLcpVwVl8Vj4bzg2gOd
YicG1S6HzYK5prRq4lmsh5LUHoGbxCXczgq28QqKbzISHHaOikuqUl/uEHmun5oeVu2kdW4hF6QN
Jym2gZCNW5UrBYl1lMgm9oVmqZSs1Tjnap0rZGHsdhfuKlla7W7HcstiiS70Ki4qpxymk31z5VHN
c71LbJnZqq5WbyY5lW1rIW1cmmbIjyHvdu3OC63ET6LKYtVYu00+UkqrqLf0UK63qbcGLq7WxGU2
F4QSTuLIKMQi589BaLeuuuZKN8utj2ucanLmm9cj5lIhTtc5gSOHvC4I5t0ZnaskykxR1UfGeBy5
IoHHP4y8NPRmT3RV7U1Ex9Cp8De9i4zZfJtZoyX4RoaPSgnkpPfAyPtENG/mTQ7EXCVOIlXW83y6
u+Ctv32mxOLGLDyttrNHm2g65WlBTkiS4Go1ZoLdgyK5bl2I7mIZHZwuttST2sGrItRJZKBrGQ58
BmmzcIamWpfcnGsrLtS7jIsEWyauna/RhTmaL561DZ97Ix0Snn8mzJ56dStD68QMfS4LSrJoyrGd
L1lyR3HHR3tVNxyiWzwU0UnWLbmp86HqTp5s6a4rfX+o2BOJmsat4/kkI7clypE+x6PqwUTOWWA5
H37dlhgPr0VhylJAMURo3ejq+3IZe/8hXuxD/8s63wjecVljgKsupqnPUUALuiuNu8vJqGS3nXN4
l+8D/AXC9B1nAJuKRQAAAABJRU5ErkJggg==

------MultipartBoundary--AOMleexeI7P8H4Im2MNvercLtpKAYhfsToYqkozzPB----
Content-Type: image/jpeg
Content-Transfer-Encoding: base64
Content-Location: https://addyosmani.com/resources/essentialjsdesignpatterns/cover/cover.jpg

/9j/4AAQSkZJRgABAgEBLAEsAAD/4RnkRXhpZgAATU0AKgAAAAgABwESAAMAAAABAAEAAAEaAAUA
AAABAAAAYgEbAAUAAAABAAAAagEoAAMAAAABAAIAAAExAAIAAAAdAAAAcgEyAAIAAAAUAAAAj4dp
AAQAAAABAAAApAAAANAAAAEsAAAAAQAAASwAAAABQWRvYmUgUGhvdG9zaG9wIENTIE1hY2ludG9z
aAAyMDEyOjA1OjA0IDE1OjUwOjI4AAAAA6ABAAMAAAABAAEAAKACAAQAAAABAAAB9KADAAQAAAAB
AAACkAAAAAAAAAAGAQMAAwAAAAEABgAAARoABQAAAAEAAAEeARsABQAAAAEAAAEmASgAAwAAAAEA
AgAAAgEABAAAAAEAAAEuAgIABAAAAAEAABiuAAAAAAAAAEgAAAABAAAASAAAAAH/2P/gABBKRklG
AAECAQBIAEgAAP/tAAxBZG9iZV9DTQAB/+4ADkFkb2JlAGSAAAAAAf/bAIQADAgICAkIDAkJDBEL
CgsRFQ8MDA8VGBMTFRMTGBEMDAwMDAwRDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAENCwsN
Dg0QDg4QFA4ODhQUDg4ODhQRDAwMDAwREQwMDAwMDBEMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwM
DAwM/8AAEQgAoAB6AwEiAAIRAQMRAf/dAAQACP/EAT8AAAEFAQEBAQEBAAAAAAAAAAMAAQIEBQYH
CAkKCwEAAQUBAQEBAQEAAAAAAAAAAQACAwQFBgcICQoLEAABBAEDAgQCBQcGCAUDDDMBAAIRAwQh
EjEFQVFhEyJxgTIGFJGhsUIjJBVSwWIzNHKC0UMHJZJT8OHxY3M1FqKygyZEk1RkRcKjdDYX0lXi
ZfKzhMPTdePzRieUpIW0lcTU5PSltcXV5fVWZnaGlqa2xtbm9jdHV2d3h5ent8fX5/cRAAICAQIE
BAMEBQYHBwYFNQEAAhEDITESBEFRYXEiEwUygZEUobFCI8FS0fAzJGLhcoKSQ1MVY3M08SUGFqKy
gwcmNcLSRJNUoxdkRVU2dGXi8rOEw9N14/NGlKSFtJXE1OT0pbXF1eX1VmZ2hpamtsbW5vYnN0dX
Z3eHl6e3x//aAAwDAQACEQMRAD8A9Qqqr9Nh2NnaOw8Fm2fVXollj7H0u3WOL3RZYBLjud7Wv81q
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
f/u1kq5V1bqeVkNoxWVQ597X2PZZFYqe/wCyucJb6rc7HdRYx3qU/wCFsr+0ep6dWx6tX77fvCXq
1fvt+8JKZCYE894TqHq1fvt+8JerV++37wkpmkoerV++37wl6tX77fvCSmaSh6tX77fvCXq1fvt+
8JKZEgCTws5/WmAuayi1zgXNALS0Ejb6Xv2uZsu3bt/5jP5xX/Vq/fb94SNlJBBc0g6EEhJTUf1V
jdjvRtdXY1rw4Nkw/ft9o/d9P9J/o/Wo/wBIojrVP/cfIDu7TUZAEalXfVq/fb94S9Wr99v3hJS1
FvrUstDSwPG4NdoYPG4IH/pdWPVq/fb94Vbez94fz/iElP8A/9n/7Tz+UGhvdG9zaG9wIDMuMAA4
QklNBAQAAAAAAAccAgAAAgACADhCSU0EJQAAAAAAEEYM8okmuFbasJwBobCnkHc4QklNA+oAAAAA
HbA8P3htbCB2ZXJzaW9uPSIxLjAiIGVuY29kaW5nPSJVVEYtOCI/Pgo8IURPQ1RZUEUgcGxpc3Qg
UFVCTElDICItLy9BcHBsZSBDb21wdXRlci8vRFREIFBMSVNUIDEuMC8vRU4iICJodHRwOi8vd3d3
LmFwcGxlLmNvbS9EVERzL1Byb3BlcnR5TGlzdC0xLjAuZHRkIj4KPHBsaXN0IHZlcnNpb249IjEu
MCI+CjxkaWN0PgoJPGtleT5jb20uYXBwbGUucHJpbnQuUGFnZUZvcm1hdC5QTUhvcml6b250YWxS
ZXM8L2tleT4KCTxkaWN0PgoJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tldC5jcmVhdG9yPC9r
ZXk+CgkJPHN0cmluZz5jb20uYXBwbGUucHJpbnRpbmdtYW5hZ2VyPC9zdHJpbmc+CgkJPGtleT5j
b20uYXBwbGUucHJpbnQudGlja2V0Lml0ZW1BcnJheTwva2V5PgoJCTxhcnJheT4KCQkJPGRpY3Q+
CgkJCQk8a2V5PmNvbS5hcHBsZS5wcmludC5QYWdlRm9ybWF0LlBNSG9yaXpvbnRhbFJlczwva2V5
PgoJCQkJPHJlYWw+NzI8L3JlYWw+CgkJCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQuY2xp
ZW50PC9rZXk+CgkJCQk8c3RyaW5nPmNvbS5hcHBsZS5wcmludGluZ21hbmFnZXI8L3N0cmluZz4K
CQkJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tldC5tb2REYXRlPC9rZXk+CgkJCQk8ZGF0ZT4y
MDEyLTA1LTA0VDIyOjQ5OjUzWjwvZGF0ZT4KCQkJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tl
dC5zdGF0ZUZsYWc8L2tleT4KCQkJCTxpbnRlZ2VyPjA8L2ludGVnZXI+CgkJCTwvZGljdD4KCQk8
L2FycmF5PgoJPC9kaWN0PgoJPGtleT5jb20uYXBwbGUucHJpbnQuUGFnZUZvcm1hdC5QTU9yaWVu
dGF0aW9uPC9rZXk+Cgk8ZGljdD4KCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQuY3JlYXRv
cjwva2V5PgoJCTxzdHJpbmc+Y29tLmFwcGxlLnByaW50aW5nbWFuYWdlcjwvc3RyaW5nPgoJCTxr
ZXk+Y29tLmFwcGxlLnByaW50LnRpY2tldC5pdGVtQXJyYXk8L2tleT4KCQk8YXJyYXk+CgkJCTxk
aWN0PgoJCQkJPGtleT5jb20uYXBwbGUucHJpbnQuUGFnZUZvcm1hdC5QTU9yaWVudGF0aW9uPC9r
ZXk+CgkJCQk8aW50ZWdlcj4xPC9pbnRlZ2VyPgoJCQkJPGtleT5jb20uYXBwbGUucHJpbnQudGlj
a2V0LmNsaWVudDwva2V5PgoJCQkJPHN0cmluZz5jb20uYXBwbGUucHJpbnRpbmdtYW5hZ2VyPC9z
dHJpbmc+CgkJCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQubW9kRGF0ZTwva2V5PgoJCQkJ
PGRhdGU+MjAxMi0wNS0wNFQyMjo0OTo1M1o8L2RhdGU+CgkJCQk8a2V5PmNvbS5hcHBsZS5wcmlu
dC50aWNrZXQuc3RhdGVGbGFnPC9rZXk+CgkJCQk8aW50ZWdlcj4wPC9pbnRlZ2VyPgoJCQk8L2Rp
Y3Q+CgkJPC9hcnJheT4KCTwvZGljdD4KCTxrZXk+Y29tLmFwcGxlLnByaW50LlBhZ2VGb3JtYXQu
UE1TY2FsaW5nPC9rZXk+Cgk8ZGljdD4KCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQuY3Jl
YXRvcjwva2V5PgoJCTxzdHJpbmc+Y29tLmFwcGxlLnByaW50aW5nbWFuYWdlcjwvc3RyaW5nPgoJ
CTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tldC5pdGVtQXJyYXk8L2tleT4KCQk8YXJyYXk+CgkJ
CTxkaWN0PgoJCQkJPGtleT5jb20uYXBwbGUucHJpbnQuUGFnZUZvcm1hdC5QTVNjYWxpbmc8L2tl
eT4KCQkJCTxyZWFsPjE8L3JlYWw+CgkJCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQuY2xp
ZW50PC9rZXk+CgkJCQk8c3RyaW5nPmNvbS5hcHBsZS5wcmludGluZ21hbmFnZXI8L3N0cmluZz4K
CQkJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tldC5tb2REYXRlPC9rZXk+CgkJCQk8ZGF0ZT4y
MDEyLTA1LTA0VDIyOjQ5OjUzWjwvZGF0ZT4KCQkJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tl
dC5zdGF0ZUZsYWc8L2tleT4KCQkJCTxpbnRlZ2VyPjA8L2ludGVnZXI+CgkJCTwvZGljdD4KCQk8
L2FycmF5PgoJPC9kaWN0PgoJPGtleT5jb20uYXBwbGUucHJpbnQuUGFnZUZvcm1hdC5QTVZlcnRp
Y2FsUmVzPC9rZXk+Cgk8ZGljdD4KCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQuY3JlYXRv
cjwva2V5PgoJCTxzdHJpbmc+Y29tLmFwcGxlLnByaW50aW5nbWFuYWdlcjwvc3RyaW5nPgoJCTxr
ZXk+Y29tLmFwcGxlLnByaW50LnRpY2tldC5pdGVtQXJyYXk8L2tleT4KCQk8YXJyYXk+CgkJCTxk
aWN0PgoJCQkJPGtleT5jb20uYXBwbGUucHJpbnQuUGFnZUZvcm1hdC5QTVZlcnRpY2FsUmVzPC9r
ZXk+CgkJCQk8cmVhbD43MjwvcmVhbD4KCQkJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tldC5j
bGllbnQ8L2tleT4KCQkJCTxzdHJpbmc+Y29tLmFwcGxlLnByaW50aW5nbWFuYWdlcjwvc3RyaW5n
PgoJCQkJPGtleT5jb20uYXBwbGUucHJpbnQudGlja2V0Lm1vZERhdGU8L2tleT4KCQkJCTxkYXRl
PjIwMTItMDUtMDRUMjI6NDk6NTNaPC9kYXRlPgoJCQkJPGtleT5jb20uYXBwbGUucHJpbnQudGlj
a2V0LnN0YXRlRmxhZzwva2V5PgoJCQkJPGludGVnZXI+MDwvaW50ZWdlcj4KCQkJPC9kaWN0PgoJ
CTwvYXJyYXk+Cgk8L2RpY3Q+Cgk8a2V5PmNvbS5hcHBsZS5wcmludC5QYWdlRm9ybWF0LlBNVmVy
dGljYWxTY2FsaW5nPC9rZXk+Cgk8ZGljdD4KCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQu
Y3JlYXRvcjwva2V5PgoJCTxzdHJpbmc+Y29tLmFwcGxlLnByaW50aW5nbWFuYWdlcjwvc3RyaW5n
PgoJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tldC5pdGVtQXJyYXk8L2tleT4KCQk8YXJyYXk+
CgkJCTxkaWN0PgoJCQkJPGtleT5jb20uYXBwbGUucHJpbnQuUGFnZUZvcm1hdC5QTVZlcnRpY2Fs
U2NhbGluZzwva2V5PgoJCQkJPHJlYWw+MTwvcmVhbD4KCQkJCTxrZXk+Y29tLmFwcGxlLnByaW50
LnRpY2tldC5jbGllbnQ8L2tleT4KCQkJCTxzdHJpbmc+Y29tLmFwcGxlLnByaW50aW5nbWFuYWdl
cjwvc3RyaW5nPgoJCQkJPGtleT5jb20uYXBwbGUucHJpbnQudGlja2V0Lm1vZERhdGU8L2tleT4K
CQkJCTxkYXRlPjIwMTItMDUtMDRUMjI6NDk6NTNaPC9kYXRlPgoJCQkJPGtleT5jb20uYXBwbGUu
cHJpbnQudGlja2V0LnN0YXRlRmxhZzwva2V5PgoJCQkJPGludGVnZXI+MDwvaW50ZWdlcj4KCQkJ
PC9kaWN0PgoJCTwvYXJyYXk+Cgk8L2RpY3Q+Cgk8a2V5PmNvbS5hcHBsZS5wcmludC5zdWJUaWNr
ZXQucGFwZXJfaW5mb190aWNrZXQ8L2tleT4KCTxkaWN0PgoJCTxrZXk+Y29tLmFwcGxlLnByaW50
LlBhZ2VGb3JtYXQuUE1BZGp1c3RlZFBhZ2VSZWN0PC9rZXk+CgkJPGRpY3Q+CgkJCTxrZXk+Y29t
LmFwcGxlLnByaW50LnRpY2tldC5jcmVhdG9yPC9rZXk+CgkJCTxzdHJpbmc+Y29tLmFwcGxlLnBy
aW50aW5nbWFuYWdlcjwvc3RyaW5nPgoJCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQuaXRl
bUFycmF5PC9rZXk+CgkJCTxhcnJheT4KCQkJCTxkaWN0PgoJCQkJCTxrZXk+Y29tLmFwcGxlLnBy
aW50LlBhZ2VGb3JtYXQuUE1BZGp1c3RlZFBhZ2VSZWN0PC9rZXk+CgkJCQkJPGFycmF5PgoJCQkJ
CQk8cmVhbD4wLjA8L3JlYWw+CgkJCQkJCTxyZWFsPjAuMDwvcmVhbD4KCQkJCQkJPHJlYWw+NzM0
PC9yZWFsPgoJCQkJCQk8cmVhbD41NzY8L3JlYWw+CgkJCQkJPC9hcnJheT4KCQkJCQk8a2V5PmNv
bS5hcHBsZS5wcmludC50aWNrZXQuY2xpZW50PC9rZXk+CgkJCQkJPHN0cmluZz5jb20uYXBwbGUu
cHJpbnRpbmdtYW5hZ2VyPC9zdHJpbmc+CgkJCQkJPGtleT5jb20uYXBwbGUucHJpbnQudGlja2V0
Lm1vZERhdGU8L2tleT4KCQkJCQk8ZGF0ZT4yMDEyLTA1LTA0VDIyOjQ5OjUzWjwvZGF0ZT4KCQkJ
CQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQuc3RhdGVGbGFnPC9rZXk+CgkJCQkJPGludGVn
ZXI+MDwvaW50ZWdlcj4KCQkJCTwvZGljdD4KCQkJPC9hcnJheT4KCQk8L2RpY3Q+CgkJPGtleT5j
b20uYXBwbGUucHJpbnQuUGFnZUZvcm1hdC5QTUFkanVzdGVkUGFwZXJSZWN0PC9rZXk+CgkJPGRp
Y3Q+CgkJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tldC5jcmVhdG9yPC9rZXk+CgkJCTxzdHJp
bmc+Y29tLmFwcGxlLnByaW50aW5nbWFuYWdlcjwvc3RyaW5nPgoJCQk8a2V5PmNvbS5hcHBsZS5w
cmludC50aWNrZXQuaXRlbUFycmF5PC9rZXk+CgkJCTxhcnJheT4KCQkJCTxkaWN0PgoJCQkJCTxr
ZXk+Y29tLmFwcGxlLnByaW50LlBhZ2VGb3JtYXQuUE1BZGp1c3RlZFBhcGVyUmVjdDwva2V5PgoJ
CQkJCTxhcnJheT4KCQkJCQkJPHJlYWw+LTE4PC9yZWFsPgoJCQkJCQk8cmVhbD4tMTg8L3JlYWw+
CgkJCQkJCTxyZWFsPjc3NDwvcmVhbD4KCQkJCQkJPHJlYWw+NTk0PC9yZWFsPgoJCQkJCTwvYXJy
YXk+CgkJCQkJPGtleT5jb20uYXBwbGUucHJpbnQudGlja2V0LmNsaWVudDwva2V5PgoJCQkJCTxz
dHJpbmc+Y29tLmFwcGxlLnByaW50aW5nbWFuYWdlcjwvc3RyaW5nPgoJCQkJCTxrZXk+Y29tLmFw
cGxlLnByaW50LnRpY2tldC5tb2REYXRlPC9rZXk+CgkJCQkJPGRhdGU+MjAxMi0wNS0wNFQyMjo0
OTo1M1o8L2RhdGU+CgkJCQkJPGtleT5jb20uYXBwbGUucHJpbnQudGlja2V0LnN0YXRlRmxhZzwv
a2V5PgoJCQkJCTxpbnRlZ2VyPjA8L2ludGVnZXI+CgkJCQk8L2RpY3Q+CgkJCTwvYXJyYXk+CgkJ
PC9kaWN0PgoJCTxrZXk+Y29tLmFwcGxlLnByaW50LlBhcGVySW5mby5QTVBhcGVyTmFtZTwva2V5
PgoJCTxkaWN0PgoJCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQuY3JlYXRvcjwva2V5PgoJ
CQk8c3RyaW5nPmNvbS5hcHBsZS5wcmludC5wbS5Qb3N0U2NyaXB0PC9zdHJpbmc+CgkJCTxrZXk+
Y29tLmFwcGxlLnByaW50LnRpY2tldC5pdGVtQXJyYXk8L2tleT4KCQkJPGFycmF5PgoJCQkJPGRp
Y3Q+CgkJCQkJPGtleT5jb20uYXBwbGUucHJpbnQuUGFwZXJJbmZvLlBNUGFwZXJOYW1lPC9rZXk+
CgkJCQkJPHN0cmluZz5uYS1sZXR0ZXI8L3N0cmluZz4KCQkJCQk8a2V5PmNvbS5hcHBsZS5wcmlu
dC50aWNrZXQuY2xpZW50PC9rZXk+CgkJCQkJPHN0cmluZz5jb20uYXBwbGUucHJpbnQucG0uUG9z
dFNjcmlwdDwvc3RyaW5nPgoJCQkJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tldC5tb2REYXRl
PC9rZXk+CgkJCQkJPGRhdGU+MjAwMy0wNy0wMVQxNzo0OTozNlo8L2RhdGU+CgkJCQkJPGtleT5j
b20uYXBwbGUucHJpbnQudGlja2V0LnN0YXRlRmxhZzwva2V5PgoJCQkJCTxpbnRlZ2VyPjE8L2lu
dGVnZXI+CgkJCQk8L2RpY3Q+CgkJCTwvYXJyYXk+CgkJPC9kaWN0PgoJCTxrZXk+Y29tLmFwcGxl
LnByaW50LlBhcGVySW5mby5QTVVuYWRqdXN0ZWRQYWdlUmVjdDwva2V5PgoJCTxkaWN0PgoJCQk8
a2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQuY3JlYXRvcjwva2V5PgoJCQk8c3RyaW5nPmNvbS5h
cHBsZS5wcmludC5wbS5Qb3N0U2NyaXB0PC9zdHJpbmc+CgkJCTxrZXk+Y29tLmFwcGxlLnByaW50
LnRpY2tldC5pdGVtQXJyYXk8L2tleT4KCQkJPGFycmF5PgoJCQkJPGRpY3Q+CgkJCQkJPGtleT5j
b20uYXBwbGUucHJpbnQuUGFwZXJJbmZvLlBNVW5hZGp1c3RlZFBhZ2VSZWN0PC9rZXk+CgkJCQkJ
PGFycmF5PgoJCQkJCQk8cmVhbD4wLjA8L3JlYWw+CgkJCQkJCTxyZWFsPjAuMDwvcmVhbD4KCQkJ
CQkJPHJlYWw+NzM0PC9yZWFsPgoJCQkJCQk8cmVhbD41NzY8L3JlYWw+CgkJCQkJPC9hcnJheT4K
CQkJCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQuY2xpZW50PC9rZXk+CgkJCQkJPHN0cmlu
Zz5jb20uYXBwbGUucHJpbnRpbmdtYW5hZ2VyPC9zdHJpbmc+CgkJCQkJPGtleT5jb20uYXBwbGUu
cHJpbnQudGlja2V0Lm1vZERhdGU8L2tleT4KCQkJCQk8ZGF0ZT4yMDEyLTA1LTA0VDIyOjQ5OjUz
WjwvZGF0ZT4KCQkJCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQuc3RhdGVGbGFnPC9rZXk+
CgkJCQkJPGludGVnZXI+MDwvaW50ZWdlcj4KCQkJCTwvZGljdD4KCQkJPC9hcnJheT4KCQk8L2Rp
Y3Q+CgkJPGtleT5jb20uYXBwbGUucHJpbnQuUGFwZXJJbmZvLlBNVW5hZGp1c3RlZFBhcGVyUmVj
dDwva2V5PgoJCTxkaWN0PgoJCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQuY3JlYXRvcjwv
a2V5PgoJCQk8c3RyaW5nPmNvbS5hcHBsZS5wcmludC5wbS5Qb3N0U2NyaXB0PC9zdHJpbmc+CgkJ
CTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tldC5pdGVtQXJyYXk8L2tleT4KCQkJPGFycmF5PgoJ
CQkJPGRpY3Q+CgkJCQkJPGtleT5jb20uYXBwbGUucHJpbnQuUGFwZXJJbmZvLlBNVW5hZGp1c3Rl
ZFBhcGVyUmVjdDwva2V5PgoJCQkJCTxhcnJheT4KCQkJCQkJPHJlYWw+LTE4PC9yZWFsPgoJCQkJ
CQk8cmVhbD4tMTg8L3JlYWw+CgkJCQkJCTxyZWFsPjc3NDwvcmVhbD4KCQkJCQkJPHJlYWw+NTk0
PC9yZWFsPgoJCQkJCTwvYXJyYXk+CgkJCQkJPGtleT5jb20uYXBwbGUucHJpbnQudGlja2V0LmNs
aWVudDwva2V5PgoJCQkJCTxzdHJpbmc+Y29tLmFwcGxlLnByaW50aW5nbWFuYWdlcjwvc3RyaW5n
PgoJCQkJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tldC5tb2REYXRlPC9rZXk+CgkJCQkJPGRh
dGU+MjAxMi0wNS0wNFQyMjo0OTo1M1o8L2RhdGU+CgkJCQkJPGtleT5jb20uYXBwbGUucHJpbnQu
dGlja2V0LnN0YXRlRmxhZzwva2V5PgoJCQkJCTxpbnRlZ2VyPjA8L2ludGVnZXI+CgkJCQk8L2Rp
Y3Q+CgkJCTwvYXJyYXk+CgkJPC9kaWN0PgoJCTxrZXk+Y29tLmFwcGxlLnByaW50LlBhcGVySW5m
by5wcGQuUE1QYXBlck5hbWU8L2tleT4KCQk8ZGljdD4KCQkJPGtleT5jb20uYXBwbGUucHJpbnQu
dGlja2V0LmNyZWF0b3I8L2tleT4KCQkJPHN0cmluZz5jb20uYXBwbGUucHJpbnQucG0uUG9zdFNj
cmlwdDwvc3RyaW5nPgoJCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQuaXRlbUFycmF5PC9r
ZXk+CgkJCTxhcnJheT4KCQkJCTxkaWN0PgoJCQkJCTxrZXk+Y29tLmFwcGxlLnByaW50LlBhcGVy
SW5mby5wcGQuUE1QYXBlck5hbWU8L2tleT4KCQkJCQk8c3RyaW5nPlVTIExldHRlcjwvc3RyaW5n
PgoJCQkJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tldC5jbGllbnQ8L2tleT4KCQkJCQk8c3Ry
aW5nPmNvbS5hcHBsZS5wcmludC5wbS5Qb3N0U2NyaXB0PC9zdHJpbmc+CgkJCQkJPGtleT5jb20u
YXBwbGUucHJpbnQudGlja2V0Lm1vZERhdGU8L2tleT4KCQkJCQk8ZGF0ZT4yMDAzLTA3LTAxVDE3
OjQ5OjM2WjwvZGF0ZT4KCQkJCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQuc3RhdGVGbGFn
PC9rZXk+CgkJCQkJPGludGVnZXI+MTwvaW50ZWdlcj4KCQkJCTwvZGljdD4KCQkJPC9hcnJheT4K
CQk8L2RpY3Q+CgkJPGtleT5jb20uYXBwbGUucHJpbnQudGlja2V0LkFQSVZlcnNpb248L2tleT4K
CQk8c3RyaW5nPjAwLjIwPC9zdHJpbmc+CgkJPGtleT5jb20uYXBwbGUucHJpbnQudGlja2V0LnBy
aXZhdGVMb2NrPC9rZXk+CgkJPGZhbHNlLz4KCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQu
dHlwZTwva2V5PgoJCTxzdHJpbmc+Y29tLmFwcGxlLnByaW50LlBhcGVySW5mb1RpY2tldDwvc3Ry
aW5nPgoJPC9kaWN0PgoJPGtleT5jb20uYXBwbGUucHJpbnQudGlja2V0LkFQSVZlcnNpb248L2tl
eT4KCTxzdHJpbmc+MDAuMjA8L3N0cmluZz4KCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tldC5w
cml2YXRlTG9jazwva2V5PgoJPGZhbHNlLz4KCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tldC50
eXBlPC9rZXk+Cgk8c3RyaW5nPmNvbS5hcHBsZS5wcmludC5QYWdlRm9ybWF0VGlja2V0PC9zdHJp
bmc+CjwvZGljdD4KPC9wbGlzdD4KOEJJTQPpAAAAAAB4AAMAAABIAEgAAAAAAt4CQP/u/+4DBgJS
A2cFKAP8AAIAAABIAEgAAAAAAtgCKAABAAAAZAAAAAEAAwMDAAAAAX//AAEAAQAAAAAAAAAAAAAA
AGgIABkBkAAAAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOEJJTQPtAAAAAAAQASwAAAAB
AAEBLAAAAAEAAThCSU0EJgAAAAAADgAAAAAAAAAAAAA/gAAAOEJJTQQNAAAAAAAEAAAAHjhCSU0E
GQAAAAAABAAAAB44QklNA/MAAAAAAAkAAAAAAAAAAAEAOEJJTQQKAAAAAAABAAA4QklNJxAAAAAA
AAoAAQAAAAAAAAABOEJJTQP1AAAAAABIAC9mZgABAGxmZgAGAAAAAAABAC9mZgABAKGZmgAGAAAA
AAABADIAAAABAFoAAAAGAAAAAAABADUAAAABAC0AAAAGAAAAAAABOEJJTQP4AAAAAABwAAD/////
////////////////////////A+gAAAAA/////////////////////////////wPoAAAAAP//////
//////////////////////8D6AAAAAD/////////////////////////////A+gAADhCSU0EAAAA
AAAAAgAAOEJJTQQCAAAAAAACAAA4QklNBAgAAAAAABAAAAABAAACQAAAAkAAAAAAOEJJTQQeAAAA
AAAEAAAAADhCSU0EGgAAAAADVwAAAAYAAAAAAAAAAAAAApAAAAH0AAAAEQA5ADcAOAAxADQANAA5
ADMAMwAxADgAMQA4AF8AYgBrAHQAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAfQA
AAKQAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAEAAAAAAABudWxsAAAA
AgAAAAZib3VuZHNPYmpjAAAAAQAAAAAAAFJjdDEAAAAEAAAAAFRvcCBsb25nAAAAAAAAAABMZWZ0
bG9uZwAAAAAAAAAAQnRvbWxvbmcAAAKQAAAAAFJnaHRsb25nAAAB9AAAAAZzbGljZXNWbExzAAAA
AU9iamMAAAABAAAAAAAFc2xpY2UAAAASAAAAB3NsaWNlSURsb25nAAAAAAAAAAdncm91cElEbG9u
ZwAAAAAAAAAGb3JpZ2luZW51bQAAAAxFU2xpY2VPcmlnaW4AAAANYXV0b0dlbmVyYXRlZAAAAABU
eXBlZW51bQAAAApFU2xpY2VUeXBlAAAAAEltZyAAAAAGYm91bmRzT2JqYwAAAAEAAAAAAABSY3Qx
AAAABAAAAABUb3AgbG9uZwAAAAAAAAAATGVmdGxvbmcAAAAAAAAAAEJ0b21sb25nAAACkAAAAABS
Z2h0bG9uZwAAAfQAAAADdXJsVEVYVAAAAAEAAAAAAABudWxsVEVYVAAAAAEAAAAAAABNc2dlVEVY
VAAAAAEAAAAAAAZhbHRUYWdURVhUAAAAAQAAAAAADmNlbGxUZXh0SXNIVE1MYm9vbAEAAAAIY2Vs
bFRleHRURVhUAAAAAQAAAAAACWhvcnpBbGlnbmVudW0AAAAPRVNsaWNlSG9yekFsaWduAAAAB2Rl
ZmF1bHQAAAAJdmVydEFsaWduZW51bQAAAA9FU2xpY2VWZXJ0QWxpZ24AAAAHZGVmYXVsdAAAAAti
Z0NvbG9yVHlwZWVudW0AAAARRVNsaWNlQkdDb2xvclR5cGUAAAAATm9uZQAAAAl0b3BPdXRzZXRs
b25nAAAAAAAAAApsZWZ0T3V0c2V0bG9uZwAAAAAAAAAMYm90dG9tT3V0c2V0bG9uZwAAAAAAAAAL
cmlnaHRPdXRzZXRsb25nAAAAAAA4QklNBCgAAAAAAAwAAAABP/AAAAAAAAA4QklNBBQAAAAAAAQA
AAAFOEJJTQQMAAAAABjKAAAAAQAAAHoAAACgAAABcAAA5gAAABiuABgAAf/Y/+AAEEpGSUYAAQIB
AEgASAAA/+0ADEFkb2JlX0NNAAH/7gAOQWRvYmUAZIAAAAAB/9sAhAAMCAgICQgMCQkMEQsKCxEV
DwwMDxUYExMVExMYEQwMDAwMDBEMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMAQ0LCw0ODRAO
DhAUDg4OFBQODg4OFBEMDAwMDBERDAwMDAwMEQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAz/
wAARCACgAHoDASIAAhEBAxEB/90ABAAI/8QBPwAAAQUBAQEBAQEAAAAAAAAAAwABAgQFBgcICQoL
AQABBQEBAQEBAQAAAAAAAAABAAIDBAUGBwgJCgsQAAEEAQMCBAIFBwYIBQMMMwEAAhEDBCESMQVB
UWETInGBMgYUkaGxQiMkFVLBYjM0coLRQwclklPw4fFjczUWorKDJkSTVGRFwqN0NhfSVeJl8rOE
w9N14/NGJ5SkhbSVxNTk9KW1xdXl9VZmdoaWprbG1ub2N0dXZ3eHl6e3x9fn9xEAAgIBAgQEAwQF
BgcHBgU1AQACEQMhMRIEQVFhcSITBTKBkRShsUIjwVLR8DMkYuFygpJDUxVjczTxJQYWorKDByY1
wtJEk1SjF2RFVTZ0ZeLys4TD03Xj80aUpIW0lcTU5PSltcXV5fVWZnaGlqa2xtbm9ic3R1dnd4eX
p7fH/9oADAMBAAIRAxEAPwD1Cqqv02HY2do7DwWbZ9VeiWWPsfS7dY4vdFlgEuO53ta/zWpV/NM/
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
rlXVup5WQ2jFZVDn3tfY9lkVip7/ALK5wlvqtzsd1FjHepT/AIWyv7R6np1bHq1fvt+8JerV++37
wkpkJgTz3hOoerV++37wl6tX77fvCSmaSh6tX77fvCXq1fvt+8JKZpKHq1fvt+8JerV++37wkpkS
AJPCzn9aYC5rKLXOBc0AtLQSNvpe/a5my7du3/mM/nFf9Wr99v3hI2UkEFzSDoQSElNR/VWN2O9G
11djWvDg2TD9+32j930/0n+j9aj/AEiiOtU/9x8gO7tNRkARqVd9Wr99v3hL1av32/eElLUW+tSy
0NLA8bg12hg8bggf+l1Y9Wr99v3hVt7P3h/P+ISU/wD/2ThCSU0EIQAAAAAAUwAAAAEBAAAADwBB
AGQAbwBiAGUAIABQAGgAbwB0AG8AcwBoAG8AcAAAABIAQQBkAG8AYgBlACAAUABoAG8AdABvAHMA
aABvAHAAIABDAFMAAAABADhCSU0EBgAAAAAABwAEAAAAAQEA/+Fh7Gh0dHA6Ly9ucy5hZG9iZS5j
b20veGFwLzEuMC8APD94cGFja2V0IGJlZ2luPSfvu78nIGlkPSdXNU0wTXBDZWhpSHpyZVN6TlRj
emtjOWQnPz4KPHg6eG1wbWV0YSB4bWxuczp4PSdhZG9iZTpuczptZXRhLycgeDp4bXB0az0nWE1Q
IHRvb2xraXQgMy4wLTI4LCBmcmFtZXdvcmsgMS42Jz4KPHJkZjpSREYgeG1sbnM6cmRmPSdodHRw
Oi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjJyB4bWxuczppWD0naHR0cDov
L25zLmFkb2JlLmNvbS9pWC8xLjAvJz4KCiA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0ndXVp
ZDozMGE0NmYxNy05NzkzLTExZTEtODMwZS1iOTQ0OGYzNmI4ZGMnCiAgeG1sbnM6ZXhpZj0naHR0
cDovL25zLmFkb2JlLmNvbS9leGlmLzEuMC8nPgogIDxleGlmOkNvbG9yU3BhY2U+MTwvZXhpZjpD
b2xvclNwYWNlPgogIDxleGlmOlBpeGVsWERpbWVuc2lvbj41MDA8L2V4aWY6UGl4ZWxYRGltZW5z
aW9uPgogIDxleGlmOlBpeGVsWURpbWVuc2lvbj42NTY8L2V4aWY6UGl4ZWxZRGltZW5zaW9uPgog
PC9yZGY6RGVzY3JpcHRpb24+CgogPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9J3V1aWQ6MzBh
NDZmMTctOTc5My0xMWUxLTgzMGUtYjk0NDhmMzZiOGRjJwogIHhtbG5zOnBkZj0naHR0cDovL25z
LmFkb2JlLmNvbS9wZGYvMS4zLyc+CiAgPHBkZjpQcm9kdWNlcj5BZG9iZSBQREYgTGlicmFyeSA5
Ljk8L3BkZjpQcm9kdWNlcj4KICA8cGRmOlRyYXBwZWQ+RmFsc2U8L3BkZjpUcmFwcGVkPgogPC9y
ZGY6RGVzY3JpcHRpb24+CgogPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9J3V1aWQ6MzBhNDZm
MTctOTc5My0xMWUxLTgzMGUtYjk0NDhmMzZiOGRjJwogIHhtbG5zOnRpZmY9J2h0dHA6Ly9ucy5h
ZG9iZS5jb20vdGlmZi8xLjAvJz4KICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0
aW9uPgogIDx0aWZmOlhSZXNvbHV0aW9uPjMwMC8xPC90aWZmOlhSZXNvbHV0aW9uPgogIDx0aWZm
OllSZXNvbHV0aW9uPjMwMC8xPC90aWZmOllSZXNvbHV0aW9uPgogIDx0aWZmOlJlc29sdXRpb25V
bml0PjI8L3RpZmY6UmVzb2x1dGlvblVuaXQ+CiA8L3JkZjpEZXNjcmlwdGlvbj4KCiA8cmRmOkRl
c2NyaXB0aW9uIHJkZjphYm91dD0ndXVpZDozMGE0NmYxNy05NzkzLTExZTEtODMwZS1iOTQ0OGYz
NmI4ZGMnCiAgeG1sbnM6eGFwPSdodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvJwogIHhtbG5z
OnhhcEdJbWc9J2h0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9nL2ltZy8nCiAgeG1sbnM6eGFw
VFBnPSdodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvdC9wZy8nPgogIDx4YXA6Q3JlYXRlRGF0
ZT4yMDEyLTA1LTA0VDE1OjUwOjI4LTA3OjAwPC94YXA6Q3JlYXRlRGF0ZT4KICA8eGFwOk1ldGFk
YXRhRGF0ZT4yMDEyLTA1LTA0VDE1OjUwOjI4LTA3OjAwPC94YXA6TWV0YWRhdGFEYXRlPgogIDx4
YXA6TW9kaWZ5RGF0ZT4yMDEyLTA1LTA0VDE1OjUwOjI4LTA3OjAwPC94YXA6TW9kaWZ5RGF0ZT4K
ICA8eGFwOkNyZWF0b3JUb29sPkFkb2JlIFBob3Rvc2hvcCBDUyBNYWNpbnRvc2g8L3hhcDpDcmVh
dG9yVG9vbD4KICA8eGFwOlBhZ2VJbmZvPgogICA8cmRmOlNlcT4KICAgIDxyZGY6bGkgcmRmOnBh
cnNlVHlwZT0nUmVzb3VyY2UnPgogICAgIDx4YXBUUGc6UGFnZU51bWJlcj4xPC94YXBUUGc6UGFn
ZU51bWJlcj4KICAgICA8eGFwR0ltZzpmb3JtYXQ+SlBFRzwveGFwR0ltZzpmb3JtYXQ+CiAgICAg
PHhhcEdJbWc6d2lkdGg+MjU2PC94YXBHSW1nOndpZHRoPgogICAgIDx4YXBHSW1nOmhlaWdodD4y
NTY8L3hhcEdJbWc6aGVpZ2h0PgogICAgIDx4YXBHSW1nOmltYWdlPi85ai80QUFRU2taSlJnQUJB
Z0VBU0FCSUFBRC83UUFzVUdodmRHOXphRzl3SURNdU1BQTRRa2xOQSswQUFBQUFBQkFBU0FBQUFB
RUEmI3hBO0FRQklBQUFBQVFBQi8rNEFFMEZrYjJKbEFHU0FBQUFBQVFVQUFnQUQvOXNBaEFBS0J3
Y0hCd2NLQndjS0Rna0pDUTRSREFzTERCRVUmI3hBO0VCQVFFQkFVRVE4UkVSRVJEeEVSRnhvYUdo
Y1JIeUVoSVNFZkt5MHRMU3N5TWpJeU1qSXlNakl5QVFzSkNRNE1EaDhYRng4ckl4MGomI3hBO0t6
SXJLeXNyTWpJeU1qSXlNakl5TWpJeU1qSXlNakkrUGo0K1BqSkFRRUJBUUVCQVFFQkFRRUJBUUVC
QVFFQkFRRUQvd0FBUkNBRUEmI3hBO0FNTURBUkVBQWhFQkF4RUIvOFFCb2dBQUFBY0JBUUVCQVFB
QUFBQUFBQUFBQkFVREFnWUJBQWNJQ1FvTEFRQUNBZ01CQVFFQkFRQUEmI3hBO0FBQUFBQUFCQUFJ
REJBVUdCd2dKQ2dzUUFBSUJBd01DQkFJR0J3TUVBZ1lDY3dFQ0F4RUVBQVVoRWpGQlVRWVRZU0p4
Z1JReWthRUgmI3hBO0ZiRkNJOEZTMGVFekZtTHdKSEtDOFNWRE5GT1NvckpqYzhJMVJDZVRvN00y
RjFSa2RNUFM0Z2dtZ3drS0dCbUVsRVZHcExSVzAxVW8mI3hBO0d2TGo4OFRVNVBSbGRZV1ZwYlhG
MWVYMVpuYUdscWEyeHRibTlqZEhWMmQzaDVlbnQ4Zlg1L2M0U0Zob2VJaVlxTGpJMk9qNEtUbEom
I3hBO1dXbDVpWm1wdWNuWjZma3FPa3BhYW5xS21xcTZ5dHJxK2hFQUFnSUJBZ01GQlFRRkJnUUlB
d050QVFBQ0VRTUVJUkl4UVFWUkUyRWkmI3hBO0JuR0JrVEtoc2ZBVXdkSGhJMElWVW1KeThUTWtO
RU9DRnBKVEphSmpzc0lIYzlJMTRrU0RGMVNUQ0FrS0dCa21Oa1VhSjJSMFZUZnkmI3hBO283UERL
Q25UNC9PRWxLUzB4TlRrOUdWMWhaV2x0Y1hWNWZWR1ZtWjJocGFtdHNiVzV2WkhWMmQzaDVlbnQ4
Zlg1L2M0U0Zob2VJaVkmI3hBO3FMakkyT2o0T1VsWmFYbUptYW01eWRucCtTbzZTbHBxZW9xYXFy
cksydXI2LzlvQURBTUJBQUlSQXhFQVB3Q2JlVS9LZmxXNThxNkwmI3hBO2NYR2k2Zk5OTnA5ckpK
Skphd3M3dTBNYk16TTBaSkpKM09LbzNVUElQbE8rdFd0bzlKc2JSbUlJbGh0SVZjVU5kaUl4MXlV
WmNKdHEmI3hBOzFHSTVZR0lKajVoSi93RGxVbmx2K1ZQK1JFWC9BRFRsbmpEK2FIQi9rdWYrcXor
YnYrVlNlVy81VS81RVJmOEFOT1BqRCthRi9rdWYmI3hBOytxeitidjhBbFVubHYrVlArUkVYL05P
UGpEK2FGL2t1ZitxeithU1hIbFg4dUxXZVMybnVrU1dGMmprWDZuV2pLZUxDb2hJNmpIeGgmI3hB
Oy9OQy95WFAvQUZXZnpVLzhPZmxuL3dBdGFmOEFTRWYrcUdQakQrYUYva3VmK3F6K2J2OEFEbjVa
L3dETFduL1NFZjhBcWhqNHcvbWgmI3hBO2Y1TG4vcXMvbTcvRG41Wi84dGFmOUlSLzZvWStNUDVv
WCtTNS93Q3F6K2J2OE9mbG4veTFwLzBoSC9xaGo0dy9taGY1TG4vcXMvbTcmI3hBOy9EbjVaLzhB
TFduL0FFaEgvcWhqNHcvbWhmNUxuL3FzL203L0FBNStXZjhBeTFwLzBoSC9BS29ZK01QNW9YK1M1
LzZyUDV1L3c1K1cmI3hBO2YvTFduL1NFZitxR1BqRCthRi9rdWY4QXFzL203L0RuNVovOHRhZjlJ
Ui82b1krTVA1b1grUzUvNnJQNXUvdzUrV2YvQUMxcC93QkkmI3hBO1IvNm9ZK01QNW9YK1M1LzZy
UDV1L3dBT2Zsbi9BTXRhZjlJUi93Q3FHUGpEK2FGL2t1ZitxeitidjhPZmxuL3kxcC8waEgvcWhq
NHcmI3hBOy9taGY1TG4vQUtyUDV1L3c1K1dmL0xXbi9TRWYrcUdQakQrYUYva3VmK3F6K2J2OE9m
bG4vd0F0YWY4QVNFZitxR1BqRCthRi9rdWYmI3hBOytxeithYldINWFlVU5UdGx2TEVwTEE1SVYv
cTBhMUttaDJkRlBVWStNUDVvWCtTNS93Q3F6K2FKL3dDVlNlVy81VS81RVJmODA0K00mI3hBO1A1
b1grUzUvNnJQNXUvNVZKNWIvQUpVLzVFUmY4MDQrTVA1b1grUzUvd0NxeithTDB6OHN2SytuM0pu
bHM3ZThVcVY5T2UyaFpkeVAmI3hBO2lvVU8rMlJua0VoeWI5Tm9wWVoyY2twZVJLYmY0TThuL3dE
VmgwMy9BS1E0UCtxZVZ1WWh2OEgrVXZYcCtnOU9wNi9HbjFTRHA2UEsmI3hBO245MzQ0cWlmSm4v
S0g2RC9BTnMyei81TVI0cW5XS3V4VjJLdXhWSWJqeVY1ZXVyaVc2bnQyYVdkMmtrSWtjVlp5V2JZ
TjRuRlZML0EmI3hBO2Zsbi9BSlpuL3dDUnNuL05XS3Uvd0g1Wi93Q1daLzhBa2JKL3pWaXJ2OEIr
V2Y4QWxtZi9BSkd5ZjgxWXE3L0FmbG4vQUpabi93Q1ImI3hBO3NuL05XS3Uvd0g1Wi93Q1daLzhB
a2JKL3pWaXJ2OEIrV2Y4QWxtZi9BSkd5ZjgxWXE3L0FmbG4vQUpabi93Q1Jzbi9OV0t1L3dINVom
I3hBOy93Q1daLzhBa2JKL3pWaXJ2OEIrV2Y4QWxtZi9BSkd5ZjgxWXE3L0FmbG4vQUpabi93Q1Jz
bi9OV0t1L3dINVovd0NXWi84QWtiSi8mI3hBO3pWaXJ2OEIrV2Y4QWxtZi9BSkd5ZjgxWXE3L0Fm
bG4vQUpabi93Q1Jzbi9OV0twenAybldtbFdpMlZrcFNGQ1Nxa2x2dEhrZDJyNDQmI3hBO3Fpc1Zk
aXJzVmRpcUUvNCtQK2pqL21SaXFBOG1mOG9mb1A4QTJ6YlAva3hIaXFkWXE3RlhZcTdGWFlxN0ZY
WXE3RlhZcTdGWFlxN0YmI3hBO1hZcTdGWFlxN0ZYWXE3RlhZcTdGWFlxN0ZYWXFoUDhBajQvNk9Q
OEFtUmlxQThtZjhvZm9QL2JOcy84QWt4SGlxZFlxN0ZYWXE3RlUmI3hBO0JxdXM2ZG8xdTl4ZlRM
SHhVc0VKSEpxZGxHS3ZITmYvQURuMXU3dW5zdEtpajBtMlVsV25sQmttcVB1VWZkaXFWSFhkWjFP
VzNpbDgmI3hBO3lhaEhKY3FaRkRUTkRFd0Zld1pSUTAyR0txY1huenpKb0Z3cHRkYmU4amoyOUc0
QmRhQS9FcnE5T3ZpRFhGWHN2a256bmErYnRQRXkmI3hBO3FJYnlNVm1nQnFCMjVLZkRGV1RZcTdG
WFlxN0ZYWXE3RlhZcTdGWFlxN0ZYWXE3RlhZcTdGVUoveDhmOUhIL01qRlVCNU0vNVEvUWYmI3hB
OysyYlovd0RKaVBGVTZ4VjJLdXhWS1BOR3J0b21qVDMwU2w1dG80VkNsdmpjMEI0cnVhZGNWZWRX
VjE1ZWtXVy91N0paTHFRRjd1OXYmI3hBOy9YZVRsWFljZlQ0S3UrdzVkTVZZcjVzL3dYY09GZ0FT
UmdyaStzbEloM0ZTanhsNUdMZTU0NHFrOWxxMTlZd05aUnN0MUZ5VDBaR0MmI3hBO2ppSzFwVWps
MzhjVlZvOUJPb0tXbVFOSU5ua05WSUZLTDltb09Lby95bmQzZmtyWG9abkJhSlc0ekFFMGFLUUVN
RDJxS2hoN2pGWDAmI3hBO0piM0VWMUJIY1FNSGpsVU1yRHVEaXFyaXJzVmRpcnNWZGlyc1ZkaXJz
VmRpcnNWZGlyc1ZkaXFFL3dDUGovbzQvd0NaR0tvRHlaL3kmI3hBO2grZy85czJ6L3dDVEVlS3Ax
aXJzVmRpcTFrUndBNmhnRFVWRmQ4VlVycXp0YjJBMnQxRXMwTGZhallWVTA5c1ZZbjVsL0szeXhy
OEgmI3hBOzdpQmROdTBGSTdpM0hINkhUb3cvSEZYaWVyNmZmZVZOYWwwUzdFYzdRazhXV3RIQkh3
c080K1dLcDdwK3B2REVTMFB3RlR5UUtHYWgmI3hBO0RlSi9tb091S3FPdFhVazhJNWNWNkdReGc3
MFZSdU5xYmdqRlhvLzVPYXZKZmVXbXNMamFXd2xaVUIvMzB3REwxUDhBTVRpcjBIRlgmI3hBO1lx
N0ZYWXE3RlhZcTdGWFlxN0ZYWXE3RlhZcTdGVUoveDhmOUhIL01qRlVCNU0vNVEvUWYrMmJaL3dE
SmlQRlU2eFYyS3V4VjJLdXgmI3hBO1ZCYXhxY0dqYVhkYXBjbWtWckdYTmU1NktQcEpwaXI1cGx2
cjd6YjVpbTFlNlZWZWQ2cUdxRVVDbEZyUTdBWXFuZEhTNmtIQ2hpVm0mI3hBO1VIY1VYaWFlOUJV
NHFxM0t0TkxKQUNBU0grS1VWSy9HUGwyNmp3M3hWVThnK1pMcnlucWQwSGc5ZUM0NHJMR0NBUVIv
SmlyMlRUZk4mI3hBOytnYW1zZnBYU3d6U2prSUp5STVQK0JiK0dLcDBDQ0tqcGlyZUt1eFYyS3V4
VjJLdXhWMkt1eFYyS3V4VjJLb1QvajQvNk9QK1pHS28mI3hBO0R5Wi95aCtnL3dEYk5zLytURWVL
cDFpcnNWZGlyc1ZkaXJ6ejg2YnVlSHl0SGJRbWkzVTRXU25YaWlzLzhNVmVaZVRIdDdkU1ptQmQm
I3hBOzZCUVI5cXBwOE5Cc2ZuaXFMdlp4WjN2SUV5czdGZ3ExOFNoQkh1TnFlSnhWQ3lKRzBjczBC
cmJ0SjhUc2FyNmROaU9PNEk2WXFweGkmI3hBO0dDY1IyNkJwRDhMSVI4THRYWXE2RTAvamlxUGlq
a1YybXVVRFhTcVdLU0FLNnFHQW96RGV0TzlNVlpSYWVjZFQwZ2NMZVZ4RENvUDEmI3hBO1dZZW9I
SjY4SFB4QlFQZnY0NHF6WFEvUEduYW02Mmw0UHFGNHhJV09UN0wwcnVyZTlPaHhWazNYY1lxM2ly
c1ZkaXJzVmRpcnNWZGkmI3hBO3JzVmRpcUUvNCtQK2pqL21SaXFBOG1mOG9mb1AvYk5zL3dEa3hI
aXFkWXE3RlhZcTdGWFlxd3Y4MWRGbDFmeXRLOXVDMDFrM3JoZXgmI3hBO1hpUTlmbzN4VjRWcE45
TmJTckdnNUtoRDhhYnFSNFlxbU4vY3gzY29hTm1yRUErOUYzclhyNDdZcW1NUmpaWTBOUzA2aVRr
aEJLN2omI3hBO1lyVC9BQ2hYNTRxcVJ0SElUYnh4aFFOek5ROFdKSWI0SFppMUFIclhGVVRiMjA4
dEJVTnpOT1U1QVVEK1JEVUhmL01ZcXJHSnFlcEcmI3hBO3V4YjBoR1NhY2p5Sy9zclRsd0pyWEZW
OXVoTWZyU2NsNUFBTUtNRWlBSWtrTE9DQUFGNjB4VmwvbHZ6bjlUS1dHb2wydCtJS1NPQ1omI3hB
O0kwMzNjS0RWZHV1S3M4dHJxMnZJVnVMU1ZKNG4zVjBJWUg2UmlxdGlyc1ZkaXJzVmRpcnNWZGly
c1ZRbi9IeC8wY2Y4eU1WUUhrei8mI3hBO0FKUS9RZjhBdG0yZi9KaVBGVTZ4VjJLdXhWMkt1eFZh
NkpLalJ5QU1qZ3F5bm9RZGlNVmVCK2VQS1NlWFBNVFMybncydHdmVWlCNmkmI3hBO3U3QWZLdE1W
U3o2dkV5S3hRbVFVYWxOdXZJN2ltS29sWTBnakR2Ymljc2tmcEtEVlNJMFZEOXNuN1FWZnV4Vk1M
RzRrcVBUdFk0aE8mI3hBO0NHdDRnRkcrL01jZW0zK1NNVlRNNldvUm94R2dZTlNaZ25GMWJqOWcw
NGlRRWR1UHZpcXI5U05SU3JYaCtFOENXVlVib3NqSGxRYlYmI3hBO3ArR0tyTHhyTVdycmNReGx1
U1JMSHk0OHlLSnVlUWJpT1ZhTHYzeFZKdFN2cDU3dDdheGlaZlNxc3NpZkU3c0JYbTdIbVFncjQ0
cXEmI3hBO2FQNWl2UEs5ekRMWjNYMXEyY0ZyajRHVkJ4KzBLZkZYY1U1REZYc21oZVlkTjh3V3d1
TEdRRmdCNmtSKzJoUGlQREZVMHhWMkt1eFYmI3hBOzJLdXhWMkt1eFZDZjhmSC9BRWNmOHlNVlFI
a3ovbEQ5Qi83WnRuL3lZanhWT3NWZGlyc1ZkaXJzVmRpckdQUDNsNzlQNkRNa0lBdXImI3hBO2RU
SkN4QU80RzR4VjR6b2s3K28wRXNZTHdtakt3cFNudFJoMEF4Vk0zdGVRaGlrSWhjU0Eya3ppbklk
ZVBLbjh3Rk1WVE94c0xtSW0mI3hBO0NPZ1VwOW1PcG9DU0QrMnhyUmlLMDhQREZVU0hnQldHWUZa
STNWRlZSVzRlTmp5TENObVZ5RHVTVHQ3WXFxUXJKY3RQRkZ4dG80RkkmI3hBO2thVm0rQ056eW83
TDhJWnVJT3hCOTZiWXFsOS9xa0VNVHdhVjZzc3JzekpORXZKcEpSd1hqRFFOeFVBVTVZcXhsM3Vy
Q3lHbnpDT0YmI3hBOzVKUFd1STVSek5VMjRtaDNYY2tqeHhWRVQzVU5sRExiMnJ2SjY1SXVtYU1S
cklxa3lLa2NYR3FvaEp4Vkc2SHJ0MXBGK2w5YVFTeG8mI3hBO2dHN0htckwrMHZLbENQMVlxOXUw
alVvZFgwK0cvZyt6S054MTRzT294Vkc0cTdGWFlxN0ZYWXE3RlVKL3g4ZjlISC9NakZVQjVNLzUm
I3hBO1EvUWYrMmJaL3dESmlQRlU2eFYyS3V4VjJLdXhWMkt0RVZGRDB4VjQ3K1pIbEs1MGUvYlg5
SFEvVjdwaDY2RG9qQWo4RHZpcVRyZnImI3hBO2MyM3BYQ3F4cHk1UFNvWVZOVlplbE1WUmRwZVJO
Y3JPMDdmV0VKRWlTdEt3a1JodzR4OFNGNkhrZkE0cXJ0Y1Rpek5vbG1yK2pMNnEmI3hBO1RwRndT
VWcxVkpDWm93M2hRZzRxdGtPc1h0OU5CRlNKSlhaMnQyQ2tmRW9YN0pxcWdMMG9wTzJ4R0tvcGYw
UG9WbE9yZ2FqZVhFYlMmI3hBO0tZZDFnVnFMeGFTVHRVY3ZpSFhmRlV0MVJ0UXY1SU5RMUNPSzZz
YlpHa1NRVmpoREQ0VS9mRThwZUhMdDF4VkpiNUxkcm1FL1hXMU4mI3hBO0FxMGtZQ0htVysxRXFu
L2RkU2UyS29zTExjTlBjWGl2RmI2Y3ZHWWxGS1JNMzJJSXhHZVBEY21nNjRxeXp5ZDVobDBXNGpz
NXBXbDAmI3hBOys1NHNzcm9xa3NkcWhGZDI3ZGNWZXFnaGdHRzRPNHhWdkZYWXE3RlhZcTdGVUov
eDhmOEFSeC96SXhWQWVUUCtVUDBIL3RtMmYvSmkmI3hBO1BGVTZ4VjJLdXhWMkt1eFYyS3V4VlJ1
cmFDOGdlMnVVRWtVbzR1cDZFSEZYaEhubnlyZCtVZFFlZTNEeWFkT1NZWm1QTGpYZGtZZUkmI3hB
OzZEMnhWSkV1L3JBV1NPUnVPL0ZHWWdxNDZjVHZ0aXFhNmRyRHF3ZzFIblBhdXJjYWxnOFpCKzNS
VFJodC9iMktxTG0wNkcvZUs0MHUmI3hBOzlrdVhLL3ZVZDNCNDFyeGNlcEg4Ry9YRlZHMnVMWFRy
a3lteml1NDErSDZ0T0dNRWpnTnc0eHhyS0pLVjc5Y1ZSTTFscTgwUzZqZkYmI3hBO1k0bHF5Vzg4
U1J3MUlBNFc5dWVYZjlvakZWdW42QmM2bkpGRUVGejZrZnAzVTdmRjlYVlNGcEc1UEZuNi9aQUFy
aXFOa2lTVytrMHYmI3hBO1N3SDAvd0N0QmJZSUZOd1QvdXh4OE5IVlJWVkxIRlVwdnRTdHJlZExL
d2dFTUVVNWRwcGxrbHVwcFFHamRPYWlpcUFhOFJYZkZYci8mI3hBO0FKUDFKN3JTb2JTN0ordHdK
dnk2dkhYNEgrNGpGV1E0cTdGWFlxN0ZYWXFoUCtQai9vNC81a1lxZ1BKbi9LSDZELzJ6YlA4QTVN
UjQmI3hBO3FuV0t1eFYyS3V4VjJLdXhWMkt1eFZDYW5wbG5xOW5KWTMwWWxobEZDRDI5eGlyd1h6
ajVEdnZLZDZaN05EUFl5a3NqVUpxQjJZOWomI3hBO3ZpcVRXMm93U3hpTzVvcktLQWxSc2EvaGlx
RlhVWkxhWlhpUGY0UjNyNER0aXJMckxVQjZlbjM5d09hS3pTaElXNEZRdlhiWUVnWXEmI3hBO3Iy
NngzY2w1UFp1OXdiVlJLSW5aMU1pTXpPYUVsMldpMDJHS29rYWxxZXBXZHN0eEZGcDJuS3lnTERS
VVpVWmVSSkZLdVZEYlVHS3QmI3hBO0xldzZaY1FXMmpPMTNjdFdPZVdKVEdFUU9KREhBZmk1Y3VY
eEVrMHBpcVBUNnA1ZVdXVFVBdDNyQXRXYTBCQ2xZR2FyU0x5Nm5remImI3hBO3QxeFZEYUpFM2x1
NGk4d1g5N0hZeGhhdjY1RXR4TXpoMktpUGJncGJqc3UrS3ZXdE0xRzIxV3lpdmJVMVNaUTRCMklx
SzBJeFZGNHEmI3hBOzdGWFlxN0ZVSi94OGY5SEgvTWpGVUI1TS93Q1VQMEgvQUxadG4veVlqeFZP
c1ZkaXJzVmRpcnNWZGlyc1ZkaXJzVlVybTJndklXdDcmI3hBO21OWlluRkdSaFVIRlhobm5qUU5H
MC96RExaYWNKSVdrWUtReTFqRWhRUzByNGNTRGlyR0lOSGxXNkNUdWlJV0tsM1B3Z3FlUFRZZDgm
I3hBO1ZUSFVJVWFDMjByU2xlNm85R1lMeVV0dUR4STZicmlxSGQ3aTMxaUMzc0dBdUlnSTM5SnVT
MUgydmpVNzRxbk1XdEczYVRTcEl2V3QmI3hBO3FOSzdBaG1SbU8veE4vSEZVd2dsc3IzU0d1ZE9r
U3oxTkl3OC9GZlRlUkFhRnE5NitJOE1WVzIyaDNGaGJSYXFKQmNtUkkyNHl1UXImI3hBO05Jdncx
UHhiQmozOGNWUXk2YmMzOTNCcU90enBLcnUwYVF4RG1pSWpWY2xwRUlIRVU2YjRxeWxQTWQzbytv
eDNxTkUrblFwNmJ4eHUmI3hBO3RXaU5QVEZCVWNoaXIwZXl2YmJVYlpMdTBjU1JTQ3FrZnFJN0hG
VVJpcnNWZGlxRS93Q1BqL280L3dDWkdLb0R5Wi95aCtnLzlzMnomI3hBOy93Q1RFZUtwMWlyc1Zk
aXJzVmRpcnNWZGlyc1ZkaXJSSUFxZWd4VjV0K1l1aDJXcTNVVjVwN1R0cVlCQWdndDVKZlVKWDA2
czZ4c2kmI3hBOy9EdHVjVll6TitXbm1HWFMzdk5RUlQ2SkRSUUFuMWl2Y04wSDM0cWtOcmU2ck5j
THBtalc4a0RnY1dDMWFUWWxHclFlTzJLczc4dGYmI3hBO2xZeldFODJyeUZMdWVqUVNMVldUL1dE
QUg2TVZTZldmSkd1YVpJYmRvZ05Na2tCdUxpRUZpNmtmRVc2bGVtL1RGVWxtdDF1TGFTK2gmI3hB
O1l3Y3BCYXBFakx6V0Zlck1BRklCUGZGVlZibldMVzFnZ3RaVmwweTdKampFcE5RNm43SWVtMzdM
ZklqRlV4dDlSdDc4MmxsNlp0aVkmI3hBOzJnZHBDRVVmdEVMeS9tOGNWVHN4dGZXVjA4TU1kMkxX
VGhERVk0M0JNZkVBRDFQaUIrbnI0NHFnZklmbSs2MHpYTHJTOVhqa3RZcG0mI3hBO0x0RktHVUk1
WkY1ZkdGcDFPM3RpcjJFRUVWSFE0cTNpcnNWUW4vSHgvd0JISC9NakZVQjVNLzVRL1FmKzJiWi84
bUk4VlRyRlhZcTcmI3hBO0ZYWXE3RlhZcTdGWFlxN0ZYWXExUURvTVZRR3U2aW1rYVBlYWk1QSty
eE00ci9OVDRldE8rS3NGL0tPeEVzZW9hMDQ1Tks0dDBkcUUmI3hBOy9COFRpby95bTN4VjZWaXJS
QVlGV0ZRZGlEaXJHZk1QazJ3MUdLYTZzb2xpdldYdDhLU1U3TUI4OFZlYVhVVi9heFQ2YUsyNmJM
Y0MmI3hBO2FnVm4yV29WcWdVVlYzRk1WUytXRzk5Q2Uxa25IMXFNRVRTUUlyc1l6NDdGdjJleHhW
VzAzWDMwRzRXR3lsTXFDaW0zY0UrbzNSajYmI3hBO25iOVdLck5kdjdQV1VmMDRoYVhTZFlTREE2
a25vVTNUN3FERlhvdjVjK2NIMXFCOUp2NDJodXJRQlltYzE5VkZGS2hxRGtSN1lxenImI3hBO0ZY
WXFoUDhBajQvNk9QOEFtUmlxQThtZjhvZm9QL2JOcy84QWt4SGlxN3paY1hOdjVldnZxY01seGN6
eE5id0pIRTg1NXlqMHd6SkUmI3hBO2puaXRhbmJGVWhTZlZyYjZwb1hseTBuMC9UcmEzUllMZzJ6
SzBqcEkwY3ZLT2FBb29DcHkrTjQyZmxWU2NWUXQxcS9udTdaSHNMZTUmI3hBO3RYdWJaV0ViMnll
akRQUE1rVWFONmljNlFyeWFWaXhyMUM4YVlxalpaUE9jT3FQQ3R6TmMyYVhkbkFycmF4S1dERjdp
NmJkUVBSRVImI3hBO0VRYXRlWGVvUEpWQjJGeDV5V0dlODR6UkJySzV2N2xCWnBITk5jTzVXMGpp
VWh2M2l3d0JTRzZmRFVHdUtxM2xyV05kMWJVcldDNXYmI3hBO1hVd21XUzZqWkxaSXJpQkZNVWJX
L0ZHa2NtVGl6c3JjQjBIYkZXYzRxN0ZYWXE3RlVtdnZOM2x2VHBqQmVhakRGSXA0c3BOYUh3SkEm
I3hBO0lHS3NJODhlYjdQekJhalJkR2IxNEM2eVhFaFVNc25CZ3l4aXJMOE5SVW42TVZiOGwrY1BM
dmxueTVCcHQ0MGd2UTBrazhTeGhXTGsmI3hBOzE2TXlqcFFERldUV0g1ZzZKcUlCaFdWYWlwUWhX
ZGY5WlkzZmo5SnhWUDdQVXJMVUY1V2t5eVU2cUQ4UStZeFZGWXFrdm1YeTlaNjcmI3hBO3AwOEVx
OFppaDlPVlI4WU5Qb3JpcnlTVFIvTEV6TkkxL05iWFNUZWt6eWRWTlF2eEFEcmlxbGZYZGpaZ1c4
azR2ZGxUMVo0K1ZLZ2MmI3hBO1crQnZpRkJYcmlxVjMxajYwaXlSdUozcnlNb0FGZmg0b3NhSVdv
S2VPS3NsL0xqU3JLYnpFcEYyMFY1YUF5SVl5Q0pRdFVrUnFmUGYmI3hBO0ZYdE9LdXhWQ2Y4QUh4
LzBjZjhBTWpGVUI1TS81US9RZisyYlovOEFKaVBGVmZ6RHFVK2s2VkxmV3lvOGtaUUFTQWxmaVlL
ZnNsVDMmI3hBO3llS0FuS2k0bmFHcGxwOEJuSG41c08vNVdEclArK0xYL2dKUCtxdVpQNVdEby84
QVJCcU82UDIvcmQveXNIV2Y5OFd2L0FTZjlWY2YmI3hBO3lzRi8wUWFqdWo5djYzZjhyQjFuL2ZG
ci93QUJKLzFWeC9Ld1gvUkJxTzZQMi9yZC93QXJCMW4vQUh4YS93REFTZjhBVlhIOHJCZjkmI3hB
O0VHbzdvL2IrdEJXbm1xNXNaZld0YkswUndwalRhVmhHakVGa2lWcHlJMUpVVlZhRFlZL2xZTC9v
ZzFIZEg3ZjFvMy9sWU9zLzc0dGYmI3hBOytBay82cTQvbFlML0FLSU5SM1IrMzliditWZzZ6L3Zp
MS80Q1QvcXJqK1ZnditpRFVkMGZ0L1c3L2xZT3MvNzR0ZjhBZ0pQK3F1UDUmI3hBO1dDLzZJTlIz
UiszOWFIdi9BRHRyVjlhU1dnOUsxOVVjVExBckNSUi9rbDNjZmhqK1ZqM3BIdEJuNnhqOXY2MkZy
b1Zxa3B1VmxtK3MmI3hBO2sxK3NNd2FUNkN5R21EOHJIdlpmNkljdjgwSzFycE5wYWxtVXlPN21w
ZHBIRGRhL3NNdmZEK1ZqM3NUN1FaK2tZL2IrdEZ6SkZjQ2wmI3hBOzFCRmNBQ2dES0FmK0NvZjFa
Q1dsN2k1R0QyZ0JOVGo4a1I1ZDgyM1hsMVRwY05sQ2huUExsSUpKSzByeEJQcThkaDRBWlZHRVJL
cE8mI3hBO3h6NmpMTEZ4NGFrUHg1cHpONXd2cG45YjZyYVJ6Q2xKbzBkWEZQOEFLRXUvMDVrZmxZ
T21QYitvSDhNZnQvV2l2K1ZnNnovdmkxLzQmI3hBO0NUL3FyaitWZ2ovUkJxTzZQMi9yZC95c0hX
Zjk4V3YvQUFFbi9WWEg4ckJmOUVHbzdvL2IrdGl0L2IrWDlTdjV0UjF5c0J2V0t2RkImI3hBO3lT
UGw5c1BVZW8zWHIxekh6WStBdTU3TjFwMVdLeno2b002WjVUbmtpdUJmdVlRVEd6QTcwcHhYY3Ix
NzFJeXR6a1BxVnpaNmRiZlYmI3hBO2RKSHFsWktCZzFReUVLVkx1bXhZaGVPS3EyamF3dHJmV3Vw
MkxKREpBM0lvL0VjZmhNYm9WVThxZkZ2dnZoRld4eUdRaWE1dlQvTEgmI3hBO212VU5hMUUybDFI
Q2tZaWFTc1NzRFVGUisxSXc3NWRsd3hqR3c2bnMvdExObnptRXdCUS9IVmx1VU80UW4vSHgvd0JI
SC9NakZVQjUmI3hBO00vNVEvUWYrMmJaLzhtSThWVXZPdi9LTzNIK3RIL3hOY3QwLzFoMTNiWCtL
UytIM3ZOSVpwcmVSWm9IYUtSUHN1aEtzTzJ4R1p4QUwmI3hBO3lrSnlnYkJvc2o4MDI5NWZhOWVv
cmtXMWtzYkZwR0lpaFY0NDYrUDJtN0FWT1U0U0l3SG03VHRUSGt6YXFZdjB4cm55R3dTeGREbGQm
I3hBO3JPbHpBSTlRNUxiekV5QkN5TUVLSDkxeUJxZTRway9GRyszSnhCb1pFeDlVYW55Ty93Q3BU
L1JFZzFDZlRudUlZM3R3NWVSdlU0ZnUmI3hBO3dTMi9wVjdlR0h4UFRkTWZ5WjhVd01oWTkvVDRO
eDZOTzd3SkpORkFid2dXM3FjNnlBbmlyQUxHeENrOUN3R0E1QW1PaWtTQVNCeGMmI3hBO3J2ZjdF
Ym90bkV0emY2ZlBLbHJxS3FZcldXUTBWWkVla2dEZG1JRkFmdXlPU1d3UFJ2MFdFQ2M0RThPVGxF
K2ZWUzFlTFhMTzNGanEmI3hBO3lPNGFVU1F6T2ZVM0NzcFZIMzJOUWFZY1pnVFlZNnVHcHh3NE1n
NjJEelE2YU5PYmhMT1dhRzN1cEtjWUpXWU1DMjZxeFZHVlNmQW4mI3hBO0Q0Z3Eyb2FLWEdJa2dT
UFFxcStYYjMwb1pwNWJlMlM0RG1KcHBWQVBEcUtyeTYvN2VEeGd6SFp1U2dTWXh2bFpYdllhdmNX
V21XaEUmI3hBO1JpbmFYNm1vWkF4cVVMbG1yNHR0dmlKeEJKWlMwK2VlUEhIYWpmRHlXRHk5T2Jo
N00zVnFMcEdLQ0F5SGt6QTBvRHg0MVBnU0RqNG8mI3hBO3E2TEVkblM0akhpanhkMXJ2MEdrZWt5
WHQxY0xienBkZlZtaWtXVDRDcXV6SzNDTi9pTzFPM3ZqNGx5b0ovSWlPQXlsS3BjWERSdjkmI3hB
O1NReldrRTBxVFNDcGo2ZnJIM1l6d3hrYks2WHRMTHA0Y0VWMXY2bm9yNnBxKzVQeUpOUHd3NGdS
QVd3N1JsQ1dva1k4bFhMSEVkaXEmI3hBO2hkMmFYMFhvUFFFbXFzYWJIL1pGUjk1eW5VUTRvdXo3
RzFQaFo2NlMyVWJmeXJiWDhYSnIwQ09abGg5TUVIaEtpNzA0VkJxUlhicm0mI3hBO0M5V3FwNVp2
YkNRU053dUZ0V0hyd3NHUXl4MVhrUWpxRHZ2aXFyclUzbHlUUnhkYWRiSjlhaC9kMFVLbFNRT1Jr
SW94clR1djA0cW0mI3hBO1A1YjY5YnkrWld0cEFzS1N4TWxyUUdoK3llQkoyNWZENDVQeExoVGkv
bEJIVStLT29vdlg4ZzVTRS80K1AramovbVJpcUE4bWY4b2YmI3hBO29QOEEyemJQL2t4SGlxbDUx
LzVSMjQvMW8vOEFpYTVicC9yRHJ1MnY4VWw4UHZlWTVudkpNdDFxM3RMclg5WGFlZU5YaldFd3dT
eWUmI3hBO2xISzRqUUhrOVI5bnc2bk1iR1NJQjNXc3g0NTZyTGNodFZBbWdka0RxMGtFdWk2Y0li
aUF5MlR6ckpIRWVKQmQwWmVDMEJJRlB0ZmomI3hBO2s4WUltZHViUnE1UmxwNFZLTnh2bDVub3Qx
blVyUzZ0NDd5QS93Q20zOFNKZWdmc21JMFAvQmxWUDBlK09PQkJyb0VhM1V3eVFFaDkmI3hBO2N4
NnZoK3RWczQ3Q3piVGIwWFVFdjkxSmNTU3VXa2lJWWZ1a2hGYVVBKzBSOTJDUmtiRk04TWNXUHc1
Y1VUeXUrWThnRkhVTE8wdXImI3hBOzNWSFM2Z003VCt2YlVrVUk4YnZLWFhtYUp5M1U5Y01aRUFi
TmVvdzQ4bVRJZUlYZGpmcHYxVkxiVkRwMm1yYVhraTNiTGN3end3cTQmI3hBO2tFYVJOeWY0MUxL
T1hRQUh4d0dIRkt3eXg2cndNSWpJOFhxQkE1MVNscTluQmVYczJwV2w3QTl2ZE1adjNrZ1dTTXY4
UlZvajhleFAmI3hBOzdJT0hISWdVUXcxbUNPVElaeG5IaGx2dWR4OEhhcUUvUWVsUXBMRkk5c0p4
S2lTb3pMNmtuTlBoVmlkeDkzZkRENnl1cUEvTFl3Q1AmI3hBO1R4WHVPcFJ0dHdNUGxxSlpZbmt0
cm9tVkZsUm1YMVo0MlQ0VlluY0Q2TytRUE9YdWI4ZGNPQVdMRXQ5eDFrRUJmMkJPdVhUeVhNTU0m
I3hBO1AxbVIybDlWQ3lyekoyakRGK1E4S1pPTXZRTm5IejZmL0NaRXlBSEVkN0hmM2MwdzFQVUxY
WExHOTlDV09CemZyY0JKbUNFeExENlAmI3hBO0lBOVRVVklHK1FoRXdJOXprNm5QRFY0NTBRUFhl
KzIzRFRGc3lIVHV4VjJLdXhWMkE3cGpJeE5oTGg1V3ZwNHBwdE91QW9sbkJXM0ImI3hBO0tNSkFy
TWpLVzI3VXpYNVljTXFlMDBPcEdvd2lYelgzR2hlZHJwNHIwU1B3ZU14eVFCd0hVcHMxVnJ1dklW
SHRrSEpVdEUwUFViQzcmI3hBO3R0TDh5aU9LTzRrRThEZ3BJeG9Rcm96VjJCcnNNVlY5UXVGOHQ2
dk5jV3NTeHhzMG4xY1JMVlluSHdvWGNmQ09lNXAxMkdLdlhQS1AmI3hBO21XMzh6YVd0eWg0M0VW
RXVZK2hWNmRma2V1S3BsL3g4ZjlISC9NakZVQjVNL3dDVVAwSC9BTFp0bi95WWp4VlM4Ni84bzdj
ZjYwZi8mI3hBO0FCTmN0MC8xaDEzYlgrS1MrSDNzRTA0aHJWbzR0TWE4dUVsRWlYQ2N6eG9COERv
aW1vNzlSbVhQbnplZTB4dUZESHhHN3ZkRFhzR3AmI3hBO0Yzdkw2R1pXbFlzMGtpTW9MRStKQXlV
VEhrR3JQanpXWlRCMzd3aGNrME94VjJLcjVJcFllSWxSbythaDE1QWlxbm93cjJPQUVGbEsmI3hB
O0VvOHdzd3NYWXE3RlV4MHFDOGd1SU5TU3hudVlvWEVxR05XQ2xrYW8rTUk0cFViNVhNZ2lyY3JT
d3lSa0o4QmtCdnQvWXBhcjZqMzAmI3hBO3M4dHRKYU5jTVpUSExXdFhKWWxhb20yKzJHSExtdzFk
bklTWW1ONzcvZ0lQSnREc1ZkaXJzVmRpcnNWU3pYWTdyNmkxeFpTTkhQYjAmI3hBO2tCUWtHaTdu
cDRaamFtRmkzZDlnNnJobWNaNjhrbHR0ZDE2YVVtRzRsV0craVBxRmFzVmtYYXRhVjhLNWlQUnFO
bTJyVHNIdlBWa3UmI3hBO3JDUmZSNUJtTWkxT3ltdE5qK3ZGV2FXV2h4NjVCSnFHcDNqUE5NNUNX
WVVrSzZHcGpMMCtHbmZjZlQweFZFZVd0WGZ5dHJ5d1gwaXgmI3hBO3d5S0EwYS9IVGs3SnhxZ1BR
THlHS3ZVdnIxcDlZcjZxMDUrdDEvM1g2Tk9YeXhWRCtUUCtVUDBIL3RtMmYvSmlQRlZMenIveWp0
eC8mI3hBO3JSLzhUWExkUDlZZGQyMS9pa3ZoOTdEdkxMdngxWk9SNC9vMjVialhhdndiMHpKekRs
NzNSOW1TTlpCL3RjdjBKZHBtb3phYmNyTkcmI3hBO2F4a2dUUkhkSkUvYVZsNkhiSnpnSkJ4ZExx
WllKZ2psMUhlbXVxZVczR3RYbHRZZ2kydDFXZGlBWEtLNHFFQ3JVazEyQXl1R2IwQWwmI3hBO3pk
VjJhZnpFb3cra2JvYi9BQTVkU1czMWlBU3J4bGpoWmJtSXdHc3JjRVpUeWNFY2p2NFpMeGdEVFYv
SnM1UTRoZk1EMUN1YWhkNmImI3hBO0JhUGNRU3p2SGNXNW9FbGk0TEo4UVE4RzVzZTlmczlNTVpr
OUdyTHBZNHpJR1JFaDNqbjlxTXVkRnZyaTdnaHVMdFoxU3hXN2FjOGkmI3hBO3NkdXZLZ1d1NW9Q
MTVFWkFCc09ya1pORmtua0FsSy9SeFgzUlVMZlNiQzUwMjYxRkx5UUN6S2g0MmdGVDZoNG9hK3ZT
aE9FNUpDUUYmI3hBO05lUFNZcDRwVEV6NmZMdjVkVjgyaFdsbWJiNi9xS1JDNmlXWkRGRzBsQXhO
Q2ZzZkR0MS9ERVpTYm9Kbm9jZVBoNDhnSEVMMkZwZnEmI3hBO1ZoTHBsOU5ZekVNOEpBNUwwSUlE
S1I4d2NuQ1hFTGNiVTRKWU1oZ2VpYTZMSExONWUxeUtGUzduNnBSVjNKL2VNVFFmUmxlUWdUajgm
I3hBO1hNMFVaUzB1WUQrajk2dExheXRvVmpwTjJWanYzdVhraFNaZ2hodCtIeGVwWGRRV0ZhWUJJ
Y1pJNU5rOE1qcG9ZNWZYeGJYMGpYVkwmI3hBO2YwWEJKWTNsN2EzSmwrb0dNU0JvK0tzSkc0QW8z
TmlkL0VESjhac0FqbTRuNVdKeHlsR1Y4TmRPL3UzVjlYMC9TckpiRDA1WmdaN2EmI3hBO0tkLzNh
bmtKR2VyRSt0c2FiY2FkdXVESEtSdHMxZW53WWhDaWQ0Zzh1LzRxK3BhQkMydHlhVnBSY3ZFRk1n
ZGZnUkZqVm1mbUhabXImI3hBO1hweDc3WUlaVHdXV3pVNkNKMUp4NCtuNnVmNENISGw2ZVNDNG1p
RTZmVlVNcmZXSURFcklQdGNYNU51T3RLZE1QaWdFTlk3T2xLTWkmI3hBO0w5Tys4YWRkYUhiV01h
bTYxQ01Teld5M01LSWpzSDVWNHJ5MnBYc2FZeHltWElJeTZHR0lEaW1MTWVJYk56YUZhV1RXNjMr
b3BHTG0mI3hBO0paa01VYlMwRGswSit4OE5PLzRZaktUeUNaNkhIaU1lUElCeEM5aGFuL2grNkdw
M1dtTWVUV2lOTElZeHlMSUFyRGd1MVNlUTJ4OFUmI3hBO2NJUGV4R2d5RFBLRjd4MzIvUWxpeFdu
bDJRNm5wU2k0YVJHOWUya1QweXBVa044UEp3Q1I0ZGNweVlkaVFIYTZIdE9wUmhLVjMzaWkmI3hB
O1BlZ3o1ei8zSFJ5VzFvejNscEl6S0dMY1ZVOGFrampRVkREdm1NN3hBMnZtbWFXOExJRXQ3WFZQ
M0x2R0NucE8zN1ZSME5SUTk4VlEmI3hBO2hzZFFCbjFTTzNLV3NCYU42MVpuS2tkS0d2SWs3SHBp
cWRmNGp0K25LYW4xWDZ0MDM5VHI5WCsxOXF2NFlxOWM4bWY4b2ZvUC9iTnMmI3hBOy93RGt4SGlx
bDUxLzVSMjQvd0JhUC9pYTVicC9yRHJ1MnY4QUZKZkQ3MkZlWDdpeXRWdm12TGxZUHJWcExhSXBX
UmlHazRVWThFWWMmI3hBO2R2R3VaV1VFMVE2dWg3UHlZOFlueFNyaWlZOWV2d1VMS0xTN1dkYm04
dVZ1VWlJZGJlQlpLeU1Od3JOTEhHQXZqMXd5TWlLQWE4RWMmI3hBO09PWEZLVjEwRjcvTUJHVyt2
UlhseHFTYXZWWWRXQ2gzakhJeE5FYXhFTDNDNUU0aUFLNk4rUFh4eVN5REp5bjNkSzVJRTIrazI4
OGYmI3hBO0s4TjFFWkU1K2pHeVVqNURtYXloZCtQUUFaSzVFY25IOFBCQ1E5ZkVMNkN0dmlqbTFj
dFkzTmpmWGk2akhJb1MyNUs1YU51US9lbDMmI3hBO1FNS0wyRmNqNGU0SUZPU2RaZU9VSno0d2Zw
NTdlZDBtRUZ4YVRYdHBjeFhWYmV5MDlMVzZrUkc0S1ZCVStvSlVYbEd4TktENGoyeUImI3hBO0JB
SXJtWEl4NU1jc2taQ1hwakFSbCsyeHkrMURUV3R2ZGFmYzIralgxdVlvaDladUlFam1qWmxUOXJs
TzBqTUZyMEdFU0lrRElOVTgmI3hBO1VNbUtVY1U0MFBVUlVoeTk5b0xXcHJLOE9uTGIzVWJmVjdX
SzFsUEdVQldUa1MyOFc2L0YyMzlzbmpCRjdkWEgxczhlVGdxUTJpSW4mI3hBO24wK0N6ekxjMnQ5
cTB0N1p6Q2FLWUpTZ2RTdkJFUThnNnIzWHRod2d4alJZOXBaWVpjNWxFMkQ3KzVWMDJleWkwVFVi
T2E2amltdi8mI3hBO0FFUFRWbGxQSDBaQ3pjeWtURGNkS1Z3VEJNd2E1TTlOUEhIVDVJbVFCbFhm
MFB1Uy9UUHFCdm9mMG1XRnB5L2U4SzFwUTA2YjlldE0mI3hBO25PNjI1dU5wdkM4VWVKOVBWT1Z2
dE5HbjZscHozZ3BjaU14R0tCa2lIcHljK0tyczNJanUzMzVWd3k0Z2FjOFo4UGhUZ1o4NnFvN2Im
I3hBO0ZCNnRjMlY5YVdNMFU5SnJhMWp0WHR5amN1VVphcmNxY2FFTjQ1TEdERW5icTBhdkpqeTQ0
RVMzRVJHdmNtTnhyV2xycmR4cWF5R2UmI3hBOzIxS0g2dmNRcXJLOGFPaXErN1VCSUs5c2dNY3VD
dTV5cDZ6QU5STEpkeG1LSTdoU1QzRnBwVVZUQnFIMWdIWkZFVG9SWG9YNUNnQTcmI3hBOzBybGds
STlIQnlZY0VlVTcrQisxWDEyZXp1ellmVnJsSmZxOXJEYXlVV1FVYU1IazN4UnI4Ty96OXNHTUVY
WTZ0bXVuanljSERLNmkmI3hBO0lubjArRGV0VFdWNCtuaTN1bzJFRnJEYXlOeGxBVm93YXR2Rlhq
djIzOXNjWUl2YnF1dG5qeW1IREliUkVUejZmQkY2cGVhZmM2cGMmI3hBOzZsWlgvb3pzWVRiU0tz
cWdCSS9UbFY2UjFxYUNsSzVHRVpDSUJEZnFzMktlYVU0em83VWQrNmpleUExblVsMUdLMUVoRTkx
Q3JyUGMmI3hBO2hlUHFWUHdEb3BQRWR5TW5qaHczM09Qck5WNG9qdmNoemwzOXlUV2tYbHJUSkJj
WFhGSkRWNW9XREgxRkJIeGc4dXExNlV6Q3l3NFomI3hBO1U5UG9OU05SaEV2bXJEVWZLbWszaXgr
bUxsTHVyUmhJNDJhTnlPS2xETDJLajc4ZzVTamRlWjdmVUxTNHRkTzRSZWh5Y0c0VldsNmkmI3hB
O29qU2hIcVVQMFlxdzMwN25uL2N6L3dCLzY5T1orengrMzluN1h2aXI2SzhtZjhvZm9QOEEyemJQ
L2t4SGlyWG0rM251ZENuaHRvM20mI3hBO2tabzZKR3BaalIxSjJXcHkzQVFKN3VCMnRqbFBUU0VS
WjI1ZTk1MStoTlovNnQ5MS93QWlaUDhBbW5NenhJZDd6SDVMVWZ6SmZJdS8mI3hBO1Ftcy85Vys2
L3dDUk1uL05PUGlRNzEvSmFqK1pMNUYzNkUxbi9xMzNYL0ltVC9tbkh4SWQ2L2t0Ui9NbDhpNzlD
YXovQU5XKzYvNUUmI3hBO3lmOEFOT1BpUTcxL0phaitaTDVGMzZFMW4vcTMzWC9JbVQvbW5IeElk
Ni9rdFIvTWw4aWk3TzA4d1dTVFFycHM4c0Z5QXMwTWtFaFYmI3hBOytKcXYyUXBCQjZFSEl5bENY
VnV3NHRWaUJIaGtpWE1HSmMxbnJnamVLMzBxYTJXVWNaUFNnbUpaYTE0bHBPYlUyNkE0OFVPcFU0
dFQmI3hBO1JFY1pqZk9nZjAyaFAwSnJQL1Z2dXY4QWtUSi96VGt2RWgzdFA1TFVmekpmSXUvUW1z
LzlXKzYvNUV5ZjgwNCtKRHZYOGxxUDVrdmsmI3hBO1hmb1RXZjhBcTMzWC9JbVQvbW5IeElkNi9r
dFIvTWw4aTc5Q2F6LzFiN3IvQUpFeWY4MDQrSkR2WDhscVA1a3ZrWGZvVFdmK3JmZGYmI3hBOzhp
WlArYWNmRWgzcitTMUg4eVh5THYwSnJQOEExYjdyL2tUSi93QTA0K0pEdlg4bHFQNWt2a1hmb1RX
ZityZmRmOGlaUCthY2ZFaDMmI3hBO3IrUzFIOHlYeUx2MEpyUC9BRmI3ci9rVEovelRqNGtPOWZ5
V28vbVMrUmQraE5aLzZ0OTEvd0FpWlA4QW1uSHhJZDYva3RSL01sOGkmI3hBOzc5Q2F6LzFiN3Iv
a1RKL3pUajRrTzlmeVdvL21TK1JkK2hOWi93Q3JmZGY4aVpQK2FjZkVoM3IrUzFIOHlYeUx2MEpy
UC9WdnV2OEEmI3hBO2tUSi96VGo0a085ZnlXby9tUytSU3ZYL0FDanJHbzJaNDJGeXMwTldqYjBa
UHBIUWRjcDFIRElXQzdUc2Z4OEdReGxDWERMeUtVYWQmI3hBOzVRdkw2eVN6MXA1Tkx1YmVRbUNT
UmE4eDRMOFZkcTlzeEhva3pmVHRBMGl3dXI2TzdNbXFXMXdDU254S2FmRnNLMG9RM3ZpcUoveFYm
I3hBO3BIcStwNlZ2eCtyK3B5K0QvZWYwL1Q0ZjYxZHVIVEZYcXZrei9sRDlCLzdadG4veVlqeFZP
c1ZkaXJzVmRpcnNWZGlyc1ZkaXJzVmQmI3hBO2lyc1ZkaXJzVmRpcnNWZGlyc1ZkaXJzVmRpcldL
c084NmVVbzlUMHlaN2RLeVJEMUkrSVhrT1BNbGZpcHRSamlyd1cyV2ZTcjJXQzQmI3hBO0pXMnVB
UTRCM0FKMkkzRzljVlJIK0h0VDVVK3JtbkxuVGgvdW5qWG4vSEZYMFY1TS93Q1VQMEgvQUxadG4v
eVlqeFZPc1ZkaXJzVmQmI3hBO2lyc1ZkaXJzVmRpcnNWZGlyc1ZkaXJzVmRpcnNWZGlyc1ZkaXJz
VmRpcnNWZGlyelB6MTVCZ3U3cHRSdEdTRVRuazNNOFVEN1ZXdE4mI3hBO2cxSzRxeEgvQUExci9I
MC9XanI5WCtwVjlaUHMxOVhqOHFiVnhWN0I1TS81US9RZisyYlovd0RKaVBGVTZ4VjJLdXhWMkt1
eFYyS3UmI3hBO3hWMkt1eFYyS3V4VjJLdXhWMkt1eFYyS3V4VjJLdXhWMkt1eFYyS3JKWVlwNDJp
bVFTUnNLTXJDb0l4VmkzK0IvTC9yOGZRK0g2M3omI3hBO3BVL1o5SG42Zlg3TmNWVEx5Wi95aCtn
LzlzMnovd0NURWVLcDFpcnNWZGlyc1ZkaXJzVmRpcnNWZGlyc1ZkaXJzVmRpcnNWZGlyc1YmI3hB
O2RpcnNWZGlyc1ZkaXJzVmRpcUUvNCtQK2pqL21SaXFBOG1mOG9mb1AvYk5zL3dEa3hIaXFJMTdW
RzBmVFd2SW9oUE0wa052QkV6Y0YmI3hBO2FhNGxTQ0xtOUc0cnlrRlQ0WXFsbzFuWHJYVXhwRjlE
YXlUU1c3WHNVMEJkVTlLRjQ0NTBkSEpJWWVxdkVnNytBd2ltRXpMYXU5SnImI3hBO0h6MXExN3Bm
MW9SMnF5RzdndFJLc2R3eUQxclkzVEJyY0QxdVM3Q29xRFdvd00wMTBYelBmWC9tR1RSTG1PTGpG
Qzh2clJySWhZcEQmI3hBO3BVdytDVTFVRTM3YkhmWWUrS3FNbm12V0UwblRkVmlzSTdzYW1QcTZ4
UnZ3S1hjakZJT1JkdjdwaUtNUnV2WGZGV1E2ZTJya3pycXEmI3hBO1c2aFdRUVBibGp6WGduTm1W
eDhQeDhxQ3AyeFZHNHE3RlhZcTdGWFlxN0ZYWXE3RlhZcTdGVXQxalh0UDBKWW52MlpST1NFNEtX
M1cmI3hBO2xmMTRxbGYvQUNzRHk1L3Z5WC9rV2NWZC93QXJBOHVmNzhsLzVGbkZYZjhBS3dQTG4r
L0pmK1JaeFYzL0FDc0R5NS92eVgva1djVlImI3hBO3VsZWF0STFtNk5uWXM3U2hESlJrS2lnSUIz
K25GVTV4VkNmOGZIL1J4L3pJeFZBZVRQOEFsRDlCL3dDMmJaLzhtSThWVE85c3JYVWImI3hBO1dX
eXZZbG50NTE0eVJ0MEkvZ1IyT0tvTFR2THVsNlkwMHNDeXl6WENlbEpOZFR6WE1wakZhUmlTNGtr
WUtLOUFjVlVwL0tlaFRtSmomI3hBO0JKRThFY1VNYjI5eFBBNFNBTXNYeHdTeHNTb2RnQ1RXaHBp
cXgvSitoUFA5YUNYU1hPNGE0aXZidU9WZ1VnaFBPV080VjJxdHJIV3AmI3hBOy9acjF4VlV0Zkt1
aTJhb2tFYzVqaWtTYUtLUzZ1Wlk0M2pibWhqamxuZFZvVDBBeFZPTVZkaXJzVmRpcnNWZGlyc1Zk
aXJzVmRpcnMmI3hBO1ZTL1Z0RDAzVzFpVFVZeklJU1NsR1phRnFWK3lSNFlxbG4rQS9MUC9BQ3pQ
L3dBalpQOEFtckZYZjREOHMvOEFMTS8vQUNOay93Q2EmI3hBO3NWZC9nUHl6L3dBc3ovOEFJMlQv
QUpxeFYzK0EvTFAvQUN6UC93QWpaUDhBbXJGVVpwbmxqUnRIdVRkMkVMUnlsU2xTN044Sm9Uc3gm
I3hBO1BoaXFiNHFoUCtQai9vNC81a1lxbGZrNjV0bDhvNkVyU29DTk50QVFXRlFmUWo5OFZUbjYz
YS83K2ovNElmMXhWMzF1MS8zOUgvd1EmI3hBOy9yaXJ2cmRyL3Y2UC9naC9YRlhmVzdYL0FIOUgv
d0FFUDY0cTc2M2Evd0Mvby84QWdoL1hGWGZXN1gvZjBmOEF3US9yaXJ2cmRyL3YmI3hBOzZQOEE0
SWYxeFYzMXUxLzM5SC93US9yaXJ2cmRyL3Y2UC9naC9YRlhmVzdYL2YwZi9CRCt1S3UrdDJ2Ky9v
LytDSDljVmQ5YnRmOEEmI3hBO2YwZi9BQVEvcmlydnJkci9BTCtqL3dDQ0g5Y1ZkOWJ0ZjkvUi93
REJEK3VLdSt0MnYrL28vd0RnaC9YRlhmVzdYL2YwZi9CRCt1S3UmI3hBOyt0MnYrL28vK0NIOWNW
ZDlidGY5L1IvOEVQNjRxNzYzYS83K2ovNElmMXhWMzF1MS93Qi9SLzhBQkQrdUt1K3QydjhBdjZQ
L0FJSWYmI3hBOzF4VjMxdTEvMzlIL0FNRVA2NHE3NjNhLzcrai9BT0NIOWNWUXYxcTIrc2YzMGY4
QWYvekQvZkh6eFYvLzJRPT08L3hhcEdJbWc6aW1hZ2U+CiAgICA8L3JkZjpsaT4KICAgPC9yZGY6
U2VxPgogIDwveGFwOlBhZ2VJbmZvPgogPC9yZGY6RGVzY3JpcHRpb24+CgogPHJkZjpEZXNjcmlw
dGlvbiByZGY6YWJvdXQ9J3V1aWQ6MzBhNDZmMTctOTc5My0xMWUxLTgzMGUtYjk0NDhmMzZiOGRj
JwogIHhtbG5zOnN0RXZ0PSdodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3Vy
Y2VFdmVudCMnCiAgeG1sbnM6c3RSZWY9J2h0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlw
ZS9SZXNvdXJjZVJlZiMnCiAgeG1sbnM6eGFwTU09J2h0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEu
MC9tbS8nPgogIDx4YXBNTTpJbnN0YW5jZUlEPnV1aWQ6ZTNjNmJjMWUtMDYwNC1lMTRmLThhYzct
ZTM0ZDY2NDQzMmM2PC94YXBNTTpJbnN0YW5jZUlEPgogIDx4YXBNTTpPcmlnaW5hbERvY3VtZW50
SUQ+YWRvYmU6ZG9jaWQ6aW5kZDplNDU5YzcxYy02NWZhLTExZGMtYTc3Mi1mNTA2MDdjZGQxY2Q8
L3hhcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD4KICA8eGFwTU06RGVyaXZlZEZyb20gcmRmOnBhcnNl
VHlwZT0nUmVzb3VyY2UnPgogICA8c3RSZWY6aW5zdGFuY2VJRD51dWlkOjcxMGZkM2NjLTk2M2It
MTFlMS1hMTJhLTAwMGE5NTZjNGI4Njwvc3RSZWY6aW5zdGFuY2VJRD4KICAgPHN0UmVmOmRvY3Vt
ZW50SUQ+YWRvYmU6ZG9jaWQ6aW5kZDplNDU5YzcxYy02NWZhLTExZGMtYTc3Mi1mNTA2MDdjZGQx
Y2Q8L3N0UmVmOmRvY3VtZW50SUQ+CiAgIDxzdFJlZjpyZW5kaXRpb25DbGFzcz5wcm9vZjpwZGY8
L3N0UmVmOnJlbmRpdGlvbkNsYXNzPgogIDwveGFwTU06RGVyaXZlZEZyb20+CiAgPHhhcE1NOkhp
c3Rvcnk+CiAgIDxyZGY6U2VxPgogICAgPHJkZjpsaSByZGY6cGFyc2VUeXBlPSdSZXNvdXJjZSc+
CiAgICAgPHN0RXZ0OmFjdGlvbj5zYXZlZDwvc3RFdnQ6YWN0aW9uPgogICAgIDxzdEV2dDppbnN0
YW5jZUlEPnhtcC5paWQ6NUU0RDI2RDgxQTIwNjgxMTkxMDlDNTg3NDJGREE4MzY8L3N0RXZ0Omlu
c3RhbmNlSUQ+CiAgICAgPHN0RXZ0OndoZW4+MjAxMS0wMy0yMVQxMzozNToyNC0wNzowMDwvc3RF
dnQ6d2hlbj4KICAgICA8c3RFdnQ6c29mdHdhcmVBZ2VudD5BZG9iZSBJbkRlc2lnbiA2LjA8L3N0
RXZ0OnNvZnR3YXJlQWdlbnQ+CiAgICAgPHN0RXZ0OmNoYW5nZWQ+Lzwvc3RFdnQ6Y2hhbmdlZD4K
ICAgIDwvcmRmOmxpPgogICAgPHJkZjpsaSByZGY6cGFyc2VUeXBlPSdSZXNvdXJjZSc+CiAgICAg
PHN0RXZ0OmFjdGlvbj5zYXZlZDwvc3RFdnQ6YWN0aW9uPgogICAgIDxzdEV2dDppbnN0YW5jZUlE
PnhtcC5paWQ6NUY0RDI2RDgxQTIwNjgxMTkxMDlDNTg3NDJGREE4MzY8L3N0RXZ0Omluc3RhbmNl
SUQ+CiAgICAgPHN0RXZ0OndoZW4+MjAxMS0wMy0yMVQxMzozNToyNC0wNzowMDwvc3RFdnQ6d2hl
bj4KICAgICA8c3RFdnQ6c29mdHdhcmVBZ2VudD5BZG9iZSBJbkRlc2lnbiA2LjA8L3N0RXZ0OnNv
ZnR3YXJlQWdlbnQ+CiAgICAgPHN0RXZ0OmNoYW5nZWQ+L21ldGFkYXRhPC9zdEV2dDpjaGFuZ2Vk
PgogICAgPC9yZGY6bGk+CiAgICA8cmRmOmxpIHJkZjpwYXJzZVR5cGU9J1Jlc291cmNlJz4KICAg
ICA8c3RFdnQ6YWN0aW9uPnNhdmVkPC9zdEV2dDphY3Rpb24+CiAgICAgPHN0RXZ0Omluc3RhbmNl
SUQ+eG1wLmlpZDo2MDREMjZEODFBMjA2ODExOTEwOUM1ODc0MkZEQTgzNjwvc3RFdnQ6aW5zdGFu
Y2VJRD4KICAgICA8c3RFdnQ6d2hlbj4yMDExLTAzLTIxVDEzOjM1OjQ1LTA3OjAwPC9zdEV2dDp3
aGVuPgogICAgIDxzdEV2dDpzb2Z0d2FyZUFnZW50PkFkb2JlIEluRGVzaWduIDYuMDwvc3RFdnQ6
c29mdHdhcmVBZ2VudD4KICAgICA8c3RFdnQ6Y2hhbmdlZD4vPC9zdEV2dDpjaGFuZ2VkPgogICAg
PC9yZGY6bGk+CiAgICA8cmRmOmxpIHJkZjpwYXJzZVR5cGU9J1Jlc291cmNlJz4KICAgICA8c3RF
dnQ6YWN0aW9uPnNhdmVkPC9zdEV2dDphY3Rpb24+CiAgICAgPHN0RXZ0Omluc3RhbmNlSUQ+eG1w
LmlpZDpGQThBODhBMTFDMjA2ODExOTEwOUM1ODc0MkZEQTgzNjwvc3RFdnQ6aW5zdGFuY2VJRD4K
ICAgICA8c3RFdnQ6d2hlbj4yMDExLTAzLTIxVDEzOjM2OjA1LTA3OjAwPC9zdEV2dDp3aGVuPgog
ICAgIDxzdEV2dDpzb2Z0d2FyZUFnZW50PkFkb2JlIEluRGVzaWduIDYuMDwvc3RFdnQ6c29mdHdh
cmVBZ2VudD4KICAgICA8c3RFdnQ6Y2hhbmdlZD4vPC9zdEV2dDpjaGFuZ2VkPgogICAgPC9yZGY6
bGk+CiAgICA8cmRmOmxpIHJkZjpwYXJzZVR5cGU9J1Jlc291cmNlJz4KICAgICA8c3RFdnQ6YWN0
aW9uPnNhdmVkPC9zdEV2dDphY3Rpb24+CiAgICAgPHN0RXZ0Omluc3RhbmNlSUQ+eG1wLmlpZDpE
N0EyOUE5N0JCMjU2ODExOTQ1N0MyRjgyRkU2OTdCRTwvc3RFdnQ6aW5zdGFuY2VJRD4KICAgICA8
c3RFdnQ6d2hlbj4yMDExLTA3LTI4VDE2OjMyOjEyLTA3OjAwPC9zdEV2dDp3aGVuPgogICAgIDxz
dEV2dDpzb2Z0d2FyZUFnZW50PkFkb2JlIEluRGVzaWduIDYuMDwvc3RFdnQ6c29mdHdhcmVBZ2Vu
dD4KICAgICA8c3RFdnQ6Y2hhbmdlZD4vPC9zdEV2dDpjaGFuZ2VkPgogICAgPC9yZGY6bGk+CiAg
ICA8cmRmOmxpIHJkZjpwYXJzZVR5cGU9J1Jlc291cmNlJz4KICAgICA8c3RFdnQ6YWN0aW9uPnNh
dmVkPC9zdEV2dDphY3Rpb24+CiAgICAgPHN0RXZ0Omluc3RhbmNlSUQ+eG1wLmlpZDpGNzdGMTE3
NDA3MjA2ODExODA4M0VFMUE0QUE3QUIzMzwvc3RFdnQ6aW5zdGFuY2VJRD4KICAgICA8c3RFdnQ6
d2hlbj4yMDEyLTA0LTEyVDEwOjU4OjU4LTA3OjAwPC9zdEV2dDp3aGVuPgogICAgIDxzdEV2dDpz
b2Z0d2FyZUFnZW50PkFkb2JlIEluRGVzaWduIDcuNTwvc3RFdnQ6c29mdHdhcmVBZ2VudD4KICAg
ICA8c3RFdnQ6Y2hhbmdlZD4vOy9tZXRhZGF0YTwvc3RFdnQ6Y2hhbmdlZD4KICAgIDwvcmRmOmxp
PgogICAgPHJkZjpsaSByZGY6cGFyc2VUeXBlPSdSZXNvdXJjZSc+CiAgICAgPHN0RXZ0OmFjdGlv
bj5zYXZlZDwvc3RFdnQ6YWN0aW9uPgogICAgIDxzdEV2dDppbnN0YW5jZUlEPnhtcC5paWQ6Rjg3
RjExNzQwNzIwNjgxMTgwODNFRTFBNEFBN0FCMzM8L3N0RXZ0Omluc3RhbmNlSUQ+CiAgICAgPHN0
RXZ0OndoZW4+MjAxMi0wNC0xMlQxMDo1ODo1OC0wNzowMDwvc3RFdnQ6d2hlbj4KICAgICA8c3RF
dnQ6c29mdHdhcmVBZ2VudD5BZG9iZSBJbkRlc2lnbiA3LjU8L3N0RXZ0OnNvZnR3YXJlQWdlbnQ+
CiAgICAgPHN0RXZ0OmNoYW5nZWQ+L21ldGFkYXRhPC9zdEV2dDpjaGFuZ2VkPgogICAgPC9yZGY6
bGk+CiAgICA8cmRmOmxpIHJkZjpwYXJzZVR5cGU9J1Jlc291cmNlJz4KICAgICA8c3RFdnQ6YWN0
aW9uPnNhdmVkPC9zdEV2dDphY3Rpb24+CiAgICAgPHN0RXZ0Omluc3RhbmNlSUQ+eG1wLmlpZDpG
OTdGMTE3NDA3MjA2ODExODA4M0VFMUE0QUE3QUIzMzwvc3RFdnQ6aW5zdGFuY2VJRD4KICAgICA8
c3RFdnQ6d2hlbj4yMDEyLTA0LTEyVDExOjAxOjQ5LTA3OjAwPC9zdEV2dDp3aGVuPgogICAgIDxz
dEV2dDpzb2Z0d2FyZUFnZW50PkFkb2JlIEluRGVzaWduIDcuNTwvc3RFdnQ6c29mdHdhcmVBZ2Vu
dD4KICAgICA8c3RFdnQ6Y2hhbmdlZD4vOy9tZXRhZGF0YTwvc3RFdnQ6Y2hhbmdlZD4KICAgIDwv
cmRmOmxpPgogICAgPHJkZjpsaSByZGY6cGFyc2VUeXBlPSdSZXNvdXJjZSc+CiAgICAgPHN0RXZ0
OmFjdGlvbj5zYXZlZDwvc3RFdnQ6YWN0aW9uPgogICAgIDxzdEV2dDppbnN0YW5jZUlEPnhtcC5p
aWQ6RkE3RjExNzQwNzIwNjgxMTgwODNFRTFBNEFBN0FCMzM8L3N0RXZ0Omluc3RhbmNlSUQ+CiAg
ICAgPHN0RXZ0OndoZW4+MjAxMi0wNC0xMlQxMTowOToxOS0wNzowMDwvc3RFdnQ6d2hlbj4KICAg
ICA8c3RFdnQ6c29mdHdhcmVBZ2VudD5BZG9iZSBJbkRlc2lnbiA3LjU8L3N0RXZ0OnNvZnR3YXJl
QWdlbnQ+CiAgICAgPHN0RXZ0OmNoYW5nZWQ+LzsvbWV0YWRhdGE8L3N0RXZ0OmNoYW5nZWQ+CiAg
ICA8L3JkZjpsaT4KICAgIDxyZGY6bGkgcmRmOnBhcnNlVHlwZT0nUmVzb3VyY2UnPgogICAgIDxz
dEV2dDphY3Rpb24+c2F2ZWQ8L3N0RXZ0OmFjdGlvbj4KICAgICA8c3RFdnQ6aW5zdGFuY2VJRD54
bXAuaWlkOkZEN0YxMTc0MDcyMDY4MTE4MDgzRUUxQTRBQTdBQjMzPC9zdEV2dDppbnN0YW5jZUlE
PgogICAgIDxzdEV2dDp3aGVuPjIwMTItMDQtMTJUMTI6MTQ6MzMtMDc6MDA8L3N0RXZ0OndoZW4+
CiAgICAgPHN0RXZ0OnNvZnR3YXJlQWdlbnQ+QWRvYmUgSW5EZXNpZ24gNy41PC9zdEV2dDpzb2Z0
d2FyZUFnZW50PgogICAgIDxzdEV2dDpjaGFuZ2VkPi87L21ldGFkYXRhPC9zdEV2dDpjaGFuZ2Vk
PgogICAgPC9yZGY6bGk+CiAgICA8cmRmOmxpIHJkZjpwYXJzZVR5cGU9J1Jlc291cmNlJz4KICAg
ICA8c3RFdnQ6YWN0aW9uPnNhdmVkPC9zdEV2dDphY3Rpb24+CiAgICAgPHN0RXZ0Omluc3RhbmNl
SUQ+eG1wLmlpZDpEOTAyMjdEQ0RCMjA2ODExOEY2MjlCNzJDQzZDNjJCMDwvc3RFdnQ6aW5zdGFu
Y2VJRD4KICAgICA8c3RFdnQ6d2hlbj4yMDEyLTA1LTAxVDEyOjI2OjQ3LTA3OjAwPC9zdEV2dDp3
aGVuPgogICAgIDxzdEV2dDpzb2Z0d2FyZUFnZW50PkFkb2JlIEluRGVzaWduIDcuNTwvc3RFdnQ6
c29mdHdhcmVBZ2VudD4KICAgICA8c3RFdnQ6Y2hhbmdlZD4vOy9tZXRhZGF0YTwvc3RFdnQ6Y2hh
bmdlZD4KICAgIDwvcmRmOmxpPgogICA8L3JkZjpTZXE+CiAgPC94YXBNTTpIaXN0b3J5PgogIDx4
YXBNTTpEb2N1bWVudElEPmFkb2JlOmRvY2lkOnBob3Rvc2hvcDozMGE0NmYxNi05NzkzLTExZTEt
ODMwZS1iOTQ0OGYzNmI4ZGM8L3hhcE1NOkRvY3VtZW50SUQ+CiA8L3JkZjpEZXNjcmlwdGlvbj4K
CiA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0ndXVpZDozMGE0NmYxNy05NzkzLTExZTEtODMw
ZS1iOTQ0OGYzNmI4ZGMnCiAgeG1sbnM6aWRQcml2PSdodHRwOi8vbnMuYWRvYmUuY29tL3htcC9J
bkRlc2lnbi9wcml2YXRlJz4KICA8aWRQcml2OkRvY0NoYW5nZUNvdW50PjE2NjwvaWRQcml2OkRv
Y0NoYW5nZUNvdW50PgogPC9yZGY6RGVzY3JpcHRpb24+CgogPHJkZjpEZXNjcmlwdGlvbiByZGY6
YWJvdXQ9J3V1aWQ6MzBhNDZmMTctOTc5My0xMWUxLTgzMGUtYjk0NDhmMzZiOGRjJwogIHhtbG5z
OmRjPSdodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xLyc+CiAgPGRjOmZvcm1hdD5pbWFn
ZS9qcGVnPC9kYzpmb3JtYXQ+CiA8L3JkZjpEZXNjcmlwdGlvbj4KCjwvcmRmOlJERj4KPC94Onht
cG1ldGE+Cjw/eHBhY2tldCBlbmQ9J3cnPz7/4gxYSUNDX1BST0ZJTEUAAQEAAAxITGlubwIQAABt
bnRyUkdCIFhZWiAHzgACAAkABgAxAABhY3NwTVNGVAAAAABJRUMgc1JHQgAAAAAAAAAAAAAAAAAA
9tYAAQAAAADTLUhQICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAABFjcHJ0AAABUAAAADNkZXNjAAABhAAAAGx3dHB0AAAB8AAAABRia3B0AAACBAAAABRyWFla
AAACGAAAABRnWFlaAAACLAAAABRiWFlaAAACQAAAABRkbW5kAAACVAAAAHBkbWRkAAACxAAAAIh2
dWVkAAADTAAAAIZ2aWV3AAAD1AAAACRsdW1pAAAD+AAAABRtZWFzAAAEDAAAACR0ZWNoAAAEMAAA
AAxyVFJDAAAEPAAACAxnVFJDAAAEPAAACAxiVFJDAAAEPAAACAx0ZXh0AAAAAENvcHlyaWdodCAo
YykgMTk5OCBIZXdsZXR0LVBhY2thcmQgQ29tcGFueQAAZGVzYwAAAAAAAAASc1JHQiBJRUM2MTk2
Ni0yLjEAAAAAAAAAAAAAABJzUkdCIElFQzYxOTY2LTIuMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWFlaIAAAAAAAAPNRAAEAAAABFsxYWVogAAAAAAAA
AAAAAAAAAAAAAFhZWiAAAAAAAABvogAAOPUAAAOQWFlaIAAAAAAAAGKZAAC3hQAAGNpYWVogAAAA
AAAAJKAAAA+EAAC2z2Rlc2MAAAAAAAAAFklFQyBodHRwOi8vd3d3LmllYy5jaAAAAAAAAAAAAAAA
FklFQyBodHRwOi8vd3d3LmllYy5jaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAABkZXNjAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBz
cGFjZSAtIHNSR0IAAAAAAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBz
cGFjZSAtIHNSR0IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAAAAAAAAAsUmVmZXJlbmNlIFZp
ZXdpbmcgQ29uZGl0aW9uIGluIElFQzYxOTY2LTIuMQAAAAAAAAAAAAAALFJlZmVyZW5jZSBWaWV3
aW5nIENvbmRpdGlvbiBpbiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHZp
ZXcAAAAAABOk/gAUXy4AEM8UAAPtzAAEEwsAA1yeAAAAAVhZWiAAAAAAAEwJVgBQAAAAVx/nbWVh
cwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAo8AAAACc2lnIAAAAABDUlQgY3VydgAAAAAAAAQA
AAAABQAKAA8AFAAZAB4AIwAoAC0AMgA3ADsAQABFAEoATwBUAFkAXgBjAGgAbQByAHcAfACBAIYA
iwCQAJUAmgCfAKQAqQCuALIAtwC8AMEAxgDLANAA1QDbAOAA5QDrAPAA9gD7AQEBBwENARMBGQEf
ASUBKwEyATgBPgFFAUwBUgFZAWABZwFuAXUBfAGDAYsBkgGaAaEBqQGxAbkBwQHJAdEB2QHhAekB
8gH6AgMCDAIUAh0CJgIvAjgCQQJLAlQCXQJnAnECegKEAo4CmAKiAqwCtgLBAssC1QLgAusC9QMA
AwsDFgMhAy0DOANDA08DWgNmA3IDfgOKA5YDogOuA7oDxwPTA+AD7AP5BAYEEwQgBC0EOwRIBFUE
YwRxBH4EjASaBKgEtgTEBNME4QTwBP4FDQUcBSsFOgVJBVgFZwV3BYYFlgWmBbUFxQXVBeUF9gYG
BhYGJwY3BkgGWQZqBnsGjAadBq8GwAbRBuMG9QcHBxkHKwc9B08HYQd0B4YHmQesB78H0gflB/gI
CwgfCDIIRghaCG4IggiWCKoIvgjSCOcI+wkQCSUJOglPCWQJeQmPCaQJugnPCeUJ+woRCicKPQpU
CmoKgQqYCq4KxQrcCvMLCwsiCzkLUQtpC4ALmAuwC8gL4Qv5DBIMKgxDDFwMdQyODKcMwAzZDPMN
DQ0mDUANWg10DY4NqQ3DDd4N+A4TDi4OSQ5kDn8Omw62DtIO7g8JDyUPQQ9eD3oPlg+zD88P7BAJ
ECYQQxBhEH4QmxC5ENcQ9RETETERTxFtEYwRqhHJEegSBxImEkUSZBKEEqMSwxLjEwMTIxNDE2MT
gxOkE8UT5RQGFCcUSRRqFIsUrRTOFPAVEhU0FVYVeBWbFb0V4BYDFiYWSRZsFo8WshbWFvoXHRdB
F2UXiReuF9IX9xgbGEAYZRiKGK8Y1Rj6GSAZRRlrGZEZtxndGgQaKhpRGncanhrFGuwbFBs7G2Mb
ihuyG9ocAhwqHFIcexyjHMwc9R0eHUcdcB2ZHcMd7B4WHkAeah6UHr4e6R8THz4faR+UH78f6iAV
IEEgbCCYIMQg8CEcIUghdSGhIc4h+yInIlUigiKvIt0jCiM4I2YjlCPCI/AkHyRNJHwkqyTaJQkl
OCVoJZclxyX3JicmVyaHJrcm6CcYJ0kneierJ9woDSg/KHEooijUKQYpOClrKZ0p0CoCKjUqaCqb
Ks8rAis2K2krnSvRLAUsOSxuLKIs1y0MLUEtdi2rLeEuFi5MLoIuty7uLyQvWi+RL8cv/jA1MGww
pDDbMRIxSjGCMbox8jIqMmMymzLUMw0zRjN/M7gz8TQrNGU0njTYNRM1TTWHNcI1/TY3NnI2rjbp
NyQ3YDecN9c4FDhQOIw4yDkFOUI5fzm8Ofk6Njp0OrI67zstO2s7qjvoPCc8ZTykPOM9Ij1hPaE9
4D4gPmA+oD7gPyE/YT+iP+JAI0BkQKZA50EpQWpBrEHuQjBCckK1QvdDOkN9Q8BEA0RHRIpEzkUS
RVVFmkXeRiJGZ0arRvBHNUd7R8BIBUhLSJFI10kdSWNJqUnwSjdKfUrESwxLU0uaS+JMKkxyTLpN
Ak1KTZNN3E4lTm5Ot08AT0lPk0/dUCdQcVC7UQZRUFGbUeZSMVJ8UsdTE1NfU6pT9lRCVI9U21Uo
VXVVwlYPVlxWqVb3V0RXklfgWC9YfVjLWRpZaVm4WgdaVlqmWvVbRVuVW+VcNVyGXNZdJ114Xcle
Gl5sXr1fD19hX7NgBWBXYKpg/GFPYaJh9WJJYpxi8GNDY5dj62RAZJRk6WU9ZZJl52Y9ZpJm6Gc9
Z5Nn6Wg/aJZo7GlDaZpp8WpIap9q92tPa6dr/2xXbK9tCG1gbbluEm5rbsRvHm94b9FwK3CGcOBx
OnGVcfByS3KmcwFzXXO4dBR0cHTMdSh1hXXhdj52m3b4d1Z3s3gReG54zHkqeYl553pGeqV7BHtj
e8J8IXyBfOF9QX2hfgF+Yn7CfyN/hH/lgEeAqIEKgWuBzYIwgpKC9INXg7qEHYSAhOOFR4Wrhg6G
cobXhzuHn4gEiGmIzokziZmJ/opkisqLMIuWi/yMY4zKjTGNmI3/jmaOzo82j56QBpBukNaRP5Go
khGSepLjk02TtpQglIqU9JVflcmWNJaflwqXdZfgmEyYuJkkmZCZ/JpomtWbQpuvnByciZz3nWSd
0p5Anq6fHZ+Ln/qgaaDYoUehtqImopajBqN2o+akVqTHpTilqaYapoum/adup+CoUqjEqTepqaoc
qo+rAqt1q+msXKzQrUStuK4trqGvFq+LsACwdbDqsWCx1rJLssKzOLOutCW0nLUTtYq2AbZ5tvC3
aLfguFm40blKucK6O7q1uy67p7whvJu9Fb2Pvgq+hL7/v3q/9cBwwOzBZ8Hjwl/C28NYw9TEUcTO
xUvFyMZGxsPHQce/yD3IvMk6ybnKOMq3yzbLtsw1zLXNNc21zjbOts83z7jQOdC60TzRvtI/0sHT
RNPG1EnUy9VO1dHWVdbY11zX4Nhk2OjZbNnx2nba+9uA3AXcit0Q3ZbeHN6i3ynfr+A24L3hROHM
4lPi2+Nj4+vkc+T85YTmDeaW5x/nqegy6LzpRunQ6lvq5etw6/vshu0R7ZzuKO6070DvzPBY8OXx
cvH/8ozzGfOn9DT0wvVQ9d72bfb794r4Gfio+Tj5x/pX+uf7d/wH/Jj9Kf26/kv+3P9t////7gAO
QWRvYmUAZAAAAAAB/9sAhAAGBAQEBQQGBQUGCQYFBgkLCAYGCAsMCgoLCgoMEAwMDAwMDBAMDAwM
DAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMAQcHBw0MDRgQEBgUDg4OFBQODg4OFBEMDAwMDBERDAwM
DAwMEQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAz/wAARCAKQAfQDAREAAhEBAxEB/90ABAA/
/8QBogAAAAcBAQEBAQAAAAAAAAAABAUDAgYBAAcICQoLAQACAgMBAQEBAQAAAAAAAAABAAIDBAUG
BwgJCgsQAAIBAwMCBAIGBwMEAgYCcwECAxEEAAUhEjFBUQYTYSJxgRQykaEHFbFCI8FS0eEzFmLw
JHKC8SVDNFOSorJjc8I1RCeTo7M2F1RkdMPS4ggmgwkKGBmElEVGpLRW01UoGvLj88TU5PRldYWV
pbXF1eX1ZnaGlqa2xtbm9jdHV2d3h5ent8fX5/c4SFhoeIiYqLjI2Oj4KTlJWWl5iZmpucnZ6fkq
OkpaanqKmqq6ytrq+hEAAgIBAgMFBQQFBgQIAwNtAQACEQMEIRIxQQVRE2EiBnGBkTKhsfAUwdHh
I0IVUmJy8TMkNEOCFpJTJaJjssIHc9I14kSDF1STCAkKGBkmNkUaJ2R0VTfyo7PDKCnT4/OElKS0
xNTk9GV1hZWltcXV5fVGVmZ2hpamtsbW5vZHV2d3h5ent8fX5/c4SFhoeIiYqLjI2Oj4OUlZaXmJ
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
/NJ77Xl1CW1gnt1tNGtmqmnWR9MKDQOweT1C8zAbyy88sjjrf+Jw8us8QiJHBhj/AJPH6f8Adcfr
/pz4mV6R+ZXl/SNBm0G10GaXT7kSi5aa7HqSesvFySsQA+H4fh45RPTSlLiJ39zttP21hw4jhjjJ
hK+LiyeqXH/mMJ1J9HeVDpcNxBDx/eJdSJK3Kv7LIkfw08RmTDi6uiznET+7Eoj+mRL/AHMYIzy9
qGgafcR3mo2Vxe3NvMssEccyRQnhQgSAxu5+IV+FsjkjI7A036PNhxkSnGU5RNx9XDD/ADvTJkfm
vz95d80tBJqWjXME1sGWKa2ukqVbfiweEqRUZTiwShyP2ftdlr+1sOqrjxyiY/zJ/wDFY0//ACC+
1rvytf8AmdlWu6fF2Hsp/lP8z/fsK1DVvKusahcXuoWd3p11O7PMbB4poXck1b0phGyFv2qTN8WZ
EYTiKBt0ubUafNMynGWOUvq8Opx/0kuH/poiNL8y+VvL1wLzRtNnv9RUfubvVGRUiPikMNak/wAz
Scv5cEsc57SND+i2Ydbp9OeLFCWSf8/N/B/yTh/xbH9X1jUdY1CXUNRmM91Kd2OwAHRVHRVXsuXQ
gIig6zU6meaZnM3Isi/L/wDMCXypLcRS231vT7sq0satxdHUU5JX4TVdmU/5PxZTqNPx+92fZHa5
0pII4oTUtT1/yhBJcSeXdGeGe4DKs984kWBXBDehCCyht/hd3fh+yuGOOZ+osc+s00SThh6pfxZP
Vwf1If76UpMVzIdO3irsVdirsVdirsVdirsVdirsVdirsVTHyzqD6fr0UiTi2jvEaGaRiApkjHq2
4PL4a+qg+L7XwRrmBrobCT1vstqiJywk7SHiQ/rR+v8A2LPvMvmfyxbeYtHGoRW2pW+ryS6de/XT
68Yi1KeSWyYq4ZGghuIY0Z1fhbx3X2F/d5rntEl8zflB5VtNV0ee3D6H5jiuIJYbu0n+s28UkTIk
cghuledoaoxW1V/SXh6fqI86OyrKdfvfL/mW0DXVnomoX81vJZy2s91JZXMUlupeVBKVdhEjp66y
fumSH95Gsn7ShL7v8ufJcek32qaRpFnEbF/rRntHuldmSFlnWK4nBiRZoeUfFEeKSRopZsUo7SNG
8v6Xo9nqOlaJo9toqOj6Vql/cq3Oscca3R5oixTSRW0fJP731Xkdvi9RJ1DwrylrMvlvXvqFu6xW
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
46+s/X7b6t+i/T9f1U4c/rHLjyrx5cd+OKv/2Q==

------MultipartBoundary--AOMleexeI7P8H4Im2MNvercLtpKAYhfsToYqkozzPB----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: http://addyosmani.github.com/backbone-fundamentals/img/helpful.png

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
vN4QtwAAAABJRU5ErkJggg==

------MultipartBoundary--AOMleexeI7P8H4Im2MNvercLtpKAYhfsToYqkozzPB----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: https://addyosmani.com/resources/essentialjsdesignpatterns/book/images/ns1.png

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
CIIgWgr/D1ibgWM21ahzAAAAAElFTkSuQmCC

------MultipartBoundary--AOMleexeI7P8H4Im2MNvercLtpKAYhfsToYqkozzPB------
